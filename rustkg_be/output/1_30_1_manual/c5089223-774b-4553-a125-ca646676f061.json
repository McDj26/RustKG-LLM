{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"},"apiName":"std::pin::PinBox","apiType":"struct","apiDocumentation":{"apiDescription":["A pinned, heap allocated reference.","This type is similar to Box, except that it pins its value, which prevents it from moving out of the reference, unless it implements Unpin.","See the module documentation for furthur explaination on pinning."]},"trait implementations":[{"name":"impl<'a, T, F> std::future::UnsafeFutureObj<'a, T> for std::pin::PinBox<F> where F: std::future::Future<Output = T> + 'a","stable since":"1.0.0"},{"name":"impl<T> std::ops::Deref for std::pin::PinBox<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::ops::DerefMut for std::pin::PinBox<T> where T: std::pin::Unpin + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::pin::Unpin for std::pin::PinBox<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Display for std::pin::PinBox<T> where T: std::fmt::Display + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::convert::From<std::boxed::Box<T>> for std::pin::PinBox<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, F> std::convert::From<std::pin::PinBox<F>> for std::future::LocalFutureObj<'a, ()> where F: 'a + std::future::Future<Output = ()>","stable since":"1.0.0"},{"name":"impl<T> std::convert::From<std::pin::PinBox<T>> for std::boxed::Box<T> where T: std::pin::Unpin + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, F> std::convert::From<std::pin::PinBox<F>> for std::future::FutureObj<'a, ()> where F: 'a + std::marker::Send + std::future::Future<Output = ()>","stable since":"1.0.0"},{"name":"impl<F> std::future::Future for std::pin::PinBox<F> where F: std::future::Future + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Debug for std::pin::PinBox<T> where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T, U> std::ops::CoerceUnsized<std::pin::PinBox<U>> for std::pin::PinBox<T> where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Pointer for std::pin::PinBox<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T: ?std::marker::Sized> std::marker::Send for std::pin::PinBox<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T: ?std::marker::Sized> std::marker::Sync for std::pin::PinBox<T> where T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(data: T) -> PinBox<T>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"]},{"name":"pub fn as_pin_mut(&'a mut self) -> PinMut<'a, T>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"]},{"name":"pub unsafe fn from_raw(raw: *mut T) -> PinBox<T>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"]},{"name":"pub fn into_raw(b: PinBox<T>) -> *mut T","stability":["ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"]},{"name":"pub unsafe fn get_mut(this: &'a mut PinBox<T>) -> &'a mut T","stability":["ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"]},{"name":"pub unsafe fn unpin(this: PinBox<T>) -> Box<T>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"]}]}