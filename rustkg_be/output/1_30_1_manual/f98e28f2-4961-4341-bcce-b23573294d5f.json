{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::HashSet","apiType":"struct","apiDocumentation":{"apiDescription":["A hash set implemented as a HashMap where the value is ().","As with the HashMap type, a HashSet requires that the elements implement the Eq and Hash traits. This can frequently be achieved by using #[derive(PartialEq, Eq, Hash)]. If you implement these yourself, it is important that the following property holds:","k1 == k2 -> hash(k1) == hash(k2)","In other words, if two keys are equal, their hashes must be equal.","It is a logic error for an item to be modified in such a way that the item's hash, as determined by the Hash trait, or its equality, as determined by the Eq trait, changes while it is in the set. This is normally only possible through Cell, RefCell, global state, I/O, or unsafe code."],"examples":["use std::collections::HashSet;\n// Type inference lets us omit an explicit type signature (which\n// would be `HashSet<String>` in this example).\nlet mut books = HashSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\".to_string());\nbooks.insert(\"To Kill a Mockingbird\".to_string());\nbooks.insert(\"The Odyssey\".to_string());\nbooks.insert(\"The Great Gatsby\".to_string());\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{}\", book);\n}","The easiest way to use HashSet with a custom type is to derive\nEq and Hash. We must also derive PartialEq, this will in the\nfuture be implied by Eq.","use std::collections::HashSet;\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    power: usize,\n}\n\nlet mut vikings = HashSet::new();\n\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });\nvikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });\n\n// Use derived implementation to print the vikings.\nfor x in &vikings {\n    println!(\"{:?}\", x);\n}","A HashSet with fixed list of elements can be initialized from an array:","use std::collections::HashSet;\n\nfn main() {\n    let viking_names: HashSet<&'static str> =\n        [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();\n    // use the values stored in the set\n}"]},"trait implementations":[{"name":"impl<T: std::clone::Clone, S: std::clone::Clone> std::clone::Clone for std::collections::HashSet<T, S>","stable since":"1.0.0"},{"name":"impl<T, S> std::cmp::PartialEq for std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash, S: std::hash::BuildHasher","stable since":"1.0.0"},{"name":"impl<T, S> std::cmp::Eq for std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash, S: std::hash::BuildHasher","stable since":"1.0.0"},{"name":"impl<T, S> std::fmt::Debug for std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash + std::fmt::Debug, S: std::hash::BuildHasher","stable since":"1.0.0"},{"name":"impl<T, S> std::iter::FromIterator<T> for std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash, S: std::hash::BuildHasher + std::default::Default","stable since":"1.0.0"},{"name":"impl<T, S> std::iter::Extend<T> for std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash, S: std::hash::BuildHasher","stable since":"1.0.0"},{"name":"impl<'a, T, S> std::iter::Extend<&'a T> for std::collections::HashSet<T, S> where T: 'a + std::cmp::Eq + std::hash::Hash + std::marker::Copy, S: std::hash::BuildHasher","stable since":"1.4.0"},{"name":"impl<T, S> std::default::Default for std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash, S: std::hash::BuildHasher + std::default::Default","stable since":"1.0.0"},{"name":"impl<'a, 'b, T, S> std::ops::BitOr<&'b std::collections::HashSet<T, S>> for &'a std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash + std::clone::Clone, S: std::hash::BuildHasher + std::default::Default","stable since":"1.0.0"},{"name":"impl<'a, 'b, T, S> std::ops::BitAnd<&'b std::collections::HashSet<T, S>> for &'a std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash + std::clone::Clone, S: std::hash::BuildHasher + std::default::Default","stable since":"1.0.0"},{"name":"impl<'a, 'b, T, S> std::ops::BitXor<&'b std::collections::HashSet<T, S>> for &'a std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash + std::clone::Clone, S: std::hash::BuildHasher + std::default::Default","stable since":"1.0.0"},{"name":"impl<'a, 'b, T, S> std::ops::Sub<&'b std::collections::HashSet<T, S>> for &'a std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash + std::clone::Clone, S: std::hash::BuildHasher + std::default::Default","stable since":"1.0.0"},{"name":"impl<'a, T, S> std::iter::IntoIterator for &'a std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash, S: std::hash::BuildHasher","stable since":"1.0.0"},{"name":"impl<T, S> std::iter::IntoIterator for std::collections::HashSet<T, S> where T: std::cmp::Eq + std::hash::Hash, S: std::hash::BuildHasher","stable since":"1.0.0"},{"name":"impl<T, S> std::marker::Send for std::collections::HashSet<T, S> where S: std::marker::Send, T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T, S> std::marker::Sync for std::collections::HashSet<T, S> where S: std::marker::Sync, T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> HashSet<T, RandomState>","details":{"description":["Creates an empty HashSet.","The hash set is initially created with a capacity of 0, so it will not allocate until it is first inserted into."],"example":["use std::collections::HashSet;\nlet set: HashSet<i32> = HashSet::new();"]}},{"name":"pub fn with_capacity(capacity: usize) -> HashSet<T, RandomState>","details":{"description":["Creates an empty HashSet with the specified capacity.","The hash set will be able to hold at least capacity elements without reallocating. If capacity is 0, the hash set will not allocate."],"example":["use std::collections::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);"]}},{"name":"pub fn with_hasher(hasher: S) -> HashSet<T, S>","details":{"description":["Creates a new empty hash set which will use the given hasher to hash keys.","The hash set is also created with the default initial capacity.","Warning: hasher is normally randomly generated, and is designed to allow HashSets to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector."],"example":["use std::collections::HashSet;\nuse std::collections::hash_map::RandomState;\n\nlet s = RandomState::new();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);"]}},{"name":"pub fn with_capacity_and_hasher(capacity: usize, hasher: S) -> HashSet<T, S>","details":{"description":["Creates an empty HashSet with with the specified capacity, using hasher to hash the keys.","The hash set will be able to hold at least capacity elements without reallocating. If capacity is 0, the hash set will not allocate.","Warning: hasher is normally randomly generated, and is designed to allow HashSets to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector."],"example":["use std::collections::HashSet;\nuse std::collections::hash_map::RandomState;\n\nlet s = RandomState::new();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);"]}},{"name":"pub fn hasher(&self) -> &S","details":{"description":["Returns a reference to the set's BuildHasher."],"example":["use std::collections::HashSet;\nuse std::collections::hash_map::RandomState;\n\nlet hasher = RandomState::new();\nlet set: HashSet<i32> = HashSet::with_hasher(hasher);\nlet hasher: &RandomState = set.hasher();"]}},{"name":"pub fn capacity(&self) -> usize","details":{"description":["Returns the number of elements the set can hold without reallocating."],"example":["use std::collections::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(100);\nassert!(set.capacity() >= 100);"]}},{"name":"pub fn reserve(&mut self, additional: usize)","details":{"description":["Reserves capacity for at least additional more elements to be inserted in the HashSet. The collection may reserve more space to avoid frequent reallocations.","Panics","Panics if the new allocation size overflows usize."],"example":["use std::collections::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.reserve(10);\nassert!(set.capacity() >= 10);"]}},{"name":"pub fn shrink_to_fit(&mut self)","details":{"description":["Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy."],"example":["use std::collections::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to_fit();\nassert!(set.capacity() >= 2);"]}},{"name":"pub fn shrink_to(&mut self, min_capacity: usize)","stability":["ðŸ”¬ This is a nightly-only experimental API.  (shrink_to)new API\n"]},{"name":"pub fn iter(&self) -> Iter<T>","details":{"description":["An iterator visiting all elements in arbitrary order. The iterator element type is &'a T."],"example":["use std::collections::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\");\nset.insert(\"b\");\n\n// Will print in an arbitrary order.\nfor x in set.iter() {\n    println!(\"{}\", x);\n}"]}},{"name":"pub fn difference<'a>( &'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S>","details":{"description":["Visits the values representing the difference, i.e. the values that are in self but not in other."],"example":["use std::collections::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Can be seen as `a - b`.\nfor x in a.difference(&b) {\n    println!(\"{}\", x); // Print 1\n}\n\nlet diff: HashSet<_> = a.difference(&b).collect();\nassert_eq!(diff, [1].iter().collect());\n\n// Note that difference is not symmetric,\n// and `b - a` means something else:\nlet diff: HashSet<_> = b.difference(&a).collect();\nassert_eq!(diff, [4].iter().collect());"]}},{"name":"pub fn symmetric_difference<'a>( &'a self, other: &'a HashSet<T, S>) -> SymmetricDifference<'a, T, S>","details":{"description":["Visits the values representing the symmetric difference, i.e. the values that are in self or in other but not in both."],"example":["use std::collections::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 4 in arbitrary order.\nfor x in a.symmetric_difference(&b) {\n    println!(\"{}\", x);\n}\n\nlet diff1: HashSet<_> = a.symmetric_difference(&b).collect();\nlet diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n\nassert_eq!(diff1, diff2);\nassert_eq!(diff1, [1, 4].iter().collect());"]}},{"name":"pub fn intersection<'a>( &'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S>","details":{"description":["Visits the values representing the intersection, i.e. the values that are both in self and other."],"example":["use std::collections::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 2, 3 in arbitrary order.\nfor x in a.intersection(&b) {\n    println!(\"{}\", x);\n}\n\nlet intersection: HashSet<_> = a.intersection(&b).collect();\nassert_eq!(intersection, [2, 3].iter().collect());"]}},{"name":"pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S>","details":{"description":["Visits the values representing the union, i.e. all the values in self or other, without duplicates."],"example":["use std::collections::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 2, 3, 4 in arbitrary order.\nfor x in a.union(&b) {\n    println!(\"{}\", x);\n}\n\nlet union: HashSet<_> = a.union(&b).collect();\nassert_eq!(union, [1, 2, 3, 4].iter().collect());"]}},{"name":"pub fn len(&self) -> usize","details":{"description":["Returns the number of elements in the set."],"example":["use std::collections::HashSet;\n\nlet mut v = HashSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);"]}},{"name":"pub fn is_empty(&self) -> bool","details":{"description":["Returns true if the set contains no elements."],"example":["use std::collections::HashSet;\n\nlet mut v = HashSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());"]}},{"name":"pub fn drain(&mut self) -> Drain<T>","details":{"description":["Clears the set, returning all elements in an iterator."],"example":["use std::collections::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert!(!set.is_empty());\n\n// print 1, 2, 3 in an arbitrary order\nfor i in set.drain() {\n    println!(\"{}\", i);\n}\n\nassert!(set.is_empty());"]}},{"name":"pub fn clear(&mut self)","details":{"description":["Clears the set, removing all values."],"example":["use std::collections::HashSet;\n\nlet mut v = HashSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());"]}},{"name":"pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","details":{"description":["Returns true if the set contains a value.","The value may be any borrowed form of the set's value type, but Hash and Eq on the borrowed form must match those for the value type."],"example":["use std::collections::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);"]}},{"name":"pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash + Eq","details":{"description":["Returns a reference to the value in the set, if any, that is equal to the given value.","The value may be any borrowed form of the set's value type, but Hash and Eq on the borrowed form must match those for the value type."],"example":["use std::collections::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);"]}},{"name":"pub fn is_disjoint(&self, other: &HashSet<T, S>) -> bool","details":{"description":["Returns true if self has no elements in common with other. This is equivalent to checking for an empty intersection."],"example":["use std::collections::HashSet;\n\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut b = HashSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);"]}},{"name":"pub fn is_subset(&self, other: &HashSet<T, S>) -> bool","details":{"description":["Returns true if the set is a subset of another, i.e. other contains at least all the values in self."],"example":["use std::collections::HashSet;\n\nlet sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);"]}},{"name":"pub fn is_superset(&self, other: &HashSet<T, S>) -> bool","details":{"description":["Returns true if the set is a superset of another, i.e. self contains at least all the values in other."],"example":["use std::collections::HashSet;\n\nlet sub: HashSet<_> = [1, 2].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);"]}},{"name":"pub fn insert(&mut self, value: T) -> bool","details":{"description":["Adds a value to the set.","If the set did not have this value present, true is returned.","If the set did have this value present, false is returned."],"example":["use std::collections::HashSet;\n\nlet mut set = HashSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);"]}},{"name":"pub fn replace(&mut self, value: T) -> Option<T>","details":{"description":["Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value."],"example":["use std::collections::HashSet;\n\nlet mut set = HashSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);"]}},{"name":"pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","details":{"description":["Removes a value from the set. Returns true if the value was present in the set.","The value may be any borrowed form of the set's value type, but Hash and Eq on the borrowed form must match those for the value type."],"example":["use std::collections::HashSet;\n\nlet mut set = HashSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);"]}},{"name":"pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T> where T: Borrow<Q>, Q: Hash + Eq","details":{"description":["Removes and returns the value in the set, if any, that is equal to the given one.","The value may be any borrowed form of the set's value type, but Hash and Eq on the borrowed form must match those for the value type."],"example":["use std::collections::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);"]}},{"name":"pub fn retain<F>(&mut self, f: F) where F: FnMut(&T) -> bool","details":{"description":["Retains only the elements specified by the predicate.","In other words, remove all elements e such that f(&e) returns false."],"example":["use std::collections::HashSet;\n\nlet xs = [1,2,3,4,5,6];\nlet mut set: HashSet<i32> = xs.iter().cloned().collect();\nset.retain(|&k| k % 2 == 0);\nassert_eq!(set.len(), 3);"]}}]}