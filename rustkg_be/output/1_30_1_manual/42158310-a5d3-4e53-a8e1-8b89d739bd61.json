{"stability":{"stable since":"1.0.0"},"apiName":"std::env::join_paths","apiType":"function","apiDocumentation":{"apiDescription":["Joins a collection of Paths appropriately for the PATH environment variable.","Errors","Returns an Err (containing an error message) if one of the input Paths contains an invalid character for constructing the PATH variable (a double quote on Windows or a colon on Unix)."],"examples":["Joining paths on a Unix-like platform:","use std::env;\nuse std::ffi::OsString;\nuse std::path::Path;\n\nfn main() -> Result<(), env::JoinPathsError> {\n    let paths = [Path::new(\"/bin\"), Path::new(\"/usr/bin\")];\n    let path_os_string = env::join_paths(paths.iter())?;\n    assert_eq!(path_os_string, OsString::from(\"/bin:/usr/bin\"));\n    Ok(())\n}","Joining a path containing a colon on a Unix-like platform results in an error:","use std::env;\nuse std::path::Path;\n\nlet paths = [Path::new(\"/bin\"), Path::new(\"/usr/bi:n\")];\nassert!(env::join_paths(paths.iter()).is_err());","Using env::join_paths with env::spit_paths to append an item to the PATH environment\nvariable:","use std::env;\nuse std::path::PathBuf;\n\nfn main() -> Result<(), env::JoinPathsError> {\n    if let Some(path) = env::var_os(\"PATH\") {\n        let mut paths = env::split_paths(&path).collect::<Vec<_>>();\n        paths.push(PathBuf::from(\"/home/xyz/bin\"));\n        let new_path = env::join_paths(paths)?;\n        env::set_var(\"PATH\", &new_path);\n    }\n\n    Ok(())\n}"]}}