{"stability":{"stable since":"1.0.0"},"apiName":"std::writeln","apiType":"macro","apiDocumentation":{"apiDescription":["Write formatted data into a buffer, with a newline appended.","On all platforms, the newline is the LINE FEED character (\\n/U+000A) alone (no additional CARRIAGE RETURN (\\r/U+000D).","For more information, see write!. For information on the format string syntax, see std::fmt."],"examples":["use std::io::Write;\n\nlet mut w = Vec::new();\nwriteln!(&mut w).unwrap();\nwriteln!(&mut w, \"test\").unwrap();\nwriteln!(&mut w, \"formatted {}\", \"arguments\").unwrap();\n\nassert_eq!(&w[..], \"\\ntest\\nformatted arguments\\n\".as_bytes());","A module can import both std::fmt::Write and std::io::Write and call write! on objects\nimplementing either, as objects do not typically implement both. However, the module must\nimport the traits qualified so their names do not conflict:","use std::fmt::Write as FmtWrite;\nuse std::io::Write as IoWrite;\n\nlet mut s = String::new();\nlet mut v = Vec::new();\nwriteln!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\nwriteln!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\nassert_eq!(v, b\"s = \\\"abc 123\\\\n\\\"\\n\");"]}}