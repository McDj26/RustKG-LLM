{"stability":{"stable since":"1.0.0"},"apiName":"std::ffi::OsString","apiType":"struct","apiDocumentation":{"apiDescription":["A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.","The need for this type arises from the fact that:","On Unix systems, strings are often arbitrary sequences of non-zero bytes, in many cases interpreted as UTF-8. On Windows, strings are often arbitrary sequences of non-zero 16-bit values, interpreted as UTF-16 when it is valid to do so. In Rust, strings are always valid UTF-8, which may contain zeros.","OsString and OsStr bridge this gap by simultaneously representing Rust and platform-native string values, and in particular allowing a Rust string to be converted into an \"OS\" string with no cost if possible.","OsString is to &OsStr as String is to &str: the former in each pair are owned strings; the latter are borrowed references.","Creating an OsString","From a Rust string: OsString implements From<String>, so you can use my_string.from to create an OsString from a normal Rust string.","From slices: Just like you can start with an empty Rust String and then push_str &str sub-string slices into it, you can create an empty OsString with the new method and then push string slices into it with the push method.","Extracting a borrowed reference to the whole OS string","You can use the as_os_str method to get an &OsStr from an OsString; this is effectively a borrowed reference to the whole string.","Conversions","See the module's toplevel documentation about conversions for a discussion on the traits which OsString implements for conversions from/to native representations."]},"trait implementations":[{"name":"impl std::clone::Clone for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::convert::From<std::string::String> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl<'a, T: ?std::marker::Sized + std::convert::AsRef<std::ffi::OsStr>> std::convert::From<&'a T> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::ops::Index<std::ops::RangeFull> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::ops::Deref for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::default::Default for std::ffi::OsString","stable since":"1.9.0"},{"name":"impl std::fmt::Debug for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<str> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<std::ffi::OsString> for str","stable since":"1.0.0"},{"name":"impl<'a> std::cmp::PartialEq<&'a str> for std::ffi::OsString","stable since":"1.29.0"},{"name":"impl<'a> std::cmp::PartialEq<std::ffi::OsString> for &'a str","stable since":"1.29.0"},{"name":"impl std::cmp::Eq for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd<str> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::convert::From<std::boxed::Box<std::ffi::OsStr>> for std::ffi::OsString","stable since":"1.18.0"},{"name":"impl std::convert::From<std::ffi::OsString> for std::boxed::Box<std::ffi::OsStr>","stable since":"1.20.0"},{"name":"impl std::convert::From<std::ffi::OsString> for std::sync::Arc<std::ffi::OsStr>","stable since":"1.24.0"},{"name":"impl std::convert::From<std::ffi::OsString> for std::rc::Rc<std::ffi::OsStr>","stable since":"1.24.0"},{"name":"impl<'a> std::convert::From<std::ffi::OsString> for std::borrow::Cow<'a, std::ffi::OsStr>","stable since":"1.28.0"},{"name":"impl<'a> std::convert::From<&'a std::ffi::OsString> for std::borrow::Cow<'a, std::ffi::OsStr>","stable since":"1.28.0"},{"name":"impl<'a> std::convert::From<std::borrow::Cow<'a, std::ffi::OsStr>> for std::ffi::OsString","stable since":"1.28.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsStr> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsStr> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<&'a std::ffi::OsStr> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for &'a std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<&'a std::ffi::OsStr> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for &'a std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for std::borrow::Cow<'a, std::ffi::OsStr>","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::borrow::Cow<'a, std::ffi::OsStr>> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for std::borrow::Cow<'a, std::ffi::OsStr>","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::borrow::Cow<'a, std::ffi::OsStr>> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl std::borrow::Borrow<std::ffi::OsStr> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::convert::AsRef<std::ffi::OsStr> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::convert::From<std::ffi::OsString> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::convert::From<std::path::PathBuf> for std::ffi::OsString","stable since":"1.14.0"},{"name":"impl std::convert::AsRef<std::path::Path> for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for std::path::Path","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::Path> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for std::path::Path","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::Path> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for &'a std::path::Path","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<&'a std::path::Path> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for &'a std::path::Path","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<&'a std::path::Path> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for std::borrow::Cow<'a, std::path::Path>","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::borrow::Cow<'a, std::path::Path>> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for std::borrow::Cow<'a, std::path::Path>","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::borrow::Cow<'a, std::path::Path>> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl std::os::windows::ffi::OsStringExt for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::os::unix::ffi::OsStringExt for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::ffi::OsString","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::ffi::OsString","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> OsString","details":{"description":["Constructs a new empty OsString."],"example":["use std::ffi::OsString;\n\nlet os_string = OsString::new();"]}},{"name":"pub fn as_os_str(&self) -> &OsStr","details":{"description":["Converts to an OsStr slice."],"example":["use std::ffi::{OsString, OsStr};\n\nlet os_string = OsString::from(\"foo\");\nlet os_str = OsStr::new(\"foo\");\nassert_eq!(os_string.as_os_str(), os_str);"]}},{"name":"pub fn into_string(self) -> Result<String, OsString>","details":{"description":["Converts the OsString into a String if it contains valid Unicode data.","On failure, ownership of the original OsString is returned."],"example":["use std::ffi::OsString;\n\nlet os_string = OsString::from(\"foo\");\nlet string = os_string.into_string();\nassert_eq!(string, Ok(String::from(\"foo\")));"]}},{"name":"pub fn push<T: AsRef<OsStr>>(&mut self, s: T)","details":{"description":["Extends the string with the given &OsStr slice."],"example":["use std::ffi::OsString;\n\nlet mut os_string = OsString::from(\"foo\");\nos_string.push(\"bar\");\nassert_eq!(&os_string, \"foobar\");"]}},{"name":"pub fn with_capacity(capacity: usize) -> OsString","details":{"description":["Creates a new OsString with the given capacity.","The string will be able to hold exactly capacity length units of other OS strings without reallocating. If capacity is 0, the string will not allocate.","See main OsString documentation information about encoding."],"example":["use std::ffi::OsString;\n\nlet mut os_string = OsString::with_capacity(10);\nlet capacity = os_string.capacity();\n\n// This push is done without reallocating\nos_string.push(\"foo\");\n\nassert_eq!(capacity, os_string.capacity());"]}},{"name":"pub fn clear(&mut self)","details":{"description":["Truncates the OsString to zero length."],"example":["use std::ffi::OsString;\n\nlet mut os_string = OsString::from(\"foo\");\nassert_eq!(&os_string, \"foo\");\n\nos_string.clear();\nassert_eq!(&os_string, \"\");"]}},{"name":"pub fn capacity(&self) -> usize","details":{"description":["Returns the capacity this OsString can hold without reallocating.","See OsString introduction for information about encoding."],"example":["use std::ffi::OsString;\n\nlet mut os_string = OsString::with_capacity(10);\nassert!(os_string.capacity() >= 10);"]}},{"name":"pub fn reserve(&mut self, additional: usize)","details":{"description":["Reserves capacity for at least additional more capacity to be inserted in the given OsString.","The collection may reserve more space to avoid frequent reallocations."],"example":["use std::ffi::OsString;\n\nlet mut s = OsString::new();\ns.reserve(10);\nassert!(s.capacity() >= 10);"]}},{"name":"pub fn reserve_exact(&mut self, additional: usize)","details":{"description":["Reserves the minimum capacity for exactly additional more capacity to be inserted in the given OsString. Does nothing if the capacity is already sufficient.","Note that the allocator may give the collection more space than it requests. Therefore capacity can not be relied upon to be precisely minimal. Prefer reserve if future insertions are expected."],"example":["use std::ffi::OsString;\n\nlet mut s = OsString::new();\ns.reserve_exact(10);\nassert!(s.capacity() >= 10);"]}},{"name":"pub fn shrink_to_fit(&mut self)","details":{"description":["Shrinks the capacity of the OsString to match its length."],"example":["use std::ffi::OsString;\n\nlet mut s = OsString::from(\"foo\");\n\ns.reserve(100);\nassert!(s.capacity() >= 100);\n\ns.shrink_to_fit();\nassert_eq!(3, s.capacity());"]}},{"name":"pub fn shrink_to(&mut self, min_capacity: usize)","stability":["🔬 This is a nightly-only experimental API.  (shrink_to)new API\n"]},{"name":"pub fn into_boxed_os_str(self) -> Box<OsStr>","details":{"description":["Converts this OsString into a boxed OsStr."],"example":["use std::ffi::{OsString, OsStr};\n\nlet s = OsString::from(\"hello\");\n\nlet b: Box<OsStr> = s.into_boxed_os_str();"]}}]}