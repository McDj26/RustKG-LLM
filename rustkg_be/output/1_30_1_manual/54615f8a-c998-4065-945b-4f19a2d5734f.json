{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::Debug","apiType":"trait","apiDocumentation":{"apiDescription":["? formatting.","Debug should format the output in a programmer-facing, debugging context.","Generally speaking, you should just derive a Debug implementation.","When used with the alternate format specifier #?, the output is pretty-printed.","For more information on formatters, see the module-level documentation.","This trait can be used with #[derive] if all fields implement Debug. When derived for structs, it will use the name of the struct, then {, then a comma-separated list of each field's name and Debug value, then }. For enums, it will use the name of the variant and, if applicable, (, then the Debug values of the fields, then )."],"examples":["Deriving an implementation:","#[derive(Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nlet origin = Point { x: 0, y: 0 };\n\nprintln!(\"The origin is: {:?}\", origin);","Manually implementing:","use std::fmt;\n\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl fmt::Debug for Point {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"Point {{ x: {}, y: {} }}\", self.x, self.y)\n    }\n}\n\nlet origin = Point { x: 0, y: 0 };\n\nprintln!(\"The origin is: {:?}\", origin);","This outputs:","The origin is: Point { x: 0, y: 0 }\n","There are a number of debug_* methods on Formatter to help you with manual\nimplementations, such as debug_struct.","Debug implementations using either derive or the debug builder API\non Formatter support pretty printing using the alternate flag: {:#?}.","Pretty printing with #?:","#[derive(Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nlet origin = Point { x: 0, y: 0 };\n\nprintln!(\"The origin is: {:#?}\", origin);","This outputs:","The origin is: Point {\n    x: 0,\n    y: 0\n}\n"]},"trait required methods":[{"name":"fn fmt(&self, f: &mut Formatter) -> Result<(), Error>","details":{"description":"Formats the value using the given formatter.","example":["use std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Debug for Position {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"({:?}, {:?})\", self.longitude, self.latitude)\n    }\n}\n\nassert_eq!(\"(1.987, 2.983)\".to_owned(),\n           format!(\"{:?}\", Position { longitude: 1.987, latitude: 2.983, }));"]}}]}