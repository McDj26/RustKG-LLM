{"stability":{"stable since":"1.0.0"},"apiName":"std::ptr::swap","apiType":"function","apiDocumentation":{"apiDescription":["Swaps the values at two mutable locations of the same type, without deinitializing either.","The values pointed at by x and y may overlap, unlike mem::swap which is otherwise equivalent. If the values do overlap, then the overlapping region of memory from x will be used. This is demonstrated in the examples section below.","Safety","This function copies the memory through the raw pointers passed to it as arguments.","Ensure that these pointers are valid before calling swap."],"examples":["Swapping two non-overlapping regions:","use std::ptr;\n\nlet mut array = [0, 1, 2, 3];\n\nlet x = array[0..].as_mut_ptr() as *mut [u32; 2];\nlet y = array[2..].as_mut_ptr() as *mut [u32; 2];\n\nunsafe {\n    ptr::swap(x, y);\n    assert_eq!([2, 3, 0, 1], array);\n}","Swapping two overlapping regions:","use std::ptr;\n\nlet mut array = [0, 1, 2, 3];\n\nlet x = array[0..].as_mut_ptr() as *mut [u32; 3];\nlet y = array[1..].as_mut_ptr() as *mut [u32; 3];\n\nunsafe {\n    ptr::swap(x, y);\n    assert_eq!([1, 0, 1, 2], array);\n}"]}}