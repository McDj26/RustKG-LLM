{"stability":{"stable since":"1.0.0"},"apiName":"std::cell::Ref","apiType":"struct","apiDocumentation":{"apiDescription":["Wraps a borrowed reference to a value in a RefCell box. A wrapper type for an immutably borrowed value from a RefCell<T>.","See the module-level documentation for more."]},"trait implementations":[{"name":"impl<'b, T> std::fmt::Debug for std::cell::Ref<'b, T> where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'b, T, U> std::ops::CoerceUnsized<std::cell::Ref<'b, U>> for std::cell::Ref<'b, T> where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'b, T> std::ops::Deref for std::cell::Ref<'b, T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Display for std::cell::Ref<'a, T> where T: std::fmt::Display + ?std::marker::Sized","stable since":"1.20.0"},{"name":"impl<'b, T> !std::marker::Send for std::cell::Ref<'b, T>","stable since":"1.0.0"},{"name":"impl<'b, T> !std::marker::Sync for std::cell::Ref<'b, T>","stable since":"1.0.0"}],"methods":[{"name":"pub fn clone(orig: &Ref<'b, T>) -> Ref<'b, T>","details":{"description":["Copies a Ref.","The RefCell is already immutably borrowed, so this cannot fail.","This is an associated function that needs to be used as Ref::clone(...). A Clone implementation or a method would interfere with the widespread use of r.borrow().clone() to clone the contents of a RefCell."]}},{"name":"pub fn map<U, F>(orig: Ref<'b, T>, f: F) -> Ref<'b, U> where F: FnOnce(&T) -> &U, U: ?Sized","details":{"description":["Make a new Ref for a component of the borrowed data.","The RefCell is already immutably borrowed, so this cannot fail.","This is an associated function that needs to be used as Ref::map(...). A method would interfere with methods of the same name on the contents of a RefCell used through Deref."],"example":["use std::cell::{RefCell, Ref};\n\nlet c = RefCell::new((5, 'b'));\nlet b1: Ref<(u32, char)> = c.borrow();\nlet b2: Ref<u32> = Ref::map(b1, |t| &t.0);\nassert_eq!(*b2, 5)"]}},{"name":"pub fn map_split<U, V, F>(orig: Ref<'b, T>, f: F) -> (Ref<'b, U>, Ref<'b, V>) where F: FnOnce(&T) -> (&U, &V), U: ?Sized, V: ?Sized","stability":["ðŸ”¬ This is a nightly-only experimental API.  (refcell_map_split #51476)"]}]}