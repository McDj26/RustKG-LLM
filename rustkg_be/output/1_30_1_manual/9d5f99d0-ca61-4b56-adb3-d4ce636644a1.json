{"stability":{"stable since":"1.5.0"},"apiName":"std::fs::canonicalize","apiType":"function","apiDocumentation":{"apiDescription":["Returns the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved.","Platform-specific behavior","This function currently corresponds to the realpath function on Unix and the CreateFile and GetFinalPathNameByHandle functions on Windows. Note that, this may change in the future.","On Windows, this converts the path to use extended length path syntax, which allows your program to use longer path names, but means you can only join backslash-delimited paths to it, and it may be incompatible with other applications (if passed to the application on the command-line, or written to a file another application may read).","Errors","This function will return an error in the following situations, but is not limited to just these cases:","path does not exist. A component in path is not a directory."],"examples":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let path = fs::canonicalize(\"../a/../foo.txt\")?;\n    Ok(())\n}"]}}