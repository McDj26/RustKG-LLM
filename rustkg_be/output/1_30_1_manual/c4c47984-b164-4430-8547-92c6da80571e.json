{"stability":{"stable since":"1.21.0"},"apiName":"std::sync::atomic::compiler_fence","apiType":"function","apiDocumentation":{"apiDescription":["A compiler memory fence.","compiler_fence does not emit any machine code, but restricts the kinds of memory re-ordering the compiler is allowed to do. Specifically, depending on the given Ordering semantics, the compiler may be disallowed from moving reads or writes from before or after the call to the other side of the call to compiler_fence. Note that it does not prevent the hardware from doing such re-ordering. This is not a problem in a single-threaded, execution context, but when other threads may modify memory at the same time, stronger synchronization primitives such as fence are required.","The re-ordering prevented by the different ordering semantics are:","with SeqCst, no re-ordering of reads and writes across this point is allowed. with Release, preceding reads and writes cannot be moved past subsequent writes. with Acquire, subsequent reads and writes cannot be moved ahead of preceding reads. with AcqRel, both of the above rules are enforced.","compiler_fence is generally only useful for preventing a thread from racing with itself. That is, if a given thread is executing one piece of code, and is then interrupted, and starts executing code elsewhere (while still in the same thread, and conceptually still on the same core). In traditional programs, this can only occur when a signal handler is registered. In more low-level code, such situations can also arise when handling interrupts, when implementing green threads with pre-emption, etc. Curious readers are encouraged to read the Linux kernel's discussion of memory barriers.","Panics","Panics if order is Relaxed."],"examples":["Without compiler_fence, the assert_eq! in following code\nis not guaranteed to succeed, despite everything happening in a single thread.\nTo see why, remember that the compiler is free to swap the stores to\nIMPORTANT_VARIABLE and IS_READ since they are both\nOrdering::Relaxed. If it does, and the signal handler is invoked right\nafter IS_READY is updated, then the signal handler will see\nIS_READY=1, but IMPORTANT_VARIABLE=0.\nUsing a compiler_fence remedies this situation.","use std::sync::atomic::{AtomicBool, AtomicUsize};\nuse std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\nuse std::sync::atomic::Ordering;\nuse std::sync::atomic::compiler_fence;\n\nstatic IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\nstatic IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n\nfn main() {\n    IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n    // prevent earlier writes from being moved beyond this point\n    compiler_fence(Ordering::Release);\n    IS_READY.store(true, Ordering::Relaxed);\n}\n\nfn signal_handler() {\n    if IS_READY.load(Ordering::Relaxed) {\n        assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n    }\n}"]}}