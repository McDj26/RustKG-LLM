{"stability":{"stable since":"1.0.0"},"apiName":"std::io::BufWriter","apiType":"struct","apiDocumentation":{"apiDescription":["Wraps a writer and buffers its output.","It can be excessively inefficient to work directly with something that implements Write. For example, every call to write on TcpStream results in a system call. A BufWriter keeps an in-memory buffer of data and writes it to an underlying writer in large, infrequent batches.","BufWriter can improve the speed of programs that make small and repeated write calls to the same file or network socket. It does not help when writing very large amounts at once, or writing just one or a few times. It also provides no advantage when writing to a destination that is in memory, like a Vec<u8>.","When the BufWriter is dropped, the contents of its buffer will be written out. However, any errors that happen in the process of flushing the buffer when the writer is dropped will be ignored. Code that wishes to handle such errors must manually call flush before the writer is dropped."],"examples":["Let's write the numbers one through ten to a TcpStream:","use std::io::prelude::*;\nuse std::net::TcpStream;\n\nlet mut stream = TcpStream::connect(\"127.0.0.1:34254\").unwrap();\n\nfor i in 0..10 {\n    stream.write(&[i+1]).unwrap();\n}","Because we're not buffering, we write each one in turn, incurring the\noverhead of a system call per byte written. We can fix this with a\nBufWriter:","use std::io::prelude::*;\nuse std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\nfor i in 0..10 {\n    stream.write(&[i+1]).unwrap();\n}","By wrapping the stream with a BufWriter, these ten writes are all grouped\ntogether by the buffer, and will all be written out in one system call when\nthe stream is dropped."]},"trait implementations":[{"name":"impl<W: std::io::Write> std::io::Write for std::io::BufWriter<W>","stable since":"1.0.0"},{"name":"impl<W: std::io::Write> std::fmt::Debug for std::io::BufWriter<W> where W: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<W: std::io::Write + std::io::Seek> std::io::Seek for std::io::BufWriter<W>","stable since":"1.0.0"},{"name":"impl<W: std::io::Write> std::ops::Drop for std::io::BufWriter<W>","stable since":"1.0.0"},{"name":"impl<W> std::marker::Send for std::io::BufWriter<W> where W: std::marker::Send","stable since":"1.0.0"},{"name":"impl<W> std::marker::Sync for std::io::BufWriter<W> where W: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(inner: W) -> BufWriter<W>","details":{"description":["Creates a new BufWriter with a default buffer capacity. The default is currently 8 KB, but may change in the future."],"example":["use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());"]}},{"name":"pub fn with_capacity(cap: usize, inner: W) -> BufWriter<W>","details":{"description":["Creates a new BufWriter with the specified buffer capacity."],"example":["Creating a buffer with a buffer of a hundred bytes.","use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:34254\").unwrap();\nlet mut buffer = BufWriter::with_capacity(100, stream);"]}},{"name":"pub fn get_ref(&self) -> &W","details":{"description":["Gets a reference to the underlying writer."],"example":["use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// we can use reference just like buffer\nlet reference = buffer.get_ref();"]}},{"name":"pub fn get_mut(&mut self) -> &mut W","details":{"description":["Gets a mutable reference to the underlying writer.","It is inadvisable to directly write to the underlying writer."],"example":["use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// we can use reference just like buffer\nlet reference = buffer.get_mut();"]}},{"name":"pub fn into_inner(self) -> Result<W, IntoInnerError<BufWriter<W>>>","details":{"description":["Unwraps this BufWriter, returning the underlying writer.","The buffer is written out before returning the writer.","Errors","An Err will be returned if an error occurs while flushing the buffer."],"example":["use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut buffer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// unwrap the TcpStream and flush the buffer\nlet stream = buffer.into_inner().unwrap();"]}}]}