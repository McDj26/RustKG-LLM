{"stability":{"stable since":"1.0.0"},"apiName":"std::cmp::PartialOrd","apiType":"trait","apiDocumentation":{"apiDescription":["Trait for values that can be compared for a sort-order.","The comparison must satisfy, for all a, b and c:","antisymmetry: if a < b then !(a > b), as well as a > b implying !(a < b); and transitivity: a < b and b < c implies a < c. The same must hold for both == and >.","Note that these requirements mean that the trait itself must be implemented symmetrically and transitively: if T: PartialOrd<U> and U: PartialOrd<V> then U: PartialOrd<T> and T: PartialOrd<V>.","Derivable","This trait can be used with #[derive]. When derived on structs, it will produce a lexicographic ordering based on the top-to-bottom declaration order of the struct's members. When derived on enums, variants are ordered by their top-to-bottom declaration order.","How can I implement PartialOrd?","PartialOrd only requires implementation of the partial_cmp method, with the others generated from default implementations.","However it remains possible to implement the others separately for types which do not have a total order. For example, for floating point numbers, NaN < 0 == false and NaN >= 0 == false (cf. IEEE 754-2008 section 5.11).","PartialOrd requires your type to be PartialEq.","Implementations of PartialEq, PartialOrd, and Ord must agree with each other. It's easy to accidentally make them disagree by deriving some of the traits and manually implementing others.","If your type is Ord, you can implement partial_cmp() by using cmp():","use std::cmp::Ordering; #[derive(Eq)] struct Person { id: u32, name: String, height: u32, } impl PartialOrd for Person { fn partial_cmp(&self, other: &Person) -> Option<Ordering> { Some(self.cmp(other)) } } impl Ord for Person { fn cmp(&self, other: &Person) -> Ordering { self.height.cmp(&other.height) } } impl PartialEq for Person { fn eq(&self, other: &Person) -> bool { self.height == other.height } }","You may also find it useful to use partial_cmp() on your type's fields. Here is an example of Person types who have a floating-point height field that is the only field to be used for sorting:","use std::cmp::Ordering; struct Person { id: u32, name: String, height: f64, } impl PartialOrd for Person { fn partial_cmp(&self, other: &Person) -> Option<Ordering> { self.height.partial_cmp(&other.height) } } impl PartialEq for Person { fn eq(&self, other: &Person) -> bool { self.height == other.height } }"],"examples":["let x : u32 = 0;\nlet y : u32 = 1;\n\nassert_eq!(x < y, true);\nassert_eq!(x.lt(&y), true);"]},"trait required methods":[{"name":"[+] Expand attributes#[must_use] fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>","details":{"description":"This method returns an ordering between self and other values if one exists.","example":["use std::cmp::Ordering;\n\nlet result = 1.0.partial_cmp(&2.0);\nassert_eq!(result, Some(Ordering::Less));\n\nlet result = 1.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Equal));\n\nlet result = 2.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Greater));","When comparison is impossible:","let result = std::f64::NAN.partial_cmp(&1.0);\nassert_eq!(result, None);"]}}],"trait provided methods":[{"name":"[+] Expand attributes#[must_use] fn lt(&self, other: &Rhs) -> bool","details":{"description":"This method tests less than (for self and other) and is used by the < operator.","example":["let result = 1.0 < 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 < 1.0;\nassert_eq!(result, false);"]}},{"name":"[+] Expand attributes#[must_use] fn le(&self, other: &Rhs) -> bool","details":{"description":"This method tests less than or equal to (for self and other) and is used by the <=\noperator.","example":["let result = 1.0 <= 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 <= 2.0;\nassert_eq!(result, true);"]}},{"name":"[+] Expand attributes#[must_use] fn gt(&self, other: &Rhs) -> bool","details":{"description":"This method tests greater than (for self and other) and is used by the > operator.","example":["let result = 1.0 > 2.0;\nassert_eq!(result, false);\n\nlet result = 2.0 > 2.0;\nassert_eq!(result, false);"]}},{"name":"[+] Expand attributes#[must_use] fn ge(&self, other: &Rhs) -> bool","details":{"description":"This method tests greater than or equal to (for self and other) and is used by the >=\noperator.","example":["let result = 2.0 >= 1.0;\nassert_eq!(result, true);\n\nlet result = 2.0 >= 2.0;\nassert_eq!(result, true);"]}}]}