{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (mpsc_select #27800)"},"apiName":"std::select","apiType":"macro","apiDocumentation":{"apiDescription":["A macro to select an event from a number of receivers.","This macro is used to wait for the first event to occur on a number of receivers. It places no restrictions on the types of receivers given to this macro, this can be viewed as a heterogeneous select."],"examples":["#![feature(mpsc_select)]\n\nuse std::thread;\nuse std::sync::mpsc;\n\n// two placeholder functions for now\nfn long_running_thread() {}\nfn calculate_the_answer() -> u32 { 42 }\n\nlet (tx1, rx1) = mpsc::channel();\nlet (tx2, rx2) = mpsc::channel();\n\nthread::spawn(move|| { long_running_thread(); tx1.send(()).unwrap(); });\nthread::spawn(move|| { tx2.send(calculate_the_answer()).unwrap(); });\n\nselect! {\n    _ = rx1.recv() => println!(\"the long running thread finished first\"),\n    answer = rx2.recv() => {\n        println!(\"the answer was: {}\", answer.unwrap());\n    }\n}","For more information about select, see the std::sync::mpsc::Select structure."]}}