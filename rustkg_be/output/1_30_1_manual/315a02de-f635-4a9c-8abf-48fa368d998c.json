{"stability":{"stable since":"1.0.0"},"apiName":"std::rc::Rc","apiType":"struct","apiDocumentation":{"apiDescription":["A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.","See the module-level documentation for more details.","The inherent methods of Rc are all associated functions, which means that you have to call them as e.g. Rc::get_mut(&mut value) instead of value.get_mut(). This avoids conflicts with methods of the inner type T."]},"trait implementations":[{"name":"impl<T> std::cmp::PartialOrd<std::rc::Rc<T>> for std::rc::Rc<T> where T: std::cmp::PartialOrd<T> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::convert::AsRef<T> for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.5.0"},{"name":"impl<T> std::ops::Drop for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::cmp::Eq for std::rc::Rc<T> where T: std::cmp::Eq + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::ops::Deref for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::borrow::Borrow<T> for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> !std::marker::Sync for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> !std::marker::Send for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::default::Default for std::rc::Rc<T> where T: std::default::Default","stable since":"1.0.0"},{"name":"impl<T> std::pin::Unpin for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Display for std::rc::Rc<T> where T: std::fmt::Display + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::convert::From<std::vec::Vec<T>> for std::rc::Rc<[T]>","stable since":"1.21.0"},{"name":"impl std::convert::From<std::string::String> for std::rc::Rc<str>","stable since":"1.21.0"},{"name":"impl<T> std::convert::From<T> for std::rc::Rc<T>","stable since":"1.6.0"},{"name":"impl<'a> std::convert::From<&'a str> for std::rc::Rc<str>","stable since":"1.21.0"},{"name":"impl<'a, T> std::convert::From<&'a [T]> for std::rc::Rc<[T]> where T: std::clone::Clone","stable since":"1.21.0"},{"name":"impl<T> std::convert::From<std::boxed::Box<T>> for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.21.0"},{"name":"impl<T> std::clone::Clone for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::hash::Hash for std::rc::Rc<T> where T: std::hash::Hash + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Debug for std::rc::Rc<T> where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T, U> std::ops::CoerceUnsized<std::rc::Rc<U>> for std::rc::Rc<T> where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::cmp::PartialEq<std::rc::Rc<T>> for std::rc::Rc<T> where T: std::cmp::PartialEq<T> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Pointer for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::cmp::Ord for std::rc::Rc<T> where T: std::cmp::Ord + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl std::convert::From<std::ffi::CString> for std::rc::Rc<std::ffi::CStr>","stable since":"1.24.0"},{"name":"impl<'a> std::convert::From<&'a std::ffi::CStr> for std::rc::Rc<std::ffi::CStr>","stable since":"1.24.0"},{"name":"impl std::convert::From<std::ffi::OsString> for std::rc::Rc<std::ffi::OsStr>","stable since":"1.24.0"},{"name":"impl<'a> std::convert::From<&'a std::ffi::OsStr> for std::rc::Rc<std::ffi::OsStr>","stable since":"1.24.0"},{"name":"impl<T: std::panic::RefUnwindSafe + ?std::marker::Sized> std::panic::UnwindSafe for std::rc::Rc<T>","stable since":"1.9.0"},{"name":"impl std::convert::From<std::path::PathBuf> for std::rc::Rc<std::path::Path>","stable since":"1.24.0"},{"name":"impl<'a> std::convert::From<&'a std::path::Path> for std::rc::Rc<std::path::Path>","stable since":"1.24.0"}],"methods":[{"name":"pub fn new(value: T) -> Rc<T>","details":{"description":["Constructs a new Rc<T>."],"example":["use std::rc::Rc;\n\nlet five = Rc::new(5);"]}},{"name":"pub fn try_unwrap(this: Rc<T>) -> Result<T, Rc<T>>","details":{"description":["Returns the contained value, if the Rc has exactly one strong reference.","Otherwise, an Err is returned with the same Rc that was passed in.","This will succeed even if there are outstanding weak references."],"example":["use std::rc::Rc;\n\nlet x = Rc::new(3);\nassert_eq!(Rc::try_unwrap(x), Ok(3));\n\nlet x = Rc::new(4);\nlet _y = Rc::clone(&x);\nassert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);"]}},{"name":"pub fn into_raw(this: Rc<T>) -> *const T","details":{"description":["Consumes the Rc, returning the wrapped pointer.","To avoid a memory leak the pointer must be converted back to an Rc using Rc::from_raw."],"example":["use std::rc::Rc;\n\nlet x = Rc::new(10);\nlet x_ptr = Rc::into_raw(x);\nassert_eq!(unsafe { *x_ptr }, 10);"]}},{"name":"pub unsafe fn from_raw(ptr: *const T) -> Rc<T>","details":{"description":["Constructs an Rc from a raw pointer.","The raw pointer must have been previously returned by a call to a Rc::into_raw.","This function is unsafe because improper use may lead to memory problems. For example, a double-free may occur if the function is called twice on the same raw pointer."],"example":["use std::rc::Rc;\n\nlet x = Rc::new(10);\nlet x_ptr = Rc::into_raw(x);\n\nunsafe {\n    // Convert back to an `Rc` to prevent leak.\n    let x = Rc::from_raw(x_ptr);\n    assert_eq!(*x, 10);\n\n    // Further calls to `Rc::from_raw(x_ptr)` would be memory unsafe.\n}\n\n// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!"]}},{"name":"pub fn downgrade(this: &Rc<T>) -> Weak<T>","details":{"description":["Creates a new Weak pointer to this value."],"example":["use std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet weak_five = Rc::downgrade(&five);"]}},{"name":"pub fn weak_count(this: &Rc<T>) -> usize","details":{"description":["Gets the number of Weak pointers to this value."],"example":["use std::rc::Rc;\n\nlet five = Rc::new(5);\nlet _weak_five = Rc::downgrade(&five);\n\nassert_eq!(1, Rc::weak_count(&five));"]}},{"name":"pub fn strong_count(this: &Rc<T>) -> usize","details":{"description":["Gets the number of strong (Rc) pointers to this value."],"example":["use std::rc::Rc;\n\nlet five = Rc::new(5);\nlet _also_five = Rc::clone(&five);\n\nassert_eq!(2, Rc::strong_count(&five));"]}},{"name":"pub fn get_mut(this: &mut Rc<T>) -> Option<&mut T>","details":{"description":["Returns a mutable reference to the inner value, if there are no other Rc or Weak pointers to the same value.","Returns None otherwise, because it is not safe to mutate a shared value.","See also make_mut, which will clone the inner value when it's shared."],"example":["use std::rc::Rc;\n\nlet mut x = Rc::new(3);\n*Rc::get_mut(&mut x).unwrap() = 4;\nassert_eq!(*x, 4);\n\nlet _y = Rc::clone(&x);\nassert!(Rc::get_mut(&mut x).is_none());"]}},{"name":"pub fn ptr_eq(this: &Rc<T>, other: &Rc<T>) -> bool","details":{"description":["Returns true if the two Rcs point to the same value (not just values that compare as equal)."],"example":["use std::rc::Rc;\n\nlet five = Rc::new(5);\nlet same_five = Rc::clone(&five);\nlet other_five = Rc::new(5);\n\nassert!(Rc::ptr_eq(&five, &same_five));\nassert!(!Rc::ptr_eq(&five, &other_five));"]}},{"name":"pub fn make_mut(this: &mut Rc<T>) -> &mut T","details":{"description":["Makes a mutable reference into the given Rc.","If there are other Rc or Weak pointers to the same value, then make_mut will invoke clone on the inner value to ensure unique ownership. This is also referred to as clone-on-write.","See also get_mut, which will fail rather than cloning."],"example":["use std::rc::Rc;\n\nlet mut data = Rc::new(5);\n\n*Rc::make_mut(&mut data) += 1;        // Won't clone anything\nlet mut other_data = Rc::clone(&data);    // Won't clone inner data\n*Rc::make_mut(&mut data) += 1;        // Clones inner data\n*Rc::make_mut(&mut data) += 1;        // Won't clone anything\n*Rc::make_mut(&mut other_data) *= 2;  // Won't clone anything\n\n// Now `data` and `other_data` point to different values.\nassert_eq!(*data, 8);\nassert_eq!(*other_data, 12);"]}},{"name":"pub fn downcast<T>(self) -> Result<Rc<T>, Rc<Any + 'static>> where T: Any","details":{"description":["Attempt to downcast the Rc<Any> to a concrete type."],"example":["use std::any::Any;\nuse std::rc::Rc;\n\nfn print_if_string(value: Rc<Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nfn main() {\n    let my_string = \"Hello World\".to_string();\n    print_if_string(Rc::new(my_string));\n    print_if_string(Rc::new(0i8));\n}"]}}]}