{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::Binary","apiType":"trait","apiDocumentation":{"apiDescription":["b formatting.","The Binary trait should format its output as a number in binary.","For primitive signed integers (i8 to i128, and isize), negative values are formatted as the twoâ€™s complement representation.","The alternate flag, #, adds a 0b in front of the output.","For more information on formatters, see the module-level documentation."],"examples":["Basic usage with i32:","let x = 42; // 42 is '101010' in binary\n\nassert_eq!(format!(\"{:b}\", x), \"101010\");\nassert_eq!(format!(\"{:#b}\", x), \"0b101010\");\n\nassert_eq!(format!(\"{:b}\", -16), \"11111111111111111111111111110000\");","Implementing Binary on a type:","use std::fmt;\n\nstruct Length(i32);\n\nimpl fmt::Binary for Length {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let val = self.0;\n\n        write!(f, \"{:b}\", val) // delegate to i32's implementation\n    }\n}\n\nlet l = Length(107);\n\nprintln!(\"l as binary is: {:b}\", l);"]},"trait required methods":[{"name":"fn fmt(&self, f: &mut Formatter) -> Result<(), Error>","details":{"description":"Formats the value using the given formatter."}}]}