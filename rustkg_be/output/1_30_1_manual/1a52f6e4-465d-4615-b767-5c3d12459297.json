{"stability":{"stable since":"1.0.0"},"apiName":"std::slice::IterMut","apiType":"struct","apiDocumentation":{"apiDescription":["Mutable slice iterator.","This struct is created by the iter_mut method on slices."],"examples":["Basic usage:","// First, we declare a type which has `iter_mut` method to get the `IterMut`\n// struct (&[usize here]):\nlet mut slice = &mut [1, 2, 3];\n\n// Then, we iterate over it and increment each element value:\nfor element in slice.iter_mut() {\n    *element += 1;\n}\n\n// We now have \"[2, 3, 4]\":\nprintln!(\"{:?}\", slice);"]},"trait implementations":[{"name":"impl<'a, T> std::iter::Iterator for std::slice::IterMut<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::DoubleEndedIterator for std::slice::IterMut<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::TrustedLen for std::slice::IterMut<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Debug for std::slice::IterMut<'a, T> where T: 'a + std::fmt::Debug","stable since":"1.9.0"},{"name":"impl<'a, T> std::iter::ExactSizeIterator for std::slice::IterMut<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::FusedIterator for std::slice::IterMut<'a, T>","stable since":"1.26.0"},{"name":"impl<'a, T> std::marker::Sync for std::slice::IterMut<'a, T> where T: std::marker::Sync","stable since":"1.0.0"},{"name":"impl<'a, T> std::marker::Send for std::slice::IterMut<'a, T> where T: std::marker::Send","stable since":"1.0.0"}],"methods":[{"name":"pub fn into_slice(self) -> &'a mut [T]","details":{"description":["View the underlying data as a subslice of the original data.","To avoid creating &mut references that alias, this is forced to consume the iterator."],"example":["Basic usage:","// First, we declare a type which has `iter_mut` method to get the `IterMut`\n// struct (&[usize here]):\nlet mut slice = &mut [1, 2, 3];\n\n{\n    // Then, we get the iterator:\n    let mut iter = slice.iter_mut();\n    // We move to next element:\n    iter.next();\n    // So if we print what `into_slice` method returns here, we have \"[2, 3]\":\n    println!(\"{:?}\", iter.into_slice());\n}\n\n// Now let's modify a value of the slice:\n{\n    // First we get back the iterator:\n    let mut iter = slice.iter_mut();\n    // We change the value of the first element of the slice returned by the `next` method:\n    *iter.next().unwrap() += 1;\n}\n// Now slice is \"[2, 2, 3]\":\nprintln!(\"{:?}\", slice);"]}}]}