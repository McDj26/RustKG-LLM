{"stability":{"stable since":"1.0.0"},"apiName":"std::ops::Rem","apiType":"trait","apiDocumentation":{"apiDescription":["The remainder operator %.","Note that RHS is Self by default, but this is not mandatory."],"examples":["This example implements Rem on a SplitSlice object. After Rem is\nimplemented, one can use the % operator to find out what the remaining\nelements of the slice would be after splitting it into equal slices of a\ngiven length.","use std::ops::Rem;\n\n#[derive(PartialEq, Debug)]\nstruct SplitSlice<'a, T: 'a> {\n    slice: &'a [T],\n}\n\nimpl<'a, T> Rem<usize> for SplitSlice<'a, T> {\n    type Output = SplitSlice<'a, T>;\n\n    fn rem(self, modulus: usize) -> Self {\n        let len = self.slice.len();\n        let rem = len % modulus;\n        let start = len - rem;\n        SplitSlice {slice: &self.slice[start..]}\n    }\n}\n\n// If we were to divide &[0, 1, 2, 3, 4, 5, 6, 7] into slices of size 3,\n// the remainder would be &[6, 7].\nassert_eq!(SplitSlice { slice: &[0, 1, 2, 3, 4, 5, 6, 7] } % 3,\n           SplitSlice { slice: &[6, 7] });"]},"trait required methods":[{"name":"[+] Expand attributes#[must_use] fn rem(self, rhs: RHS) -> Self::Output","details":{"description":"Performs the % operation."}}]}