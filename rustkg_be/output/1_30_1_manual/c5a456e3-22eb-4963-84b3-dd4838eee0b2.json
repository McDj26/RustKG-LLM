{"stability":{"stable since":"1.0.0"},"apiName":"std::process::exit","apiType":"function","apiDocumentation":{"apiDescription":["Terminates the current process with the specified exit code.","This function will never return and will immediately terminate the current process. The exit code is passed through to the underlying OS and will be available for consumption by another process.","Note that because this function never returns, and that it terminates the process, no destructors on the current stack or any other thread's stack will be run. If a clean shutdown is needed it is recommended to only call this function at a known point where there are no more destructors left to run.","Platform-specific behavior","Unix: On Unix-like platforms, it is unlikely that all 32 bits of exit will be visible to a parent process inspecting the exit code. On most Unix-like platforms, only the eight least-significant bits are considered."],"examples":["Due to this functionâ€™s behavior regarding destructors, a conventional way\nto use the function is to extract the actual computation to another\nfunction and compute the exit code from its return value:","fn run_app() -> Result<(), ()> {\n    // Application logic here\n    Ok(())\n}\n\nfn main() {\n    ::std::process::exit(match run_app() {\n       Ok(_) => 0,\n       Err(err) => {\n           eprintln!(\"error: {:?}\", err);\n           1\n       }\n    });\n}","Due to platform-specific behavior, the exit code for this example will be\n0 on Linux, but 256 on Windows:","use std::process;\n\nprocess::exit(0x0100);"]}}