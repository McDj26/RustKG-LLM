{"stability":{"stable since":"1.0.0"},"apiName":"std::vec","apiType":"module","apiDocumentation":{"apiDescription":["A contiguous growable array type with heap-allocated contents, written Vec<T>.","Vectors have O(1) indexing, amortized O(1) push (to the end) and O(1) pop (from the end)."],"examples":["You can explicitly create a Vec<T> with new:","let v: Vec<i32> = Vec::new();","...or by using the vec! macro:","let v: Vec<i32> = vec![];\n\nlet v = vec![1, 2, 3, 4, 5];\n\nlet v = vec![0; 10]; // ten zeroes","You can push values onto the end of a vector (which will grow the vector\nas needed):","let mut v = vec![1, 2];\n\nv.push(3);","Popping values works in much the same way:","let mut v = vec![1, 2];\n\nlet two = v.pop();","Vectors also support indexing (through the Index and IndexMut traits):","let mut v = vec![1, 2, 3];\nlet three = v[2];\nv[1] = v[1] + 5;"]},"children":["std::vec::Drain","std::vec::IntoIter","std::vec::Splice","std::vec::Vec","std::vec::DrainFilter"]}