{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"},"apiName":"std::future::Future","apiType":"trait","apiDocumentation":{"apiDescription":["A future represents an asychronous computation.","A future is a value that may not have finished computing yet. This kind of \"asynchronous value\" makes it possible for a thread to continue doing useful work while it waits for the value to become available.","The poll method","The core method of future, poll, attempts to resolve the future into a final value. This method does not block if the value is not ready. Instead, the current task is scheduled to be woken up when it's possible to make further progress by polling again. The wake up is performed using cx.waker(), a handle for waking up the current task.","When using a future, you generally won't call poll directly, but instead await! the value."]},"trait required methods":[{"name":"fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]}]}