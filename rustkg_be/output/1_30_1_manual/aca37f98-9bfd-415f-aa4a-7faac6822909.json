{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (pattern #27721)API not fully fleshed out and ready to be stabilized\n"},"apiName":"std::str::pattern::DoubleEndedSearcher","apiType":"trait","apiDocumentation":{"apiDescription":["A marker trait to express that a ReverseSearcher can be used for a DoubleEndedIterator implementation.","For this, the impl of Searcher and ReverseSearcher need to follow these conditions:","All results of next() need to be identical to the results of next_back() in reverse order. next() and next_back() need to behave as the two ends of a range of values, that is they can not \"walk past each other\"."],"examples":["char::Searcher is a DoubleEndedSearcher because searching for a\nchar only requires looking at one at a time, which behaves the same\nfrom both ends.","(&str)::Searcher is not a DoubleEndedSearcher because\nthe pattern \"aa\" in the haystack \"aaa\" matches as either\n\"[aa]a\" or \"a[aa]\", depending from which side it is searched."]}}