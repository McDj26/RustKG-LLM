{"stability":{"stable since":"1.10.0","others":["This is supported on Unix only."]},"apiName":"std::os::unix::net::UnixListener","apiType":"struct","apiDocumentation":{"apiDescription":["A structure representing a Unix domain socket server."],"examples":["use std::thread;\nuse std::os::unix::net::{UnixStream, UnixListener};\n\nfn handle_client(stream: UnixStream) {\n    // ...\n}\n\nlet listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n\n// accept connections and process them, spawning a new thread for each one\nfor stream in listener.incoming() {\n    match stream {\n        Ok(stream) => {\n            /* connection succeeded */\n            thread::spawn(|| handle_client(stream));\n        }\n        Err(err) => {\n            /* connection failed */\n            break;\n        }\n    }\n}"]},"trait implementations":[{"name":"impl std::fmt::Debug for std::os::unix::net::UnixListener","stable since":"1.0.0"},{"name":"impl std::os::unix::io::AsRawFd for std::os::unix::net::UnixListener","stable since":"1.0.0"},{"name":"impl std::os::unix::io::FromRawFd for std::os::unix::net::UnixListener","stable since":"1.0.0"},{"name":"impl std::os::unix::io::IntoRawFd for std::os::unix::net::UnixListener","stable since":"1.0.0"},{"name":"impl<'a> std::iter::IntoIterator for &'a std::os::unix::net::UnixListener","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::os::unix::net::UnixListener","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::os::unix::net::UnixListener","stable since":"1.0.0"}],"methods":[{"name":"pub fn bind<P: AsRef<Path>>(path: P) -> Result<UnixListener>","stability":["This is supported on Unix only."]},{"name":"pub fn accept(&self) -> Result<(UnixStream, SocketAddr)>","stability":["This is supported on Unix only."]},{"name":"pub fn try_clone(&self) -> Result<UnixListener>","stability":["This is supported on Unix only."]},{"name":"pub fn local_addr(&self) -> Result<SocketAddr>","stability":["This is supported on Unix only."]},{"name":"pub fn set_nonblocking(&self, nonblocking: bool) -> Result<()>","stability":["This is supported on Unix only."]},{"name":"pub fn take_error(&self) -> Result<Option<Error>>","stability":["This is supported on Unix only."]},{"name":"pub fn incoming<'a>(&'a self) -> Incoming<'a>","stability":["This is supported on Unix only."]}]}