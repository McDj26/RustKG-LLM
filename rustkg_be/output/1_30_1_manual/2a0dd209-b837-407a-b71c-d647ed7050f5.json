{"stability":{"stable since":"1.0.0"},"apiName":"std::convert","apiType":"module","apiDocumentation":{"apiDescription":["Traits for conversions between types.","The traits in this module provide a general way to talk about conversions from one type to another. They follow the standard Rust conventions of as/into/from.","Like many traits, these are often used as bounds for generic functions, to support arguments of multiple types.","Implement the As* traits for reference-to-reference conversions Implement the Into trait when you want to consume the value in the conversion The From trait is the most flexible, useful for value and reference conversions The TryFrom and TryInto traits behave like From and Into, but allow for the conversion to fail","As a library author, you should prefer implementing From<T> or TryFrom<T> rather than Into<U> or TryInto<U>, as From and TryFrom provide greater flexibility and offer equivalent Into or TryInto implementations for free, thanks to a blanket implementation in the standard library.","Generic Implementations","AsRef and AsMut auto-dereference if the inner type is a reference From<U> for T implies Into<T> for U TryFrom<U> for T implies TryInto<T> for U From and Into are reflexive, which means that all types can into themselves and from themselves","See each trait for usage examples."]},"children":["std::convert::AsMut","std::convert::AsRef","std::convert::From","std::convert::Into","std::convert::TryFrom","std::convert::TryInto","std::convert::identity"]}