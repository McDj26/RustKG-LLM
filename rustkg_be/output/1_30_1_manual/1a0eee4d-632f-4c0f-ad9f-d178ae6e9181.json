{"stability":{"stable since":"1.0.0"},"apiName":"std::net::SocketAddrV4","apiType":"struct","apiDocumentation":{"apiDescription":["An IPv4 socket address.","IPv4 socket addresses consist of an IPv4 address and a 16-bit port number, as stated in IETF RFC 793.","See SocketAddr for a type encompassing both IPv4 and IPv6 socket addresses.","The size of a SocketAddrV4 struct may vary depending on the target operating system."],"examples":["use std::net::{Ipv4Addr, SocketAddrV4};\n\nlet socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n\nassert_eq!(\"127.0.0.1:8080\".parse(), Ok(socket));\nassert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\nassert_eq!(socket.port(), 8080);"]},"trait implementations":[{"name":"impl std::marker::Copy for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::convert::From<std::net::SocketAddrV4> for std::net::SocketAddr","stable since":"1.16.0"},{"name":"impl std::fmt::Display for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::net::ToSocketAddrs for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::str::FromStr for std::net::SocketAddrV4","stable since":"1.5.0"},{"name":"impl std::marker::Send for std::net::SocketAddrV4","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::net::SocketAddrV4","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4","details":{"description":["Creates a new socket address from an IPv4 address and a port number."],"example":["use std::net::{SocketAddrV4, Ipv4Addr};\n\nlet socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);"]}},{"name":"pub fn ip(&self) -> &Ipv4Addr","details":{"description":["Returns the IP address associated with this socket address."],"example":["use std::net::{SocketAddrV4, Ipv4Addr};\n\nlet socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\nassert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));"]}},{"name":"pub fn set_ip(&mut self, new_ip: Ipv4Addr)","details":{"description":["Changes the IP address associated with this socket address."],"example":["use std::net::{SocketAddrV4, Ipv4Addr};\n\nlet mut socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\nsocket.set_ip(Ipv4Addr::new(192, 168, 0, 1));\nassert_eq!(socket.ip(), &Ipv4Addr::new(192, 168, 0, 1));"]}},{"name":"pub fn port(&self) -> u16","details":{"description":["Returns the port number associated with this socket address."],"example":["use std::net::{SocketAddrV4, Ipv4Addr};\n\nlet socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\nassert_eq!(socket.port(), 8080);"]}},{"name":"pub fn set_port(&mut self, new_port: u16)","details":{"description":["Changes the port number associated with this socket address."],"example":["use std::net::{SocketAddrV4, Ipv4Addr};\n\nlet mut socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\nsocket.set_port(4242);\nassert_eq!(socket.port(), 4242);"]}}]}