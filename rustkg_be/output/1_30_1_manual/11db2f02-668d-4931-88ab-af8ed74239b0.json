{"stability":{"stable since":"1.0.0"},"apiName":"std::io::Cursor","apiType":"struct","apiDocumentation":{"apiDescription":["A Cursor wraps an in-memory buffer and provides it with a Seek implementation.","Cursors are used with in-memory buffers, anything implementing AsRef<[u8]>, to allow them to implement Read and/or Write, allowing these buffers to be used anywhere you might use a reader or writer that does actual I/O.","The standard library implements some I/O traits on various types which are commonly used as a buffer, like Cursor<Vec<u8>> and Cursor<&[u8]>."],"examples":["We may want to write bytes to a File in our production\ncode, but use an in-memory buffer in our tests. We can do this with\nCursor:","use std::io::prelude::*;\nuse std::io::{self, SeekFrom};\nuse std::fs::File;\n\n// a library function we've written\nfn write_ten_bytes_at_end<W: Write + Seek>(writer: &mut W) -> io::Result<()> {\n    writer.seek(SeekFrom::End(-10))?;\n\n    for i in 0..10 {\n        writer.write(&[i])?;\n    }\n\n    // all went well\n    Ok(())\n}\n\n// Here's some code that uses this library function.\n//\n// We might want to use a BufReader here for efficiency, but let's\n// keep this example focused.\nlet mut file = File::create(\"foo.txt\")?;\n\nwrite_ten_bytes_at_end(&mut file)?;\n\n// now let's write a test\n#[test]\nfn test_writes_bytes() {\n    // setting up a real File is much slower than an in-memory buffer,\n    // let's use a cursor instead\n    use std::io::Cursor;\n    let mut buff = Cursor::new(vec![0; 15]);\n\n    write_ten_bytes_at_end(&mut buff).unwrap();\n\n    assert_eq!(&buff.get_ref()[5..15], &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n}"]},"trait implementations":[{"name":"impl<T: std::clone::Clone> std::clone::Clone for std::io::Cursor<T>","stable since":"1.0.0"},{"name":"impl<T: std::fmt::Debug> std::fmt::Debug for std::io::Cursor<T>","stable since":"1.0.0"},{"name":"impl<T> std::io::Seek for std::io::Cursor<T> where T: std::convert::AsRef<[u8]>","stable since":"1.0.0"},{"name":"impl<T> std::io::Read for std::io::Cursor<T> where T: std::convert::AsRef<[u8]>","stable since":"1.0.0"},{"name":"impl<T> std::io::BufRead for std::io::Cursor<T> where T: std::convert::AsRef<[u8]>","stable since":"1.0.0"},{"name":"impl<'a> std::io::Write for std::io::Cursor<&'a mut [u8]>","stable since":"1.0.0"},{"name":"impl<'a> std::io::Write for std::io::Cursor<&'a mut std::vec::Vec<u8>>","stable since":"1.25.0"},{"name":"impl std::io::Write for std::io::Cursor<std::vec::Vec<u8>>","stable since":"1.0.0"},{"name":"impl std::io::Write for std::io::Cursor<std::boxed::Box<[u8]>>","stable since":"1.5.0"},{"name":"impl<T> std::marker::Send for std::io::Cursor<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T> std::marker::Sync for std::io::Cursor<T> where T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(inner: T) -> Cursor<T>","details":{"description":["Creates a new cursor wrapping the provided underlying in-memory buffer.","Cursor initial position is 0 even if underlying buffer (e.g. Vec) is not empty. So writing to cursor starts with overwriting Vec content, not with appending to it."],"example":["use std::io::Cursor;\n\nlet buff = Cursor::new(Vec::new());"]}},{"name":"pub fn into_inner(self) -> T","details":{"description":["Consumes this cursor, returning the underlying value."],"example":["use std::io::Cursor;\n\nlet buff = Cursor::new(Vec::new());\n\nlet vec = buff.into_inner();"]}},{"name":"pub fn get_ref(&self) -> &T","details":{"description":["Gets a reference to the underlying value in this cursor."],"example":["use std::io::Cursor;\n\nlet buff = Cursor::new(Vec::new());\n\nlet reference = buff.get_ref();"]}},{"name":"pub fn get_mut(&mut self) -> &mut T","details":{"description":["Gets a mutable reference to the underlying value in this cursor.","Care should be taken to avoid modifying the internal I/O state of the underlying value as it may corrupt this cursor's position."],"example":["use std::io::Cursor;\n\nlet mut buff = Cursor::new(Vec::new());\n\nlet reference = buff.get_mut();"]}},{"name":"pub fn position(&self) -> u64","details":{"description":["Returns the current position of this cursor."],"example":["use std::io::Cursor;\nuse std::io::prelude::*;\nuse std::io::SeekFrom;\n\nlet mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n\nassert_eq!(buff.position(), 0);\n\nbuff.seek(SeekFrom::Current(2)).unwrap();\nassert_eq!(buff.position(), 2);\n\nbuff.seek(SeekFrom::Current(-1)).unwrap();\nassert_eq!(buff.position(), 1);"]}},{"name":"pub fn set_position(&mut self, pos: u64)","details":{"description":["Sets the position of this cursor."],"example":["use std::io::Cursor;\n\nlet mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n\nassert_eq!(buff.position(), 0);\n\nbuff.set_position(2);\nassert_eq!(buff.position(), 2);\n\nbuff.set_position(4);\nassert_eq!(buff.position(), 4);"]}}]}