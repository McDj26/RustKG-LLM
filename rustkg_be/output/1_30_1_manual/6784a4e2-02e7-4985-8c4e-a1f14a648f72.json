{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::LinkedList","apiType":"struct","apiDocumentation":{"apiDescription":["A doubly-linked list with owned nodes.","The LinkedList allows pushing and popping elements at either end in constant time.","Almost always it is better to use Vec or VecDeque instead of LinkedList. In general, array-based containers are faster, more memory efficient and make better use of CPU cache."]},"trait implementations":[{"name":"impl<T> std::cmp::PartialOrd<std::collections::linked_list::LinkedList<T>> for std::collections::linked_list::LinkedList<T> where T: std::cmp::PartialOrd<T>","stable since":"1.0.0"},{"name":"impl<T> std::ops::Drop for std::collections::linked_list::LinkedList<T>","stable since":"1.0.0"},{"name":"impl<T> std::iter::IntoIterator for std::collections::linked_list::LinkedList<T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::IntoIterator for &'a mut std::collections::linked_list::LinkedList<T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::IntoIterator for &'a std::collections::linked_list::LinkedList<T>","stable since":"1.0.0"},{"name":"impl<T> std::cmp::Eq for std::collections::linked_list::LinkedList<T> where T: std::cmp::Eq","stable since":"1.0.0"},{"name":"impl<T> std::marker::Sync for std::collections::linked_list::LinkedList<T> where T: std::marker::Sync","stable since":"1.0.0"},{"name":"impl<T> std::marker::Send for std::collections::linked_list::LinkedList<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T> std::default::Default for std::collections::linked_list::LinkedList<T>","stable since":"1.0.0"},{"name":"impl<T> std::iter::FromIterator<T> for std::collections::linked_list::LinkedList<T>","stable since":"1.0.0"},{"name":"impl<T> std::clone::Clone for std::collections::linked_list::LinkedList<T> where T: std::clone::Clone","stable since":"1.0.0"},{"name":"impl<T> std::iter::Extend<T> for std::collections::linked_list::LinkedList<T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::Extend<&'a T> for std::collections::linked_list::LinkedList<T> where T: 'a + std::marker::Copy","stable since":"1.2.0"},{"name":"impl<T> std::hash::Hash for std::collections::linked_list::LinkedList<T> where T: std::hash::Hash","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Debug for std::collections::linked_list::LinkedList<T> where T: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<T> std::cmp::PartialEq<std::collections::linked_list::LinkedList<T>> for std::collections::linked_list::LinkedList<T> where T: std::cmp::PartialEq<T>","stable since":"1.0.0"},{"name":"impl<T> std::cmp::Ord for std::collections::linked_list::LinkedList<T> where T: std::cmp::Ord","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> LinkedList<T>","details":{"description":["Creates an empty LinkedList."],"example":["use std::collections::LinkedList;\n\nlet list: LinkedList<u32> = LinkedList::new();"]}},{"name":"pub fn append(&mut self, other: &mut LinkedList<T>)","details":{"description":["Moves all elements from other to the end of the list.","This reuses all the nodes from other and moves them into self. After this operation, other becomes empty.","This operation should compute in O(1) time and O(1) memory."],"example":["use std::collections::LinkedList;\n\nlet mut list1 = LinkedList::new();\nlist1.push_back('a');\n\nlet mut list2 = LinkedList::new();\nlist2.push_back('b');\nlist2.push_back('c');\n\nlist1.append(&mut list2);\n\nlet mut iter = list1.iter();\nassert_eq!(iter.next(), Some(&'a'));\nassert_eq!(iter.next(), Some(&'b'));\nassert_eq!(iter.next(), Some(&'c'));\nassert!(iter.next().is_none());\n\nassert!(list2.is_empty());"]}},{"name":"pub fn iter(&self) -> Iter<T>","details":{"description":["Provides a forward iterator."],"example":["use std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);"]}},{"name":"pub fn iter_mut(&mut self) -> IterMut<T>","details":{"description":["Provides a forward iterator with mutable references."],"example":["use std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nfor element in list.iter_mut() {\n    *element += 10;\n}\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&10));\nassert_eq!(iter.next(), Some(&11));\nassert_eq!(iter.next(), Some(&12));\nassert_eq!(iter.next(), None);"]}},{"name":"pub fn is_empty(&self) -> bool","details":{"description":["Returns true if the LinkedList is empty.","This operation should compute in O(1) time."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert!(dl.is_empty());\n\ndl.push_front(\"foo\");\nassert!(!dl.is_empty());"]}},{"name":"pub fn len(&self) -> usize","details":{"description":["Returns the length of the LinkedList.","This operation should compute in O(1) time."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.len(), 1);\n\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\n\ndl.push_back(3);\nassert_eq!(dl.len(), 3);"]}},{"name":"pub fn clear(&mut self)","details":{"description":["Removes all elements from the LinkedList.","This operation should compute in O(n) time."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\nassert_eq!(dl.front(), Some(&1));\n\ndl.clear();\nassert_eq!(dl.len(), 0);\nassert_eq!(dl.front(), None);"]}},{"name":"pub fn contains(&self, x: &T) -> bool where T: PartialEq<T>","details":{"description":["Returns true if the LinkedList contains an element equal to the given value."],"example":["use std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nassert_eq!(list.contains(&0), true);\nassert_eq!(list.contains(&10), false);"]}},{"name":"pub fn front(&self) -> Option<&T>","details":{"description":["Provides a reference to the front element, or None if the list is empty."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));"]}},{"name":"pub fn front_mut(&mut self) -> Option<&mut T>","details":{"description":["Provides a mutable reference to the front element, or None if the list is empty."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));\n\nmatch dl.front_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.front(), Some(&5));"]}},{"name":"pub fn back(&self) -> Option<&T>","details":{"description":["Provides a reference to the back element, or None if the list is empty."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));"]}},{"name":"pub fn back_mut(&mut self) -> Option<&mut T>","details":{"description":["Provides a mutable reference to the back element, or None if the list is empty."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));\n\nmatch dl.back_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.back(), Some(&5));"]}},{"name":"pub fn push_front(&mut self, elt: T)","details":{"description":["Adds an element first in the list.","This operation should compute in O(1) time."],"example":["use std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.front().unwrap(), &2);\n\ndl.push_front(1);\nassert_eq!(dl.front().unwrap(), &1);"]}},{"name":"pub fn pop_front(&mut self) -> Option<T>","details":{"description":["Removes the first element and returns it, or None if the list is empty.","This operation should compute in O(1) time."],"example":["use std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_front(), None);\n\nd.push_front(1);\nd.push_front(3);\nassert_eq!(d.pop_front(), Some(3));\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), None);"]}},{"name":"pub fn push_back(&mut self, elt: T)","details":{"description":["Appends an element to the back of a list"],"example":["use std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nd.push_back(1);\nd.push_back(3);\nassert_eq!(3, *d.back().unwrap());"]}},{"name":"pub fn pop_back(&mut self) -> Option<T>","details":{"description":["Removes the last element from a list and returns it, or None if it is empty."],"example":["use std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_back(), None);\nd.push_back(1);\nd.push_back(3);\nassert_eq!(d.pop_back(), Some(3));"]}},{"name":"pub fn split_off(&mut self, at: usize) -> LinkedList<T>","details":{"description":["Splits the list into two at the given index. Returns everything after the given index, including the index.","This operation should compute in O(n) time.","Panics","Panics if at > len."],"example":["use std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nlet mut splitted = d.split_off(2);\n\nassert_eq!(splitted.pop_front(), Some(1));\nassert_eq!(splitted.pop_front(), None);"]}},{"name":"pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<T, F> where F: FnMut(&mut T) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (drain_filter #43244)recently added\n"]}]}