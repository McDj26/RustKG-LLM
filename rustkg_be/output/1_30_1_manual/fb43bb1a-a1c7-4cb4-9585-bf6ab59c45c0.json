{"stability":{"stable since":"1.0.0"},"apiName":"std::cmp","apiType":"module","apiDocumentation":{"apiDescription":["Functionality for ordering and comparison.","This module defines both PartialOrd and PartialEq traits which are used by the compiler to implement comparison operators. Rust programs may implement PartialOrd to overload the <, <=, >, and >= operators, and may implement PartialEq to overload the == and != operators."],"examples":["let x: u32 = 0;\nlet y: u32 = 1;\n\n// these two lines are equivalent\nassert_eq!(x < y, true);\nassert_eq!(x.lt(&y), true);\n\n// these two lines are also equivalent\nassert_eq!(x == y, false);\nassert_eq!(x.eq(&y), false);"]},"children":["std::cmp::Reverse","std::cmp::Ordering","std::cmp::Eq","std::cmp::Ord","std::cmp::PartialEq","std::cmp::PartialOrd","std::cmp::max","std::cmp::min"]}