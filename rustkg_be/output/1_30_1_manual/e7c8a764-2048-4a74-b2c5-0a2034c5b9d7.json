{"stability":{"stable since":"1.0.0"},"apiName":"std::io::Read","apiType":"trait","apiDocumentation":{"apiDescription":["The Read trait allows for reading bytes from a source.","Implementors of the Read trait are called 'readers'.","Readers are defined by one required method, read(). Each call to read() will attempt to pull bytes from this source into a provided buffer. A number of other methods are implemented in terms of read(), giving implementors a number of ways to read bytes while only needing to implement a single method.","Readers are intended to be composable with one another. Many implementors throughout std::io take and provide types which implement the Read trait.","Please note that each call to read() may involve a system call, and therefore, using something that implements BufRead, such as BufReader, will be more efficient."],"examples":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    f.read(&mut buffer)?;\n\n    let mut buffer = vec![0; 10];\n    // read the whole file\n    f.read_to_end(&mut buffer)?;\n\n    // read into a String, so that you don't need to do the conversion.\n    let mut buffer = String::new();\n    f.read_to_string(&mut buffer)?;\n\n    // and more! See the other methods for more details.\n    Ok(())\n}","Read from &str because &[u8] implements Read:","use std::io::prelude::*;\n\nfn main() -> io::Result<()> {\n    let mut b = \"This string will be read\".as_bytes();\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    b.read(&mut buffer)?;\n\n    // etc... it works exactly as a File does!\n    Ok(())\n}"]},"trait required methods":[{"name":"fn read(&mut self, buf: &mut [u8]) -> Result<usize>","details":{"description":"Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.","example":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    f.read(&mut buffer[..])?;\n    Ok(())\n}"]}}],"trait provided methods":[{"name":"unsafe fn initializer(&self) -> Initializer","stability":["ðŸ”¬ This is a nightly-only experimental API.  (read_initializer #42788)"]},{"name":"fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>","details":{"description":"Read all bytes until EOF in this source, placing them into buf.","example":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n\n    // read the whole file\n    f.read_to_end(&mut buffer)?;\n    Ok(())\n}","(See also the std::fs::read convenience function for reading from a\nfile.)"]}},{"name":"fn read_to_string(&mut self, buf: &mut String) -> Result<usize>","details":{"description":"Read all bytes until EOF in this source, appending them to buf.","example":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = String::new();\n\n    f.read_to_string(&mut buffer)?;\n    Ok(())\n}","(See also the std::fs::read_to_string convenience function for\nreading from a file.)"]}},{"name":"fn read_exact(&mut self, buf: &mut [u8]) -> Result<()>","details":{"description":"Read the exact number of bytes required to fill buf.","example":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read exactly 10 bytes\n    f.read_exact(&mut buffer)?;\n    Ok(())\n}"]}},{"name":"fn by_ref(&mut self) -> &mut Self where Self: Sized","details":{"description":"Creates a \"by reference\" adaptor for this instance of Read.","example":["Files implement Read:","use std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n    let mut other_buffer = Vec::new();\n\n    {\n        let reference = f.by_ref();\n\n        // read at most 5 bytes\n        reference.take(5).read_to_end(&mut buffer)?;\n\n    } // drop our &mut reference so we can use f again\n\n    // original file still usable, read the rest\n    f.read_to_end(&mut other_buffer)?;\n    Ok(())\n}"]}},{"name":"fn bytes(self) -> Bytes<Self> where Self: Sized","details":{"description":"Transforms this Read instance to an Iterator over its bytes.","example":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n\n    for byte in f.bytes() {\n        println!(\"{}\", byte.unwrap());\n    }\n    Ok(())\n}"]}},{"name":"fn chain<R: Read>(self, next: R) -> Chain<Self, R> where Self: Sized","details":{"description":"Creates an adaptor which will chain this stream with another.","example":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f1 = File::open(\"foo.txt\")?;\n    let mut f2 = File::open(\"bar.txt\")?;\n\n    let mut handle = f1.chain(f2);\n    let mut buffer = String::new();\n\n    // read the value into a String. We could use any Read method here,\n    // this is just one example.\n    handle.read_to_string(&mut buffer)?;\n    Ok(())\n}"]}},{"name":"fn take(self, limit: u64) -> Take<Self> where Self: Sized","details":{"description":"Creates an adaptor which will read at most limit bytes from it.","example":["Files implement Read:","use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 5];\n\n    // read at most five bytes\n    let mut handle = f.take(5);\n\n    handle.read(&mut buffer)?;\n    Ok(())\n}"]}}]}