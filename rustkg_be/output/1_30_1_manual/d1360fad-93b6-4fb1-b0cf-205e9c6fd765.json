{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"},"apiName":"std::task::UnsafeWake","apiType":"trait","apiDocumentation":{"apiDescription":["An unsafe trait for implementing custom memory management for a Waker or LocalWaker.","A Waker conceptually is a cloneable trait object for Wake, and is most often essentially just Arc<dyn Wake>. However, in some contexts (particularly no_std), it's desirable to avoid Arc in favor of some custom memory management strategy. This trait is designed to allow for such customization.","When using std, a default implementation of the UnsafeWake trait is provided for Arc<T> where T: Wake."]},"trait required methods":[{"name":"unsafe fn clone_raw(&self) -> Waker","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"unsafe fn drop_raw(&self)","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"unsafe fn wake(&self)","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]}],"trait provided methods":[{"name":"unsafe fn wake_local(&self)","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]}]}