{"stability":{"stable since":"1.0.0"},"apiName":"std::ops::DerefMut","apiType":"trait","apiDocumentation":{"apiDescription":["Used for mutable dereferencing operations, like in *v = 1;.","In addition to being used for explicit dereferencing operations with the (unary) * operator in mutable contexts, DerefMut is also used implicitly by the compiler in many circumstances. This mechanism is called 'Deref coercion'. In immutable contexts, Deref is used.","Implementing DerefMut for smart pointers makes mutating the data behind them convenient, which is why they implement DerefMut. On the other hand, the rules regarding Deref and DerefMut were designed specifically to accommodate smart pointers. Because of this, DerefMut should only be implemented for smart pointers to avoid confusion.","For similar reasons, this trait should never fail. Failure during dereferencing can be extremely confusing when DerefMut is invoked implicitly.","More on Deref coercion","If T implements DerefMut<Target = U>, and x is a value of type T, then:","In mutable contexts, *x on non-pointer types is equivalent to *Deref::deref(&x). Values of type &mut T are coerced to values of type &mut U T implicitly implements all the (mutable) methods of the type U.","For more details, visit the chapter in The Rust Programming Language as well as the reference sections on the dereference operator, method resolution and type coercions."],"examples":["A struct with a single field which is modifiable by dereferencing the\nstruct.","use std::ops::{Deref, DerefMut};\n\nstruct DerefMutExample<T> {\n    value: T\n}\n\nimpl<T> Deref for DerefMutExample<T> {\n    type Target = T;\n\n    fn deref(&self) -> &T {\n        &self.value\n    }\n}\n\nimpl<T> DerefMut for DerefMutExample<T> {\n    fn deref_mut(&mut self) -> &mut T {\n        &mut self.value\n    }\n}\n\nlet mut x = DerefMutExample { value: 'a' };\n*x = 'b';\nassert_eq!('b', *x);"]},"trait required methods":[{"name":"fn deref_mut(&mut self) -> &mut Self::Target","details":{"description":"Mutably dereferences the value."}}]}