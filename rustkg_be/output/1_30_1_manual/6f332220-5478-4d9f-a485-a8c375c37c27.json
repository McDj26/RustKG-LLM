{"stability":{"stable since":"1.9.0"},"apiName":"std::char::decode_utf16","apiType":"function","apiDocumentation":{"apiDescription":["Create an iterator over the UTF-16 encoded code points in iter, returning unpaired surrogates as Errs."],"examples":["Basic usage:","use std::char::decode_utf16;\n\nfn main() {\n    // 𝄞mus<invalid>ic<invalid>\n    let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n             0x0073, 0xDD1E, 0x0069, 0x0063,\n             0xD834];\n\n    assert_eq!(decode_utf16(v.iter().cloned())\n                           .map(|r| r.map_err(|e| e.unpaired_surrogate()))\n                           .collect::<Vec<_>>(),\n               vec![Ok('𝄞'),\n                    Ok('m'), Ok('u'), Ok('s'),\n                    Err(0xDD1E),\n                    Ok('i'), Ok('c'),\n                    Err(0xD834)]);\n}","A lossy decoder can be obtained by replacing Err results with the replacement character:","use std::char::{decode_utf16, REPLACEMENT_CHARACTER};\n\nfn main() {\n    // 𝄞mus<invalid>ic<invalid>\n    let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n             0x0073, 0xDD1E, 0x0069, 0x0063,\n             0xD834];\n\n    assert_eq!(decode_utf16(v.iter().cloned())\n                   .map(|r| r.unwrap_or(REPLACEMENT_CHARACTER))\n                   .collect::<String>(),\n               \"𝄞mus�ic�\");\n}"]}}