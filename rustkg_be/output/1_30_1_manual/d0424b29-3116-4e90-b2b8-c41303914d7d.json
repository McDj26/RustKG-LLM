{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::VecDeque","apiType":"struct","apiDocumentation":{"apiDescription":["A double-ended queue implemented with a growable ring buffer.","The \"default\" usage of this type as a queue is to use push_back to add to the queue, and pop_front to remove from the queue. extend and append push onto the back in this manner, and iterating over VecDeque goes front to back."]},"trait implementations":[{"name":"impl<A> std::cmp::PartialOrd<std::collections::vec_deque::VecDeque<A>> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialOrd<A>","stable since":"1.0.0"},{"name":"impl<T> std::ops::Drop for std::collections::vec_deque::VecDeque<T>","stable since":"1.0.0"},{"name":"impl<T> std::iter::IntoIterator for std::collections::vec_deque::VecDeque<T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::IntoIterator for &'a std::collections::vec_deque::VecDeque<T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::IntoIterator for &'a mut std::collections::vec_deque::VecDeque<T>","stable since":"1.0.0"},{"name":"impl<A> std::cmp::Eq for std::collections::vec_deque::VecDeque<A> where A: std::cmp::Eq","stable since":"1.0.0"},{"name":"impl<A> std::ops::IndexMut<usize> for std::collections::vec_deque::VecDeque<A>","stable since":"1.0.0"},{"name":"impl<T> std::default::Default for std::collections::vec_deque::VecDeque<T>","stable since":"1.0.0"},{"name":"impl<A> std::iter::FromIterator<A> for std::collections::vec_deque::VecDeque<A>","stable since":"1.0.0"},{"name":"impl<T> std::convert::From<std::collections::vec_deque::VecDeque<T>> for std::vec::Vec<T>","stable since":"1.10.0"},{"name":"impl<T> std::convert::From<std::vec::Vec<T>> for std::collections::vec_deque::VecDeque<T>","stable since":"1.10.0"},{"name":"impl<T> std::clone::Clone for std::collections::vec_deque::VecDeque<T> where T: std::clone::Clone","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::Extend<&'a T> for std::collections::vec_deque::VecDeque<T> where T: 'a + std::marker::Copy","stable since":"1.2.0"},{"name":"impl<A> std::iter::Extend<A> for std::collections::vec_deque::VecDeque<A>","stable since":"1.0.0"},{"name":"impl<A> std::hash::Hash for std::collections::vec_deque::VecDeque<A> where A: std::hash::Hash","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Debug for std::collections::vec_deque::VecDeque<T> where T: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 31]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 16]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 13]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 10]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 12]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 32]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 15]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 14]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 29]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 20]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 16]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 7]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 18]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 0]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 8]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 4]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 5]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 28]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 2]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 6]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 20]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 32]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 3]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 1]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 4]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 1]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 23]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 11]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 15]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 31]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 4]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 11]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 5]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 12]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 30]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 27]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 9]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 26]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<A> std::cmp::PartialEq<std::collections::vec_deque::VecDeque<A>> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<A>","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 17]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 30]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 28]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 25]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 15]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 2]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 21]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 30]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 7]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 29]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 22]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 21]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 24]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 28]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 19]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 10]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 9]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 3]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 10]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 12]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 19]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 32]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 26]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 29]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 7]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 22]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 21]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 0]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 22]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 17]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 20]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 18]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 1]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 2]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 9]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 18]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 23]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 6]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 25]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<std::vec::Vec<B>> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 27]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 19]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 6]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 5]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 17]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 25]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 0]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 23]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 14]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 31]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 26]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 24]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 13]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 14]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 27]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 8]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<[B; 13]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 8]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 24]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 3]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut [B; 11]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b [B; 16]> for std::collections::vec_deque::VecDeque<A> where A: std::cmp::PartialEq<B>","stable since":"1.17.0"},{"name":"impl<A> std::cmp::Ord for std::collections::vec_deque::VecDeque<A> where A: std::cmp::Ord","stable since":"1.0.0"},{"name":"impl<A> std::ops::Index<usize> for std::collections::vec_deque::VecDeque<A>","stable since":"1.0.0"},{"name":"impl<T> std::marker::Send for std::collections::vec_deque::VecDeque<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T> std::marker::Sync for std::collections::vec_deque::VecDeque<T> where T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> VecDeque<T>","details":{"description":["Creates an empty VecDeque."],"example":["use std::collections::VecDeque;\n\nlet vector: VecDeque<u32> = VecDeque::new();"]}},{"name":"pub fn with_capacity(n: usize) -> VecDeque<T>","details":{"description":["Creates an empty VecDeque with space for at least n elements."],"example":["use std::collections::VecDeque;\n\nlet vector: VecDeque<u32> = VecDeque::with_capacity(10);"]}},{"name":"pub fn get(&self, index: usize) -> Option<&T>","details":{"description":["Retrieves an element in the VecDeque by index.","Element at index 0 is the front of the queue."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nassert_eq!(buf.get(1), Some(&4));"]}},{"name":"pub fn get_mut(&mut self, index: usize) -> Option<&mut T>","details":{"description":["Retrieves an element in the VecDeque mutably by index.","Element at index 0 is the front of the queue."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nif let Some(elem) = buf.get_mut(1) {\n    *elem = 7;\n}\n\nassert_eq!(buf[1], 7);"]}},{"name":"pub fn swap(&mut self, i: usize, j: usize)","details":{"description":["Swaps elements at indices i and j.","i and j may be equal.","Element at index 0 is the front of the queue.","Panics","Panics if either index is out of bounds."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nassert_eq!(buf, [3, 4, 5]);\nbuf.swap(0, 2);\nassert_eq!(buf, [5, 4, 3]);"]}},{"name":"pub fn capacity(&self) -> usize","details":{"description":["Returns the number of elements the VecDeque can hold without reallocating."],"example":["use std::collections::VecDeque;\n\nlet buf: VecDeque<i32> = VecDeque::with_capacity(10);\nassert!(buf.capacity() >= 10);"]}},{"name":"pub fn reserve_exact(&mut self, additional: usize)","details":{"description":["Reserves the minimum capacity for exactly additional more elements to be inserted in the given VecDeque. Does nothing if the capacity is already sufficient.","Note that the allocator may give the collection more space than it requests. Therefore capacity can not be relied upon to be precisely minimal. Prefer reserve if future insertions are expected.","Panics","Panics if the new capacity overflows usize."],"example":["use std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = vec![1].into_iter().collect();\nbuf.reserve_exact(10);\nassert!(buf.capacity() >= 11);"]}},{"name":"pub fn reserve(&mut self, additional: usize)","details":{"description":["Reserves capacity for at least additional more elements to be inserted in the given VecDeque. The collection may reserve more space to avoid frequent reallocations.","Panics","Panics if the new capacity overflows usize."],"example":["use std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = vec![1].into_iter().collect();\nbuf.reserve(10);\nassert!(buf.capacity() >= 11);"]}},{"name":"pub fn try_reserve_exact( &mut self, additional: usize) -> Result<(), CollectionAllocErr>","stability":["🔬 This is a nightly-only experimental API.  (try_reserve #48043)new API\n"]},{"name":"pub fn try_reserve( &mut self, additional: usize) -> Result<(), CollectionAllocErr>","stability":["🔬 This is a nightly-only experimental API.  (try_reserve #48043)new API\n"]},{"name":"pub fn shrink_to_fit(&mut self)","details":{"description":["Shrinks the capacity of the VecDeque as much as possible.","It will drop down as close as possible to the length but the allocator may still inform the VecDeque that there is space for a few more elements."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\nbuf.extend(0..4);\nassert_eq!(buf.capacity(), 15);\nbuf.shrink_to_fit();\nassert!(buf.capacity() >= 4);"]}},{"name":"pub fn shrink_to(&mut self, min_capacity: usize)","stability":["🔬 This is a nightly-only experimental API.  (shrink_to)new API\n"]},{"name":"pub fn truncate(&mut self, len: usize)","details":{"description":["Shortens the VecDeque, dropping excess elements from the back.","If len is greater than the VecDeque's current length, this has no effect."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\nbuf.truncate(1);\nassert_eq!(buf, [5]);"]}},{"name":"pub fn iter(&self) -> Iter<T>","details":{"description":["Returns a front-to-back iterator."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nlet b: &[_] = &[&5, &3, &4];\nlet c: Vec<&i32> = buf.iter().collect();\nassert_eq!(&c[..], b);"]}},{"name":"pub fn iter_mut(&mut self) -> IterMut<T>","details":{"description":["Returns a front-to-back iterator that returns mutable references."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nfor num in buf.iter_mut() {\n    *num = *num - 2;\n}\nlet b: &[_] = &[&mut 3, &mut 1, &mut 2];\nassert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);"]}},{"name":"pub fn as_slices(&self) -> (&[T], &[T])","details":{"description":["Returns a pair of slices which contain, in order, the contents of the VecDeque."],"example":["use std::collections::VecDeque;\n\nlet mut vector = VecDeque::new();\n\nvector.push_back(0);\nvector.push_back(1);\nvector.push_back(2);\n\nassert_eq!(vector.as_slices(), (&[0, 1, 2][..], &[][..]));\n\nvector.push_front(10);\nvector.push_front(9);\n\nassert_eq!(vector.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));"]}},{"name":"pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T])","details":{"description":["Returns a pair of slices which contain, in order, the contents of the VecDeque."],"example":["use std::collections::VecDeque;\n\nlet mut vector = VecDeque::new();\n\nvector.push_back(0);\nvector.push_back(1);\n\nvector.push_front(10);\nvector.push_front(9);\n\nvector.as_mut_slices().0[0] = 42;\nvector.as_mut_slices().1[0] = 24;\nassert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));"]}},{"name":"pub fn len(&self) -> usize","details":{"description":["Returns the number of elements in the VecDeque."],"example":["use std::collections::VecDeque;\n\nlet mut v = VecDeque::new();\nassert_eq!(v.len(), 0);\nv.push_back(1);\nassert_eq!(v.len(), 1);"]}},{"name":"pub fn is_empty(&self) -> bool","details":{"description":["Returns true if the VecDeque is empty."],"example":["use std::collections::VecDeque;\n\nlet mut v = VecDeque::new();\nassert!(v.is_empty());\nv.push_front(1);\nassert!(!v.is_empty());"]}},{"name":"pub fn drain<R>(&mut self, range: R) -> Drain<T> where R: RangeBounds<usize>","details":{"description":["Create a draining iterator that removes the specified range in the VecDeque and yields the removed items.","Note 1: The element range is removed even if the iterator is not consumed until the end.","Note 2: It is unspecified how many elements are removed from the deque, if the Drain value is not dropped, but the borrow it holds expires (eg. due to mem::forget).","Panics","Panics if the starting point is greater than the end point or if the end point is greater than the length of the vector."],"example":["use std::collections::VecDeque;\n\nlet mut v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\nlet drained = v.drain(2..).collect::<VecDeque<_>>();\nassert_eq!(drained, [3]);\nassert_eq!(v, [1, 2]);\n\n// A full range clears all contents\nv.drain(..);\nassert!(v.is_empty());"]}},{"name":"pub fn clear(&mut self)","details":{"description":["Clears the VecDeque, removing all values."],"example":["use std::collections::VecDeque;\n\nlet mut v = VecDeque::new();\nv.push_back(1);\nv.clear();\nassert!(v.is_empty());"]}},{"name":"pub fn contains(&self, x: &T) -> bool where T: PartialEq<T>","details":{"description":["Returns true if the VecDeque contains an element equal to the given value."],"example":["use std::collections::VecDeque;\n\nlet mut vector: VecDeque<u32> = VecDeque::new();\n\nvector.push_back(0);\nvector.push_back(1);\n\nassert_eq!(vector.contains(&1), true);\nassert_eq!(vector.contains(&10), false);"]}},{"name":"pub fn front(&self) -> Option<&T>","details":{"description":["Provides a reference to the front element, or None if the VecDeque is empty."],"example":["use std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.front(), Some(&1));"]}},{"name":"pub fn front_mut(&mut self) -> Option<&mut T>","details":{"description":["Provides a mutable reference to the front element, or None if the VecDeque is empty."],"example":["use std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front_mut(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.front_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.front(), Some(&9));"]}},{"name":"pub fn back(&self) -> Option<&T>","details":{"description":["Provides a reference to the back element, or None if the VecDeque is empty."],"example":["use std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.back(), Some(&2));"]}},{"name":"pub fn back_mut(&mut self) -> Option<&mut T>","details":{"description":["Provides a mutable reference to the back element, or None if the VecDeque is empty."],"example":["use std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.back_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.back(), Some(&9));"]}},{"name":"pub fn pop_front(&mut self) -> Option<T>","details":{"description":["Removes the first element and returns it, or None if the VecDeque is empty."],"example":["use std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_back(1);\nd.push_back(2);\n\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);"]}},{"name":"pub fn push_front(&mut self, value: T)","details":{"description":["Prepends an element to the VecDeque."],"example":["use std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_front(1);\nd.push_front(2);\nassert_eq!(d.front(), Some(&2));"]}},{"name":"pub fn push_back(&mut self, value: T)","details":{"description":["Appends an element to the back of the VecDeque."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(3, *buf.back().unwrap());"]}},{"name":"pub fn pop_back(&mut self) -> Option<T>","details":{"description":["Removes the last element from the VecDeque and returns it, or None if it is empty."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.pop_back(), None);\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(buf.pop_back(), Some(3));"]}},{"name":"pub fn swap_remove_back(&mut self, index: usize) -> Option<T>","details":{"description":["Removes an element from anywhere in the VecDeque and returns it, replacing it with the last element.","This does not preserve ordering, but is O(1).","Returns None if index is out of bounds.","Element at index 0 is the front of the queue."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_back(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_back(0), Some(1));\nassert_eq!(buf, [3, 2]);"]}},{"name":"pub fn swap_remove_front(&mut self, index: usize) -> Option<T>","details":{"description":["Removes an element from anywhere in the VecDeque and returns it, replacing it with the first element.","This does not preserve ordering, but is O(1).","Returns None if index is out of bounds.","Element at index 0 is the front of the queue."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_front(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_front(2), Some(3));\nassert_eq!(buf, [2, 1]);"]}},{"name":"pub fn insert(&mut self, index: usize, value: T)","details":{"description":["Inserts an element at index within the VecDeque, shifting all elements with indices greater than or equal to index towards the back.","Element at index 0 is the front of the queue.","Panics","Panics if index is greater than VecDeque's length"],"example":["use std::collections::VecDeque;\n\nlet mut vec_deque = VecDeque::new();\nvec_deque.push_back('a');\nvec_deque.push_back('b');\nvec_deque.push_back('c');\nassert_eq!(vec_deque, &['a', 'b', 'c']);\n\nvec_deque.insert(1, 'd');\nassert_eq!(vec_deque, &['a', 'd', 'b', 'c']);"]}},{"name":"pub fn remove(&mut self, index: usize) -> Option<T>","details":{"description":["Removes and returns the element at index from the VecDeque. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns None if index is out of bounds.","Element at index 0 is the front of the queue."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.remove(1), Some(2));\nassert_eq!(buf, [1, 3]);"]}},{"name":"pub fn split_off(&mut self, at: usize) -> VecDeque<T>","details":{"description":["Splits the VecDeque into two at the given index.","Returns a newly allocated VecDeque. self contains elements [0, at), and the returned VecDeque contains elements [at, len).","Note that the capacity of self does not change.","Element at index 0 is the front of the queue.","Panics","Panics if at > len."],"example":["use std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\nlet buf2 = buf.split_off(1);\nassert_eq!(buf, [1]);\nassert_eq!(buf2, [2, 3]);"]}},{"name":"pub fn append(&mut self, other: &mut VecDeque<T>)","details":{"description":["Moves all the elements of other into Self, leaving other empty.","Panics","Panics if the new number of elements in self overflows a usize."],"example":["use std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = vec![1, 2].into_iter().collect();\nlet mut buf2: VecDeque<_> = vec![3, 4].into_iter().collect();\nbuf.append(&mut buf2);\nassert_eq!(buf, [1, 2, 3, 4]);\nassert_eq!(buf2, []);"]}},{"name":"pub fn retain<F>(&mut self, f: F) where F: FnMut(&T) -> bool","details":{"description":["Retains only the elements specified by the predicate.","In other words, remove all elements e such that f(&e) returns false. This method operates in place and preserves the order of the retained elements."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..5);\nbuf.retain(|&x| x%2 == 0);\nassert_eq!(buf, [2, 4]);"]}},{"name":"pub fn resize(&mut self, new_len: usize, value: T)","details":{"description":["Modifies the VecDeque in-place so that len() is equal to new_len, either by removing excess elements from the back or by appending clones of value to the back."],"example":["use std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\n\nbuf.resize(2, 0);\nassert_eq!(buf, [5, 10]);\n\nbuf.resize(5, 20);\nassert_eq!(buf, [5, 10, 20, 20, 20]);"]}}]}