{"stability":{"stable since":"1.0.0"},"apiName":"std::clone::Clone","apiType":"trait","apiDocumentation":{"apiDescription":["A common trait for the ability to explicitly duplicate an object.","Differs from Copy in that Copy is implicit and extremely inexpensive, while Clone is always explicit and may or may not be expensive. In order to enforce these characteristics, Rust does not allow you to reimplement Copy, but you may reimplement Clone and run arbitrary code.","Since Clone is more general than Copy, you can automatically make anything Copy be Clone as well.","Derivable","This trait can be used with #[derive] if all fields are Clone. The derived implementation of clone calls clone on each field.","How can I implement Clone?","Types that are Copy should have a trivial implementation of Clone. More formally: if T: Copy, x: T, and y: &T, then let x = y.clone(); is equivalent to let x = *y;. Manual implementations should be careful to uphold this invariant; however, unsafe code must not rely on it to ensure memory safety.","An example is an array holding more than 32 elements of a type that is Clone; the standard library only implements Clone up until arrays of size 32. In this case, the implementation of Clone cannot be derived, but can be implemented as:","#[derive(Copy)] struct Stats { frequencies: [i32; 100], } impl Clone for Stats { fn clone(&self) -> Stats { *self } }","Additional implementors","In addition to the implementors listed below, the following types also implement Clone:","Function item types (i.e. the distinct types defined for each function) Function pointer types (e.g. fn() -> i32) Array types, for all sizes, if the item type also implements Clone (e.g. [i32; 123456]) Tuple types, if each component also implements Clone (e.g. (), (i32, bool)) Closure types, if they capture no value from the environment or if all such captured values implement Clone themselves. Note that variables captured by shared reference always implement Clone (even if the referent doesn't), while variables captured by mutable reference never implement Clone."]},"trait required methods":[{"name":"[+] Expand attributes#[must_use = \"cloning is often expensive and is not expected to have side effects\"] fn clone(&self) -> Self","details":{"description":"Returns a copy of the value.","example":["let hello = \"Hello\"; // &str implements Clone\n\nassert_eq!(\"Hello\", hello.clone());"]}}],"trait provided methods":[{"name":"fn clone_from(&mut self, source: &Self)","details":{"description":"Performs copy-assignment from source."}}]}