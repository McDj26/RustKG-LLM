{"stability":{"stable since":"1.0.0"},"apiName":"std::str::FromStr","apiType":"trait","apiDocumentation":{"apiDescription":["A trait to abstract the idea of creating a new instance of a type from a string.","FromStr's from_str method is often used implicitly, through str's parse method. See parse's documentation for examples."],"examples":["Basic implementation of FromStr on an example Point type:","use std::str::FromStr;\nuse std::num::ParseIntError;\n\n#[derive(Debug, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32\n}\n\nimpl FromStr for Point {\n    type Err = ParseIntError;\n\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\n        let coords: Vec<&str> = s.trim_matches(|p| p == '(' || p == ')' )\n                                 .split(',')\n                                 .collect();\n\n        let x_fromstr = coords[0].parse::<i32>()?;\n        let y_fromstr = coords[1].parse::<i32>()?;\n\n        Ok(Point { x: x_fromstr, y: y_fromstr })\n    }\n}\n\nlet p = Point::from_str(\"(1,2)\");\nassert_eq!(p.unwrap(), Point{ x: 1, y: 2} )"]},"trait required methods":[{"name":"fn from_str(s: &str) -> Result<Self, Self::Err>","details":{"description":"Parses a string s to return a value of this type.","example":["Basic usage with i32, a type that implements FromStr:","use std::str::FromStr;\n\nlet s = \"5\";\nlet x = i32::from_str(s).unwrap();\n\nassert_eq!(5, x);"]}}]}