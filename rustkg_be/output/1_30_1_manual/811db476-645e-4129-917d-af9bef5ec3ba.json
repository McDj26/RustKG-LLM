{"stability":{"stable since":"1.0.0"},"apiName":"std::path::PathBuf","apiType":"struct","apiDocumentation":{"apiDescription":["An owned, mutable path (akin to String).","This type provides methods like push and set_extension that mutate the path in place. It also implements Deref to Path, meaning that all methods on Path slices are available on PathBuf values as well.","More details about the overall approach can be found in the module documentation."],"examples":["You can use push to build up a PathBuf from\ncomponents:","use std::path::PathBuf;\n\nlet mut path = PathBuf::new();\n\npath.push(r\"C:\\\");\npath.push(\"windows\");\npath.push(\"system32\");\n\npath.set_extension(\"dll\");","However, push is best used for dynamic situations. This is a better way\nto do this when you know all of the components ahead of time:","use std::path::PathBuf;\n\nlet path: PathBuf = [r\"C:\\\", \"windows\", \"system32.dll\"].iter().collect();","We can still do better than this! Since these are all strings, we can use\nFrom::from:","use std::path::PathBuf;\n\nlet path = PathBuf::from(r\"C:\\windows\\system32.dll\");","Which method works best depends on what kind of situation you're in."]},"trait implementations":[{"name":"impl std::clone::Clone for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::convert::From<std::boxed::Box<std::path::Path>> for std::path::PathBuf","stable since":"1.18.0"},{"name":"impl std::convert::From<std::path::PathBuf> for std::boxed::Box<std::path::Path>","stable since":"1.20.0"},{"name":"impl<'a, T: ?std::marker::Sized + std::convert::AsRef<std::ffi::OsStr>> std::convert::From<&'a T> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::convert::From<std::ffi::OsString> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::convert::From<std::path::PathBuf> for std::ffi::OsString","stable since":"1.14.0"},{"name":"impl std::convert::From<std::string::String> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl<P: std::convert::AsRef<std::path::Path>> std::iter::FromIterator<P> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl<P: std::convert::AsRef<std::path::Path>> std::iter::Extend<P> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::ops::Deref for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::borrow::Borrow<std::path::Path> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::default::Default for std::path::PathBuf","stable since":"1.17.0"},{"name":"impl<'a> std::convert::From<std::path::PathBuf> for std::borrow::Cow<'a, std::path::Path>","stable since":"1.6.0"},{"name":"impl<'a> std::convert::From<&'a std::path::PathBuf> for std::borrow::Cow<'a, std::path::Path>","stable since":"1.28.0"},{"name":"impl<'a> std::convert::From<std::borrow::Cow<'a, std::path::Path>> for std::path::PathBuf","stable since":"1.28.0"},{"name":"impl std::convert::From<std::path::PathBuf> for std::sync::Arc<std::path::Path>","stable since":"1.24.0"},{"name":"impl std::convert::From<std::path::PathBuf> for std::rc::Rc<std::path::Path>","stable since":"1.24.0"},{"name":"impl std::cmp::PartialEq for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::convert::AsRef<std::ffi::OsStr> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::convert::AsRef<std::path::Path> for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl<'a> std::iter::IntoIterator for &'a std::path::PathBuf","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::Path> for std::path::PathBuf","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for std::path::Path","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::Path> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for std::path::Path","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<&'a std::path::Path> for std::path::PathBuf","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for &'a std::path::Path","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<&'a std::path::Path> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for &'a std::path::Path","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for std::borrow::Cow<'a, std::path::Path>","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::borrow::Cow<'a, std::path::Path>> for std::path::PathBuf","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for std::borrow::Cow<'a, std::path::Path>","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::borrow::Cow<'a, std::path::Path>> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsStr> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsStr> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<&'a std::ffi::OsStr> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for &'a std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<&'a std::ffi::OsStr> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for &'a std::ffi::OsStr","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::borrow::Cow<'a, std::ffi::OsStr>> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for std::borrow::Cow<'a, std::ffi::OsStr>","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::borrow::Cow<'a, std::ffi::OsStr>> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for std::borrow::Cow<'a, std::ffi::OsStr>","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::ffi::OsString> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialEq<std::path::PathBuf> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::ffi::OsString> for std::path::PathBuf","stable since":"1.8.0"},{"name":"impl<'a, 'b> std::cmp::PartialOrd<std::path::PathBuf> for std::ffi::OsString","stable since":"1.8.0"},{"name":"impl std::marker::Send for std::path::PathBuf","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::path::PathBuf","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> PathBuf","details":{"description":["Allocates an empty PathBuf."],"example":["use std::path::PathBuf;\n\nlet path = PathBuf::new();"]}},{"name":"pub fn as_path(&self) -> &Path","details":{"description":["Coerces to a Path slice."],"example":["use std::path::{Path, PathBuf};\n\nlet p = PathBuf::from(\"/test\");\nassert_eq!(Path::new(\"/test\"), p.as_path());"]}},{"name":"pub fn push<P: AsRef<Path>>(&mut self, path: P)","details":{"description":["Extends self with path.","If path is absolute, it replaces the current path.","On Windows:","if path has a root but no prefix (e.g. \\windows), it replaces everything except for the prefix (if any) of self. if path has a prefix but no root, it replaces self."],"example":["Pushing a relative path extends the existing path:","use std::path::PathBuf;\n\nlet mut path = PathBuf::from(\"/tmp\");\npath.push(\"file.bk\");\nassert_eq!(path, PathBuf::from(\"/tmp/file.bk\"));","Pushing an absolute path replaces the existing path:","use std::path::PathBuf;\n\nlet mut path = PathBuf::from(\"/tmp\");\npath.push(\"/etc\");\nassert_eq!(path, PathBuf::from(\"/etc\"));"]}},{"name":"pub fn pop(&mut self) -> bool","details":{"description":["Truncates self to self.parent.","Returns false and does nothing if self.file_name is None. Otherwise, returns true."],"example":["use std::path::{Path, PathBuf};\n\nlet mut p = PathBuf::from(\"/test/test.rs\");\n\np.pop();\nassert_eq!(Path::new(\"/test\"), p);\np.pop();\nassert_eq!(Path::new(\"/\"), p);"]}},{"name":"pub fn set_file_name<S: AsRef<OsStr>>(&mut self, file_name: S)","details":{"description":["Updates self.file_name to file_name.","If self.file_name was None, this is equivalent to pushing file_name.","Otherwise it is equivalent to calling pop and then pushing file_name. The new path will be a sibling of the original path. (That is, it will have the same parent.)"],"example":["use std::path::PathBuf;\n\nlet mut buf = PathBuf::from(\"/\");\nassert!(buf.file_name() == None);\nbuf.set_file_name(\"bar\");\nassert!(buf == PathBuf::from(\"/bar\"));\nassert!(buf.file_name().is_some());\nbuf.set_file_name(\"baz.txt\");\nassert!(buf == PathBuf::from(\"/baz.txt\"));"]}},{"name":"pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool","details":{"description":["Updates self.extension to extension.","Returns false and does nothing if self.file_name is None, returns true and updates the extension otherwise.","If self.extension is None, the extension is added; otherwise it is replaced."],"example":["use std::path::{Path, PathBuf};\n\nlet mut p = PathBuf::from(\"/feel/the\");\n\np.set_extension(\"force\");\nassert_eq!(Path::new(\"/feel/the.force\"), p.as_path());\n\np.set_extension(\"dark_side\");\nassert_eq!(Path::new(\"/feel/the.dark_side\"), p.as_path());"]}},{"name":"pub fn into_os_string(self) -> OsString","details":{"description":["Consumes the PathBuf, yielding its internal OsString storage."],"example":["use std::path::PathBuf;\n\nlet p = PathBuf::from(\"/the/head\");\nlet os_str = p.into_os_string();"]}},{"name":"pub fn into_boxed_path(self) -> Box<Path>","details":{"description":["Converts this PathBuf into a boxed Path."]}}]}