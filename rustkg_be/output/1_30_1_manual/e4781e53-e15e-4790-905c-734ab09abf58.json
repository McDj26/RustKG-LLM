{"stability":{"stable since":"1.8.0"},"apiName":"std::time::Instant","apiType":"struct","apiDocumentation":{"apiDescription":["A measurement of a monotonically nondecreasing clock. Opaque and useful only with Duration.","Instants are always guaranteed to be no less than any previously measured instant when created, and are often useful for tasks such as measuring benchmarks or timing how long an operation takes.","Note, however, that instants are not guaranteed to be steady. In other words, each tick of the underlying clock may not be the same length (e.g. some seconds may be longer than others). An instant may jump forwards or experience time dilation (slow down or speed up), but it will never go backwards.","Instants are opaque types that can only be compared to one another. There is no method to get \"the number of seconds\" from an instant. Instead, it only allows measuring the duration between two instants (or comparing two instants).","The size of an Instant struct may vary depending on the target operating system.","Example:","use std::time::{Duration, Instant}; use std::thread::sleep; fn main() { let now = Instant::now(); // we sleep for 2 seconds sleep(Duration::new(2, 0)); // it prints '2' println!(\"{}\", now.elapsed().as_secs()); }"]},"trait implementations":[{"name":"impl std::marker::Copy for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::ops::Add<std::time::Duration> for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::ops::AddAssign<std::time::Duration> for std::time::Instant","stable since":"1.9.0"},{"name":"impl std::ops::Sub<std::time::Duration> for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::ops::SubAssign<std::time::Duration> for std::time::Instant","stable since":"1.9.0"},{"name":"impl std::ops::Sub<std::time::Instant> for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::time::Instant","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::time::Instant","stable since":"1.0.0"}],"methods":[{"name":"pub fn now() -> Instant","details":{"description":["Returns an instant corresponding to \"now\"."],"example":["use std::time::Instant;\n\nlet now = Instant::now();"]}},{"name":"pub fn duration_since(&self, earlier: Instant) -> Duration","details":{"description":["Returns the amount of time elapsed from another instant to this one.","Panics","This function will panic if earlier is later than self."],"example":["use std::time::{Duration, Instant};\nuse std::thread::sleep;\n\nlet now = Instant::now();\nsleep(Duration::new(1, 0));\nlet new_now = Instant::now();\nprintln!(\"{:?}\", new_now.duration_since(now));"]}},{"name":"pub fn elapsed(&self) -> Duration","details":{"description":["Returns the amount of time elapsed since this instant was created.","Panics","This function may panic if the current time is earlier than this instant, which is something that can happen if an Instant is produced synthetically."],"example":["use std::thread::sleep;\nuse std::time::{Duration, Instant};\n\nlet instant = Instant::now();\nlet three_secs = Duration::from_secs(3);\nsleep(three_secs);\nassert!(instant.elapsed() >= three_secs);"]}}]}