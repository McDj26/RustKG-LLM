{"stability":{"stable since":"1.2.0"},"apiName":"std::fmt::DebugMap","apiType":"struct","apiDocumentation":{"apiDescription":["A struct to help with fmt::Debug implementations.","This is useful when you wish to output a formatted map as a part of your Debug::fmt implementation.","This can be constructed by the Formatter::debug_map method."],"examples":["use std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n        fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n    }\n}\n\n// prints \"{\"A\": 10, \"B\": 11}\"\nprintln!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));"]},"trait implementations":[{"name":"impl<'a, 'b> !std::marker::Send for std::fmt::DebugMap<'a, 'b>","stable since":"1.0.0"},{"name":"impl<'a, 'b> !std::marker::Sync for std::fmt::DebugMap<'a, 'b>","stable since":"1.0.0"}],"methods":[{"name":"pub fn entry(&mut self, key: &Debug, value: &Debug) -> &mut DebugMap<'a, 'b>","details":{"description":["Adds a new entry to the map output."]}},{"name":"pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b> where I: IntoIterator<Item = (K, V)>, K: Debug, V: Debug","details":{"description":["Adds the contents of an iterator of entries to the map output."]}},{"name":"pub fn finish(&mut self) -> Result<(), Error>","details":{"description":["Finishes output and returns any error encountered."]}}]}