{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"},"apiName":"std::task::LocalWaker","apiType":"struct","apiDocumentation":{"apiDescription":["A LocalWaker is a handle for waking up a task by notifying its executor that it is ready to be run.","This is similar to the Waker type, but cannot be sent across threads. Task executors can use this type to implement more optimized singlethreaded wakeup behavior."]},"trait implementations":[{"name":"impl std::clone::Clone for std::task::LocalWaker","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::task::LocalWaker","stable since":"1.0.0"},{"name":"impl std::convert::From<std::task::LocalWaker> for std::task::Waker","stable since":"1.0.0"},{"name":"impl std::ops::Drop for std::task::LocalWaker","stable since":"1.0.0"},{"name":"impl std::pin::Unpin for std::task::LocalWaker","stable since":"1.0.0"},{"name":"impl !std::marker::Sync for std::task::LocalWaker","stable since":"1.0.0"},{"name":"impl !std::marker::Send for std::task::LocalWaker","stable since":"1.0.0"}],"methods":[{"name":"pub unsafe fn new(inner: NonNull<UnsafeWake + 'static>) -> LocalWaker","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn wake(&self)","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn will_wake(&self, other: &LocalWaker) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn will_wake_nonlocal(&self, other: &Waker) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]}]}