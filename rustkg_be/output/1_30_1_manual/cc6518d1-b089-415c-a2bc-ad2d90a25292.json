{"stability":{"stable since":"1.0.0"},"apiName":"std::string::FromUtf8Error","apiType":"struct","apiDocumentation":{"apiDescription":["A possible error value when converting a String from a UTF-8 byte vector.","This type is the error type for the from_utf8 method on String. It is designed in such a way to carefully avoid reallocations: the into_bytes method will give back the byte vector that was used in the conversion attempt.","The Utf8Error type provided by std::str represents an error that may occur when converting a slice of u8s to a &str. In this sense, it's an analogue to FromUtf8Error, and you can get one from a FromUtf8Error through the utf8_error method."],"examples":["Basic usage:","// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert!(value.is_err());\nassert_eq!(vec![0, 159], value.unwrap_err().into_bytes());"]},"trait implementations":[{"name":"impl std::fmt::Display for std::string::FromUtf8Error","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::string::FromUtf8Error","stable since":"1.0.0"},{"name":"impl std::error::Error for std::string::FromUtf8Error","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::string::FromUtf8Error","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::string::FromUtf8Error","stable since":"1.0.0"}],"methods":[{"name":"pub fn as_bytes(&self) -> &[u8]","details":{"description":["Returns a slice of u8s bytes that were attempted to convert to a String."],"example":["Basic usage:","// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert_eq!(&[0, 159], value.unwrap_err().as_bytes());"]}},{"name":"pub fn into_bytes(self) -> Vec<u8>","details":{"description":["Returns the bytes that were attempted to convert to a String.","This method is carefully constructed to avoid allocation. It will consume the error, moving out the bytes, so that a copy of the bytes does not need to be made."],"example":["Basic usage:","// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert_eq!(vec![0, 159], value.unwrap_err().into_bytes());"]}},{"name":"pub fn utf8_error(&self) -> Utf8Error","details":{"description":["Fetch a Utf8Error to get more details about the conversion failure.","The Utf8Error type provided by std::str represents an error that may occur when converting a slice of u8s to a &str. In this sense, it's an analogue to FromUtf8Error. See its documentation for more details on using it."],"example":["Basic usage:","// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet error = String::from_utf8(bytes).unwrap_err().utf8_error();\n\n// the first byte is invalid here\nassert_eq!(1, error.valid_up_to());"]}}]}