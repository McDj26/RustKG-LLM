{"stability":{"stable since":"1.0.0"},"apiName":"std::io::Take","apiType":"struct","apiDocumentation":{"apiDescription":["Reader adaptor which limits the bytes read from an underlying reader.","This struct is generally created by calling take on a reader. Please see the documentation of take for more details."]},"trait implementations":[{"name":"impl<T: std::fmt::Debug> std::fmt::Debug for std::io::Take<T>","stable since":"1.0.0"},{"name":"impl<T: std::io::Read> std::io::Read for std::io::Take<T>","stable since":"1.0.0"},{"name":"impl<T: std::io::BufRead> std::io::BufRead for std::io::Take<T>","stable since":"1.0.0"},{"name":"impl<T> std::marker::Send for std::io::Take<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T> std::marker::Sync for std::io::Take<T> where T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn limit(&self) -> u64","details":{"description":["Returns the number of bytes that can be read before this instance will return EOF.","Note","This instance may reach EOF after reading fewer bytes than indicated by this method if the underlying Read instance reaches EOF."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n\n    // read at most five bytes\n    let handle = f.take(5);\n\n    println!(\"limit: {}\", handle.limit());\n    Ok(())\n}"]}},{"name":"pub fn set_limit(&mut self, limit: u64)","details":{"description":["Sets the number of bytes that can be read before this instance will return EOF. This is the same as constructing a new Take instance, so the amount of bytes read and the previous limit value don't matter when calling this method."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n\n    // read at most five bytes\n    let mut handle = f.take(5);\n    handle.set_limit(10);\n\n    assert_eq!(handle.limit(), 10);\n    Ok(())\n}"]}},{"name":"pub fn into_inner(self) -> T","details":{"description":["Consumes the Take, returning the wrapped reader."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut file = File::open(\"foo.txt\")?;\n\n    let mut buffer = [0; 5];\n    let mut handle = file.take(5);\n    handle.read(&mut buffer)?;\n\n    let file = handle.into_inner();\n    Ok(())\n}"]}},{"name":"pub fn get_ref(&self) -> &T","details":{"description":["Gets a reference to the underlying reader."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut file = File::open(\"foo.txt\")?;\n\n    let mut buffer = [0; 5];\n    let mut handle = file.take(5);\n    handle.read(&mut buffer)?;\n\n    let file = handle.get_ref();\n    Ok(())\n}"]}},{"name":"pub fn get_mut(&mut self) -> &mut T","details":{"description":["Gets a mutable reference to the underlying reader.","Care should be taken to avoid modifying the internal I/O state of the underlying reader as doing so may corrupt the internal limit of this Take."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut file = File::open(\"foo.txt\")?;\n\n    let mut buffer = [0; 5];\n    let mut handle = file.take(5);\n    handle.read(&mut buffer)?;\n\n    let file = handle.get_mut();\n    Ok(())\n}"]}}]}