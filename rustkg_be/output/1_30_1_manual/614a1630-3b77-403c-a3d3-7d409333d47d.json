{"stability":{"stable since":"1.4.0"},"apiName":"std::rc::Weak","apiType":"struct","apiDocumentation":{"apiDescription":["Weak is a version of Rc that holds a non-owning reference to the managed value. The value is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>.","Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped, and Weak itself makes no guarantees about the value still being present and may return None when upgraded.","A Weak pointer is useful for keeping a temporary reference to the value within Rc without extending its lifetime. It is also used to prevent circular references between Rc pointers, since mutual owning references would never allow either Rc to be dropped. For example, a tree could have strong Rc pointers from parent nodes to children, and Weak pointers from children back to their parents.","The typical way to obtain a Weak pointer is to call Rc::downgrade."]},"trait implementations":[{"name":"impl<T> std::ops::Drop for std::rc::Weak<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> !std::marker::Sync for std::rc::Weak<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> !std::marker::Send for std::rc::Weak<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::default::Default for std::rc::Weak<T>","stable since":"1.10.0"},{"name":"impl<T> std::clone::Clone for std::rc::Weak<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Debug for std::rc::Weak<T> where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T, U> std::ops::CoerceUnsized<std::rc::Weak<U>> for std::rc::Weak<T> where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> Weak<T>","details":{"description":["Constructs a new Weak<T>, without allocating any memory. Calling [upgrade][Weak::upgrade] on the return value always gives None."],"example":["use std::rc::Weak;\n\nlet empty: Weak<i64> = Weak::new();\nassert!(empty.upgrade().is_none());"]}},{"name":"pub fn upgrade(&self) -> Option<Rc<T>>","details":{"description":["Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful.","Returns None if the value has since been dropped."],"example":["use std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet weak_five = Rc::downgrade(&five);\n\nlet strong_five: Option<Rc<_>> = weak_five.upgrade();\nassert!(strong_five.is_some());\n\n// Destroy all strong pointers.\ndrop(strong_five);\ndrop(five);\n\nassert!(weak_five.upgrade().is_none());"]}}]}