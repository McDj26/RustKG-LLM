{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"},"apiName":"std::future::FutureObj","apiType":"struct","apiDocumentation":{"apiDescription":["A custom trait object for polling futures, roughly akin to Box<dyn Future<Output = T> + Send + 'a>.","This custom trait object was introduced for two reasons:","Currently it is not possible to take dyn Trait by value and Box<dyn Trait> is not available in no_std contexts. The Future trait is currently not object safe: The Future::poll method makes uses the arbitrary self types feature and traits in which this feature is used are currently not object safe due to current compiler limitations. (See tracking issue for arbitrary self types for more information #44874)"]},"trait implementations":[{"name":"impl<'a, T> std::fmt::Debug for std::future::FutureObj<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::convert::From<std::future::FutureObj<'a, T>> for std::future::LocalFutureObj<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::pin::Unpin for std::future::FutureObj<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::future::Future for std::future::FutureObj<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::marker::Send for std::future::FutureObj<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, F> std::convert::From<std::boxed::Box<F>> for std::future::FutureObj<'a, ()> where F: 'a + std::marker::Send + std::future::Future<Output = ()>","stable since":"1.0.0"},{"name":"impl<'a, F> std::convert::From<std::pin::PinBox<F>> for std::future::FutureObj<'a, ()> where F: 'a + std::marker::Send + std::future::Future<Output = ()>","stable since":"1.0.0"},{"name":"impl<'a, T> !std::marker::Sync for std::future::FutureObj<'a, T>","stable since":"1.0.0"}],"methods":[{"name":"pub fn new<F>(f: F) -> FutureObj<'a, T> where F: Send + UnsafeFutureObj<'a, T>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]}]}