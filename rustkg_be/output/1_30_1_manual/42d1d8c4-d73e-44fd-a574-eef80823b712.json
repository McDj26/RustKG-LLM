{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::btree_map::Entry","apiType":"enum","apiDocumentation":{"apiDescription":["A view into a single entry in a map, which may either be vacant or occupied.","This enum is constructed from the entry method on BTreeMap."]},"enum variants":["Vacant(VacantEntry<'a, K, V>)","A vacant entry.\n","Occupied(OccupiedEntry<'a, K, V>)","An occupied entry.\n"],"trait implementations":[{"name":"impl<'a, K, V> std::fmt::Debug for std::collections::btree_map::Entry<'a, K, V> where K: 'a + std::cmp::Ord + std::fmt::Debug, V: 'a + std::fmt::Debug","stable since":"1.12.0"},{"name":"impl<'a, K, V> std::marker::Send for std::collections::btree_map::Entry<'a, K, V> where K: std::marker::Send, V: std::marker::Send","stable since":"1.0.0"},{"name":"impl<'a, K, V> std::marker::Sync for std::collections::btree_map::Entry<'a, K, V> where K: std::marker::Sync, V: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn or_insert(self, default: V) -> &'a mut V","details":{"description":["Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry."],"example":["use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);"]}},{"name":"pub fn or_insert_with<F>(self, default: F) -> &'a mut V where F: FnOnce() -> V","details":{"description":["Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry."],"example":["use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, String> = BTreeMap::new();\nlet s = \"hoho\".to_string();\n\nmap.entry(\"poneyland\").or_insert_with(|| s);\n\nassert_eq!(map[\"poneyland\"], \"hoho\".to_string());"]}},{"name":"pub fn key(&self) -> &K","details":{"description":["Returns a reference to this entry's key."],"example":["use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");"]}},{"name":"pub fn and_modify<F>(self, f: F) -> Entry<'a, K, V> where F: FnOnce(&mut V)","details":{"description":["Provides in-place mutable access to an occupied entry before any potential inserts into the map."],"example":["use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 43);"]}},{"name":"pub fn or_default(self) -> &'a mut V","details":{"description":["Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry."],"example":["use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();\nmap.entry(\"poneyland\").or_default();\n\nassert_eq!(map[\"poneyland\"], None);"]}}]}