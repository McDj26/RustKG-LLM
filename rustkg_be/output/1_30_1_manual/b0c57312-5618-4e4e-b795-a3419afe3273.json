{"stability":{"stable since":"1.0.0"},"apiName":"std::include","apiType":"macro","apiDocumentation":{"apiDescription":["Parse a file as an expression or an item according to the context.","The file is located relative to the current file (similarly to how modules are found).","Using this macro is often a bad idea, because if the file is parsed as an expression, it is going to be placed in the surrounding code unhygienically. This could result in variables or functions being different from what the file expected if there are variables or functions that have the same name in the current file."],"examples":["Assume there are two files in the same directory with the following\ncontents:","File 'monkeys.in':","â“˜This example is not tested","['ğŸ™ˆ', 'ğŸ™Š', 'ğŸ™‰']\n    .iter()\n    .cycle()\n    .take(6)\n    .collect::<String>()","File 'main.rs':","â“˜This example is not tested","fn main() {\n    let my_string = include!(\"monkeys.in\");\n    assert_eq!(\"ğŸ™ˆğŸ™ŠğŸ™‰ğŸ™ˆğŸ™ŠğŸ™‰\", my_string);\n    println!(\"{}\", my_string);\n}","Compiling 'main.rs' and running the resulting binary will print\n\"ğŸ™ˆğŸ™ŠğŸ™‰ğŸ™ˆğŸ™ŠğŸ™‰\"."]}}