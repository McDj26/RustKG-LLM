{"stability":{"stable since":"1.0.0"},"apiName":"std::io::Chain","apiType":"struct","apiDocumentation":{"apiDescription":["Adaptor to chain together two readers.","This struct is generally created by calling chain on a reader. Please see the documentation of chain for more details."]},"trait implementations":[{"name":"impl<T: std::fmt::Debug, U: std::fmt::Debug> std::fmt::Debug for std::io::Chain<T, U>","stable since":"1.16.0"},{"name":"impl<T: std::io::Read, U: std::io::Read> std::io::Read for std::io::Chain<T, U>","stable since":"1.0.0"},{"name":"impl<T: std::io::BufRead, U: std::io::BufRead> std::io::BufRead for std::io::Chain<T, U>","stable since":"1.9.0"},{"name":"impl<T, U> std::marker::Send for std::io::Chain<T, U> where T: std::marker::Send, U: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T, U> std::marker::Sync for std::io::Chain<T, U> where T: std::marker::Sync, U: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn into_inner(self) -> (T, U)","details":{"description":["Consumes the Chain, returning the wrapped readers."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut foo_file = File::open(\"foo.txt\")?;\n    let mut bar_file = File::open(\"bar.txt\")?;\n\n    let chain = foo_file.chain(bar_file);\n    let (foo_file, bar_file) = chain.into_inner();\n    Ok(())\n}"]}},{"name":"pub fn get_ref(&self) -> (&T, &U)","details":{"description":["Gets references to the underlying readers in this Chain."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut foo_file = File::open(\"foo.txt\")?;\n    let mut bar_file = File::open(\"bar.txt\")?;\n\n    let chain = foo_file.chain(bar_file);\n    let (foo_file, bar_file) = chain.get_ref();\n    Ok(())\n}"]}},{"name":"pub fn get_mut(&mut self) -> (&mut T, &mut U)","details":{"description":["Gets mutable references to the underlying readers in this Chain.","Care should be taken to avoid modifying the internal I/O state of the underlying readers as doing so may corrupt the internal state of this Chain."],"example":["use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut foo_file = File::open(\"foo.txt\")?;\n    let mut bar_file = File::open(\"bar.txt\")?;\n\n    let mut chain = foo_file.chain(bar_file);\n    let (foo_file, bar_file) = chain.get_mut();\n    Ok(())\n}"]}}]}