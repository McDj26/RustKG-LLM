{"stability":{"stable since":"1.26.0"},"apiName":"std::ops::RangeToInclusive","apiType":"struct","apiDocumentation":{"apiDescription":["A range only bounded inclusively above (..=end).","The RangeToInclusive ..=end contains all values with x <= end. It cannot serve as an Iterator because it doesn't have a starting point."],"examples":["The ..=end syntax is a RangeToInclusive:","assert_eq!((..=5), std::ops::RangeToInclusive{ end: 5 });","It does not have an IntoIterator implementation, so you can't use it in a\nfor loop directly. This won't compile:","â“˜This example deliberately fails to compile","// error[E0277]: the trait bound `std::ops::RangeToInclusive<{integer}>:\n// std::iter::Iterator` is not satisfied\nfor i in ..=5 {\n    // ...\n}","When used as a slicing index, RangeToInclusive produces a slice of all\narray elements up to and including the index indicated by end.","let arr = [0, 1, 2, 3];\nassert_eq!(arr[ ..=2], [0,1,2  ]);  // RangeToInclusive\nassert_eq!(arr[1..=2], [  1,2  ]);"]},"trait implementations":[{"name":"impl std::slice::SliceIndex<str> for std::ops::RangeToInclusive<usize>","stable since":"1.0.0"},{"name":"impl<T> std::slice::SliceIndex<[T]> for std::ops::RangeToInclusive<usize>","stable since":"1.0.0"},{"name":"impl<Idx> std::hash::Hash for std::ops::RangeToInclusive<Idx> where Idx: std::hash::Hash","stable since":"1.0.0"},{"name":"impl<Idx> std::clone::Clone for std::ops::RangeToInclusive<Idx> where Idx: std::clone::Clone","stable since":"1.0.0"},{"name":"impl std::ops::IndexMut<std::ops::RangeToInclusive<usize>> for str","stable since":"1.0.0"},{"name":"impl std::ops::Index<std::ops::RangeToInclusive<usize>> for str","stable since":"1.0.0"},{"name":"impl<Idx> std::fmt::Debug for std::ops::RangeToInclusive<Idx> where Idx: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<Idx> std::cmp::Eq for std::ops::RangeToInclusive<Idx> where Idx: std::cmp::Eq","stable since":"1.0.0"},{"name":"impl<Idx> std::cmp::PartialEq<std::ops::RangeToInclusive<Idx>> for std::ops::RangeToInclusive<Idx> where Idx: std::cmp::PartialEq<Idx>","stable since":"1.0.0"},{"name":"impl<Idx> std::marker::Copy for std::ops::RangeToInclusive<Idx> where Idx: std::marker::Copy","stable since":"1.0.0"},{"name":"impl<T> std::ops::RangeBounds<T> for std::ops::RangeToInclusive<T>","stable since":"1.28.0"},{"name":"impl<'a, T> std::ops::RangeBounds<T> for std::ops::RangeToInclusive<&'a T>","stable since":"1.28.0"},{"name":"impl std::ops::IndexMut<std::ops::RangeToInclusive<usize>> for std::string::String","stable since":"1.0.0"},{"name":"impl std::ops::Index<std::ops::RangeToInclusive<usize>> for std::string::String","stable since":"1.0.0"},{"name":"impl<Idx> std::marker::Send for std::ops::RangeToInclusive<Idx> where Idx: std::marker::Send","stable since":"1.0.0"},{"name":"impl<Idx> std::marker::Sync for std::ops::RangeToInclusive<Idx> where Idx: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn contains<U>(&self, item: &U) -> bool where Idx: PartialOrd<U>, U: PartialOrd<Idx> + ?Sized","stability":["ðŸ”¬ This is a nightly-only experimental API.  (range_contains #32311)recently added as per RFC\n"]}]}