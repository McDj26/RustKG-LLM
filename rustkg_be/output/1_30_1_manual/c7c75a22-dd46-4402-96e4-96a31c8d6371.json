{"stability":{"stable since":"1.0.0"},"apiName":"std::sync::Condvar","apiType":"struct","apiDocumentation":{"apiDescription":["A Condition Variable","Condition variables represent the ability to block a thread such that it consumes no CPU time while waiting for an event to occur. Condition variables are typically associated with a boolean predicate (a condition) and a mutex. The predicate is always verified inside of the mutex before determining that a thread must block.","Functions in this module will block the current thread of execution and are bindings to system-provided condition variables where possible. Note that this module places one additional restriction over the system condition variables: each condvar can be used with precisely one mutex at runtime. Any attempt to use multiple mutexes on the same condition variable will result in a runtime panic. If this is not desired, then the unsafe primitives in sys do not have this restriction but may result in undefined behavior."],"examples":["use std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\n// Inside of our lock, spawn a new thread, and then wait for it to start.\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}"]},"trait implementations":[{"name":"impl std::fmt::Debug for std::sync::Condvar","stable since":"1.16.0"},{"name":"impl std::default::Default for std::sync::Condvar","stable since":"1.10.0"},{"name":"impl std::ops::Drop for std::sync::Condvar","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::sync::Condvar","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::sync::Condvar","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> Condvar","details":{"description":["Creates a new condition variable which is ready to be waited on and notified."],"example":["use std::sync::Condvar;\n\nlet condvar = Condvar::new();"]}},{"name":"pub fn wait<'a, T>( &self, guard: MutexGuard<'a, T>) -> LockResult<MutexGuard<'a, T>>","details":{"description":["Blocks the current thread until this condition variable receives a notification.","This function will atomically unlock the mutex specified (represented by guard) and block the current thread. This means that any calls to notify_one or notify_all which happen logically after the mutex is unlocked are candidates to wake this thread up. When this function call returns, the lock specified will have been re-acquired.","Note that this function is susceptible to spurious wakeups. Condition variables normally have a boolean predicate associated with them, and the predicate must always be checked each time this function returns to protect against spurious wakeups.","Errors","This function will return an error if the mutex being waited on is poisoned when this thread re-acquires the lock. For more information, see information about poisoning on the Mutex type.","Panics","This function will panic! if it is used with more than one mutex over time. Each condition variable is dynamically bound to exactly one mutex to ensure defined behavior across platforms. If this functionality is not desired, then unsafe primitives in sys are provided."],"example":["use std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// As long as the value inside the `Mutex` is false, we wait.\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}"]}},{"name":"pub fn wait_until<'a, T, F>( &self, guard: MutexGuard<'a, T>, condition: F) -> LockResult<MutexGuard<'a, T>> where F: FnMut(&mut T) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (wait_until #47960)"]},{"name":"pub fn wait_timeout_ms<'a, T>( &self, guard: MutexGuard<'a, T>, ms: u32) -> LockResult<(MutexGuard<'a, T>, bool)>","stability":["Deprecated since 1.6.0: replaced by std::sync::Condvar::wait_timeout\n"]},{"name":"pub fn wait_timeout<'a, T>( &self, guard: MutexGuard<'a, T>, dur: Duration) -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)>","details":{"description":["Waits on this condition variable for a notification, timing out after a specified duration.","The semantics of this function are equivalent to wait except that the thread will be blocked for roughly no longer than dur. This method should not be used for precise timing due to anomalies such as preemption or platform differences that may not cause the maximum amount of time waited to be precisely dur.","Note that the best effort is made to ensure that the time waited is measured with a monotonic clock, and not affected by the changes made to the system time. This function is susceptible to spurious wakeups. Condition variables normally have a boolean predicate associated with them, and the predicate must always be checked each time this function returns to protect against spurious wakeups. Additionally, it is typically desirable for the time-out to not exceed some duration in spite of spurious wakes, thus the sleep-duration is decremented by the amount slept. Alternatively, use the wait_timeout_until method to wait until a condition is met with a total time-out regardless of spurious wakes.","The returned WaitTimeoutResult value indicates if the timeout is known to have elapsed.","Like wait, the lock specified will be re-acquired when this function returns, regardless of whether the timeout elapsed or not."],"example":["use std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\nuse std::time::Duration;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// wait for the thread to start up\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// as long as the value inside the `Mutex` is false, we wait\nloop {\n    let result = cvar.wait_timeout(started, Duration::from_millis(10)).unwrap();\n    // 10 milliseconds have passed, or maybe the value changed!\n    started = result.0;\n    if *started == true {\n        // We received the notification and the value has been updated, we can leave.\n        break\n    }\n}"]}},{"name":"pub fn wait_timeout_until<'a, T, F>( &self, guard: MutexGuard<'a, T>, dur: Duration, condition: F) -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)> where F: FnMut(&mut T) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (wait_timeout_until #47960)"]},{"name":"pub fn notify_one(&self)","details":{"description":["Wakes up one blocked thread on this condvar.","If there is a blocked thread on this condition variable, then it will be woken up from its call to wait or wait_timeout. Calls to notify_one are not buffered in any way.","To wake up all threads, see notify_all."],"example":["use std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_one();\n});\n\n// Wait for the thread to start up.\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// As long as the value inside the `Mutex` is false, we wait.\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}"]}},{"name":"pub fn notify_all(&self)","details":{"description":["Wakes up all blocked threads on this condvar.","This method will ensure that any current waiters on the condition variable are awoken. Calls to notify_all() are not buffered in any way.","To wake up only one thread, see notify_one."],"example":["use std::sync::{Arc, Mutex, Condvar};\nuse std::thread;\n\nlet pair = Arc::new((Mutex::new(false), Condvar::new()));\nlet pair2 = pair.clone();\n\nthread::spawn(move|| {\n    let &(ref lock, ref cvar) = &*pair2;\n    let mut started = lock.lock().unwrap();\n    *started = true;\n    // We notify the condvar that the value has changed.\n    cvar.notify_all();\n});\n\n// Wait for the thread to start up.\nlet &(ref lock, ref cvar) = &*pair;\nlet mut started = lock.lock().unwrap();\n// As long as the value inside the `Mutex` is false, we wait.\nwhile !*started {\n    started = cvar.wait(started).unwrap();\n}"]}}]}