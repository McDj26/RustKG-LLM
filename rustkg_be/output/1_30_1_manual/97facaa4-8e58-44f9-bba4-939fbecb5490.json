{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (slice_concat_ext #27747)trait should not have to exist\n"},"apiName":"std::slice::SliceConcatExt","apiType":"trait","apiDocumentation":{"apiDescription":["An extension trait for concatenating slices","While this trait is unstable, the methods are stable. SliceConcatExt is included in the standard library prelude, so you can use join() and concat() as if they existed on [T] itself."]},"trait required methods":[{"name":"fn concat(&self) -> Self::Output","details":{"description":"Flattens a slice of T into a single value Self::Output.","example":["assert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");\nassert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);"]}},{"name":"fn join(&self, sep: &T) -> Self::Output","details":{"description":"Flattens a slice of T into a single value Self::Output, placing a\ngiven separator between each.","example":["assert_eq!([\"hello\", \"world\"].join(\" \"), \"hello world\");\nassert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);"]}},{"name":"fn connect(&self, sep: &T) -> Self::Output","stability":["Deprecated since 1.3.0: renamed to join\n"]}]}