{"stability":{"stable since":"1.0.0"},"apiName":"std::sync::PoisonError","apiType":"struct","apiDocumentation":{"apiDescription":["A type of error which can be returned whenever a lock is acquired.","Both Mutexes and RwLocks are poisoned whenever a thread fails while the lock is held. The precise semantics for when a lock is poisoned is documented on each lock, but once a lock is poisoned then all future acquisitions will return this error."],"examples":["use std::sync::{Arc, Mutex};\nuse std::thread;\n\nlet mutex = Arc::new(Mutex::new(1));\n\n// poison the mutex\nlet c_mutex = mutex.clone();\nlet _ = thread::spawn(move || {\n    let mut data = c_mutex.lock().unwrap();\n    *data = 2;\n    panic!();\n}).join();\n\nmatch mutex.lock() {\n    Ok(_) => unreachable!(),\n    Err(p_err) => {\n        let data = p_err.get_ref();\n        println!(\"recovered: {}\", data);\n    }\n};"]},"trait implementations":[{"name":"impl<T> std::fmt::Debug for std::sync::PoisonError<T>","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Display for std::sync::PoisonError<T>","stable since":"1.0.0"},{"name":"impl<T> std::error::Error for std::sync::PoisonError<T>","stable since":"1.0.0"},{"name":"impl<T> std::convert::From<std::sync::PoisonError<T>> for std::sync::TryLockError<T>","stable since":"1.0.0"},{"name":"impl<T> std::marker::Send for std::sync::PoisonError<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T> std::marker::Sync for std::sync::PoisonError<T> where T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(guard: T) -> PoisonError<T>","details":{"description":["Creates a PoisonError.","This is generally created by methods like Mutex::lock or RwLock::read."]}},{"name":"pub fn into_inner(self) -> T","details":{"description":["Consumes this error indicating that a lock is poisoned, returning the underlying guard to allow access regardless."],"example":["use std::collections::HashSet;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\n\nlet mutex = Arc::new(Mutex::new(HashSet::new()));\n\n// poison the mutex\nlet c_mutex = mutex.clone();\nlet _ = thread::spawn(move || {\n    let mut data = c_mutex.lock().unwrap();\n    data.insert(10);\n    panic!();\n}).join();\n\nlet p_err = mutex.lock().unwrap_err();\nlet data = p_err.into_inner();\nprintln!(\"recovered {} items\", data.len());"]}},{"name":"pub fn get_ref(&self) -> &T","details":{"description":["Reaches into this error indicating that a lock is poisoned, returning a reference to the underlying guard to allow access regardless."]}},{"name":"pub fn get_mut(&mut self) -> &mut T","details":{"description":["Reaches into this error indicating that a lock is poisoned, returning a mutable reference to the underlying guard to allow access regardless."]}}]}