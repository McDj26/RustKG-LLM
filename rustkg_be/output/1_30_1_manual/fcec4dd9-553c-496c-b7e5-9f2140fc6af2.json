{"stability":{"stable since":"1.0.0"},"apiName":"std::assert","apiType":"macro","apiDocumentation":{"apiDescription":["Ensure that a boolean expression is true at runtime.","This will invoke the panic! macro if the provided expression cannot be evaluated to true at runtime.","Uses","Assertions are always checked in both debug and release builds, and cannot be disabled. See debug_assert! for assertions that are not enabled in release builds by default.","Unsafe code relies on assert! to enforce run-time invariants that, if violated could lead to unsafety.","Other use-cases of assert! include testing and enforcing run-time invariants in safe code (whose violation cannot result in unsafety).","Custom Messages","This macro has a second form, where a custom panic message can be provided with or without arguments for formatting. See std::fmt for syntax for this form."],"examples":["// the panic message for these assertions is the stringified value of the\n// expression given.\nassert!(true);\n\nfn some_computation() -> bool { true } // a very simple function\n\nassert!(some_computation());\n\n// assert with a custom message\nlet x = true;\nassert!(x, \"x wasn't true!\");\n\nlet a = 3; let b = 27;\nassert!(a + b == 30, \"a = {}, b = {}\", a, b);"]}}