{"stability":{"stable since":"1.26.0"},"apiName":"std::ops::RangeInclusive","apiType":"struct","apiDocumentation":{"apiDescription":["An range bounded inclusively below and above (start..=end).","The RangeInclusive start..=end contains all values with x >= start and x <= end. It is empty unless start <= end.","This iterator is fused, but the specific values of start and end after iteration has finished are unspecified other than that .is_empty() will return true once no more values will be produced."],"examples":["assert_eq!((3..=5), std::ops::RangeInclusive::new(3, 5));\nassert_eq!(3 + 4 + 5, (3..=5).sum());\n\nlet arr = [0, 1, 2, 3];\nassert_eq!(arr[ ..=2], [0,1,2  ]);\nassert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive"]},"trait implementations":[{"name":"impl<A> std::iter::Iterator for std::ops::RangeInclusive<A> where A: std::iter::Step","stable since":"1.0.0"},{"name":"impl<A> std::iter::DoubleEndedIterator for std::ops::RangeInclusive<A> where A: std::iter::Step","stable since":"1.0.0"},{"name":"impl<T> std::slice::SliceIndex<[T]> for std::ops::RangeInclusive<usize>","stable since":"1.0.0"},{"name":"impl std::slice::SliceIndex<str> for std::ops::RangeInclusive<usize>","stable since":"1.0.0"},{"name":"impl<Idx> std::hash::Hash for std::ops::RangeInclusive<Idx> where Idx: std::hash::Hash","stable since":"1.0.0"},{"name":"impl<Idx> std::clone::Clone for std::ops::RangeInclusive<Idx> where Idx: std::clone::Clone","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<isize>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<i8>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<u64>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<usize>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<u32>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<u16>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<i16>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<i32>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<i64>","stable since":"1.0.0"},{"name":"impl std::iter::TrustedLen for std::ops::RangeInclusive<u8>","stable since":"1.0.0"},{"name":"impl std::ops::IndexMut<std::ops::RangeInclusive<usize>> for str","stable since":"1.0.0"},{"name":"impl std::ops::Index<std::ops::RangeInclusive<usize>> for str","stable since":"1.0.0"},{"name":"impl<Idx> std::fmt::Debug for std::ops::RangeInclusive<Idx> where Idx: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl std::iter::ExactSizeIterator for std::ops::RangeInclusive<i16>","stable since":"1.0.0"},{"name":"impl std::iter::ExactSizeIterator for std::ops::RangeInclusive<u16>","stable since":"1.0.0"},{"name":"impl std::iter::ExactSizeIterator for std::ops::RangeInclusive<u8>","stable since":"1.0.0"},{"name":"impl std::iter::ExactSizeIterator for std::ops::RangeInclusive<i8>","stable since":"1.0.0"},{"name":"impl<Idx> std::cmp::Eq for std::ops::RangeInclusive<Idx> where Idx: std::cmp::Eq","stable since":"1.0.0"},{"name":"impl<Idx> std::cmp::PartialEq<std::ops::RangeInclusive<Idx>> for std::ops::RangeInclusive<Idx> where Idx: std::cmp::PartialEq<Idx>","stable since":"1.0.0"},{"name":"impl<A> std::iter::FusedIterator for std::ops::RangeInclusive<A> where A: std::iter::Step","stable since":"1.0.0"},{"name":"impl<'a, T> std::ops::RangeBounds<T> for std::ops::RangeInclusive<&'a T>","stable since":"1.28.0"},{"name":"impl<T> std::ops::RangeBounds<T> for std::ops::RangeInclusive<T>","stable since":"1.28.0"},{"name":"impl std::ops::IndexMut<std::ops::RangeInclusive<usize>> for std::string::String","stable since":"1.0.0"},{"name":"impl std::ops::Index<std::ops::RangeInclusive<usize>> for std::string::String","stable since":"1.0.0"},{"name":"impl<Idx> std::marker::Send for std::ops::RangeInclusive<Idx> where Idx: std::marker::Send","stable since":"1.0.0"},{"name":"impl<Idx> std::marker::Sync for std::ops::RangeInclusive<Idx> where Idx: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub const fn new(start: Idx, end: Idx) -> RangeInclusive<Idx>","details":{"description":["Creates a new inclusive range. Equivalent to writing start..=end."],"example":["use std::ops::RangeInclusive;\n\nassert_eq!(3..=5, RangeInclusive::new(3, 5));"]}},{"name":"pub fn start(&self) -> &Idx","details":{"description":["Returns the lower bound of the range (inclusive).","When using an inclusive range for iteration, the values of start() and end() are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the is_empty() method instead of comparing start() > end().","Note: the value returned by this method is unspecified after the range has been iterated to exhaustion."],"example":["assert_eq!((3..=5).start(), &3);"]}},{"name":"pub fn end(&self) -> &Idx","details":{"description":["Returns the upper bound of the range (inclusive).","When using an inclusive range for iteration, the values of start() and end() are unspecified after the iteration ended. To determine whether the inclusive range is empty, use the is_empty() method instead of comparing start() > end().","Note: the value returned by this method is unspecified after the range has been iterated to exhaustion."],"example":["assert_eq!((3..=5).end(), &5);"]}},{"name":"pub fn into_inner(self) -> (Idx, Idx)","details":{"description":["Destructures the RangeInclusive into (lower bound, upper (inclusive) bound).","Note: the value returned by this method is unspecified after the range has been iterated to exhaustion."],"example":["assert_eq!((3..=5).into_inner(), (3, 5));"]}},{"name":"pub fn contains<U>(&self, item: &U) -> bool where Idx: PartialOrd<U>, U: PartialOrd<Idx> + ?Sized","stability":["ðŸ”¬ This is a nightly-only experimental API.  (range_contains #32311)recently added as per RFC\n"]},{"name":"pub fn is_empty(&self) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (range_is_empty #48111)recently added\n"]}]}