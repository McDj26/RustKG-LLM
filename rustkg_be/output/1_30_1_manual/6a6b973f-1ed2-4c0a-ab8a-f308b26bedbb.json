{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"},"apiName":"std::task::Context","apiType":"struct","apiDocumentation":{"apiDescription":["Information about the currently-running task.","Contexts are always tied to the stack, since they are set up specifically when performing a single poll step on a task."]},"trait implementations":[{"name":"impl<'a> std::fmt::Debug for std::task::Context<'a>","stable since":"1.0.0"},{"name":"impl<'a> !std::marker::Send for std::task::Context<'a>","stable since":"1.0.0"},{"name":"impl<'a> !std::marker::Sync for std::task::Context<'a>","stable since":"1.0.0"}],"methods":[{"name":"pub fn new( local_waker: &'a LocalWaker, spawner: &'a mut (Spawn + 'a)) -> Context<'a>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn local_waker(&self) -> &'a LocalWaker","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn waker(&self) -> &'a Waker","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn spawner(&mut self) -> &mut Spawn","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn with_waker(&'b mut self, local_waker: &'b LocalWaker) -> Context<'b>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"pub fn with_spawner<Sp>(&'b mut self, spawner: &'b mut Sp) -> Context<'b> where Sp: Spawn","stability":["ðŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]}]}