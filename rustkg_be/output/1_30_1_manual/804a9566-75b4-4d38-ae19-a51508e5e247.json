{"stability":{"stable since":"1.0.0"},"apiName":"std::result::Result","apiType":"enum","apiDocumentation":{"apiDescription":["Result is a type that represents either success (Ok) or failure (Err).","See the std::result module documentation for details."]},"enum variants":["Ok(T)","Contains the success value\n","Err(E)","Contains the error value\n"],"trait implementations":[{"name":"impl<T, E> std::iter::IntoIterator for std::result::Result<T, E>","stable since":"1.0.0"},{"name":"impl<'a, T, E> std::iter::IntoIterator for &'a std::result::Result<T, E>","stable since":"1.4.0"},{"name":"impl<'a, T, E> std::iter::IntoIterator for &'a mut std::result::Result<T, E>","stable since":"1.4.0"},{"name":"impl<T, E> std::hash::Hash for std::result::Result<T, E> where E: std::hash::Hash, T: std::hash::Hash","stable since":"1.0.0"},{"name":"impl<T, E> std::clone::Clone for std::result::Result<T, E> where E: std::clone::Clone, T: std::clone::Clone","stable since":"1.0.0"},{"name":"impl<T, E> std::cmp::PartialOrd<std::result::Result<T, E>> for std::result::Result<T, E> where E: std::cmp::PartialOrd<E>, T: std::cmp::PartialOrd<T>","stable since":"1.0.0"},{"name":"impl<T, E> std::cmp::Ord for std::result::Result<T, E> where E: std::cmp::Ord, T: std::cmp::Ord","stable since":"1.0.0"},{"name":"impl<T, U, E> std::iter::Sum<std::result::Result<U, E>> for std::result::Result<T, E> where T: std::iter::Sum<U>","stable since":"1.16.0"},{"name":"impl<T, E> std::fmt::Debug for std::result::Result<T, E> where E: std::fmt::Debug, T: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<T, E> std::cmp::Eq for std::result::Result<T, E> where E: std::cmp::Eq, T: std::cmp::Eq","stable since":"1.0.0"},{"name":"impl<T, E> std::cmp::PartialEq<std::result::Result<T, E>> for std::result::Result<T, E> where E: std::cmp::PartialEq<E>, T: std::cmp::PartialEq<T>","stable since":"1.0.0"},{"name":"impl<T, E> std::marker::Copy for std::result::Result<T, E> where E: std::marker::Copy, T: std::marker::Copy","stable since":"1.0.0"},{"name":"impl<A, E, V> std::iter::FromIterator<std::result::Result<A, E>> for std::result::Result<V, E> where V: std::iter::FromIterator<A>","stable since":"1.0.0"},{"name":"impl<T, E> std::ops::Try for std::result::Result<T, E>","stable since":"1.0.0"},{"name":"impl<T, U, E> std::iter::Product<std::result::Result<U, E>> for std::result::Result<T, E> where T: std::iter::Product<U>","stable since":"1.16.0"},{"name":"impl<E: std::fmt::Debug> std::process::Termination for std::result::Result<(), E>","stable since":"1.0.0"},{"name":"impl<E: std::fmt::Debug> std::process::Termination for std::result::Result<!, E>","stable since":"1.0.0"},{"name":"impl<T, E> std::marker::Send for std::result::Result<T, E> where E: std::marker::Send, T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T, E> std::marker::Sync for std::result::Result<T, E> where E: std::marker::Sync, T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn is_ok(&self) -> bool","details":{"description":["Returns true if the result is Ok."],"example":["Basic usage:","let x: Result<i32, &str> = Ok(-3);\nassert_eq!(x.is_ok(), true);\n\nlet x: Result<i32, &str> = Err(\"Some error message\");\nassert_eq!(x.is_ok(), false);"]}},{"name":"pub fn is_err(&self) -> bool","details":{"description":["Returns true if the result is Err."],"example":["Basic usage:","let x: Result<i32, &str> = Ok(-3);\nassert_eq!(x.is_err(), false);\n\nlet x: Result<i32, &str> = Err(\"Some error message\");\nassert_eq!(x.is_err(), true);"]}},{"name":"pub fn ok(self) -> Option<T>","details":{"description":["Converts from Result<T, E> to Option<T>.","Converts self into an Option<T>, consuming self, and discarding the error, if any."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(2);\nassert_eq!(x.ok(), Some(2));\n\nlet x: Result<u32, &str> = Err(\"Nothing here\");\nassert_eq!(x.ok(), None);"]}},{"name":"pub fn err(self) -> Option<E>","details":{"description":["Converts from Result<T, E> to Option<E>.","Converts self into an Option<E>, consuming self, and discarding the success value, if any."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(2);\nassert_eq!(x.err(), None);\n\nlet x: Result<u32, &str> = Err(\"Nothing here\");\nassert_eq!(x.err(), Some(\"Nothing here\"));"]}},{"name":"pub fn as_ref(&self) -> Result<&T, &E>","details":{"description":["Converts from Result<T, E> to Result<&T, &E>.","Produces a new Result, containing a reference into the original, leaving the original in place."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(2);\nassert_eq!(x.as_ref(), Ok(&2));\n\nlet x: Result<u32, &str> = Err(\"Error\");\nassert_eq!(x.as_ref(), Err(&\"Error\"));"]}},{"name":"pub fn as_mut(&mut self) -> Result<&mut T, &mut E>","details":{"description":["Converts from Result<T, E> to Result<&mut T, &mut E>."],"example":["Basic usage:","fn mutate(r: &mut Result<i32, i32>) {\n    match r.as_mut() {\n        Ok(v) => *v = 42,\n        Err(e) => *e = 0,\n    }\n}\n\nlet mut x: Result<i32, i32> = Ok(2);\nmutate(&mut x);\nassert_eq!(x.unwrap(), 42);\n\nlet mut x: Result<i32, i32> = Err(13);\nmutate(&mut x);\nassert_eq!(x.unwrap_err(), 0);"]}},{"name":"pub fn map<U, F>(self, op: F) -> Result<U, E> where F: FnOnce(T) -> U","details":{"description":["Maps a Result<T, E> to Result<U, E> by applying a function to a contained Ok value, leaving an Err value untouched.","This function can be used to compose the results of two functions."],"example":["Print the numbers on each line of a string multiplied by two.","let line = \"1\\n2\\n3\\n4\\n\";\n\nfor num in line.lines() {\n    match num.parse::<i32>().map(|i| i * 2) {\n        Ok(n) => println!(\"{}\", n),\n        Err(..) => {}\n    }\n}"]}},{"name":"pub fn map_or_else<U, M, F>(self, fallback: F, map: M) -> U where F: FnOnce(E) -> U, M: FnOnce(T) -> U","stability":["ðŸ”¬ This is a nightly-only experimental API.  (result_map_or_else #53268)"]},{"name":"pub fn map_err<F, O>(self, op: O) -> Result<T, F> where O: FnOnce(E) -> F","details":{"description":["Maps a Result<T, E> to Result<T, F> by applying a function to a contained Err value, leaving an Ok value untouched.","This function can be used to pass through a successful result while handling an error."],"example":["Basic usage:","fn stringify(x: u32) -> String { format!(\"error code: {}\", x) }\n\nlet x: Result<u32, u32> = Ok(2);\nassert_eq!(x.map_err(stringify), Ok(2));\n\nlet x: Result<u32, u32> = Err(13);\nassert_eq!(x.map_err(stringify), Err(\"error code: 13\".to_string()));"]}},{"name":"pub fn iter(&self) -> Iter<T>","details":{"description":["Returns an iterator over the possibly contained value.","The iterator yields one value if the result is Result::Ok, otherwise none."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(7);\nassert_eq!(x.iter().next(), Some(&7));\n\nlet x: Result<u32, &str> = Err(\"nothing!\");\nassert_eq!(x.iter().next(), None);"]}},{"name":"pub fn iter_mut(&mut self) -> IterMut<T>","details":{"description":["Returns a mutable iterator over the possibly contained value.","The iterator yields one value if the result is Result::Ok, otherwise none."],"example":["Basic usage:","let mut x: Result<u32, &str> = Ok(7);\nmatch x.iter_mut().next() {\n    Some(v) => *v = 40,\n    None => {},\n}\nassert_eq!(x, Ok(40));\n\nlet mut x: Result<u32, &str> = Err(\"nothing!\");\nassert_eq!(x.iter_mut().next(), None);"]}},{"name":"pub fn and<U>(self, res: Result<U, E>) -> Result<U, E>","details":{"description":["Returns res if the result is Ok, otherwise returns the Err value of self."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(2);\nlet y: Result<&str, &str> = Err(\"late error\");\nassert_eq!(x.and(y), Err(\"late error\"));\n\nlet x: Result<u32, &str> = Err(\"early error\");\nlet y: Result<&str, &str> = Ok(\"foo\");\nassert_eq!(x.and(y), Err(\"early error\"));\n\nlet x: Result<u32, &str> = Err(\"not a 2\");\nlet y: Result<&str, &str> = Err(\"late error\");\nassert_eq!(x.and(y), Err(\"not a 2\"));\n\nlet x: Result<u32, &str> = Ok(2);\nlet y: Result<&str, &str> = Ok(\"different result type\");\nassert_eq!(x.and(y), Ok(\"different result type\"));"]}},{"name":"pub fn and_then<U, F>(self, op: F) -> Result<U, E> where F: FnOnce(T) -> Result<U, E>","details":{"description":["Calls op if the result is Ok, otherwise returns the Err value of self.","This function can be used for control flow based on Result values."],"example":["Basic usage:","fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\nfn err(x: u32) -> Result<u32, u32> { Err(x) }\n\nassert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));\nassert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));\nassert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));\nassert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));"]}},{"name":"pub fn or<F>(self, res: Result<T, F>) -> Result<T, F>","details":{"description":["Returns res if the result is Err, otherwise returns the Ok value of self.","Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(2);\nlet y: Result<u32, &str> = Err(\"late error\");\nassert_eq!(x.or(y), Ok(2));\n\nlet x: Result<u32, &str> = Err(\"early error\");\nlet y: Result<u32, &str> = Ok(2);\nassert_eq!(x.or(y), Ok(2));\n\nlet x: Result<u32, &str> = Err(\"not a 2\");\nlet y: Result<u32, &str> = Err(\"late error\");\nassert_eq!(x.or(y), Err(\"late error\"));\n\nlet x: Result<u32, &str> = Ok(2);\nlet y: Result<u32, &str> = Ok(100);\nassert_eq!(x.or(y), Ok(2));"]}},{"name":"pub fn or_else<F, O>(self, op: O) -> Result<T, F> where O: FnOnce(E) -> Result<T, F>","details":{"description":["Calls op if the result is Err, otherwise returns the Ok value of self.","This function can be used for control flow based on result values."],"example":["Basic usage:","fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\nfn err(x: u32) -> Result<u32, u32> { Err(x) }\n\nassert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));\nassert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));\nassert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));\nassert_eq!(Err(3).or_else(err).or_else(err), Err(3));"]}},{"name":"pub fn unwrap_or(self, optb: T) -> T","details":{"description":["Unwraps a result, yielding the content of an Ok. Else, it returns optb.","Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],"example":["Basic usage:","let optb = 2;\nlet x: Result<u32, &str> = Ok(9);\nassert_eq!(x.unwrap_or(optb), 9);\n\nlet x: Result<u32, &str> = Err(\"error\");\nassert_eq!(x.unwrap_or(optb), optb);"]}},{"name":"pub fn unwrap_or_else<F>(self, op: F) -> T where F: FnOnce(E) -> T","details":{"description":["Unwraps a result, yielding the content of an Ok. If the value is an Err then it calls op with its value."],"example":["Basic usage:","fn count(x: &str) -> usize { x.len() }\n\nassert_eq!(Ok(2).unwrap_or_else(count), 2);\nassert_eq!(Err(\"foo\").unwrap_or_else(count), 3);"]}},{"name":"pub fn unwrap(self) -> T","details":{"description":["Unwraps a result, yielding the content of an Ok.","Panics","Panics if the value is an Err, with a panic message provided by the Err's value."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(2);\nassert_eq!(x.unwrap(), 2);","let x: Result<u32, &str> = Err(\"emergency failure\");\nx.unwrap(); // panics with `emergency failure`"]}},{"name":"pub fn expect(self, msg: &str) -> T","details":{"description":["Unwraps a result, yielding the content of an Ok.","Panics","Panics if the value is an Err, with a panic message including the passed message, and the content of the Err."],"example":["Basic usage:","let x: Result<u32, &str> = Err(\"emergency failure\");\nx.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`"]}},{"name":"pub fn unwrap_err(self) -> E","details":{"description":["Unwraps a result, yielding the content of an Err.","Panics","Panics if the value is an Ok, with a custom panic message provided by the Ok's value."],"example":["let x: Result<u32, &str> = Ok(2);\nx.unwrap_err(); // panics with `2`","let x: Result<u32, &str> = Err(\"emergency failure\");\nassert_eq!(x.unwrap_err(), \"emergency failure\");"]}},{"name":"pub fn expect_err(self, msg: &str) -> E","details":{"description":["Unwraps a result, yielding the content of an Err.","Panics","Panics if the value is an Ok, with a panic message including the passed message, and the content of the Ok."],"example":["Basic usage:","let x: Result<u32, &str> = Ok(10);\nx.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`"]}},{"name":"pub fn unwrap_or_default(self) -> T","details":{"description":["Returns the contained value or a default","Consumes the self argument then, if Ok, returns the contained value, otherwise if Err, returns the default value for that type."],"example":["Convert a string to an integer, turning poorly-formed strings\ninto 0 (the default value for integers). parse converts\na string to any other type that implements FromStr, returning an\nErr on error.","let good_year_from_input = \"1909\";\nlet bad_year_from_input = \"190blarg\";\nlet good_year = good_year_from_input.parse().unwrap_or_default();\nlet bad_year = bad_year_from_input.parse().unwrap_or_default();\n\nassert_eq!(1909, good_year);\nassert_eq!(0, bad_year);"]}},{"name":"pub fn deref_ok(&self) -> Result<&<T as Deref>::Target, &E>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (inner_deref #50264)newly added\n"]},{"name":"pub fn deref_err(&self) -> Result<&T, &<E as Deref>::Target>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (inner_deref #50264)newly added\n"]},{"name":"pub fn deref(&self) -> Result<&<T as Deref>::Target, &<E as Deref>::Target>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (inner_deref #50264)newly added\n"]},{"name":"pub fn transpose(self) -> Option<Result<T, E>>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (transpose_result #47338)"]}]}