{"stability":{"stable since":"1.0.0"},"apiName":"std::boxed::Box","apiType":"struct","apiDocumentation":{"apiDescription":["A pointer type for heap allocation.","See the module-level documentation for more."]},"trait implementations":[{"name":"impl<T> std::cmp::PartialOrd<std::boxed::Box<T>> for std::boxed::Box<T> where T: std::cmp::PartialOrd<T> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::borrow::BorrowMut<T> for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.1.0"},{"name":"impl<T> std::convert::AsRef<T> for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.5.0"},{"name":"impl<T> std::ops::Drop for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::convert::AsMut<T> for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.5.0"},{"name":"impl<T> std::hash::Hasher for std::boxed::Box<T> where T: std::hash::Hasher + ?std::marker::Sized","stable since":"1.22.0"},{"name":"impl<I> std::iter::ExactSizeIterator for std::boxed::Box<I> where I: std::iter::ExactSizeIterator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::cmp::Eq for std::boxed::Box<T> where T: std::cmp::Eq + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<I> std::iter::DoubleEndedIterator for std::boxed::Box<I> where I: std::iter::DoubleEndedIterator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<I> std::iter::Iterator for std::boxed::Box<I> where I: std::iter::Iterator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, F> std::future::UnsafeFutureObj<'a, T> for std::boxed::Box<F> where F: std::future::Future<Output = T> + 'a","stable since":"1.0.0"},{"name":"impl<T> std::ops::Deref for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::borrow::Borrow<T> for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.1.0"},{"name":"impl<T> std::ops::DerefMut for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl std::default::Default for std::boxed::Box<str>","stable since":"1.17.0"},{"name":"impl<T> std::default::Default for std::boxed::Box<T> where T: std::default::Default","stable since":"1.0.0"},{"name":"impl<T> std::default::Default for std::boxed::Box<[T]>","stable since":"1.0.0"},{"name":"impl<T> std::pin::Unpin for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Display for std::boxed::Box<T> where T: std::fmt::Display + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A, R> std::ops::FnOnce<A> for std::boxed::Box<std::boxed::FnBox<A, Output = R> + 'a + std::marker::Send>","stable since":"1.0.0"},{"name":"impl<'a, A, R> std::ops::FnOnce<A> for std::boxed::Box<std::boxed::FnBox<A, Output = R> + 'a>","stable since":"1.0.0"},{"name":"impl std::convert::From<std::string::String> for std::boxed::Box<str>","stable since":"1.20.0"},{"name":"impl<T> std::convert::From<std::boxed::Box<T>> for std::pin::PinBox<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, F> std::convert::From<std::boxed::Box<F>> for std::future::LocalFutureObj<'a, ()> where F: 'a + std::future::Future<Output = ()>","stable since":"1.0.0"},{"name":"impl std::convert::From<std::boxed::Box<str>> for std::boxed::Box<[u8]>","stable since":"1.19.0"},{"name":"impl<'a> std::convert::From<&'a str> for std::boxed::Box<str>","stable since":"1.17.0"},{"name":"impl std::convert::From<std::boxed::Box<str>> for std::string::String","stable since":"1.18.0"},{"name":"impl<T> std::convert::From<std::boxed::Box<[T]>> for std::vec::Vec<T>","stable since":"1.18.0"},{"name":"impl<T> std::convert::From<std::boxed::Box<T>> for std::sync::Arc<T> where T: ?std::marker::Sized","stable since":"1.21.0"},{"name":"impl<T> std::convert::From<std::pin::PinBox<T>> for std::boxed::Box<T> where T: std::pin::Unpin + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::convert::From<T> for std::boxed::Box<T>","stable since":"1.6.0"},{"name":"impl<'a, F> std::convert::From<std::boxed::Box<F>> for std::future::FutureObj<'a, ()> where F: 'a + std::marker::Send + std::future::Future<Output = ()>","stable since":"1.0.0"},{"name":"impl<'a, T> std::convert::From<&'a [T]> for std::boxed::Box<[T]> where T: std::marker::Copy","stable since":"1.17.0"},{"name":"impl<T> std::convert::From<std::vec::Vec<T>> for std::boxed::Box<[T]>","stable since":"1.20.0"},{"name":"impl<T> std::convert::From<std::boxed::Box<T>> for std::rc::Rc<T> where T: ?std::marker::Sized","stable since":"1.21.0"},{"name":"impl<I> std::iter::FusedIterator for std::boxed::Box<I> where I: std::iter::FusedIterator + ?std::marker::Sized","stable since":"1.26.0"},{"name":"impl<T> std::clone::Clone for std::boxed::Box<T> where T: std::clone::Clone","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::boxed::Box<str>","stable since":"1.3.0"},{"name":"impl<T> std::clone::Clone for std::boxed::Box<[T]> where T: std::clone::Clone","stable since":"1.3.0"},{"name":"impl<F> std::future::Future for std::boxed::Box<F> where F: std::pin::Unpin + std::future::Future + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::hash::Hash for std::boxed::Box<T> where T: std::hash::Hash + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<Sp> std::task::Spawn for std::boxed::Box<Sp> where Sp: std::task::Spawn + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Debug for std::boxed::Box<T> where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T, U> std::ops::CoerceUnsized<std::boxed::Box<U>> for std::boxed::Box<T> where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::cmp::PartialEq<std::boxed::Box<T>> for std::boxed::Box<T> where T: std::cmp::PartialEq<T> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::fmt::Pointer for std::boxed::Box<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::cmp::Ord for std::boxed::Box<T> where T: std::cmp::Ord + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::ops::Generator for std::boxed::Box<T> where T: std::ops::Generator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, E: std::error::Error + 'a> std::convert::From<E> for std::boxed::Box<std::error::Error + 'a>","stable since":"1.0.0"},{"name":"impl<'a, E: std::error::Error + std::marker::Send + std::marker::Sync + 'a> std::convert::From<E> for std::boxed::Box<std::error::Error + std::marker::Send + std::marker::Sync + 'a>","stable since":"1.0.0"},{"name":"impl std::convert::From<std::string::String> for std::boxed::Box<std::error::Error + std::marker::Send + std::marker::Sync>","stable since":"1.0.0"},{"name":"impl std::convert::From<std::string::String> for std::boxed::Box<std::error::Error>","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::convert::From<&'b str> for std::boxed::Box<std::error::Error + std::marker::Send + std::marker::Sync + 'a>","stable since":"1.0.0"},{"name":"impl<'a> std::convert::From<&'a str> for std::boxed::Box<std::error::Error>","stable since":"1.6.0"},{"name":"impl<'a, 'b> std::convert::From<std::borrow::Cow<'b, str>> for std::boxed::Box<std::error::Error + std::marker::Send + std::marker::Sync + 'a>","stable since":"1.22.0"},{"name":"impl<'a> std::convert::From<std::borrow::Cow<'a, str>> for std::boxed::Box<std::error::Error>","stable since":"1.22.0"},{"name":"impl<T: std::error::Error> std::error::Error for std::boxed::Box<T>","stable since":"1.8.0"},{"name":"impl<'a> std::convert::From<&'a std::ffi::CStr> for std::boxed::Box<std::ffi::CStr>","stable since":"1.17.0"},{"name":"impl std::convert::From<std::boxed::Box<std::ffi::CStr>> for std::ffi::CString","stable since":"1.18.0"},{"name":"impl std::clone::Clone for std::boxed::Box<std::ffi::CStr>","stable since":"1.29.0"},{"name":"impl std::convert::From<std::ffi::CString> for std::boxed::Box<std::ffi::CStr>","stable since":"1.20.0"},{"name":"impl std::default::Default for std::boxed::Box<std::ffi::CStr>","stable since":"1.17.0"},{"name":"impl<'a> std::convert::From<&'a std::ffi::OsStr> for std::boxed::Box<std::ffi::OsStr>","stable since":"1.17.0"},{"name":"impl std::convert::From<std::boxed::Box<std::ffi::OsStr>> for std::ffi::OsString","stable since":"1.18.0"},{"name":"impl std::convert::From<std::ffi::OsString> for std::boxed::Box<std::ffi::OsStr>","stable since":"1.20.0"},{"name":"impl std::clone::Clone for std::boxed::Box<std::ffi::OsStr>","stable since":"1.29.0"},{"name":"impl std::default::Default for std::boxed::Box<std::ffi::OsStr>","stable since":"1.17.0"},{"name":"impl<R: std::io::Read + ?std::marker::Sized> std::io::Read for std::boxed::Box<R>","stable since":"1.0.0"},{"name":"impl<W: std::io::Write + ?std::marker::Sized> std::io::Write for std::boxed::Box<W>","stable since":"1.0.0"},{"name":"impl<S: std::io::Seek + ?std::marker::Sized> std::io::Seek for std::boxed::Box<S>","stable since":"1.0.0"},{"name":"impl<B: std::io::BufRead + ?std::marker::Sized> std::io::BufRead for std::boxed::Box<B>","stable since":"1.0.0"},{"name":"impl<'a> std::convert::From<&'a std::path::Path> for std::boxed::Box<std::path::Path>","stable since":"1.17.0"},{"name":"impl std::convert::From<std::boxed::Box<std::path::Path>> for std::path::PathBuf","stable since":"1.18.0"},{"name":"impl std::convert::From<std::path::PathBuf> for std::boxed::Box<std::path::Path>","stable since":"1.20.0"},{"name":"impl std::clone::Clone for std::boxed::Box<std::path::Path>","stable since":"1.29.0"},{"name":"impl<T: ?std::marker::Sized> std::marker::Send for std::boxed::Box<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T: ?std::marker::Sized> std::marker::Sync for std::boxed::Box<T> where T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(x: T) -> Box<T>","details":{"description":["Allocates memory on the heap and then places x into it.","This doesn't actually allocate if T is zero-sized."],"example":["let five = Box::new(5);"]}},{"name":"pub unsafe fn from_raw(raw: *mut T) -> Box<T>","details":{"description":["Constructs a box from a raw pointer.","After calling this function, the raw pointer is owned by the resulting Box. Specifically, the Box destructor will call the destructor of T and free the allocated memory. Since the way Box allocates and releases memory is unspecified, the only valid pointer to pass to this function is the one taken from another Box via the Box::into_raw function.","This function is unsafe because improper use may lead to memory problems. For example, a double-free may occur if the function is called twice on the same raw pointer."],"example":["let x = Box::new(5);\nlet ptr = Box::into_raw(x);\nlet x = unsafe { Box::from_raw(ptr) };"]}},{"name":"pub fn into_raw(b: Box<T>) -> *mut T","details":{"description":["Consumes the Box, returning a wrapped raw pointer.","The pointer will be properly aligned and non-null.","After calling this function, the caller is responsible for the memory previously managed by the Box. In particular, the caller should properly destroy T and release the memory. The proper way to do so is to convert the raw pointer back into a Box with the Box::from_raw function.","Note: this is an associated function, which means that you have to call it as Box::into_raw(b) instead of b.into_raw(). This is so that there is no conflict with a method on the inner type."],"example":["let x = Box::new(5);\nlet ptr = Box::into_raw(x);"]}},{"name":"pub fn into_raw_non_null(b: Box<T>) -> NonNull<T>","stability":["🔬 This is a nightly-only experimental API.  (box_into_raw_non_null #47336)"]},{"name":"pub fn leak<'a>(b: Box<T>) -> &'a mut T where T: 'a","details":{"description":["Consumes and leaks the Box, returning a mutable reference, &'a mut T. Note that the type T must outlive the chosen lifetime 'a. If the type has only static references, or none at all, then this may be chosen to be 'static.","This function is mainly useful for data that lives for the remainder of the program's life. Dropping the returned reference will cause a memory leak. If this is not acceptable, the reference should first be wrapped with the Box::from_raw function producing a Box. This Box can then be dropped which will properly destroy T and release the allocated memory.","Note: this is an associated function, which means that you have to call it as Box::leak(b) instead of b.leak(). This is so that there is no conflict with a method on the inner type."],"example":["Simple usage:","fn main() {\n    let x = Box::new(41);\n    let static_ref: &'static mut usize = Box::leak(x);\n    *static_ref += 1;\n    assert_eq!(*static_ref, 42);\n}","Unsized data:","fn main() {\n    let x = vec![1, 2, 3].into_boxed_slice();\n    let static_ref = Box::leak(x);\n    static_ref[0] = 4;\n    assert_eq!(*static_ref, [4, 2, 3]);\n}"]}},{"name":"pub fn downcast<T>(self) -> Result<Box<T>, Box<Any + 'static>> where T: Any","details":{"description":["Attempt to downcast the box to a concrete type."],"example":["use std::any::Any;\n\nfn print_if_string(value: Box<Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nfn main() {\n    let my_string = \"Hello World\".to_string();\n    print_if_string(Box::new(my_string));\n    print_if_string(Box::new(0i8));\n}"]}},{"name":"pub fn downcast<T>(self) -> Result<Box<T>, Box<Any + 'static + Send>> where T: Any","details":{"description":["Attempt to downcast the box to a concrete type."],"example":["use std::any::Any;\n\nfn print_if_string(value: Box<Any + Send>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nfn main() {\n    let my_string = \"Hello World\".to_string();\n    print_if_string(Box::new(my_string));\n    print_if_string(Box::new(0i8));\n}"]}}]}