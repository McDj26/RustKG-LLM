{"stability":{"stable since":"1.0.0"},"apiName":"std::sync::RwLock","apiType":"struct","apiDocumentation":{"apiDescription":["A reader-writer lock","This type of lock allows a number of readers or at most one writer at any point in time. The write portion of this lock typically allows modification of the underlying data (exclusive access) and the read portion of this lock typically allows for read-only access (shared access).","In comparison, a Mutex does not distinguish between readers or writers that acquire the lock, therefore blocking any threads waiting for the lock to become available. An RwLock will allow any number of readers to acquire the lock as long as a writer is not holding the lock.","The priority policy of the lock is dependent on the underlying operating system's implementation, and this type does not guarantee that any particular policy will be used.","The type parameter T represents the data that this lock protects. It is required that T satisfies Send to be shared across threads and Sync to allow concurrent access through readers. The RAII guards returned from the locking methods implement Deref (and DerefMut for the write methods) to allow access to the content of the lock.","Poisoning","An RwLock, like Mutex, will become poisoned on a panic. Note, however, that an RwLock may only be poisoned if a panic occurs while it is locked exclusively (write mode). If a panic occurs in any reader, then the lock will not be poisoned."],"examples":["use std::sync::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read().unwrap();\n    let r2 = lock.read().unwrap();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write().unwrap();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here"]},"trait implementations":[{"name":"impl<T: ?std::marker::Sized> std::panic::UnwindSafe for std::sync::RwLock<T>","stable since":"1.9.0"},{"name":"impl<T: ?std::marker::Sized> std::panic::RefUnwindSafe for std::sync::RwLock<T>","stable since":"1.12.0"},{"name":"impl<T: ?std::marker::Sized + std::marker::Send> std::marker::Send for std::sync::RwLock<T>","stable since":"1.0.0"},{"name":"impl<T: ?std::marker::Sized + std::marker::Send + std::marker::Sync> std::marker::Sync for std::sync::RwLock<T>","stable since":"1.0.0"},{"name":"impl<T: ?std::marker::Sized> std::ops::Drop for std::sync::RwLock<T>","stable since":"1.0.0"},{"name":"impl<T: ?std::marker::Sized + std::fmt::Debug> std::fmt::Debug for std::sync::RwLock<T>","stable since":"1.0.0"},{"name":"impl<T: std::default::Default> std::default::Default for std::sync::RwLock<T>","stable since":"1.10.0"},{"name":"impl<T> std::convert::From<T> for std::sync::RwLock<T>","stable since":"1.24.0"}],"methods":[{"name":"pub fn new(t: T) -> RwLock<T>","details":{"description":["Creates a new instance of an RwLock<T> which is unlocked."],"example":["use std::sync::RwLock;\n\nlet lock = RwLock::new(5);"]}},{"name":"pub fn read(&self) -> LockResult<RwLockReadGuard<T>>","details":{"description":["Locks this rwlock with shared read access, blocking the current thread until it can be acquired.","The calling thread will be blocked until there are no more writers which hold the lock. There may be other readers currently inside the lock when this method returns. This method does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.","Returns an RAII guard which will release this thread's shared access once it is dropped.","Errors","This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. The failure will occur immediately after the lock has been acquired.","Panics","This function might panic when called if the lock is already held by the current thread."],"example":["use std::sync::{Arc, RwLock};\nuse std::thread;\n\nlet lock = Arc::new(RwLock::new(1));\nlet c_lock = lock.clone();\n\nlet n = lock.read().unwrap();\nassert_eq!(*n, 1);\n\nthread::spawn(move || {\n    let r = c_lock.read();\n    assert!(r.is_ok());\n}).join().unwrap();"]}},{"name":"pub fn try_read(&self) -> TryLockResult<RwLockReadGuard<T>>","details":{"description":["Attempts to acquire this rwlock with shared read access.","If the access could not be granted at this time, then Err is returned. Otherwise, an RAII guard is returned which will release the shared access when it is dropped.","This function does not block.","This function does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.","Errors","This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired."],"example":["use std::sync::RwLock;\n\nlet lock = RwLock::new(1);\n\nmatch lock.try_read() {\n    Ok(n) => assert_eq!(*n, 1),\n    Err(_) => unreachable!(),\n};"]}},{"name":"pub fn write(&self) -> LockResult<RwLockWriteGuard<T>>","details":{"description":["Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.","This function will not return while other writers or other readers currently have access to the lock.","Returns an RAII guard which will drop the write access of this rwlock when dropped.","Errors","This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will be returned when the lock is acquired.","Panics","This function might panic when called if the lock is already held by the current thread."],"example":["use std::sync::RwLock;\n\nlet lock = RwLock::new(1);\n\nlet mut n = lock.write().unwrap();\n*n = 2;\n\nassert!(lock.try_read().is_err());"]}},{"name":"pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<T>>","details":{"description":["Attempts to lock this rwlock with exclusive write access.","If the lock could not be acquired at this time, then Err is returned. Otherwise, an RAII guard is returned which will release the lock when it is dropped.","This function does not block.","This function does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.","Errors","This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired."],"example":["use std::sync::RwLock;\n\nlet lock = RwLock::new(1);\n\nlet n = lock.read().unwrap();\nassert_eq!(*n, 1);\n\nassert!(lock.try_write().is_err());"]}},{"name":"pub fn is_poisoned(&self) -> bool","details":{"description":["Determines whether the lock is poisoned.","If another thread is active, the lock can still become poisoned at any time. You should not trust a false value for program correctness without additional synchronization."],"example":["use std::sync::{Arc, RwLock};\nuse std::thread;\n\nlet lock = Arc::new(RwLock::new(0));\nlet c_lock = lock.clone();\n\nlet _ = thread::spawn(move || {\n    let _lock = c_lock.write().unwrap();\n    panic!(); // the lock gets poisoned\n}).join();\nassert_eq!(lock.is_poisoned(), true);"]}},{"name":"pub fn into_inner(self) -> LockResult<T> where T: Sized","details":{"description":["Consumes this RwLock, returning the underlying data.","Errors","This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired."],"example":["use std::sync::RwLock;\n\nlet lock = RwLock::new(String::new());\n{\n    let mut s = lock.write().unwrap();\n    *s = \"modified\".to_owned();\n}\nassert_eq!(lock.into_inner().unwrap(), \"modified\");"]}},{"name":"pub fn get_mut(&mut self) -> LockResult<&mut T>","details":{"description":["Returns a mutable reference to the underlying data.","Since this call borrows the RwLock mutably, no actual locking needs to take place---the mutable borrow statically guarantees no locks exist.","Errors","This function will return an error if the RwLock is poisoned. An RwLock is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired."],"example":["use std::sync::RwLock;\n\nlet mut lock = RwLock::new(0);\n*lock.get_mut().unwrap() = 10;\nassert_eq!(*lock.read().unwrap(), 10);"]}}]}