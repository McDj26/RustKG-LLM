{"stability":{"stable since":"1.0.0"},"apiName":"std::io::BufReader","apiType":"struct","apiDocumentation":{"apiDescription":["The BufReader struct adds buffering to any reader.","It can be excessively inefficient to work directly with a Read instance. For example, every call to read on TcpStream results in a system call. A BufReader performs large, infrequent reads on the underlying Read and maintains an in-memory buffer of the results.","BufReader can improve the speed of programs that make small and repeated read calls to the same file or network socket. It does not help when reading very large amounts at once, or reading just one or a few times. It also provides no advantage when reading from a source that is already in memory, like a Vec<u8>."],"examples":["use std::io::prelude::*;\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let mut reader = BufReader::new(f);\n\n    let mut line = String::new();\n    let len = reader.read_line(&mut line)?;\n    println!(\"First line is {} bytes long\", len);\n    Ok(())\n}"]},"trait implementations":[{"name":"impl<R: std::io::Read> std::io::Read for std::io::BufReader<R>","stable since":"1.0.0"},{"name":"impl<R: std::io::Read> std::io::BufRead for std::io::BufReader<R>","stable since":"1.0.0"},{"name":"impl<R> std::fmt::Debug for std::io::BufReader<R> where R: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<R: std::io::Seek> std::io::Seek for std::io::BufReader<R>","stable since":"1.0.0"},{"name":"impl<R> std::marker::Send for std::io::BufReader<R> where R: std::marker::Send","stable since":"1.0.0"},{"name":"impl<R> std::marker::Sync for std::io::BufReader<R> where R: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(inner: R) -> BufReader<R>","details":{"description":["Creates a new BufReader with a default buffer capacity. The default is currently 8 KB, but may change in the future."],"example":["use std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let reader = BufReader::new(f);\n    Ok(())\n}"]}},{"name":"pub fn with_capacity(cap: usize, inner: R) -> BufReader<R>","details":{"description":["Creates a new BufReader with the specified buffer capacity."],"example":["Creating a buffer with ten bytes of capacity:","use std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let reader = BufReader::with_capacity(10, f);\n    Ok(())\n}"]}},{"name":"pub fn get_ref(&self) -> &R","details":{"description":["Gets a reference to the underlying reader.","It is inadvisable to directly read from the underlying reader."],"example":["use std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f1 = File::open(\"log.txt\")?;\n    let reader = BufReader::new(f1);\n\n    let f2 = reader.get_ref();\n    Ok(())\n}"]}},{"name":"pub fn get_mut(&mut self) -> &mut R","details":{"description":["Gets a mutable reference to the underlying reader.","It is inadvisable to directly read from the underlying reader."],"example":["use std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f1 = File::open(\"log.txt\")?;\n    let mut reader = BufReader::new(f1);\n\n    let f2 = reader.get_mut();\n    Ok(())\n}"]}},{"name":"pub fn buffer(&self) -> &[u8]","stability":["ðŸ”¬ This is a nightly-only experimental API.  (bufreader_buffer #45323)"]},{"name":"pub fn into_inner(self) -> R","details":{"description":["Unwraps this BufReader, returning the underlying reader.","Note that any leftover data in the internal buffer is lost."],"example":["use std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f1 = File::open(\"log.txt\")?;\n    let reader = BufReader::new(f1);\n\n    let f2 = reader.into_inner();\n    Ok(())\n}"]}},{"name":"pub fn seek_relative(&mut self, offset: i64) -> Result<()>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (bufreader_seek_relative #31100)"]}]}