{"stability":{"stable since":"1.0.0"},"apiName":"isize","apiType":"primitive","apiDocumentation":{"apiDescription":["The pointer-sized signed integer type.","See also the std::isize module.","The size of this primitive is how many bytes it takes to reference any location in memory. For example, on a 32 bit target, this is 4 bytes and on a 64 bit target, this is 8 bytes."]},"trait implementations":[{"name":"impl std::convert::TryFrom<i64> for isize","stable since":"1.0.0"},{"name":"impl std::convert::TryFrom<u64> for isize","stable since":"1.0.0"},{"name":"impl std::convert::TryFrom<u32> for isize","stable since":"1.0.0"},{"name":"impl std::convert::TryFrom<u128> for isize","stable since":"1.0.0"},{"name":"impl std::convert::TryFrom<usize> for isize","stable since":"1.0.0"},{"name":"impl std::convert::TryFrom<u16> for isize","stable since":"1.0.0"},{"name":"impl std::convert::TryFrom<i32> for isize","stable since":"1.0.0"},{"name":"impl std::convert::TryFrom<i128> for isize","stable since":"1.0.0"},{"name":"impl std::ops::RemAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::RemAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::str::FromStr for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::DivAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::ops::DivAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl std::ops::MulAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::MulAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::ops::SubAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::SubAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::hash::Hash for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::AddAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::ops::AddAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::Neg for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Neg for isize","stable since":"1.0.0"},{"name":"impl std::ops::ShrAssign<i16> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShrAssign<usize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a u16> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShrAssign<u128> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a i128> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a i16> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShrAssign<u8> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShrAssign<i128> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a usize> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a i64> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShrAssign<i64> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a u64> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShrAssign<u32> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a u32> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShrAssign<i8> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShrAssign<u64> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShrAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a u128> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a i32> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a i8> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShrAssign<u16> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShrAssign<i32> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a u8> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShrAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::clone::Clone for isize","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd<isize> for isize","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Sub<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Sub<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Sub<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Sub<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<u64> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<u16> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<usize> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a u64> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<u64> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a u8> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a usize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a u64> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<i128> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a i128> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a i8> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a u16> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a i16> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a i8> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<u32> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a u8> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<u128> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a u128> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<i8> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a u128> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a i32> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a i64> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a u32> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a i64> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<i8> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<u16> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<i128> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<i32> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<u8> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<i16> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a usize> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<i64> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<i32> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<u32> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<usize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<u8> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<i64> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a i32> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a i16> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<&'a i128> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a u32> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shr<&'a u16> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shr<i16> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Shr<u128> for isize","stable since":"1.0.0"},{"name":"impl std::fmt::Binary for isize","stable since":"1.0.0"},{"name":"impl<'a> std::iter::Sum<&'a isize> for isize","stable since":"1.12.0"},{"name":"impl std::iter::Sum<isize> for isize","stable since":"1.12.0"},{"name":"impl std::iter::Step for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::BitXor<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::BitXor<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::BitXor<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::BitXor<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for isize","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for isize","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<isize> for isize","stable since":"1.0.0"},{"name":"impl std::convert::From<i8> for isize","stable since":"1.5.0"},{"name":"impl std::convert::From<bool> for isize","stable since":"1.28.0"},{"name":"impl std::convert::From<i16> for isize","stable since":"1.26.0"},{"name":"impl std::convert::From<u8> for isize","stable since":"1.26.0"},{"name":"impl<'a> std::ops::Not for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Not for isize","stable since":"1.0.0"},{"name":"impl std::marker::Copy for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Rem<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Rem<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Rem<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Rem<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Mul<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Mul<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Mul<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Mul<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl std::fmt::UpperHex for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a i8> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<u64> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a u32> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a i64> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<u128> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a i64> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a u16> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a u128> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<i16> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a u64> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<u16> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a u128> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a i32> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a u16> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a u64> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<u16> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<i128> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a i128> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<usize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<i8> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<i16> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a u8> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a i16> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<u32> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a u8> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a i16> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<i128> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<u64> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a i128> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<i32> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<i8> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<i32> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<&'a usize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<u8> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<i64> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<u8> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a u32> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a usize> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<u32> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<i64> for isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a i32> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Shl<&'a i8> for &'b isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Shl<usize> for &'a isize","stable since":"1.0.0"},{"name":"impl std::ops::Shl<u128> for isize","stable since":"1.0.0"},{"name":"impl std::fmt::Octal for isize","stable since":"1.0.0"},{"name":"impl std::ops::BitAnd<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::BitAnd<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::BitAnd<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::BitAnd<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl std::default::Default for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a i64> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a u8> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShlAssign<u16> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a u32> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShlAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<u32> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<usize> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<u64> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<i16> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a i8> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a i32> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a i16> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a u16> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShlAssign<i32> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<u128> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<i64> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a i128> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a u64> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a usize> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::ShlAssign<&'a u128> for isize","stable since":"1.22.0"},{"name":"impl std::ops::ShlAssign<i128> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<u8> for isize","stable since":"1.8.0"},{"name":"impl std::ops::ShlAssign<i8> for isize","stable since":"1.8.0"},{"name":"impl std::ops::BitXorAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::BitXorAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::ops::Div<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Div<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Div<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Div<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::BitOrAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::BitOrAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl std::ops::BitAndAssign<isize> for isize","stable since":"1.8.0"},{"name":"impl<'a> std::ops::BitAndAssign<&'a isize> for isize","stable since":"1.22.0"},{"name":"impl<'a> std::ops::Add<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::Add<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::Add<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::Add<isize> for isize","stable since":"1.0.0"},{"name":"impl std::fmt::LowerHex for isize","stable since":"1.0.0"},{"name":"impl std::iter::Product<isize> for isize","stable since":"1.12.0"},{"name":"impl<'a> std::iter::Product<&'a isize> for isize","stable since":"1.12.0"},{"name":"impl std::fmt::Display for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::BitOr<&'a isize> for isize","stable since":"1.0.0"},{"name":"impl<'a, 'b> std::ops::BitOr<&'a isize> for &'b isize","stable since":"1.0.0"},{"name":"impl std::ops::BitOr<isize> for isize","stable since":"1.0.0"},{"name":"impl<'a> std::ops::BitOr<isize> for &'a isize","stable since":"1.0.0"},{"name":"impl std::marker::Send for isize","stable since":"1.0.0"},{"name":"impl std::marker::Sync for isize","stable since":"1.0.0"}],"methods":[{"name":"pub const fn min_value() -> isize","details":{"description":["Returns the smallest value that can be represented by this integer type."],"example":["Basic usage:","assert_eq!(isize::min_value(), -9223372036854775808);"]}},{"name":"pub const fn max_value() -> isize","details":{"description":["Returns the largest value that can be represented by this integer type."],"example":["Basic usage:","assert_eq!(isize::max_value(), 9223372036854775807);"]}},{"name":"pub fn from_str_radix(src: &str, radix: u32) -> Result<isize, ParseIntError>","details":{"description":["Converts a string slice in a given base to an integer.","The string is expected to be an optional + or - sign followed by digits. Leading and trailing whitespace represent an error. Digits are a subset of these characters, depending on radix:","0-9 a-z A-Z","Panics","This function panics if radix is not in the range from 2 to 36."],"example":["Basic usage:","assert_eq!(isize::from_str_radix(\"A\", 16), Ok(10));"]}},{"name":"pub const fn count_ones(self) -> u32","details":{"description":["Returns the number of ones in the binary representation of self."],"example":["Basic usage:","let n = 0b100_0000isize;\n\nassert_eq!(n.count_ones(), 1);"]}},{"name":"pub const fn count_zeros(self) -> u32","details":{"description":["Returns the number of zeros in the binary representation of self."],"example":["Basic usage:","assert_eq!(isize::max_value().count_zeros(), 1);"]}},{"name":"pub const fn leading_zeros(self) -> u32","details":{"description":["Returns the number of leading zeros in the binary representation of self."],"example":["Basic usage:","let n = -1isize;\n\nassert_eq!(n.leading_zeros(), 0);"]}},{"name":"pub const fn trailing_zeros(self) -> u32","details":{"description":["Returns the number of trailing zeros in the binary representation of self."],"example":["Basic usage:","let n = -4isize;\n\nassert_eq!(n.trailing_zeros(), 2);"]}},{"name":"pub const fn rotate_left(self, n: u32) -> isize","details":{"description":["Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer.","Please note this isn't the same operation as <<!"],"example":["Basic usage:","let n = 0xaa00000000006e1isize;\nlet m = 0x6e10aa;\n\nassert_eq!(n.rotate_left(12), m);"]}},{"name":"pub const fn rotate_right(self, n: u32) -> isize","details":{"description":["Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer.","Please note this isn't the same operation as >>!"],"example":["Basic usage:","let n = 0x6e10aaisize;\nlet m = 0xaa00000000006e1;\n\nassert_eq!(n.rotate_right(12), m);"]}},{"name":"pub const fn swap_bytes(self) -> isize","details":{"description":["Reverses the byte order of the integer."],"example":["Basic usage:","let n = 0x1234567890123456isize;\n\nlet m = n.swap_bytes();\n\nassert_eq!(m, 0x5634129078563412);"]}},{"name":"pub const fn reverse_bits(self) -> isize","stability":["🔬 This is a nightly-only experimental API.  (reverse_bits #48763)"]},{"name":"pub const fn from_be(x: isize) -> isize","details":{"description":["Converts an integer from big endian to the target's endianness.","On big endian this is a no-op. On little endian the bytes are swapped."],"example":["Basic usage:","let n = 0x1Aisize;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(isize::from_be(n), n)\n} else {\n    assert_eq!(isize::from_be(n), n.swap_bytes())\n}"]}},{"name":"pub const fn from_le(x: isize) -> isize","details":{"description":["Converts an integer from little endian to the target's endianness.","On little endian this is a no-op. On big endian the bytes are swapped."],"example":["Basic usage:","let n = 0x1Aisize;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(isize::from_le(n), n)\n} else {\n    assert_eq!(isize::from_le(n), n.swap_bytes())\n}"]}},{"name":"pub const fn to_be(self) -> isize","details":{"description":["Converts self to big endian from the target's endianness.","On big endian this is a no-op. On little endian the bytes are swapped."],"example":["Basic usage:","let n = 0x1Aisize;\n\nif cfg!(target_endian = \"big\") {\n    assert_eq!(n.to_be(), n)\n} else {\n    assert_eq!(n.to_be(), n.swap_bytes())\n}"]}},{"name":"pub const fn to_le(self) -> isize","details":{"description":["Converts self to little endian from the target's endianness.","On little endian this is a no-op. On big endian the bytes are swapped."],"example":["Basic usage:","let n = 0x1Aisize;\n\nif cfg!(target_endian = \"little\") {\n    assert_eq!(n.to_le(), n)\n} else {\n    assert_eq!(n.to_le(), n.swap_bytes())\n}"]}},{"name":"pub fn checked_add(self, rhs: isize) -> Option<isize>","details":{"description":["Checked integer addition. Computes self + rhs, returning None if overflow occurred."],"example":["Basic usage:","assert_eq!((isize::max_value() - 2).checked_add(1), Some(isize::max_value() - 1));\nassert_eq!((isize::max_value() - 2).checked_add(3), None);"]}},{"name":"pub fn checked_sub(self, rhs: isize) -> Option<isize>","details":{"description":["Checked integer subtraction. Computes self - rhs, returning None if overflow occurred."],"example":["Basic usage:","assert_eq!((isize::min_value() + 2).checked_sub(1), Some(isize::min_value() + 1));\nassert_eq!((isize::min_value() + 2).checked_sub(3), None);"]}},{"name":"pub fn checked_mul(self, rhs: isize) -> Option<isize>","details":{"description":["Checked integer multiplication. Computes self * rhs, returning None if overflow occurred."],"example":["Basic usage:","assert_eq!(isize::max_value().checked_mul(1), Some(isize::max_value()));\nassert_eq!(isize::max_value().checked_mul(2), None);"]}},{"name":"pub fn checked_div(self, rhs: isize) -> Option<isize>","details":{"description":["Checked integer division. Computes self / rhs, returning None if rhs == 0 or the division results in overflow."],"example":["Basic usage:","assert_eq!((isize::min_value() + 1).checked_div(-1), Some(9223372036854775807));\nassert_eq!(isize::min_value().checked_div(-1), None);\nassert_eq!((1isize).checked_div(0), None);"]}},{"name":"pub fn checked_div_euc(self, rhs: isize) -> Option<isize>","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn checked_rem(self, rhs: isize) -> Option<isize>","details":{"description":["Checked integer remainder. Computes self % rhs, returning None if rhs == 0 or the division results in overflow."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(5isize.checked_rem(2), Some(1));\nassert_eq!(5isize.checked_rem(0), None);\nassert_eq!(isize::MIN.checked_rem(-1), None);"]}},{"name":"pub fn checked_mod_euc(self, rhs: isize) -> Option<isize>","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn checked_neg(self) -> Option<isize>","details":{"description":["Checked negation. Computes -self, returning None if self == MIN."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(5isize.checked_neg(), Some(-5));\nassert_eq!(isize::MIN.checked_neg(), None);"]}},{"name":"pub fn checked_shl(self, rhs: u32) -> Option<isize>","details":{"description":["Checked shift left. Computes self << rhs, returning None if rhs is larger than or equal to the number of bits in self."],"example":["Basic usage:","assert_eq!(0x1isize.checked_shl(4), Some(0x10));\nassert_eq!(0x1isize.checked_shl(129), None);"]}},{"name":"pub fn checked_shr(self, rhs: u32) -> Option<isize>","details":{"description":["Checked shift right. Computes self >> rhs, returning None if rhs is larger than or equal to the number of bits in self."],"example":["Basic usage:","assert_eq!(0x10isize.checked_shr(4), Some(0x1));\nassert_eq!(0x10isize.checked_shr(128), None);"]}},{"name":"pub fn checked_abs(self) -> Option<isize>","details":{"description":["Checked absolute value. Computes self.abs(), returning None if self == MIN."],"example":["Basic usage:","use std::isize;\n\nassert_eq!((-5isize).checked_abs(), Some(5));\nassert_eq!(isize::MIN.checked_abs(), None);"]}},{"name":"pub fn checked_pow(self, exp: u32) -> Option<isize>","stability":["🔬 This is a nightly-only experimental API.  (no_panic_pow #48320)"]},{"name":"pub fn saturating_add(self, rhs: isize) -> isize","details":{"description":["Saturating integer addition. Computes self + rhs, saturating at the numeric bounds instead of overflowing."],"example":["Basic usage:","assert_eq!(100isize.saturating_add(1), 101);\nassert_eq!(isize::max_value().saturating_add(100), isize::max_value());"]}},{"name":"pub fn saturating_sub(self, rhs: isize) -> isize","details":{"description":["Saturating integer subtraction. Computes self - rhs, saturating at the numeric bounds instead of overflowing."],"example":["Basic usage:","assert_eq!(100isize.saturating_sub(127), -27);\nassert_eq!(isize::min_value().saturating_sub(100), isize::min_value());"]}},{"name":"pub fn saturating_mul(self, rhs: isize) -> isize","details":{"description":["Saturating integer multiplication. Computes self * rhs, saturating at the numeric bounds instead of overflowing."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(10isize.saturating_mul(12), 120);\nassert_eq!(isize::MAX.saturating_mul(10), isize::MAX);\nassert_eq!(isize::MIN.saturating_mul(10), isize::MIN);"]}},{"name":"pub fn saturating_pow(self, exp: u32) -> isize","stability":["🔬 This is a nightly-only experimental API.  (no_panic_pow #48320)"]},{"name":"pub const fn wrapping_add(self, rhs: isize) -> isize","details":{"description":["Wrapping (modular) addition. Computes self + rhs, wrapping around at the boundary of the type."],"example":["Basic usage:","assert_eq!(100isize.wrapping_add(27), 127);\nassert_eq!(isize::max_value().wrapping_add(2), isize::min_value() + 1);"]}},{"name":"pub const fn wrapping_sub(self, rhs: isize) -> isize","details":{"description":["Wrapping (modular) subtraction. Computes self - rhs, wrapping around at the boundary of the type."],"example":["Basic usage:","assert_eq!(0isize.wrapping_sub(127), -127);\nassert_eq!((-2isize).wrapping_sub(isize::max_value()), isize::max_value());"]}},{"name":"pub const fn wrapping_mul(self, rhs: isize) -> isize","details":{"description":["Wrapping (modular) multiplication. Computes self * rhs, wrapping around at the boundary of the type."],"example":["Basic usage:","assert_eq!(10isize.wrapping_mul(12), 120);\nassert_eq!(11i8.wrapping_mul(12), -124);"]}},{"name":"pub fn wrapping_div(self, rhs: isize) -> isize","details":{"description":["Wrapping (modular) division. Computes self / rhs, wrapping around at the boundary of the type.","The only case where such wrapping can occur is when one divides MIN / -1 on a signed type (where MIN is the negative minimal value for the type); this is equivalent to -MIN, a positive value that is too large to represent in the type. In such a case, this function returns MIN itself.","Panics","This function will panic if rhs is 0."],"example":["Basic usage:","assert_eq!(100isize.wrapping_div(10), 10);\nassert_eq!((-128i8).wrapping_div(-1), -128);"]}},{"name":"pub fn wrapping_div_euc(self, rhs: isize) -> isize","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn wrapping_rem(self, rhs: isize) -> isize","details":{"description":["Wrapping (modular) remainder. Computes self % rhs, wrapping around at the boundary of the type.","Such wrap-around never actually occurs mathematically; implementation artifacts make x % y invalid for MIN / -1 on a signed type (where MIN is the negative minimal value). In such a case, this function returns 0.","Panics","This function will panic if rhs is 0."],"example":["Basic usage:","assert_eq!(100isize.wrapping_rem(10), 0);\nassert_eq!((-128i8).wrapping_rem(-1), 0);"]}},{"name":"pub fn wrapping_mod_euc(self, rhs: isize) -> isize","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn wrapping_neg(self) -> isize","details":{"description":["Wrapping (modular) negation. Computes -self, wrapping around at the boundary of the type.","The only case where such wrapping can occur is when one negates MIN on a signed type (where MIN is the negative minimal value for the type); this is a positive value that is too large to represent in the type. In such a case, this function returns MIN itself."],"example":["Basic usage:","assert_eq!(100isize.wrapping_neg(), -100);\nassert_eq!(isize::min_value().wrapping_neg(), isize::min_value());"]}},{"name":"pub const fn wrapping_shl(self, rhs: u32) -> isize","details":{"description":["Panic-free bitwise shift-left; yields self << mask(rhs), where mask removes any high-order bits of rhs that would cause the shift to exceed the bitwidth of the type.","Note that this is not the same as a rotate-left; the RHS of a wrapping shift-left is restricted to the range of the type, rather than the bits shifted out of the LHS being returned to the other end. The primitive integer types all implement a rotate_left function, which may be what you want instead."],"example":["Basic usage:","assert_eq!((-1isize).wrapping_shl(7), -128);\nassert_eq!((-1isize).wrapping_shl(128), -1);"]}},{"name":"pub const fn wrapping_shr(self, rhs: u32) -> isize","details":{"description":["Panic-free bitwise shift-right; yields self >> mask(rhs), where mask removes any high-order bits of rhs that would cause the shift to exceed the bitwidth of the type.","Note that this is not the same as a rotate-right; the RHS of a wrapping shift-right is restricted to the range of the type, rather than the bits shifted out of the LHS being returned to the other end. The primitive integer types all implement a rotate_right function, which may be what you want instead."],"example":["Basic usage:","assert_eq!((-128isize).wrapping_shr(7), -1);\nassert_eq!((-128i16).wrapping_shr(64), -128);"]}},{"name":"pub fn wrapping_abs(self) -> isize","details":{"description":["Wrapping (modular) absolute value. Computes self.abs(), wrapping around at the boundary of the type.","The only case where such wrapping can occur is when one takes the absolute value of the negative minimal value for the type this is a positive value that is too large to represent in the type. In such a case, this function returns MIN itself."],"example":["Basic usage:","assert_eq!(100isize.wrapping_abs(), 100);\nassert_eq!((-100isize).wrapping_abs(), 100);\nassert_eq!(isize::min_value().wrapping_abs(), isize::min_value());\nassert_eq!((-128i8).wrapping_abs() as u8, 128);"]}},{"name":"pub fn wrapping_pow(self, exp: u32) -> isize","stability":["🔬 This is a nightly-only experimental API.  (no_panic_pow #48320)"]},{"name":"pub const fn overflowing_add(self, rhs: isize) -> (isize, bool)","details":{"description":["Calculates self + rhs","Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would occur. If an overflow would have occurred then the wrapped value is returned."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(5isize.overflowing_add(2), (7, false));\nassert_eq!(isize::MAX.overflowing_add(1), (isize::MIN, true));"]}},{"name":"pub const fn overflowing_sub(self, rhs: isize) -> (isize, bool)","details":{"description":["Calculates self - rhs","Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow would occur. If an overflow would have occurred then the wrapped value is returned."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(5isize.overflowing_sub(2), (3, false));\nassert_eq!(isize::MIN.overflowing_sub(1), (isize::MAX, true));"]}},{"name":"pub const fn overflowing_mul(self, rhs: isize) -> (isize, bool)","details":{"description":["Calculates the multiplication of self and rhs.","Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow would occur. If an overflow would have occurred then the wrapped value is returned."],"example":["Basic usage:","assert_eq!(5isize.overflowing_mul(2), (10, false));\nassert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));"]}},{"name":"pub fn overflowing_div(self, rhs: isize) -> (isize, bool)","details":{"description":["Calculates the divisor when self is divided by rhs.","Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would occur. If an overflow would occur then self is returned.","Panics","This function will panic if rhs is 0."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(5isize.overflowing_div(2), (2, false));\nassert_eq!(isize::MIN.overflowing_div(-1), (isize::MIN, true));"]}},{"name":"pub fn overflowing_div_euc(self, rhs: isize) -> (isize, bool)","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn overflowing_rem(self, rhs: isize) -> (isize, bool)","details":{"description":["Calculates the remainder when self is divided by rhs.","Returns a tuple of the remainder after dividing along with a boolean indicating whether an arithmetic overflow would occur. If an overflow would occur then 0 is returned.","Panics","This function will panic if rhs is 0."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(5isize.overflowing_rem(2), (1, false));\nassert_eq!(isize::MIN.overflowing_rem(-1), (0, true));"]}},{"name":"pub fn overflowing_mod_euc(self, rhs: isize) -> (isize, bool)","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn overflowing_neg(self) -> (isize, bool)","details":{"description":["Negates self, overflowing if this is equal to the minimum value.","Returns a tuple of the negated version of self along with a boolean indicating whether an overflow happened. If self is the minimum value (e.g. i32::MIN for values of type i32), then the minimum value will be returned again and true will be returned for an overflow happening."],"example":["Basic usage:","use std::isize;\n\nassert_eq!(2isize.overflowing_neg(), (-2, false));\nassert_eq!(isize::MIN.overflowing_neg(), (isize::MIN, true));"]}},{"name":"pub const fn overflowing_shl(self, rhs: u32) -> (isize, bool)","details":{"description":["Shifts self left by rhs bits.","Returns a tuple of the shifted version of self along with a boolean indicating whether the shift value was larger than or equal to the number of bits. If the shift value is too large, then value is masked (N-1) where N is the number of bits, and this value is then used to perform the shift."],"example":["Basic usage:","assert_eq!(0x1isize.overflowing_shl(4), (0x10, false));\nassert_eq!(0x1i32.overflowing_shl(36), (0x10, true));"]}},{"name":"pub const fn overflowing_shr(self, rhs: u32) -> (isize, bool)","details":{"description":["Shifts self right by rhs bits.","Returns a tuple of the shifted version of self along with a boolean indicating whether the shift value was larger than or equal to the number of bits. If the shift value is too large, then value is masked (N-1) where N is the number of bits, and this value is then used to perform the shift."],"example":["Basic usage:","assert_eq!(0x10isize.overflowing_shr(4), (0x1, false));\nassert_eq!(0x10i32.overflowing_shr(36), (0x1, true));"]}},{"name":"pub fn overflowing_abs(self) -> (isize, bool)","details":{"description":["Computes the absolute value of self.","Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow happened. If self is the minimum value (e.g. isize::MIN for values of type isize), then the minimum value will be returned again and true will be returned for an overflow happening."],"example":["Basic usage:","assert_eq!(10isize.overflowing_abs(), (10, false));\nassert_eq!((-10isize).overflowing_abs(), (10, false));\nassert_eq!((isize::min_value()).overflowing_abs(), (isize::min_value(), true));"]}},{"name":"pub fn overflowing_pow(self, exp: u32) -> (isize, bool)","stability":["🔬 This is a nightly-only experimental API.  (no_panic_pow #48320)"]},{"name":"pub fn pow(self, exp: u32) -> isize","details":{"description":["Raises self to the power of exp, using exponentiation by squaring."],"example":["Basic usage:","let x: isize = 2; // or any other integer type\n\nassert_eq!(x.pow(5), 32);"]}},{"name":"pub fn div_euc(self, rhs: isize) -> isize","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn mod_euc(self, rhs: isize) -> isize","stability":["🔬 This is a nightly-only experimental API.  (euclidean_division #49048)"]},{"name":"pub fn abs(self) -> isize","details":{"description":["Computes the absolute value of self.","Overflow behavior","The absolute value of isize::min_value() cannot be represented as an isize, and attempting to calculate it will cause an overflow. This means that code in debug mode will trigger a panic on this case and optimized code will return isize::min_value() without a panic."],"example":["Basic usage:","assert_eq!(10isize.abs(), 10);\nassert_eq!((-10isize).abs(), 10);"]}},{"name":"pub fn signum(self) -> isize","details":{"description":["Returns a number representing sign of self.","0 if the number is zero 1 if the number is positive -1 if the number is negative"],"example":["Basic usage:","assert_eq!(10isize.signum(), 1);\nassert_eq!(0isize.signum(), 0);\nassert_eq!((-10isize).signum(), -1);"]}},{"name":"pub const fn is_positive(self) -> bool","details":{"description":["Returns true if self is positive and false if the number is zero or negative."],"example":["Basic usage:","assert!(10isize.is_positive());\nassert!(!(-10isize).is_positive());"]}},{"name":"pub const fn is_negative(self) -> bool","details":{"description":["Returns true if self is negative and false if the number is zero or positive."],"example":["Basic usage:","assert!((-10isize).is_negative());\nassert!(!10isize.is_negative());"]}},{"name":"pub const fn to_be_bytes(self) -> [u8; 8]","stability":["🔬 This is a nightly-only experimental API.  (int_to_from_bytes #52963)"]},{"name":"pub const fn to_le_bytes(self) -> [u8; 8]","stability":["🔬 This is a nightly-only experimental API.  (int_to_from_bytes #52963)"]},{"name":"pub const fn to_ne_bytes(self) -> [u8; 8]","stability":["🔬 This is a nightly-only experimental API.  (int_to_from_bytes #52963)"]},{"name":"pub const fn from_be_bytes(bytes: [u8; 8]) -> isize","stability":["🔬 This is a nightly-only experimental API.  (int_to_from_bytes #52963)"]},{"name":"pub const fn from_le_bytes(bytes: [u8; 8]) -> isize","stability":["🔬 This is a nightly-only experimental API.  (int_to_from_bytes #52963)"]},{"name":"pub const fn from_ne_bytes(bytes: [u8; 8]) -> isize","stability":["🔬 This is a nightly-only experimental API.  (int_to_from_bytes #52963)"]}]}