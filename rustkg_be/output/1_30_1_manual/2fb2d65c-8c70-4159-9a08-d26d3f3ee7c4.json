{"stability":{"stable since":"1.0.0"},"apiName":"std::thread::Builder","apiType":"struct","apiDocumentation":{"apiDescription":["Thread factory, which can be used in order to configure the properties of a new thread.","Methods can be chained on it in order to configure it.","The two configurations available are:","name: specifies an associated name for the thread stack_size: specifies the desired stack size for the thread","The spawn method will take ownership of the builder and create an io::Result to the thread handle with the given configuration.","The thread::spawn free function uses a Builder with default configuration and unwraps its return value.","You may want to use spawn instead of thread::spawn, when you want to recover from a failure to launch a thread, indeed the free function will panick where the Builder method will return a io::Result."],"examples":["use std::thread;\n\nlet builder = thread::Builder::new();\n\nlet handler = builder.spawn(|| {\n    // thread code\n}).unwrap();\n\nhandler.join().unwrap();"]},"trait implementations":[{"name":"impl std::fmt::Debug for std::thread::Builder","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::thread::Builder","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::thread::Builder","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> Builder","details":{"description":["Generates the base configuration for spawning a thread, from which configuration methods can be chained."],"example":["use std::thread;\n\nlet builder = thread::Builder::new()\n                              .name(\"foo\".into())\n                              .stack_size(10);\n\nlet handler = builder.spawn(|| {\n    // thread code\n}).unwrap();\n\nhandler.join().unwrap();"]}},{"name":"pub fn name(self, name: String) -> Builder","details":{"description":["Names the thread-to-be. Currently the name is used for identification only in panic messages.","The name must not contain null bytes (\\0).","For more information about named threads, see this module-level documentation."],"example":["use std::thread;\n\nlet builder = thread::Builder::new()\n    .name(\"foo\".into());\n\nlet handler = builder.spawn(|| {\n    assert_eq!(thread::current().name(), Some(\"foo\"))\n}).unwrap();\n\nhandler.join().unwrap();"]}},{"name":"pub fn stack_size(self, size: usize) -> Builder","details":{"description":["Sets the size of the stack (in bytes) for the new thread.","The actual stack size may be greater than this value if the platform specifies minimal stack size.","For more information about the stack size for threads, see this module-level documentation."],"example":["use std::thread;\n\nlet builder = thread::Builder::new().stack_size(32 * 1024);"]}},{"name":"pub fn spawn<F, T>(self, f: F) -> Result<JoinHandle<T>> where F: FnOnce() -> T, F: Send + 'static, T: Send + 'static","details":{"description":["Spawns a new thread by taking ownership of the Builder, and returns an io::Result to its JoinHandle.","The spawned thread may outlive the caller (unless the caller thread is the main thread; the whole process is terminated when the main thread finishes). The join handle can be used to block on termination of the child thread, including recovering its panics.","For a more complete documentation see thread::spawn.","Errors","Unlike the spawn free function, this method yields an io::Result to capture any failure to create the thread at the OS level.","Panics","Panics if a thread name was set and it contained null bytes."],"example":["use std::thread;\n\nlet builder = thread::Builder::new();\n\nlet handler = builder.spawn(|| {\n    // thread code\n}).unwrap();\n\nhandler.join().unwrap();"]}}]}