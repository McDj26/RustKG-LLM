{"stability":{"unstable":"ğŸ”¬ This is a nightly-only experimental API.  (generator_trait #43122)"},"apiName":"std::ops::Generator","apiType":"trait","apiDocumentation":{"apiDescription":["The trait implemented by builtin generator types.","Generators, also commonly referred to as coroutines, are currently an experimental language feature in Rust. Added in RFC 2033 generators are currently intended to primarily provide a building block for async/await syntax but will likely extend to also providing an ergonomic definition for iterators and other primitives.","The syntax and semantics for generators is unstable and will require a further RFC for stabilization. At this time, though, the syntax is closure-like:","#![feature(generators, generator_trait)] use std::ops::{Generator, GeneratorState}; fn main() { let mut generator = || { yield 1; return \"foo\" }; match unsafe { generator.resume() } { GeneratorState::Yielded(1) => {} _ => panic!(\"unexpected return from resume\"), } match unsafe { generator.resume() } { GeneratorState::Complete(\"foo\") => {} _ => panic!(\"unexpected return from resume\"), } }","More documentation of generators can be found in the unstable book."]},"trait required methods":[{"name":"unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>","stability":["ğŸ”¬ This is a nightly-only experimental API.  (generator_trait #43122)"]}]}