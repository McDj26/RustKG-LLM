{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::UpperHex","apiType":"trait","apiDocumentation":{"apiDescription":["X formatting.","The UpperHex trait should format its output as a number in hexadecimal, with A through F in upper case.","For primitive signed integers (i8 to i128, and isize), negative values are formatted as the twoâ€™s complement representation.","The alternate flag, #, adds a 0x in front of the output.","For more information on formatters, see the module-level documentation."],"examples":["Basic usage with i32:","let x = 42; // 42 is '2A' in hex\n\nassert_eq!(format!(\"{:X}\", x), \"2A\");\nassert_eq!(format!(\"{:#X}\", x), \"0x2A\");\n\nassert_eq!(format!(\"{:X}\", -16), \"FFFFFFF0\");","Implementing UpperHex on a type:","use std::fmt;\n\nstruct Length(i32);\n\nimpl fmt::UpperHex for Length {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let val = self.0;\n\n        write!(f, \"{:X}\", val) // delegate to i32's implementation\n    }\n}\n\nlet l = Length(9);\n\nprintln!(\"l as hex is: {:X}\", l);"]},"trait required methods":[{"name":"fn fmt(&self, f: &mut Formatter) -> Result<(), Error>","details":{"description":"Formats the value using the given formatter."}}]}