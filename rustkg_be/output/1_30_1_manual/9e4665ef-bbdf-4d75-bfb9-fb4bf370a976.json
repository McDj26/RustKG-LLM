{"stability":{"stable since":"1.0.0"},"apiName":"std::io::LineWriter","apiType":"struct","apiDocumentation":{"apiDescription":["Wraps a writer and buffers output to it, flushing whenever a newline (0x0a, '\\n') is detected.","The BufWriter struct wraps a writer and buffers its output. But it only does this batched write when it goes out of scope, or when the internal buffer is full. Sometimes, you'd prefer to write each line as it's completed, rather than the entire buffer at once. Enter LineWriter. It does exactly that.","Like BufWriter, a LineWriterâ€™s buffer will also be flushed when the LineWriter goes out of scope or when its internal buffer is full.","If there's still a partial line in the buffer when the LineWriter is dropped, it will flush those contents."],"examples":["We can use LineWriter to write one line at a time, significantly\nreducing the number of actual writes to the file.","use std::fs::{self, File};\nuse std::io::prelude::*;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let road_not_taken = b\"I shall be telling this with a sigh\nSomewhere ages and ages hence:\nTwo roads diverged in a wood, and I -\nI took the one less traveled by,\nAnd that has made all the difference.\";\n\n    let file = File::create(\"poem.txt\")?;\n    let mut file = LineWriter::new(file);\n\n    file.write_all(b\"I shall be telling this with a sigh\")?;\n\n    // No bytes are written until a newline is encountered (or\n    // the internal buffer is filled).\n    assert_eq!(fs::read_to_string(\"poem.txt\")?, \"\");\n    file.write_all(b\"\\n\")?;\n    assert_eq!(\n        fs::read_to_string(\"poem.txt\")?,\n        \"I shall be telling this with a sigh\\n\",\n    );\n\n    // Write the rest of the poem.\n    file.write_all(b\"Somewhere ages and ages hence:\nTwo roads diverged in a wood, and I -\nI took the one less traveled by,\nAnd that has made all the difference.\")?;\n\n    // The last line of the poem doesn't end in a newline, so\n    // we have to flush or drop the `LineWriter` to finish\n    // writing.\n    file.flush()?;\n\n    // Confirm the whole poem was written.\n    assert_eq!(fs::read(\"poem.txt\")?, &road_not_taken[..]);\n    Ok(())\n}"]},"trait implementations":[{"name":"impl<W: std::io::Write> std::io::Write for std::io::LineWriter<W>","stable since":"1.0.0"},{"name":"impl<W: std::io::Write> std::fmt::Debug for std::io::LineWriter<W> where W: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<W> std::marker::Send for std::io::LineWriter<W> where W: std::marker::Send","stable since":"1.0.0"},{"name":"impl<W> std::marker::Sync for std::io::LineWriter<W> where W: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(inner: W) -> LineWriter<W>","details":{"description":["Creates a new LineWriter."],"example":["use std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let file = LineWriter::new(file);\n    Ok(())\n}"]}},{"name":"pub fn with_capacity(cap: usize, inner: W) -> LineWriter<W>","details":{"description":["Creates a new LineWriter with a specified capacity for the internal buffer."],"example":["use std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let file = LineWriter::with_capacity(100, file);\n    Ok(())\n}"]}},{"name":"pub fn get_ref(&self) -> &W","details":{"description":["Gets a reference to the underlying writer."],"example":["use std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let file = LineWriter::new(file);\n\n    let reference = file.get_ref();\n    Ok(())\n}"]}},{"name":"pub fn get_mut(&mut self) -> &mut W","details":{"description":["Gets a mutable reference to the underlying writer.","Caution must be taken when calling methods on the mutable reference returned as extra writes could corrupt the output stream."],"example":["use std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let mut file = LineWriter::new(file);\n\n    // we can use reference just like file\n    let reference = file.get_mut();\n    Ok(())\n}"]}},{"name":"pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>>","details":{"description":["Unwraps this LineWriter, returning the underlying writer.","The internal buffer is written out before returning the writer.","Errors","An Err will be returned if an error occurs while flushing the buffer."],"example":["use std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n\n    let writer: LineWriter<File> = LineWriter::new(file);\n\n    let file: File = writer.into_inner()?;\n    Ok(())\n}"]}}]}