{"stability":{"stable since":"1.0.0"},"apiName":"std::fs::OpenOptions","apiType":"struct","apiDocumentation":{"apiDescription":["Options and flags which can be used to configure how a file is opened.","This builder exposes the ability to configure how a File is opened and what operations are permitted on the open file. The File::open and File::create methods are aliases for commonly used options using this builder.","Generally speaking, when using OpenOptions, you'll first call new, then chain calls to methods to set each option, then call open, passing the path of the file you're trying to open. This will give you a io::Result with a File inside that you can further operate on."],"examples":["Opening a file to read:","use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().read(true).open(\"foo.txt\");","Opening a file for both reading and writing, as well as creating it if it\ndoesn't exist:","use std::fs::OpenOptions;\n\nlet file = OpenOptions::new()\n            .read(true)\n            .write(true)\n            .create(true)\n            .open(\"foo.txt\");"]},"trait implementations":[{"name":"impl std::clone::Clone for std::fs::OpenOptions","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::fs::OpenOptions","stable since":"1.0.0"},{"name":"impl std::os::windows::fs::OpenOptionsExt for std::fs::OpenOptions","stable since":"1.10.0"},{"name":"impl std::os::unix::fs::OpenOptionsExt for std::fs::OpenOptions","stable since":"1.1.0"},{"name":"impl std::marker::Send for std::fs::OpenOptions","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::fs::OpenOptions","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> OpenOptions","details":{"description":["Creates a blank new set of options ready for configuration.","All options are initially set to false."],"example":["use std::fs::OpenOptions;\n\nlet mut options = OpenOptions::new();\nlet file = options.read(true).open(\"foo.txt\");"]}},{"name":"pub fn read(&mut self, read: bool) -> &mut OpenOptions","details":{"description":["Sets the option for read access.","This option, when true, will indicate that the file should be read-able if opened."],"example":["use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().read(true).open(\"foo.txt\");"]}},{"name":"pub fn write(&mut self, write: bool) -> &mut OpenOptions","details":{"description":["Sets the option for write access.","This option, when true, will indicate that the file should be write-able if opened.","If the file already exists, any write calls on it will overwrite its contents, without truncating it."],"example":["use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true).open(\"foo.txt\");"]}},{"name":"pub fn append(&mut self, append: bool) -> &mut OpenOptions","details":{"description":["Sets the option for the append mode.","This option, when true, means that writes will append to a file instead of overwriting previous contents. Note that setting .write(true).append(true) has the same effect as setting only .append(true).","For most filesystems, the operating system guarantees that all writes are atomic: no writes get mangled because another process writes at the same time.","One maybe obvious note when using append-mode: make sure that all data that belongs together is written to the file in one operation. This can be done by concatenating strings before passing them to write(), or using a buffered writer (with a buffer of adequate size), and calling flush() when the message is complete.","If a file is opened with both read and append access, beware that after opening, and after every write, the position for reading may be set at the end of the file. So, before writing, save the current position (using seek(SeekFrom::Current(0)), and restore it before the next read.","Note","This function doesn't create the file if it doesn't exist. Use the create method to do so."],"example":["use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().append(true).open(\"foo.txt\");"]}},{"name":"pub fn truncate(&mut self, truncate: bool) -> &mut OpenOptions","details":{"description":["Sets the option for truncating a previous file.","If a file is successfully opened with this option set it will truncate the file to 0 length if it already exists.","The file must be opened with write access for truncate to work."],"example":["use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true).truncate(true).open(\"foo.txt\");"]}},{"name":"pub fn create(&mut self, create: bool) -> &mut OpenOptions","details":{"description":["Sets the option for creating a new file.","This option indicates whether a new file will be created if the file does not yet already exist.","In order for the file to be created, write or append access must be used."],"example":["use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true).create(true).open(\"foo.txt\");"]}},{"name":"pub fn create_new(&mut self, create_new: bool) -> &mut OpenOptions","details":{"description":["Sets the option to always create a new file.","This option indicates whether a new file will be created. No file is allowed to exist at the target location, also no (dangling) symlink.","This option is useful because it is atomic. Otherwise between checking whether a file exists and creating a new one, the file may have been created by another process (a TOCTOU race condition / attack).","If .create_new(true) is set, .create() and .truncate() are ignored.","The file must be opened with write or append access in order to create a new file."],"example":["use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().write(true)\n                             .create_new(true)\n                             .open(\"foo.txt\");"]}},{"name":"pub fn open<P: AsRef<Path>>(&self, path: P) -> Result<File>","details":{"description":["Opens a file at path with the options specified by self.","Errors","This function will return an error under a number of different circumstances. Some of these error conditions are listed here, together with their ErrorKind. The mapping to ErrorKinds is not part of the compatibility contract of the function, especially the Other kind might change to more specific kinds in the future.","NotFound: The specified file does not exist and neither create or create_new is set. NotFound: One of the directory components of the file path does not exist. PermissionDenied: The user lacks permission to get the specified access rights for the file. PermissionDenied: The user lacks permission to open one of the directory components of the specified path. AlreadyExists: create_new was specified and the file already exists. InvalidInput: Invalid combinations of open options (truncate without write access, no access mode set, etc.). Other: One of the directory components of the specified file path was not, in fact, a directory. Other: Filesystem-level errors: full disk, write permission requested on a read-only file system, exceeded disk quota, too many open files, too long filename, too many symbolic links in the specified path (Unix-like systems only), etc."],"example":["use std::fs::OpenOptions;\n\nlet file = OpenOptions::new().open(\"foo.txt\");"]}}]}