{"stability":{"stable since":"1.7.0"},"apiName":"std::hash::BuildHasher","apiType":"trait","apiDocumentation":{"apiDescription":["A trait for creating instances of Hasher.","A BuildHasher is typically used (e.g. by HashMap) to create Hashers for each key such that they are hashed independently of one another, since Hashers contain state.","For each instance of BuildHasher, the Hashers created by build_hasher should be identical. That is, if the same stream of bytes is fed into each hasher, the same output will also be generated."],"examples":["use std::collections::hash_map::RandomState;\nuse std::hash::{BuildHasher, Hasher};\n\nlet s = RandomState::new();\nlet mut hasher_1 = s.build_hasher();\nlet mut hasher_2 = s.build_hasher();\n\nhasher_1.write_u32(8128);\nhasher_2.write_u32(8128);\n\nassert_eq!(hasher_1.finish(), hasher_2.finish());"]},"trait required methods":[{"name":"fn build_hasher(&self) -> Self::Hasher","details":{"description":"Creates a new hasher.","example":["use std::collections::hash_map::RandomState;\nuse std::hash::BuildHasher;\n\nlet s = RandomState::new();\nlet new_s = s.build_hasher();"]}}]}