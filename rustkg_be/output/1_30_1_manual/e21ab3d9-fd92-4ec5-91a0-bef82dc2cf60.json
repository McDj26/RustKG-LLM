{"stability":{"stable since":"1.21.0"},"apiName":"std::mem::discriminant","apiType":"function","apiDocumentation":{"apiDescription":["Returns a value uniquely identifying the enum variant in v.","If T is not an enum, calling this function will not result in undefined behavior, but the return value is unspecified.","Stability","The discriminant of an enum variant may change if the enum definition changes. A discriminant of some variant will not change between compilations with the same compiler."],"examples":["This can be used to compare enums that carry data, while disregarding\nthe actual data:","use std::mem;\n\nenum Foo { A(&'static str), B(i32), C(i32) }\n\nassert!(mem::discriminant(&Foo::A(\"bar\")) == mem::discriminant(&Foo::A(\"baz\")));\nassert!(mem::discriminant(&Foo::B(1))     == mem::discriminant(&Foo::B(2)));\nassert!(mem::discriminant(&Foo::B(3))     != mem::discriminant(&Foo::C(3)));"]}}