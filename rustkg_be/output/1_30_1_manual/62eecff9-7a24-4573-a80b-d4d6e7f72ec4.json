{"stability":{"stable since":"1.0.0","deprecated":"Deprecated since 1.26.0: use inherent methods instead\n"},"apiName":"std::ascii::AsciiExt","apiType":"trait","apiDocumentation":{"apiDescription":["Extension methods for ASCII-subset only operations.","Be aware that operations on seemingly non-ASCII characters can sometimes have unexpected results. Consider this example:","use std::ascii::AsciiExt; assert_eq!(AsciiExt::to_ascii_uppercase(\"café\"), \"CAFÉ\"); assert_eq!(AsciiExt::to_ascii_uppercase(\"café\"), \"CAFé\");","In the first example, the lowercased string is represented \"cafe\\u{301}\" (the last character is an acute accent combining character). Unlike the other characters in the string, the combining character will not get mapped to an uppercase variant, resulting in \"CAFE\\u{301}\". In the second example, the lowercased string is represented \"caf\\u{e9}\" (the last character is a single Unicode character representing an 'e' with an acute accent). Since the last character is defined outside the scope of ASCII, it will not get mapped to an uppercase variant, resulting in \"CAF\\u{e9}\"."]},"trait required methods":[{"name":"fn is_ascii(&self) -> bool","stability":["Deprecated since 1.26.0: use inherent methods instead\n"]},{"name":"fn to_ascii_uppercase(&self) -> Self::Owned","stability":["Deprecated since 1.26.0: use inherent methods instead\n"]},{"name":"fn to_ascii_lowercase(&self) -> Self::Owned","stability":["Deprecated since 1.26.0: use inherent methods instead\n"]},{"name":"fn eq_ignore_ascii_case(&self, other: &Self) -> bool","stability":["Deprecated since 1.26.0: use inherent methods instead\n"]},{"name":"fn make_ascii_uppercase(&mut self)","stability":["Deprecated since 1.26.0: use inherent methods instead\n"]},{"name":"fn make_ascii_lowercase(&mut self)","stability":["Deprecated since 1.26.0: use inherent methods instead\n"]}]}