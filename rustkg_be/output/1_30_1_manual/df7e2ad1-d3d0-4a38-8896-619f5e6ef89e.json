{"stability":{"unstable":"ğŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"},"apiName":"std::future::UnsafeFutureObj","apiType":"trait","apiDocumentation":{"apiDescription":["A custom implementation of a future trait object for FutureObj, providing a hand-rolled vtable.","This custom representation is typically used only in no_std contexts, where the default Box-based implementation is not available.","The implementor must guarantee that it is safe to call poll repeatedly (in a non-concurrent fashion) with the result of into_raw until drop is called."]},"trait required methods":[{"name":"fn into_raw(self) -> *mut ()","stability":["ğŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T>","stability":["ğŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]},{"name":"unsafe fn drop(ptr: *mut ())","stability":["ğŸ”¬ This is a nightly-only experimental API.  (futures_api #50547)futures in libcore are unstable\n"]}]}