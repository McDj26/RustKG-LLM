{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::Write","apiType":"trait","apiDocumentation":{"apiDescription":["A collection of methods that are required to format a message into a stream.","This trait is the type which this modules requires when formatting information. This is similar to the standard library's io::Write trait, but it is only intended for use in libcore.","This trait should generally not be implemented by consumers of the standard library. The write! macro accepts an instance of io::Write, and the io::Write trait is favored over implementing this trait."]},"trait required methods":[{"name":"fn write_str(&mut self, s: &str) -> Result<(), Error>","details":{"description":"Writes a slice of bytes into this writer, returning whether the write\nsucceeded.","example":["use std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_str(s)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"hola\").unwrap();\nassert_eq!(&buf, \"hola\");"]}}],"trait provided methods":[{"name":"fn write_char(&mut self, c: char) -> Result<(), Error>","details":{"description":"Writes a char into this writer, returning whether the write succeeded.","example":["use std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, c: char) -> Result<(), Error> {\n    f.write_char(c)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, 'a').unwrap();\nwriter(&mut buf, 'b').unwrap();\nassert_eq!(&buf, \"ab\");"]}},{"name":"fn write_fmt(&mut self, args: Arguments) -> Result<(), Error>","details":{"description":"Glue for usage of the write! macro with implementors of this trait.","example":["use std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_fmt(format_args!(\"{}\", s))\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"world\").unwrap();\nassert_eq!(&buf, \"world\");"]}}]}