{"stability":{"stable since":"1.0.0"},"apiName":"std::iter::Map","apiType":"struct","apiDocumentation":{"apiDescription":["An iterator that maps the values of iter with f.","This struct is created by the map method on Iterator. See its documentation for more.","Notes about side effects","The map iterator implements DoubleEndedIterator, meaning that you can also map backwards:","let v: Vec<i32> = vec![1, 2, 3].into_iter().map(|x| x + 1).rev().collect(); assert_eq!(v, [4, 3, 2]);","But if your closure has state, iterating backwards may act in a way you do not expect. Let's go through an example. First, in the forward direction:","let mut c = 0; for pair in vec!['a', 'b', 'c'].into_iter() .map(|letter| { c += 1; (letter, c) }) { println!(\"{:?}\", pair); }","This will print \"('a', 1), ('b', 2), ('c', 3)\".","Now consider this twist where we add a call to rev. This version will print ('c', 1), ('b', 2), ('a', 3). Note that the letters are reversed, but the values of the counter still go in order. This is because map() is still being called lazily on each item, but we are popping items off the back of the vector now, instead of shifting them from the front.","let mut c = 0; for pair in vec!['a', 'b', 'c'].into_iter() .map(|letter| { c += 1; (letter, c) }) .rev() { println!(\"{:?}\", pair); }"]},"trait implementations":[{"name":"impl<B, I, F> std::iter::Iterator for std::iter::Map<I, F> where F: std::ops::FnMut(<I as std::iter::Iterator>::std::iter::Iterator::Item) -> B, I: std::iter::Iterator","stable since":"1.0.0"},{"name":"impl<B, I, F> std::iter::DoubleEndedIterator for std::iter::Map<I, F> where F: std::ops::FnMut(<I as std::iter::Iterator>::std::iter::Iterator::Item) -> B, I: std::iter::DoubleEndedIterator","stable since":"1.0.0"},{"name":"impl<I, F> std::clone::Clone for std::iter::Map<I, F> where F: std::clone::Clone, I: std::clone::Clone","stable since":"1.0.0"},{"name":"impl<B, I, F> std::iter::TrustedLen for std::iter::Map<I, F> where F: std::ops::FnMut(<I as std::iter::Iterator>::std::iter::Iterator::Item) -> B, I: std::iter::TrustedLen","stable since":"1.0.0"},{"name":"impl<I, F> std::fmt::Debug for std::iter::Map<I, F> where I: std::fmt::Debug","stable since":"1.9.0"},{"name":"impl<B, I, F> std::iter::ExactSizeIterator for std::iter::Map<I, F> where F: std::ops::FnMut(<I as std::iter::Iterator>::std::iter::Iterator::Item) -> B, I: std::iter::ExactSizeIterator","stable since":"1.0.0"},{"name":"impl<B, I, F> std::iter::FusedIterator for std::iter::Map<I, F> where F: std::ops::FnMut(<I as std::iter::Iterator>::std::iter::Iterator::Item) -> B, I: std::iter::FusedIterator","stable since":"1.26.0"},{"name":"impl<I, F> std::marker::Send for std::iter::Map<I, F> where F: std::marker::Send, I: std::marker::Send","stable since":"1.0.0"},{"name":"impl<I, F> std::marker::Sync for std::iter::Map<I, F> where F: std::marker::Sync, I: std::marker::Sync","stable since":"1.0.0"}]}