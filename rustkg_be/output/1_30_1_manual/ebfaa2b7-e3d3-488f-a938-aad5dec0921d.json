{"stability":{"stable since":"1.10.0"},"apiName":"std::panic::Location","apiType":"struct","apiDocumentation":{"apiDescription":["A struct containing information about the location of a panic.","This structure is created by the location method of PanicInfo."],"examples":["use std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred in file '{}' at line {}\", location.file(), location.line());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");"]},"trait implementations":[{"name":"impl<'a> std::fmt::Debug for std::panic::Location<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::fmt::Display for std::panic::Location<'a>","stable since":"1.26.0"},{"name":"impl<'a> std::marker::Send for std::panic::Location<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::marker::Sync for std::panic::Location<'a>","stable since":"1.0.0"}],"methods":[{"name":"pub fn file(&self) -> &str","details":{"description":["Returns the name of the source file from which the panic originated."],"example":["use std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred in file '{}'\", location.file());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");"]}},{"name":"pub fn line(&self) -> u32","details":{"description":["Returns the line number from which the panic originated."],"example":["use std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred at line {}\", location.line());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");"]}},{"name":"pub fn column(&self) -> u32","details":{"description":["Returns the column from which the panic originated."],"example":["use std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!(\"panic occurred at column {}\", location.column());\n    } else {\n        println!(\"panic occurred but can't get location information...\");\n    }\n}));\n\npanic!(\"Normal panic\");"]}}]}