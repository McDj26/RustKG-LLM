{"stability":{"stable since":"1.0.0"},"apiName":"std::str::Chars","apiType":"struct","apiDocumentation":{"apiDescription":["An iterator over the chars of a string slice.","This struct is created by the chars method on str. See its documentation for more."]},"trait implementations":[{"name":"impl<'a> std::iter::Iterator for std::str::Chars<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::iter::DoubleEndedIterator for std::str::Chars<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::clone::Clone for std::str::Chars<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::fmt::Debug for std::str::Chars<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::iter::FusedIterator for std::str::Chars<'a>","stable since":"1.26.0"},{"name":"impl<'a> std::marker::Send for std::str::Chars<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::marker::Sync for std::str::Chars<'a>","stable since":"1.0.0"}],"methods":[{"name":"pub fn as_str(&self) -> &'a str","details":{"description":["View the underlying data as a subslice of the original data.","This has the same lifetime as the original slice, and so the iterator can continue to be used while this exists."],"example":["let mut chars = \"abc\".chars();\n\nassert_eq!(chars.as_str(), \"abc\");\nchars.next();\nassert_eq!(chars.as_str(), \"bc\");\nchars.next();\nchars.next();\nassert_eq!(chars.as_str(), \"\");"]}}]}