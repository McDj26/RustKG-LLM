{"stability":{"stable since":"1.20.0"},"apiName":"std::str::from_utf8_mut","apiType":"function","apiDocumentation":{"apiDescription":["Converts a mutable slice of bytes to a mutable string slice."],"examples":["Basic usage:","use std::str;\n\n// \"Hello, Rust!\" as a mutable vector\nlet mut hellorust = vec![72, 101, 108, 108, 111, 44, 32, 82, 117, 115, 116, 33];\n\n// As we know these bytes are valid, we can use `unwrap()`\nlet outstr = str::from_utf8_mut(&mut hellorust).unwrap();\n\nassert_eq!(\"Hello, Rust!\", outstr);","Incorrect bytes:","use std::str;\n\n// Some invalid bytes in a mutable vector\nlet mut invalid = vec![128, 223];\n\nassert!(str::from_utf8_mut(&mut invalid).is_err());","See the docs for Utf8Error for more details on the kinds of\nerrors that can be returned."]}}