{"stability":{"stable since":"1.0.0"},"apiName":"std::iter::FromIterator","apiType":"trait","apiDocumentation":{"apiDescription":["Conversion from an Iterator.","By implementing FromIterator for a type, you define how it will be created from an iterator. This is common for types which describe a collection of some kind.","FromIterator's from_iter is rarely called explicitly, and is instead used through Iterator's collect method. See collect's documentation for more examples.","See also: IntoIterator."],"examples":["Basic usage:","use std::iter::FromIterator;\n\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v = Vec::from_iter(five_fives);\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);","Using collect to implicitly use FromIterator:","let five_fives = std::iter::repeat(5).take(5);\n\nlet v: Vec<i32> = five_fives.collect();\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);","Implementing FromIterator for your type:","use std::iter::FromIterator;\n\n// A sample collection, that's just a wrapper over Vec<T>\n#[derive(Debug)]\nstruct MyCollection(Vec<i32>);\n\n// Let's give it some methods so we can create one and add things\n// to it.\nimpl MyCollection {\n    fn new() -> MyCollection {\n        MyCollection(Vec::new())\n    }\n\n    fn add(&mut self, elem: i32) {\n        self.0.push(elem);\n    }\n}\n\n// and we'll implement FromIterator\nimpl FromIterator<i32> for MyCollection {\n    fn from_iter<I: IntoIterator<Item=i32>>(iter: I) -> Self {\n        let mut c = MyCollection::new();\n\n        for i in iter {\n            c.add(i);\n        }\n\n        c\n    }\n}\n\n// Now we can make a new iterator...\nlet iter = (0..5).into_iter();\n\n// ... and make a MyCollection out of it\nlet c = MyCollection::from_iter(iter);\n\nassert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n\n// collect works too!\n\nlet iter = (0..5).into_iter();\nlet c: MyCollection = iter.collect();\n\nassert_eq!(c.0, vec![0, 1, 2, 3, 4]);"]},"trait required methods":[{"name":"fn from_iter<T>(iter: T) -> Self where T: IntoIterator<Item = A>","details":{"description":"Creates a value from an iterator.","example":["Basic usage:","use std::iter::FromIterator;\n\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v = Vec::from_iter(five_fives);\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);"]}}]}