{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::btree_map::VacantEntry","apiType":"struct","apiDocumentation":{"apiDescription":["A view into a vacant entry in a BTreeMap. It is part of the Entry enum."]},"trait implementations":[{"name":"impl<'a, K, V> std::fmt::Debug for std::collections::btree_map::VacantEntry<'a, K, V> where K: 'a + std::cmp::Ord + std::fmt::Debug, V: 'a","stable since":"1.12.0"},{"name":"impl<'a, K, V> std::marker::Send for std::collections::btree_map::VacantEntry<'a, K, V> where K: std::marker::Send, V: std::marker::Send","stable since":"1.0.0"},{"name":"impl<'a, K, V> std::marker::Sync for std::collections::btree_map::VacantEntry<'a, K, V> where K: std::marker::Sync, V: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn key(&self) -> &K","details":{"description":["Gets a reference to the key that would be used when inserting a value through the VacantEntry."],"example":["use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");"]}},{"name":"pub fn into_key(self) -> K","details":{"description":["Take ownership of the key."],"example":["use std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nif let Entry::Vacant(v) = map.entry(\"poneyland\") {\n    v.into_key();\n}"]}},{"name":"pub fn insert(self, value: V) -> &'a mut V","details":{"description":["Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it."],"example":["use std::collections::BTreeMap;\n\nlet mut count: BTreeMap<&str, usize> = BTreeMap::new();\n\n// count the number of occurrences of letters in the vec\nfor x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {\n    *count.entry(x).or_insert(0) += 1;\n}\n\nassert_eq!(count[\"a\"], 3);"]}}]}