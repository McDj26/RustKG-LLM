{"stability":{"stable since":"1.0.0"},"apiName":"std::convert::From","apiType":"trait","apiDocumentation":{"apiDescription":["Simple and safe type conversions in to Self. It is the reciprocal of Into.","This trait is useful when performing error handling as described by the book and is closely related to the ? operator.","When constructing a function that is capable of failing the return type will generally be of the form Result<T, E>.","The From trait allows for simplification of error handling by providing a means of returning a single error type that encapsulates numerous possible erroneous situations.","This trait is not limited to error handling, rather the general case for this trait would be in any type conversions to have an explicit definition of how they are performed.","Note: this trait must not fail. If the conversion can fail, use TryFrom or a dedicated method which returns an Option<T> or a Result<T, E>.","Generic Implementations","From<T> for U implies Into<U>for T from is reflexive, which means that From<T> for T is implemented"],"examples":["String implements From<&str>:","let string = \"hello\".to_string();\nlet other_string = String::from(\"hello\");\n\nassert_eq!(string, other_string);","An example usage for error handling:","use std::io::{self, Read};\nuse std::num;\n\nenum CliError {\n    IoError(io::Error),\n    ParseError(num::ParseIntError),\n}\n\nimpl From<io::Error> for CliError {\n    fn from(error: io::Error) -> Self {\n        CliError::IoError(error)\n    }\n}\n\nimpl From<num::ParseIntError> for CliError {\n    fn from(error: num::ParseIntError) -> Self {\n        CliError::ParseError(error)\n    }\n}\n\nfn open_and_parse_file(file_name: &str) -> Result<i32, CliError> {\n    let mut file = std::fs::File::open(\"test\")?;\n    let mut contents = String::new();\n    file.read_to_string(&mut contents)?;\n    let num: i32 = contents.trim().parse()?;\n    Ok(num)\n}"]},"trait required methods":[{"name":"fn from(T) -> Self","details":{"description":"Performs the conversion."}}]}