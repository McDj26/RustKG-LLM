{"stability":{"stable since":"1.0.0"},"apiName":"std::try","apiType":"macro","apiDocumentation":{"apiDescription":["Helper macro for reducing boilerplate code for matching Result together with converting downstream errors.","The ? operator was added to replace try! and should be used instead.","try! matches the given Result. In case of the Ok variant, the expression has the value of the wrapped value.","In case of the Err variant, it retrieves the inner error. try! then performs conversion using From. This provides automatic conversion between specialized errors and more general ones. The resulting error is then immediately returned.","Because of the early return, try! can only be used in functions that return Result."],"examples":["use std::io;\nuse std::fs::File;\nuse std::io::prelude::*;\n\nenum MyError {\n    FileWriteError\n}\n\nimpl From<io::Error> for MyError {\n    fn from(e: io::Error) -> MyError {\n        MyError::FileWriteError\n    }\n}\n\n// The preferred method of quick returning Errors\nfn write_to_file_question() -> Result<(), MyError> {\n    let mut file = File::create(\"my_best_friends.txt\")?;\n    file.write_all(b\"This is a list of my best friends.\")?;\n    Ok(())\n}\n\n// The previous method of quick returning Errors\nfn write_to_file_using_try() -> Result<(), MyError> {\n    let mut file = try!(File::create(\"my_best_friends.txt\"));\n    try!(file.write_all(b\"This is a list of my best friends.\"));\n    Ok(())\n}\n\n// This is equivalent to:\nfn write_to_file_using_match() -> Result<(), MyError> {\n    let mut file = try!(File::create(\"my_best_friends.txt\"));\n    match file.write_all(b\"This is a list of my best friends.\") {\n        Ok(v) => v,\n        Err(e) => return Err(From::from(e)),\n    }\n    Ok(())\n}"]}}