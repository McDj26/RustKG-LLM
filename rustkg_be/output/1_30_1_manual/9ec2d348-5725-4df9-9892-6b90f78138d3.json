{"stability":{"stable since":"1.0.0"},"apiName":"std::convert::AsMut","apiType":"trait","apiDocumentation":{"apiDescription":["A cheap, mutable reference-to-mutable reference conversion.","This trait is similar to AsRef but used for converting between mutable references.","Note: this trait must not fail. If the conversion can fail, use a dedicated method which returns an Option<T> or a Result<T, E>.","Generic Implementations","AsMut auto-dereferences if the inner type is a mutable reference (e.g.: foo.as_mut() will work the same if foo has type &mut Foo or &mut &mut Foo)"],"examples":["Box<T> implements AsMut<T>:","fn add_one<T: AsMut<u64>>(num: &mut T) {\n    *num.as_mut() += 1;\n}\n\nlet mut boxed_num = Box::new(0);\nadd_one(&mut boxed_num);\nassert_eq!(*boxed_num, 1);"]},"trait required methods":[{"name":"fn as_mut(&mut self) -> &mut T","details":{"description":"Performs the conversion."}}]}