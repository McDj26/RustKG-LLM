{"stability":{"stable since":"1.0.0"},"apiName":"std::net::SocketAddrV6","apiType":"struct","apiDocumentation":{"apiDescription":["An IPv6 socket address.","IPv6 socket addresses consist of an Ipv6 address, a 16-bit port number, as well as fields containing the traffic class, the flow label, and a scope identifier (see IETF RFC 2553, Section 3.3 for more details).","See SocketAddr for a type encompassing both IPv4 and IPv6 socket addresses.","The size of a SocketAddrV6 struct may vary depending on the target operating system."],"examples":["use std::net::{Ipv6Addr, SocketAddrV6};\n\nlet socket = SocketAddrV6::new(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n\nassert_eq!(\"[2001:db8::1]:8080\".parse(), Ok(socket));\nassert_eq!(socket.ip(), &Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1));\nassert_eq!(socket.port(), 8080);"]},"trait implementations":[{"name":"impl std::marker::Copy for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::convert::From<std::net::SocketAddrV6> for std::net::SocketAddr","stable since":"1.16.0"},{"name":"impl std::fmt::Display for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::net::ToSocketAddrs for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::str::FromStr for std::net::SocketAddrV6","stable since":"1.5.0"},{"name":"impl std::marker::Send for std::net::SocketAddrV6","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::net::SocketAddrV6","stable since":"1.0.0"}],"methods":[{"name":"pub fn new( ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6","details":{"description":["Creates a new socket address from an IPv6 address, a 16-bit port number, and the flowinfo and scope_id fields.","For more information on the meaning and layout of the flowinfo and scope_id parameters, see IETF RFC 2553, Section 3.3."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);"]}},{"name":"pub fn ip(&self) -> &Ipv6Addr","details":{"description":["Returns the IP address associated with this socket address."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\nassert_eq!(socket.ip(), &Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));"]}},{"name":"pub fn set_ip(&mut self, new_ip: Ipv6Addr)","details":{"description":["Changes the IP address associated with this socket address."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\nsocket.set_ip(Ipv6Addr::new(76, 45, 0, 0, 0, 0, 0, 0));\nassert_eq!(socket.ip(), &Ipv6Addr::new(76, 45, 0, 0, 0, 0, 0, 0));"]}},{"name":"pub fn port(&self) -> u16","details":{"description":["Returns the port number associated with this socket address."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\nassert_eq!(socket.port(), 8080);"]}},{"name":"pub fn set_port(&mut self, new_port: u16)","details":{"description":["Changes the port number associated with this socket address."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\nsocket.set_port(4242);\nassert_eq!(socket.port(), 4242);"]}},{"name":"pub fn flowinfo(&self) -> u32","details":{"description":["Returns the flow information associated with this address.","This information corresponds to the sin6_flowinfo field in C's netinet/in.h, as specified in IETF RFC 2553, Section 3.3. It combines information about the flow label and the traffic class as specified in IETF RFC 2460, respectively Section 6 and Section 7."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 10, 0);\nassert_eq!(socket.flowinfo(), 10);"]}},{"name":"pub fn set_flowinfo(&mut self, new_flowinfo: u32)","details":{"description":["Changes the flow information associated with this socket address.","See the flowinfo method's documentation for more details."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 10, 0);\nsocket.set_flowinfo(56);\nassert_eq!(socket.flowinfo(), 56);"]}},{"name":"pub fn scope_id(&self) -> u32","details":{"description":["Returns the scope ID associated with this address.","This information corresponds to the sin6_scope_id field in C's netinet/in.h, as specified in IETF RFC 2553, Section 3.3."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 78);\nassert_eq!(socket.scope_id(), 78);"]}},{"name":"pub fn set_scope_id(&mut self, new_scope_id: u32)","details":{"description":["Change the scope ID associated with this socket address.","See the scope_id method's documentation for more details."],"example":["use std::net::{SocketAddrV6, Ipv6Addr};\n\nlet mut socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 78);\nsocket.set_scope_id(42);\nassert_eq!(socket.scope_id(), 42);"]}}]}