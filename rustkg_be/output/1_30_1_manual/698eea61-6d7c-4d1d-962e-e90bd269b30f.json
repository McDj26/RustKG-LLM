{"stability":{"stable since":"1.0.0"},"apiName":"std::iter::IntoIterator","apiType":"trait","apiDocumentation":{"apiDescription":["Conversion into an Iterator.","By implementing IntoIterator for a type, you define how it will be converted to an iterator. This is common for types which describe a collection of some kind.","One benefit of implementing IntoIterator is that your type will work with Rust's for loop syntax.","See also: FromIterator."],"examples":["Basic usage:","let v = vec![1, 2, 3];\nlet mut iter = v.into_iter();\n\nassert_eq!(Some(1), iter.next());\nassert_eq!(Some(2), iter.next());\nassert_eq!(Some(3), iter.next());\nassert_eq!(None, iter.next());","Implementing IntoIterator for your type:","// A sample collection, that's just a wrapper over Vec<T>\n#[derive(Debug)]\nstruct MyCollection(Vec<i32>);\n\n// Let's give it some methods so we can create one and add things\n// to it.\nimpl MyCollection {\n    fn new() -> MyCollection {\n        MyCollection(Vec::new())\n    }\n\n    fn add(&mut self, elem: i32) {\n        self.0.push(elem);\n    }\n}\n\n// and we'll implement IntoIterator\nimpl IntoIterator for MyCollection {\n    type Item = i32;\n    type IntoIter = ::std::vec::IntoIter<i32>;\n\n    fn into_iter(self) -> Self::IntoIter {\n        self.0.into_iter()\n    }\n}\n\n// Now we can make a new collection...\nlet mut c = MyCollection::new();\n\n// ... add some stuff to it ...\nc.add(0);\nc.add(1);\nc.add(2);\n\n// ... and then turn it into an Iterator:\nfor (i, n) in c.into_iter().enumerate() {\n    assert_eq!(i as i32, n);\n}","It is common to use IntoIterator as a trait bound. This allows\nthe input collection type to change, so long as it is still an\niterator. Additional bounds can be specified by restricting on\nItem:","fn collect_as_strings<T>(collection: T) -> Vec<String>\n    where T: IntoIterator,\n          T::Item : std::fmt::Debug,\n{\n    collection\n        .into_iter()\n        .map(|item| format!(\"{:?}\", item))\n        .collect()\n}"]},"trait required methods":[{"name":"fn into_iter(self) -> Self::IntoIter","details":{"description":"Creates an iterator from a value.","example":["Basic usage:","let v = vec![1, 2, 3];\nlet mut iter = v.into_iter();\n\nassert_eq!(Some(1), iter.next());\nassert_eq!(Some(2), iter.next());\nassert_eq!(Some(3), iter.next());\nassert_eq!(None, iter.next());"]}}]}