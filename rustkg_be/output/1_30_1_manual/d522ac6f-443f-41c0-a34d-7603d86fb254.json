{"stability":{"stable since":"1.0.0"},"apiName":"std::path::Component","apiType":"enum","apiDocumentation":{"apiDescription":["A single component of a path.","A Component roughly corresponds to a substring between path separators (/ or \\).","This enum is created by iterating over Components, which in turn is created by the components method on Path."],"examples":["use std::path::{Component, Path};\n\nlet path = Path::new(\"/tmp/foo/bar.txt\");\nlet components = path.components().collect::<Vec<_>>();\nassert_eq!(&components, &[\n    Component::RootDir,\n    Component::Normal(\"tmp\".as_ref()),\n    Component::Normal(\"foo\".as_ref()),\n    Component::Normal(\"bar.txt\".as_ref()),\n]);"]},"enum variants":["Prefix(PrefixComponent<'a>)","A Windows path prefix, e.g. C: or \\\\server\\share.\nThere is a large variety of prefix types, see Prefix's documentation\nfor more.\nDoes not occur on Unix.\n","RootDir","The root directory component, appears after any prefix and before anything else.\nIt represents a separator that designates that a path starts from root.\n","CurDir","A reference to the current directory, i.e. ..\n","ParentDir","A reference to the parent directory, i.e. ...\n","Normal(&'a OsStr)","A normal component, e.g. a and b in a/b.\nThis variant is the most common one, it represents references to files\nor directories.\n"],"trait implementations":[{"name":"impl<'a> std::marker::Copy for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::clone::Clone for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::cmp::PartialEq for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::cmp::Eq for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::cmp::PartialOrd for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::cmp::Ord for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::hash::Hash for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::fmt::Debug for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::convert::AsRef<std::ffi::OsStr> for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::convert::AsRef<std::path::Path> for std::path::Component<'a>","stable since":"1.25.0"},{"name":"impl<'a> std::marker::Send for std::path::Component<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::marker::Sync for std::path::Component<'a>","stable since":"1.0.0"}],"methods":[{"name":"pub fn as_os_str(self) -> &'a OsStr","details":{"description":["Extracts the underlying OsStr slice."],"example":["use std::path::Path;\n\nlet path = Path::new(\"./tmp/foo/bar.txt\");\nlet components: Vec<_> = path.components().map(|comp| comp.as_os_str()).collect();\nassert_eq!(&components, &[\".\", \"tmp\", \"foo\", \"bar.txt\"]);"]}}]}