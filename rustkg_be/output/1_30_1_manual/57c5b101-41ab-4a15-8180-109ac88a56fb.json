{"stability":{"stable since":"1.0.0"},"apiName":"std::fs::Permissions","apiType":"struct","apiDocumentation":{"apiDescription":["Representation of the various permissions on a file.","This module only currently provides one bit of information, readonly, which is exposed on all currently supported platforms. Unix-specific functionality, such as mode bits, is available through the os::unix::PermissionsExt trait."]},"trait implementations":[{"name":"impl std::clone::Clone for std::fs::Permissions","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::fs::Permissions","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::fs::Permissions","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::fs::Permissions","stable since":"1.0.0"},{"name":"impl std::os::unix::fs::PermissionsExt for std::fs::Permissions","stable since":"1.1.0"},{"name":"impl std::marker::Send for std::fs::Permissions","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::fs::Permissions","stable since":"1.0.0"}],"methods":[{"name":"pub fn readonly(&self) -> bool","details":{"description":["Returns whether these permissions describe a readonly (unwritable) file."],"example":["use std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::create(\"foo.txt\")?;\n    let metadata = f.metadata()?;\n\n    assert_eq!(false, metadata.permissions().readonly());\n    Ok(())\n}"]}},{"name":"pub fn set_readonly(&mut self, readonly: bool)","details":{"description":["Modifies the readonly flag for this set of permissions. If the readonly argument is true, using the resulting Permission will update file permissions to forbid writing. Conversely, if it's false, using the resulting Permission will update file permissions to allow writing.","This operation does not modify the filesystem. To modify the filesystem use the fs::set_permissions function."],"example":["use std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::create(\"foo.txt\")?;\n    let metadata = f.metadata()?;\n    let mut permissions = metadata.permissions();\n\n    permissions.set_readonly(true);\n\n    // filesystem doesn't change\n    assert_eq!(false, metadata.permissions().readonly());\n\n    // just this particular `permissions`.\n    assert_eq!(true, permissions.readonly());\n    Ok(())\n}"]}}]}