{"stability":{"stable since":"1.0.0"},"apiName":"std::format","apiType":"macro","apiDocumentation":{"apiDescription":["Creates a String using interpolation of runtime expressions.","The first argument format! receives is a format string. This must be a string literal. The power of the formatting string is in the {}s contained.","Additional parameters passed to format! replace the {}s within the formatting string in the order given unless named or positional parameters are used, see std::fmt for more information.","A common use for format! is concatenation and interpolation of strings. The same convention is used with print! and write! macros, depending on the intended destination of the string.","Panics","format! panics if a formatting trait implementation returns an error. This indicates an incorrect implementation since fmt::Write for String never returns an error itself."],"examples":["format!(\"test\");\nformat!(\"hello {}\", \"world!\");\nformat!(\"x = {}, y = {y}\", 10, y = 30);"]}}