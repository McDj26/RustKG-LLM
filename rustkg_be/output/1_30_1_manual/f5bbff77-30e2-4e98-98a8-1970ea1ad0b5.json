{"stability":{"stable since":"1.0.0"},"apiName":"std::ops::Sub","apiType":"trait","apiDocumentation":{"apiDescription":["The subtraction operator -.","Note that RHS is Self by default, but this is not mandatory. For example, std::time::SystemTime implements Sub<Duration>, which permits operations of the form SystemTime = SystemTime - Duration."],"examples":["Subtractable points","use std::ops::Sub;\n\n#[derive(Debug, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Sub for Point {\n    type Output = Point;\n\n    fn sub(self, other: Point) -> Point {\n        Point {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n}\n\nassert_eq!(Point { x: 3, y: 3 } - Point { x: 2, y: 3 },\n           Point { x: 1, y: 0 });","Implementing Sub with generics","Here is an example of the same Point struct implementing the Sub trait\nusing generics.","use std::ops::Sub;\n\n#[derive(Debug, PartialEq)]\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\n// Notice that the implementation uses the associated type `Output`.\nimpl<T: Sub<Output=T>> Sub for Point<T> {\n    type Output = Point<T>;\n\n    fn sub(self, other: Point<T>) -> Point<T> {\n        Point {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n}\n\nassert_eq!(Point { x: 2, y: 3 } - Point { x: 1, y: 0 },\n           Point { x: 1, y: 3 });"]},"trait required methods":[{"name":"[+] Expand attributes#[must_use] fn sub(self, rhs: RHS) -> Self::Output","details":{"description":"Performs the - operation."}}]}