{"stability":{"stable since":"1.0.0"},"apiName":"std::io::Write","apiType":"trait","apiDocumentation":{"apiDescription":["A trait for objects which are byte-oriented sinks.","Implementors of the Write trait are sometimes called 'writers'.","Writers are defined by two required methods, write and flush:","The write method will attempt to write some data into the object, returning how many bytes were successfully written. The flush method is useful for adaptors and explicit buffers themselves for ensuring that all buffered data has been pushed out to the 'true sink'.","Writers are intended to be composable with one another. Many implementors throughout std::io take and provide types which implement the Write trait."],"examples":["use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    buffer.write(b\"some bytes\")?;\n    Ok(())\n}"]},"trait required methods":[{"name":"fn write(&mut self, buf: &[u8]) -> Result<usize>","details":{"description":"Write a buffer into this object, returning how many bytes were written.","example":["use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Writes some prefix of the byte string, not necessarily all of it.\n    buffer.write(b\"some bytes\")?;\n    Ok(())\n}"]}},{"name":"fn flush(&mut self) -> Result<()>","details":{"description":"Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.","example":["use std::io::prelude::*;\nuse std::io::BufWriter;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = BufWriter::new(File::create(\"foo.txt\")?);\n\n    buffer.write(b\"some bytes\")?;\n    buffer.flush()?;\n    Ok(())\n}"]}}],"trait provided methods":[{"name":"fn write_all(&mut self, buf: &[u8]) -> Result<()>","details":{"description":"Attempts to write an entire buffer into this write.","example":["use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    buffer.write_all(b\"some bytes\")?;\n    Ok(())\n}"]}},{"name":"fn write_fmt(&mut self, fmt: Arguments) -> Result<()>","details":{"description":"Writes a formatted string into this writer, returning any error\nencountered.","example":["use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // this call\n    write!(buffer, \"{:.*}\", 2, 1.234567)?;\n    // turns into this:\n    buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567))?;\n    Ok(())\n}"]}},{"name":"fn by_ref(&mut self) -> &mut Self where Self: Sized","details":{"description":"Creates a \"by reference\" adaptor for this instance of Write.","example":["use std::io::Write;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    let reference = buffer.by_ref();\n\n    // we can use reference just like our original buffer\n    reference.write_all(b\"some bytes\")?;\n    Ok(())\n}"]}}]}