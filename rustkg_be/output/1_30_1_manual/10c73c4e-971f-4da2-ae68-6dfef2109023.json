{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::hash_map::VacantEntry","apiType":"struct","apiDocumentation":{"apiDescription":["A view into a vacant entry in a HashMap. It is part of the Entry enum."]},"trait implementations":[{"name":"impl<'a, K: 'a + std::fmt::Debug, V: 'a> std::fmt::Debug for std::collections::hash_map::VacantEntry<'a, K, V>","stable since":"1.12.0"},{"name":"impl<'a, K, V> !std::marker::Send for std::collections::hash_map::VacantEntry<'a, K, V>","stable since":"1.0.0"},{"name":"impl<'a, K, V> !std::marker::Sync for std::collections::hash_map::VacantEntry<'a, K, V>","stable since":"1.0.0"}],"methods":[{"name":"pub fn key(&self) -> &K","details":{"description":["Gets a reference to the key that would be used when inserting a value through the VacantEntry."],"example":["use std::collections::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");"]}},{"name":"pub fn into_key(self) -> K","details":{"description":["Take ownership of the key."],"example":["use std::collections::HashMap;\nuse std::collections::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nif let Entry::Vacant(v) = map.entry(\"poneyland\") {\n    v.into_key();\n}"]}},{"name":"pub fn insert(self, value: V) -> &'a mut V","details":{"description":["Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it."],"example":["use std::collections::HashMap;\nuse std::collections::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nif let Entry::Vacant(o) = map.entry(\"poneyland\") {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);"]}}]}