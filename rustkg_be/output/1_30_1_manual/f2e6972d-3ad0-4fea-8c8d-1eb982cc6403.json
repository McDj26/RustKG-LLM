{"stability":{"stable since":"1.0.0"},"apiName":"std::io::IntoInnerError","apiType":"struct","apiDocumentation":{"apiDescription":["An error returned by into_inner which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition."],"examples":["use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// do stuff with the stream\n\n// we want to get our `TcpStream` back, so let's try:\n\nlet stream = match stream.into_inner() {\n    Ok(s) => s,\n    Err(e) => {\n        // Here, e is an IntoInnerError\n        panic!(\"An error occurred\");\n    }\n};"]},"trait implementations":[{"name":"impl<W: std::fmt::Debug> std::fmt::Debug for std::io::IntoInnerError<W>","stable since":"1.0.0"},{"name":"impl<W> std::convert::From<std::io::IntoInnerError<W>> for std::io::Error","stable since":"1.0.0"},{"name":"impl<W: std::marker::Send + std::fmt::Debug> std::error::Error for std::io::IntoInnerError<W>","stable since":"1.0.0"},{"name":"impl<W> std::fmt::Display for std::io::IntoInnerError<W>","stable since":"1.0.0"},{"name":"impl<W> std::marker::Send for std::io::IntoInnerError<W> where W: std::marker::Send","stable since":"1.0.0"},{"name":"impl<W> std::marker::Sync for std::io::IntoInnerError<W> where W: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn error(&self) -> &Error","details":{"description":["Returns the error which caused the call to into_inner() to fail.","This error was returned when attempting to write the internal buffer."],"example":["use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// do stuff with the stream\n\n// we want to get our `TcpStream` back, so let's try:\n\nlet stream = match stream.into_inner() {\n    Ok(s) => s,\n    Err(e) => {\n        // Here, e is an IntoInnerError, let's log the inner error.\n        //\n        // We'll just 'log' to stdout for this example.\n        println!(\"{}\", e.error());\n\n        panic!(\"An unexpected error occurred.\");\n    }\n};"]}},{"name":"pub fn into_inner(self) -> W","details":{"description":["Returns the buffered writer instance which generated the error.","The returned object can be used for error recovery, such as re-inspecting the buffer."],"example":["use std::io::BufWriter;\nuse std::net::TcpStream;\n\nlet mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n\n// do stuff with the stream\n\n// we want to get our `TcpStream` back, so let's try:\n\nlet stream = match stream.into_inner() {\n    Ok(s) => s,\n    Err(e) => {\n        // Here, e is an IntoInnerError, let's re-examine the buffer:\n        let buffer = e.into_inner();\n\n        // do stuff to try to recover\n\n        // afterwards, let's just return the stream\n        buffer.into_inner().unwrap()\n    }\n};"]}}]}