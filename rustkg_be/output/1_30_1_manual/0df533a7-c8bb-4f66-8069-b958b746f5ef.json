{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::Arguments","apiType":"struct","apiDocumentation":{"apiDescription":["This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.","The format_args! macro will safely create an instance of this structure. The macro validates the format string at compile-time so usage of the write and format functions can be safely performed.","You can use the Arguments<'a> that format_args! returns in Debug and Display contexts as seen below. The example also shows that Debug and Display format to the same thing: the interpolated format string in format_args!.","let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2)); let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2)); assert_eq!(\"1 foo 2\", display); assert_eq!(display, debug);"]},"trait implementations":[{"name":"impl<'a> std::clone::Clone for std::fmt::Arguments<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::fmt::Debug for std::fmt::Arguments<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::marker::Copy for std::fmt::Arguments<'a>","stable since":"1.0.0"},{"name":"impl<'a> std::fmt::Display for std::fmt::Arguments<'a>","stable since":"1.0.0"},{"name":"impl<'a> !std::marker::Send for std::fmt::Arguments<'a>","stable since":"1.0.0"},{"name":"impl<'a> !std::marker::Sync for std::fmt::Arguments<'a>","stable since":"1.0.0"}]}