{"stability":{"stable since":"1.0.0"},"apiName":"std::cell::RefMut","apiType":"struct","apiDocumentation":{"apiDescription":["A wrapper type for a mutably borrowed value from a RefCell<T>.","See the module-level documentation for more."]},"trait implementations":[{"name":"impl<'b, T> std::fmt::Debug for std::cell::RefMut<'b, T> where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'b, T, U> std::ops::CoerceUnsized<std::cell::RefMut<'b, U>> for std::cell::RefMut<'b, T> where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'b, T> std::ops::DerefMut for std::cell::RefMut<'b, T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'b, T> std::ops::Deref for std::cell::RefMut<'b, T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Display for std::cell::RefMut<'a, T> where T: std::fmt::Display + ?std::marker::Sized","stable since":"1.20.0"},{"name":"impl<'b, T> !std::marker::Send for std::cell::RefMut<'b, T>","stable since":"1.0.0"},{"name":"impl<'b, T> !std::marker::Sync for std::cell::RefMut<'b, T>","stable since":"1.0.0"}],"methods":[{"name":"pub fn map<U, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U> where F: FnOnce(&mut T) -> &mut U, U: ?Sized","details":{"description":["Make a new RefMut for a component of the borrowed data, e.g. an enum variant.","The RefCell is already mutably borrowed, so this cannot fail.","This is an associated function that needs to be used as RefMut::map(...). A method would interfere with methods of the same name on the contents of a RefCell used through Deref."],"example":["use std::cell::{RefCell, RefMut};\n\nlet c = RefCell::new((5, 'b'));\n{\n    let b1: RefMut<(u32, char)> = c.borrow_mut();\n    let mut b2: RefMut<u32> = RefMut::map(b1, |t| &mut t.0);\n    assert_eq!(*b2, 5);\n    *b2 = 42;\n}\nassert_eq!(*c.borrow(), (42, 'b'));"]}},{"name":"pub fn map_split<U, V, F>( orig: RefMut<'b, T>, f: F) -> (RefMut<'b, U>, RefMut<'b, V>) where F: FnOnce(&mut T) -> (&mut U, &mut V), U: ?Sized, V: ?Sized","stability":["ðŸ”¬ This is a nightly-only experimental API.  (refcell_map_split #51476)"]}]}