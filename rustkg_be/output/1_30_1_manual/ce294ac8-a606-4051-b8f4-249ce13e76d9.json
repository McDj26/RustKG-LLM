{"stability":{"stable since":"1.7.0"},"apiName":"std::net::IpAddr","apiType":"enum","apiDocumentation":{"apiDescription":["An IP address, either IPv4 or IPv6.","This enum can contain either an Ipv4Addr or an Ipv6Addr, see their respective documentation for more details.","The size of an IpAddr instance may vary depending on the target operating system."],"examples":["use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\nlet localhost_v4 = IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1));\nlet localhost_v6 = IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n\nassert_eq!(\"127.0.0.1\".parse(), Ok(localhost_v4));\nassert_eq!(\"::1\".parse(), Ok(localhost_v6));\n\nassert_eq!(localhost_v4.is_ipv6(), false);\nassert_eq!(localhost_v4.is_ipv4(), true);"]},"enum variants":["V4(Ipv4Addr)","An IPv4 address.\n","V6(Ipv6Addr)","An IPv6 address.\n"],"trait implementations":[{"name":"impl std::marker::Copy for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::fmt::Display for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::convert::From<std::net::Ipv4Addr> for std::net::IpAddr","stable since":"1.16.0"},{"name":"impl std::convert::From<std::net::Ipv6Addr> for std::net::IpAddr","stable since":"1.16.0"},{"name":"impl std::cmp::PartialEq<std::net::Ipv4Addr> for std::net::IpAddr","stable since":"1.16.0"},{"name":"impl std::cmp::PartialEq<std::net::IpAddr> for std::net::Ipv4Addr","stable since":"1.16.0"},{"name":"impl std::cmp::PartialOrd<std::net::Ipv4Addr> for std::net::IpAddr","stable since":"1.16.0"},{"name":"impl std::cmp::PartialOrd<std::net::IpAddr> for std::net::Ipv4Addr","stable since":"1.16.0"},{"name":"impl std::convert::From<[u8; 4]> for std::net::IpAddr","stable since":"1.17.0"},{"name":"impl std::cmp::PartialEq<std::net::IpAddr> for std::net::Ipv6Addr","stable since":"1.16.0"},{"name":"impl std::cmp::PartialEq<std::net::Ipv6Addr> for std::net::IpAddr","stable since":"1.16.0"},{"name":"impl std::cmp::PartialOrd<std::net::Ipv6Addr> for std::net::IpAddr","stable since":"1.16.0"},{"name":"impl std::cmp::PartialOrd<std::net::IpAddr> for std::net::Ipv6Addr","stable since":"1.16.0"},{"name":"impl std::convert::From<[u8; 16]> for std::net::IpAddr","stable since":"1.17.0"},{"name":"impl std::convert::From<[u16; 8]> for std::net::IpAddr","stable since":"1.17.0"},{"name":"impl std::str::FromStr for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::net::IpAddr","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::net::IpAddr","stable since":"1.0.0"}],"methods":[{"name":"pub fn is_unspecified(&self) -> bool","details":{"description":["Returns true for the special 'unspecified' address.","See the documentation for Ipv4Addr::is_unspecified and Ipv6Addr::is_unspecified for more details."],"example":["use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\nassert_eq!(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)).is_unspecified(), true);\nassert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)).is_unspecified(), true);"]}},{"name":"pub fn is_loopback(&self) -> bool","details":{"description":["Returns true if this is a loopback address.","See the documentation for Ipv4Addr::is_loopback and Ipv6Addr::is_loopback for more details."],"example":["use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\nassert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).is_loopback(), true);\nassert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1)).is_loopback(), true);"]}},{"name":"pub fn is_global(&self) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (ip #27709)extra functionality has not been scrutinized to the level that it should be to be stable\n"]},{"name":"pub fn is_multicast(&self) -> bool","details":{"description":["Returns true if this is a multicast address.","See the documentation for Ipv4Addr::is_multicast and Ipv6Addr::is_multicast for more details."],"example":["use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\nassert_eq!(IpAddr::V4(Ipv4Addr::new(224, 254, 0, 0)).is_multicast(), true);\nassert_eq!(IpAddr::V6(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0)).is_multicast(), true);"]}},{"name":"pub fn is_documentation(&self) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (ip #27709)extra functionality has not been scrutinized to the level that it should be to be stable\n"]},{"name":"pub fn is_ipv4(&self) -> bool","details":{"description":["Returns true if this address is an IPv4 address, and false otherwise."],"example":["use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\nfn main() {\n    assert_eq!(IpAddr::V4(Ipv4Addr::new(203, 0, 113, 6)).is_ipv4(), true);\n    assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0)).is_ipv4(),\n               false);\n}"]}},{"name":"pub fn is_ipv6(&self) -> bool","details":{"description":["Returns true if this address is an IPv6 address, and false otherwise."],"example":["use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\nfn main() {\n    assert_eq!(IpAddr::V4(Ipv4Addr::new(203, 0, 113, 6)).is_ipv6(), false);\n    assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0)).is_ipv6(),\n               true);\n}"]}}]}