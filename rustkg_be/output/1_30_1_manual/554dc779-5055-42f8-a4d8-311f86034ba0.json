{"stability":{"stable since":"1.0.0"},"apiName":"std::unreachable","apiType":"macro","apiDocumentation":{"apiDescription":["A utility macro for indicating unreachable code.","This is useful any time that the compiler can't determine that some code is unreachable. For example:","Match arms with guard conditions. Loops that dynamically terminate. Iterators that dynamically terminate.","If the determination that the code is unreachable proves incorrect, the program immediately terminates with a panic!. The function unreachable_unchecked, which belongs to the std::hint module, informs the compilier to optimize the code out of the release version entirely.","Panics","This will always panic!"],"examples":["Match arms:","fn foo(x: Option<i32>) {\n    match x {\n        Some(n) if n >= 0 => println!(\"Some(Non-negative)\"),\n        Some(n) if n <  0 => println!(\"Some(Negative)\"),\n        Some(_)           => unreachable!(), // compile error if commented out\n        None              => println!(\"None\")\n    }\n}","Iterators:","fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n    for i in 0.. {\n        if 3*i < i { panic!(\"u32 overflow\"); }\n        if x < 3*i { return i-1; }\n    }\n    unreachable!();\n}"]}}