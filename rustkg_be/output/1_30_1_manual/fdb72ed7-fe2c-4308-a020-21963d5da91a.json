{"stability":{"stable since":"1.0.0"},"apiName":"std::process::ExitStatus","apiType":"struct","apiDocumentation":{"apiDescription":["Describes the result of a process after it has terminated.","This struct is used to represent the exit status of a child process. Child processes are created via the Command struct and their exit status is exposed through the status method."]},"trait implementations":[{"name":"impl std::cmp::PartialEq for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::marker::Copy for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::fmt::Display for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::os::windows::process::ExitStatusExt for std::process::ExitStatus","stable since":"1.12.0"},{"name":"impl std::os::unix::process::ExitStatusExt for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::process::ExitStatus","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::process::ExitStatus","stable since":"1.0.0"}],"methods":[{"name":"pub fn success(&self) -> bool","details":{"description":["Was termination successful? Signal termination is not considered a success, and success is defined as a zero exit status."],"example":["use std::process::Command;\n\nlet status = Command::new(\"mkdir\")\n                     .arg(\"projects\")\n                     .status()\n                     .expect(\"failed to execute mkdir\");\n\nif status.success() {\n    println!(\"'projects/' directory created\");\n} else {\n    println!(\"failed to create 'projects/' directory\");\n}"]}},{"name":"pub fn code(&self) -> Option<i32>","details":{"description":["Returns the exit code of the process, if any.","On Unix, this will return None if the process was terminated by a signal; std::os::unix provides an extension trait for extracting the signal and other details from the ExitStatus."],"example":["use std::process::Command;\n\nlet status = Command::new(\"mkdir\")\n                     .arg(\"projects\")\n                     .status()\n                     .expect(\"failed to execute mkdir\");\n\nmatch status.code() {\n    Some(code) => println!(\"Exited with status code: {}\", code),\n    None       => println!(\"Process terminated by signal\")\n}"]}}]}