{"stability":{"stable since":"1.28.0"},"apiName":"std::alloc::Layout","apiType":"struct","apiDocumentation":{"apiDescription":["Layout of a block of memory.","An instance of Layout describes a particular layout of memory. You build a Layout up as an input to give to an allocator.","All layouts have an associated non-negative size and a power-of-two alignment.","(Note however that layouts are not required to have positive size, even though many allocators require that all memory requests have positive size. A caller to the Alloc::alloc method must either ensure that conditions like this are met, or use specific allocators with looser requirements.)"]},"trait implementations":[{"name":"impl std::clone::Clone for std::alloc::Layout","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::alloc::Layout","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::alloc::Layout","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<std::alloc::Layout> for std::alloc::Layout","stable since":"1.0.0"},{"name":"impl std::marker::Copy for std::alloc::Layout","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::alloc::Layout","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::alloc::Layout","stable since":"1.0.0"}],"methods":[{"name":"pub fn from_size_align(size: usize, align: usize) -> Result<Layout, LayoutErr>","details":{"description":["Constructs a Layout from a given size and align, or returns LayoutErr if either of the following conditions are not met:","align must not be zero, align must be a power of two, size, when rounded up to the nearest multiple of align, must not overflow (i.e. the rounded value must be less than usize::MAX)."]}},{"name":"pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Layout","details":{"description":["Creates a layout, bypassing all checks.","Safety","This function is unsafe as it does not verify the preconditions from Layout::from_size_align."]}},{"name":"pub fn size(&self) -> usize","details":{"description":["The minimum size in bytes for a memory block of this layout."]}},{"name":"pub fn align(&self) -> usize","details":{"description":["The minimum byte alignment for a memory block of this layout."]}},{"name":"pub fn new<T>() -> Layout","details":{"description":["Constructs a Layout suitable for holding a value of type T."]}},{"name":"pub fn for_value<T>(t: &T) -> Layout where T: ?Sized","details":{"description":["Produces layout describing a record that could be used to allocate backing structure for T (which could be a trait or other unsized type like a slice)."]}},{"name":"pub fn align_to(&self, align: usize) -> Layout","stability":["ðŸ”¬ This is a nightly-only experimental API.  (allocator_api #32838)"]},{"name":"pub fn padding_needed_for(&self, align: usize) -> usize","stability":["ðŸ”¬ This is a nightly-only experimental API.  (allocator_api #32838)"]},{"name":"pub fn repeat(&self, n: usize) -> Result<(Layout, usize), LayoutErr>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (allocator_api #32838)"]},{"name":"pub fn extend(&self, next: Layout) -> Result<(Layout, usize), LayoutErr>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (allocator_api #32838)"]},{"name":"pub fn repeat_packed(&self, n: usize) -> Result<Layout, LayoutErr>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (allocator_api #32838)"]},{"name":"pub fn extend_packed(&self, next: Layout) -> Result<(Layout, usize), LayoutErr>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (allocator_api #32838)"]},{"name":"pub fn array<T>(n: usize) -> Result<Layout, LayoutErr>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (allocator_api #32838)"]}]}