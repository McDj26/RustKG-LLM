{"stability":{"stable since":"1.0.0"},"apiName":"std::fs::Metadata","apiType":"struct","apiDocumentation":{"apiDescription":["Metadata information about a file.","This structure is returned from the metadata or symlink_metadata function or method and represents known metadata about a file such as its permissions, size, modification times, etc."]},"trait implementations":[{"name":"impl std::clone::Clone for std::fs::Metadata","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::fs::Metadata","stable since":"1.16.0"},{"name":"impl std::os::linux::fs::MetadataExt for std::fs::Metadata","stable since":"1.1.0"},{"name":"impl std::os::windows::fs::MetadataExt for std::fs::Metadata","stable since":"1.1.0"},{"name":"impl std::os::unix::fs::MetadataExt for std::fs::Metadata","stable since":"1.1.0"},{"name":"impl std::marker::Send for std::fs::Metadata","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::fs::Metadata","stable since":"1.0.0"}],"methods":[{"name":"pub fn file_type(&self) -> FileType","details":{"description":["Returns the file type for this metadata."],"example":["fn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    println!(\"{:?}\", metadata.file_type());\n    Ok(())\n}"]}},{"name":"pub fn is_dir(&self) -> bool","details":{"description":["Returns whether this metadata is for a directory. The result is mutually exclusive to the result of is_file, and will be false for symlink metadata obtained from symlink_metadata."],"example":["fn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert!(!metadata.is_dir());\n    Ok(())\n}"]}},{"name":"pub fn is_file(&self) -> bool","details":{"description":["Returns whether this metadata is for a regular file. The result is mutually exclusive to the result of is_dir, and will be false for symlink metadata obtained from symlink_metadata."],"example":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert!(metadata.is_file());\n    Ok(())\n}"]}},{"name":"pub fn len(&self) -> u64","details":{"description":["Returns the size of the file, in bytes, this metadata is for."],"example":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert_eq!(0, metadata.len());\n    Ok(())\n}"]}},{"name":"pub fn permissions(&self) -> Permissions","details":{"description":["Returns the permissions of the file this metadata is for."],"example":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    assert!(!metadata.permissions().readonly());\n    Ok(())\n}"]}},{"name":"pub fn modified(&self) -> Result<SystemTime>","details":{"description":["Returns the last modification time listed in this metadata.","The returned value corresponds to the mtime field of stat on Unix platforms and the ftLastWriteTime field on Windows platforms.","Errors","This field may not be available on all platforms, and will return an Err on platforms where it is not available."],"example":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    if let Ok(time) = metadata.modified() {\n        println!(\"{:?}\", time);\n    } else {\n        println!(\"Not supported on this platform\");\n    }\n    Ok(())\n}"]}},{"name":"pub fn accessed(&self) -> Result<SystemTime>","details":{"description":["Returns the last access time of this metadata.","The returned value corresponds to the atime field of stat on Unix platforms and the ftLastAccessTime field on Windows platforms.","Note that not all platforms will keep this field update in a file's metadata, for example Windows has an option to disable updating this time when files are accessed and Linux similarly has noatime.","Errors","This field may not be available on all platforms, and will return an Err on platforms where it is not available."],"example":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    if let Ok(time) = metadata.accessed() {\n        println!(\"{:?}\", time);\n    } else {\n        println!(\"Not supported on this platform\");\n    }\n    Ok(())\n}"]}},{"name":"pub fn created(&self) -> Result<SystemTime>","details":{"description":["Returns the creation time listed in this metadata.","The returned value corresponds to the birthtime field of stat on Unix platforms and the ftCreationTime field on Windows platforms.","Errors","This field may not be available on all platforms, and will return an Err on platforms where it is not available."],"example":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::metadata(\"foo.txt\")?;\n\n    if let Ok(time) = metadata.created() {\n        println!(\"{:?}\", time);\n    } else {\n        println!(\"Not supported on this platform\");\n    }\n    Ok(())\n}"]}}]}