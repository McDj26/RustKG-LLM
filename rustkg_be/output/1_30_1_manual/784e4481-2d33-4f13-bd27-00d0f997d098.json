{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::BTreeMap","apiType":"struct","apiDocumentation":{"apiDescription":["A map based on a B-Tree.","B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal choice for a sorted map, as a perfectly balanced BST performs the theoretical minimum amount of comparisons necessary to find an element (log2n). However, in practice the way this is done is very inefficient for modern computer architectures. In particular, every element is stored in its own individually heap-allocated node. This means that every single insertion triggers a heap-allocation, and every single comparison should be a cache-miss. Since these are both notably expensive things to do in practice, we are forced to at very least reconsider the BST strategy.","A B-Tree instead makes each node contain B-1 to 2B-1 elements in a contiguous array. By doing this, we reduce the number of allocations by a factor of B, and improve cache efficiency in searches. However, this does mean that searches will have to do more comparisons on average. The precise number of comparisons depends on the node search strategy used. For optimal cache efficiency, one could search the nodes linearly. For optimal comparisons, one could search the node using binary search. As a compromise, one could also perform a linear search that initially only checks every ith element for some choice of i.","Currently, our implementation simply performs naive linear search. This provides excellent performance on small nodes of elements which are cheap to compare. However in the future we would like to further explore choosing the optimal search strategy based on the choice of B, and possibly other factors. Using linear search, searching for a random element is expected to take O(B logBn) comparisons, which is generally worse than a BST. In practice, however, performance is excellent.","It is a logic error for a key to be modified in such a way that the key's ordering relative to any other key, as determined by the Ord trait, changes while it is in the map. This is normally only possible through Cell, RefCell, global state, I/O, or unsafe code."],"examples":["use std::collections::BTreeMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `BTreeMap<&str, &str>` in this example).\nlet mut movie_reviews = BTreeMap::new();\n\n// review some movies.\nmovie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");\nmovie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");\nmovie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");\nmovie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it alot.\");\n\n// check for a specific one.\nif !movie_reviews.contains_key(\"Les MisÃ©rables\") {\n    println!(\"We've got {} reviews, but Les MisÃ©rables ain't one.\",\n             movie_reviews.len());\n}\n\n// oops, this review has a lot of spelling mistakes, let's delete it.\nmovie_reviews.remove(\"The Blues Brothers\");\n\n// look up the values associated with some keys.\nlet to_find = [\"Up!\", \"Office Space\"];\nfor book in &to_find {\n    match movie_reviews.get(book) {\n       Some(review) => println!(\"{}: {}\", book, review),\n       None => println!(\"{} is unreviewed.\", book)\n    }\n}\n\n// iterate over everything.\nfor (movie, review) in &movie_reviews {\n    println!(\"{}: \\\"{}\\\"\", movie, review);\n}","BTreeMap also implements an Entry API, which allows\nfor more complex methods of getting, setting, updating and removing keys and\ntheir values:","use std::collections::BTreeMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `BTreeMap<&str, u8>` in this example).\nlet mut player_stats = BTreeMap::new();\n\nfn random_stat_buff() -> u8 {\n    // could actually return some random value here - let's just return\n    // some fixed value for now\n    42\n}\n\n// insert a key only if it doesn't already exist\nplayer_stats.entry(\"health\").or_insert(100);\n\n// insert a key using a function that provides a new value only if it\n// doesn't already exist\nplayer_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n\n// update a key, guarding against the key possibly not being set\nlet stat = player_stats.entry(\"attack\").or_insert(100);\n*stat += random_stat_buff();"]},"trait implementations":[{"name":"impl<K, V> std::cmp::PartialOrd<std::collections::btree_map::BTreeMap<K, V>> for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::PartialOrd<K>, V: std::cmp::PartialOrd<V>","stable since":"1.0.0"},{"name":"impl<K, V> std::ops::Drop for std::collections::btree_map::BTreeMap<K, V>","stable since":"1.7.0"},{"name":"impl<'a, K, V> std::iter::IntoIterator for &'a std::collections::btree_map::BTreeMap<K, V> where K: 'a, V: 'a","stable since":"1.0.0"},{"name":"impl<'a, K, V> std::iter::IntoIterator for &'a mut std::collections::btree_map::BTreeMap<K, V> where K: 'a, V: 'a","stable since":"1.0.0"},{"name":"impl<K, V> std::iter::IntoIterator for std::collections::btree_map::BTreeMap<K, V>","stable since":"1.0.0"},{"name":"impl<K, V> std::cmp::Eq for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::Eq, V: std::cmp::Eq","stable since":"1.0.0"},{"name":"impl<K, V> std::default::Default for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::Ord","stable since":"1.0.0"},{"name":"impl<K, V> std::iter::FromIterator<(K, V)> for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::Ord","stable since":"1.0.0"},{"name":"impl<K, V> std::clone::Clone for std::collections::btree_map::BTreeMap<K, V> where K: std::clone::Clone, V: std::clone::Clone","stable since":"1.0.0"},{"name":"impl<K, V> std::iter::Extend<(K, V)> for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::Ord","stable since":"1.0.0"},{"name":"impl<'a, K, V> std::iter::Extend<(&'a K, &'a V)> for std::collections::btree_map::BTreeMap<K, V> where K: std::marker::Copy + std::cmp::Ord, V: std::marker::Copy","stable since":"1.2.0"},{"name":"impl<K, V> std::hash::Hash for std::collections::btree_map::BTreeMap<K, V> where K: std::hash::Hash, V: std::hash::Hash","stable since":"1.0.0"},{"name":"impl<K, V> std::fmt::Debug for std::collections::btree_map::BTreeMap<K, V> where K: std::fmt::Debug, V: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<K, V> std::cmp::PartialEq<std::collections::btree_map::BTreeMap<K, V>> for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::PartialEq<K>, V: std::cmp::PartialEq<V>","stable since":"1.0.0"},{"name":"impl<K, V> std::cmp::Ord for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::Ord, V: std::cmp::Ord","stable since":"1.0.0"},{"name":"impl<'a, K, Q, V> std::ops::Index<&'a Q> for std::collections::btree_map::BTreeMap<K, V> where K: std::cmp::Ord + std::borrow::Borrow<Q>, Q: std::cmp::Ord + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<K, V> std::marker::Send for std::collections::btree_map::BTreeMap<K, V> where K: std::marker::Send, V: std::marker::Send","stable since":"1.0.0"},{"name":"impl<K, V> std::marker::Sync for std::collections::btree_map::BTreeMap<K, V> where K: std::marker::Sync, V: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn new() -> BTreeMap<K, V>","details":{"description":["Makes a new empty BTreeMap with a reasonable choice for B."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\n\n// entries can now be inserted into the empty map\nmap.insert(1, \"a\");"]}},{"name":"pub fn clear(&mut self)","details":{"description":["Clears the map, removing all values."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.clear();\nassert!(a.is_empty());"]}},{"name":"pub fn get<Q>(&self, key: &Q) -> Option<&V> where K: Borrow<Q>, Q: Ord + ?Sized","details":{"description":["Returns a reference to the value corresponding to the key.","The key may be any borrowed form of the map's key type, but the ordering on the borrowed form must match the ordering on the key type."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);"]}},{"name":"pub fn get_key_value<Q>(&self, k: &Q) -> Option<(&K, &V)> where K: Borrow<Q>, Q: Ord + ?Sized","stability":["ðŸ”¬ This is a nightly-only experimental API.  (map_get_key_value #49347)"]},{"name":"pub fn contains_key<Q>(&self, key: &Q) -> bool where K: Borrow<Q>, Q: Ord + ?Sized","details":{"description":["Returns true if the map contains a value for the specified key.","The key may be any borrowed form of the map's key type, but the ordering on the borrowed form must match the ordering on the key type."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.contains_key(&1), true);\nassert_eq!(map.contains_key(&2), false);"]}},{"name":"pub fn get_mut<Q>(&mut self, key: &Q) -> Option<&mut V> where K: Borrow<Q>, Q: Ord + ?Sized","details":{"description":["Returns a mutable reference to the value corresponding to the key.","The key may be any borrowed form of the map's key type, but the ordering on the borrowed form must match the ordering on the key type."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");"]}},{"name":"pub fn insert(&mut self, key: K, value: V) -> Option<V>","details":{"description":["Inserts a key-value pair into the map.","If the map did not have this key present, None is returned.","If the map did have this key present, the value is updated, and the old value is returned. The key is not updated, though; this matters for types that can be == without being identical. See the module-level documentation for more."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");"]}},{"name":"pub fn remove<Q>(&mut self, key: &Q) -> Option<V> where K: Borrow<Q>, Q: Ord + ?Sized","details":{"description":["Removes a key from the map, returning the value at the key if the key was previously in the map.","The key may be any borrowed form of the map's key type, but the ordering on the borrowed form must match the ordering on the key type."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);"]}},{"name":"pub fn append(&mut self, other: &mut BTreeMap<K, V>)","details":{"description":["Moves all elements from other into Self, leaving other empty."],"example":["use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\na.insert(3, \"c\");\n\nlet mut b = BTreeMap::new();\nb.insert(3, \"d\");\nb.insert(4, \"e\");\nb.insert(5, \"f\");\n\na.append(&mut b);\n\nassert_eq!(a.len(), 5);\nassert_eq!(b.len(), 0);\n\nassert_eq!(a[&1], \"a\");\nassert_eq!(a[&2], \"b\");\nassert_eq!(a[&3], \"d\");\nassert_eq!(a[&4], \"e\");\nassert_eq!(a[&5], \"f\");"]}},{"name":"pub fn range<T, R>(&self, range: R) -> Range<K, V> where K: Borrow<T>, R: RangeBounds<T>, T: Ord + ?Sized","details":{"description":["Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax min..max, thus range(min..max) will yield elements from min (inclusive) to max (exclusive). The range may also be entered as (Bound<T>, Bound<T>), so for example range((Excluded(4), Included(10))) will yield a left-exclusive, right-inclusive range from 4 to 10.","Panics","Panics if range start > end. Panics if range start == end and both bounds are Excluded."],"example":["Basic usage:","use std::collections::BTreeMap;\nuse std::ops::Bound::Included;\n\nlet mut map = BTreeMap::new();\nmap.insert(3, \"a\");\nmap.insert(5, \"b\");\nmap.insert(8, \"c\");\nfor (&key, &value) in map.range((Included(&4), Included(&8))) {\n    println!(\"{}: {}\", key, value);\n}\nassert_eq!(Some((&5, &\"b\")), map.range(4..).next());"]}},{"name":"pub fn range_mut<T, R>(&mut self, range: R) -> RangeMut<K, V> where K: Borrow<T>, R: RangeBounds<T>, T: Ord + ?Sized","details":{"description":["Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax min..max, thus range(min..max) will yield elements from min (inclusive) to max (exclusive). The range may also be entered as (Bound<T>, Bound<T>), so for example range((Excluded(4), Included(10))) will yield a left-exclusive, right-inclusive range from 4 to 10.","Panics","Panics if range start > end. Panics if range start == end and both bounds are Excluded."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, i32> = [\"Alice\", \"Bob\", \"Carol\", \"Cheryl\"].iter()\n                                                                      .map(|&s| (s, 0))\n                                                                      .collect();\nfor (_, balance) in map.range_mut(\"B\"..\"Cheryl\") {\n    *balance += 100;\n}\nfor (name, balance) in &map {\n    println!(\"{} => {}\", name, balance);\n}"]}},{"name":"pub fn entry(&mut self, key: K) -> Entry<K, V>","details":{"description":["Gets the given key's corresponding entry in the map for in-place manipulation."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut count: BTreeMap<&str, usize> = BTreeMap::new();\n\n// count the number of occurrences of letters in the vec\nfor x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {\n    *count.entry(x).or_insert(0) += 1;\n}\n\nassert_eq!(count[\"a\"], 3);"]}},{"name":"pub fn split_off<Q>(&mut self, key: &Q) -> BTreeMap<K, V> where K: Borrow<Q>, Q: Ord + ?Sized","details":{"description":["Splits the collection into two at the given key. Returns everything after the given key, including the key."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\na.insert(3, \"c\");\na.insert(17, \"d\");\na.insert(41, \"e\");\n\nlet b = a.split_off(&3);\n\nassert_eq!(a.len(), 2);\nassert_eq!(b.len(), 3);\n\nassert_eq!(a[&1], \"a\");\nassert_eq!(a[&2], \"b\");\n\nassert_eq!(b[&3], \"c\");\nassert_eq!(b[&17], \"d\");\nassert_eq!(b[&41], \"e\");"]}},{"name":"pub fn iter(&self) -> Iter<K, V>","details":{"description":["Gets an iterator over the entries of the map, sorted by key."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(3, \"c\");\nmap.insert(2, \"b\");\nmap.insert(1, \"a\");\n\nfor (key, value) in map.iter() {\n    println!(\"{}: {}\", key, value);\n}\n\nlet (first_key, first_value) = map.iter().next().unwrap();\nassert_eq!((*first_key, *first_value), (1, \"a\"));"]}},{"name":"pub fn iter_mut(&mut self) -> IterMut<K, V>","details":{"description":["Gets a mutable iterator over the entries of the map, sorted by key."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\n// add 10 to the value if the key isn't \"a\"\nfor (key, value) in map.iter_mut() {\n    if key != &\"a\" {\n        *value += 10;\n    }\n}"]}},{"name":"pub fn keys(&'a self) -> Keys<'a, K, V>","details":{"description":["Gets an iterator over the keys of the map, in sorted order."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(2, \"b\");\na.insert(1, \"a\");\n\nlet keys: Vec<_> = a.keys().cloned().collect();\nassert_eq!(keys, [1, 2]);"]}},{"name":"pub fn values(&'a self) -> Values<'a, K, V>","details":{"description":["Gets an iterator over the values of the map, in order by key."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"hello\");\na.insert(2, \"goodbye\");\n\nlet values: Vec<&str> = a.values().cloned().collect();\nassert_eq!(values, [\"hello\", \"goodbye\"]);"]}},{"name":"pub fn values_mut(&mut self) -> ValuesMut<K, V>","details":{"description":["Gets a mutable iterator over the values of the map, in order by key."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, String::from(\"hello\"));\na.insert(2, String::from(\"goodbye\"));\n\nfor value in a.values_mut() {\n    value.push_str(\"!\");\n}\n\nlet values: Vec<String> = a.values().cloned().collect();\nassert_eq!(values, [String::from(\"hello!\"),\n                    String::from(\"goodbye!\")]);"]}},{"name":"pub fn len(&self) -> usize","details":{"description":["Returns the number of elements in the map."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\nassert_eq!(a.len(), 0);\na.insert(1, \"a\");\nassert_eq!(a.len(), 1);"]}},{"name":"pub fn is_empty(&self) -> bool","details":{"description":["Returns true if the map contains no elements."],"example":["Basic usage:","use std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\nassert!(a.is_empty());\na.insert(1, \"a\");\nassert!(!a.is_empty());"]}}]}