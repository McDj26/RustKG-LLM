{"stability":{"stable since":"1.0.0"},"apiName":"std::vec::IntoIter","apiType":"struct","apiDocumentation":{"apiDescription":["An iterator that moves out of a vector.","This struct is created by the into_iter method on Vec (provided by the IntoIterator trait)."]},"trait implementations":[{"name":"impl<T> std::ops::Drop for std::vec::IntoIter<T>","stable since":"1.0.0"},{"name":"impl<T> std::iter::ExactSizeIterator for std::vec::IntoIter<T>","stable since":"1.0.0"},{"name":"impl<T> std::iter::DoubleEndedIterator for std::vec::IntoIter<T>","stable since":"1.0.0"},{"name":"impl<T> std::iter::Iterator for std::vec::IntoIter<T>","stable since":"1.0.0"},{"name":"impl<T> std::marker::Sync for std::vec::IntoIter<T> where T: std::marker::Sync","stable since":"1.0.0"},{"name":"impl<T> std::marker::Send for std::vec::IntoIter<T> where T: std::marker::Send","stable since":"1.0.0"},{"name":"impl<T> std::iter::FusedIterator for std::vec::IntoIter<T>","stable since":"1.26.0"},{"name":"impl<T> std::iter::TrustedLen for std::vec::IntoIter<T>","stable since":"1.0.0"},{"name":"impl<T> std::clone::Clone for std::vec::IntoIter<T> where T: std::clone::Clone","stable since":"1.8.0"},{"name":"impl<T> std::fmt::Debug for std::vec::IntoIter<T> where T: std::fmt::Debug","stable since":"1.13.0"}],"methods":[{"name":"pub fn as_slice(&self) -> &[T]","details":{"description":["Returns the remaining items of this iterator as a slice."],"example":["let vec = vec!['a', 'b', 'c'];\nlet mut into_iter = vec.into_iter();\nassert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\nlet _ = into_iter.next().unwrap();\nassert_eq!(into_iter.as_slice(), &['b', 'c']);"]}},{"name":"pub fn as_mut_slice(&mut self) -> &mut [T]","details":{"description":["Returns the remaining items of this iterator as a mutable slice."],"example":["let vec = vec!['a', 'b', 'c'];\nlet mut into_iter = vec.into_iter();\nassert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\ninto_iter.as_mut_slice()[2] = 'z';\nassert_eq!(into_iter.next().unwrap(), 'a');\nassert_eq!(into_iter.next().unwrap(), 'b');\nassert_eq!(into_iter.next().unwrap(), 'z');"]}}]}