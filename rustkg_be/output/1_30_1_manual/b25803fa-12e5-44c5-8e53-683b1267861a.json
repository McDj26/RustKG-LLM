{"stability":{"stable since":"1.0.0"},"apiName":"std::ffi::NulError","apiType":"struct","apiDocumentation":{"apiDescription":["An error indicating that an interior nul byte was found.","While Rust strings may contain nul bytes in the middle, C strings can't, as that byte would effectively truncate the string.","This error is created by the new method on CString. See its documentation for more."],"examples":["use std::ffi::{CString, NulError};\n\nlet _: NulError = CString::new(b\"f\\0oo\".to_vec()).unwrap_err();"]},"trait implementations":[{"name":"impl std::clone::Clone for std::ffi::NulError","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::ffi::NulError","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::ffi::NulError","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::ffi::NulError","stable since":"1.0.0"},{"name":"impl std::error::Error for std::ffi::NulError","stable since":"1.0.0"},{"name":"impl std::fmt::Display for std::ffi::NulError","stable since":"1.0.0"},{"name":"impl std::convert::From<std::ffi::NulError> for std::io::Error","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::ffi::NulError","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::ffi::NulError","stable since":"1.0.0"}],"methods":[{"name":"pub fn nul_position(&self) -> usize","details":{"description":["Returns the position of the nul byte in the slice that caused CString::new to fail."],"example":["use std::ffi::CString;\n\nlet nul_error = CString::new(\"foo\\0bar\").unwrap_err();\nassert_eq!(nul_error.nul_position(), 3);\n\nlet nul_error = CString::new(\"foo bar\\0\").unwrap_err();\nassert_eq!(nul_error.nul_position(), 7);"]}},{"name":"pub fn into_vec(self) -> Vec<u8>","details":{"description":["Consumes this error, returning the underlying vector of bytes which generated the error in the first place."],"example":["use std::ffi::CString;\n\nlet nul_error = CString::new(\"foo\\0bar\").unwrap_err();\nassert_eq!(nul_error.into_vec(), b\"foo\\0bar\");"]}}]}