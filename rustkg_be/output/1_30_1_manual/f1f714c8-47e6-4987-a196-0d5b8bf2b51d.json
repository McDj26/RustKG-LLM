{"stability":{"stable since":"1.0.0"},"apiName":"std::hash::Hasher","apiType":"trait","apiDocumentation":{"apiDescription":["A trait for hashing an arbitrary stream of bytes.","Instances of Hasher usually represent state that is changed while hashing data.","Hasher provides a fairly basic interface for retrieving the generated hash (with finish), and writing integers as well as slices of bytes into an instance (with write and write_u8 etc.). Most of the time, Hasher instances are used in conjunction with the Hash trait."],"examples":["use std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\n\nhasher.write_u32(1989);\nhasher.write_u8(11);\nhasher.write_u8(9);\nhasher.write(b\"Huh?\");\n\nprintln!(\"Hash is {:x}!\", hasher.finish());"]},"trait required methods":[{"name":"fn finish(&self) -> u64","details":{"description":"Returns the hash value for the values written so far.","example":["use std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nhasher.write(b\"Cool!\");\n\nprintln!(\"Hash is {:x}!\", hasher.finish());"]}},{"name":"fn write(&mut self, bytes: &[u8])","details":{"description":"Writes some data into this Hasher.","example":["use std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nlet data = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef];\n\nhasher.write(&data);\n\nprintln!(\"Hash is {:x}!\", hasher.finish());"]}}],"trait provided methods":[{"name":"fn write_u8(&mut self, i: u8)","details":{"description":"Writes a single u8 into this hasher."}},{"name":"fn write_u16(&mut self, i: u16)","details":{"description":"Writes a single u16 into this hasher."}},{"name":"fn write_u32(&mut self, i: u32)","details":{"description":"Writes a single u32 into this hasher."}},{"name":"fn write_u64(&mut self, i: u64)","details":{"description":"Writes a single u64 into this hasher."}},{"name":"fn write_u128(&mut self, i: u128)","details":{"description":"Writes a single u128 into this hasher."}},{"name":"fn write_usize(&mut self, i: usize)","details":{"description":"Writes a single usize into this hasher."}},{"name":"fn write_i8(&mut self, i: i8)","details":{"description":"Writes a single i8 into this hasher."}},{"name":"fn write_i16(&mut self, i: i16)","details":{"description":"Writes a single i16 into this hasher."}},{"name":"fn write_i32(&mut self, i: i32)","details":{"description":"Writes a single i32 into this hasher."}},{"name":"fn write_i64(&mut self, i: i64)","details":{"description":"Writes a single i64 into this hasher."}},{"name":"fn write_i128(&mut self, i: i128)","details":{"description":"Writes a single i128 into this hasher."}},{"name":"fn write_isize(&mut self, i: isize)","details":{"description":"Writes a single isize into this hasher."}}]}