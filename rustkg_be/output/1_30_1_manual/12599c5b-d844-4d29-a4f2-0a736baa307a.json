{"stability":{"stable since":"1.0.0"},"apiName":"std::collections::btree_map::OccupiedEntry","apiType":"struct","apiDocumentation":{"apiDescription":["A view into an occupied entry in a BTreeMap. It is part of the Entry enum."]},"trait implementations":[{"name":"impl<'a, K, V> std::fmt::Debug for std::collections::btree_map::OccupiedEntry<'a, K, V> where K: 'a + std::cmp::Ord + std::fmt::Debug, V: 'a + std::fmt::Debug","stable since":"1.12.0"},{"name":"impl<'a, K, V> std::marker::Send for std::collections::btree_map::OccupiedEntry<'a, K, V> where K: std::marker::Send, V: std::marker::Send","stable since":"1.0.0"},{"name":"impl<'a, K, V> std::marker::Sync for std::collections::btree_map::OccupiedEntry<'a, K, V> where K: std::marker::Sync, V: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn key(&self) -> &K","details":{"description":["Gets a reference to the key in the entry."],"example":["use std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");"]}},{"name":"pub fn remove_entry(self) -> (K, V)","details":{"description":["Take ownership of the key and value from the map."],"example":["use std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    // We delete the entry from the map.\n    o.remove_entry();\n}\n\n// If now try to get the value, it will panic:\n// println!(\"{}\", map[\"poneyland\"]);"]}},{"name":"pub fn get(&self) -> &V","details":{"description":["Gets a reference to the value in the entry."],"example":["use std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.get(), &12);\n}"]}},{"name":"pub fn get_mut(&mut self) -> &mut V","details":{"description":["Gets a mutable reference to the value in the entry.","If you need a reference to the OccupiedEntry which may outlive the destruction of the Entry value, see into_mut."],"example":["use std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    *o.get_mut() += 10;\n    assert_eq!(*o.get(), 22);\n\n    // We can use the same Entry multiple times.\n    *o.get_mut() += 2;\n}\nassert_eq!(map[\"poneyland\"], 24);"]}},{"name":"pub fn into_mut(self) -> &'a mut V","details":{"description":["Converts the entry into a mutable reference to its value.","If you need multiple references to the OccupiedEntry, see get_mut."],"example":["use std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    *o.into_mut() += 10;\n}\nassert_eq!(map[\"poneyland\"], 22);"]}},{"name":"pub fn insert(&mut self, value: V) -> V","details":{"description":["Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value."],"example":["use std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    assert_eq!(o.insert(15), 12);\n}\nassert_eq!(map[\"poneyland\"], 15);"]}},{"name":"pub fn remove(self) -> V","details":{"description":["Takes the value of the entry out of the map, and returns it."],"example":["use std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.remove(), 12);\n}\n// If we try to get \"poneyland\"'s value, it'll panic:\n// println!(\"{}\", map[\"poneyland\"]);"]}}]}