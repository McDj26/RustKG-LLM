{"stability":{"stable since":"1.0.0"},"apiName":"std::fs::read_dir","apiType":"function","apiDocumentation":{"apiDescription":["Returns an iterator over the entries within a directory.","The iterator will yield instances of io::Result<DirEntry>. New errors may be encountered after an iterator is initially constructed.","Platform-specific behavior","This function currently corresponds to the opendir function on Unix and the FindFirstFile function on Windows. Note that, this may change in the future.","Errors","This function will return an error in the following situations, but is not limited to just these cases:","The provided path doesn't exist. The process lacks permissions to view the contents. The path points at a non-directory file."],"examples":["use std::io;\nuse std::fs::{self, DirEntry};\nuse std::path::Path;\n\n// one possible implementation of walking a directory only visiting files\nfn visit_dirs(dir: &Path, cb: &Fn(&DirEntry)) -> io::Result<()> {\n    if dir.is_dir() {\n        for entry in fs::read_dir(dir)? {\n            let entry = entry?;\n            let path = entry.path();\n            if path.is_dir() {\n                visit_dirs(&path, cb)?;\n            } else {\n                cb(&entry);\n            }\n        }\n    }\n    Ok(())\n}"]}}