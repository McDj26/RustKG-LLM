{"stability":{"stable since":"1.0.0"},"apiName":"std::net::TcpStream","apiType":"struct","apiDocumentation":{"apiDescription":["A TCP stream between a local and a remote socket.","After creating a TcpStream by either connecting to a remote host or accepting a connection on a TcpListener, data can be transmitted by reading and writing to it.","The connection will be closed when the value is dropped. The reading and writing portions of the connection can also be shut down individually with the shutdown method.","The Transmission Control Protocol is specified in IETF RFC 793."],"examples":["use std::io::prelude::*;\nuse std::net::TcpStream;\n\n{\n    let mut stream = TcpStream::connect(\"127.0.0.1:34254\").unwrap();\n\n    // ignore the Result\n    let _ = stream.write(&[1]);\n    let _ = stream.read(&mut [0; 128]); // ignore here too\n} // the stream is closed here"]},"trait implementations":[{"name":"impl std::io::Read for std::net::TcpStream","stable since":"1.0.0"},{"name":"impl std::io::Write for std::net::TcpStream","stable since":"1.0.0"},{"name":"impl<'a> std::io::Read for &'a std::net::TcpStream","stable since":"1.0.0"},{"name":"impl<'a> std::io::Write for &'a std::net::TcpStream","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::net::TcpStream","stable since":"1.0.0"},{"name":"impl std::os::windows::io::AsRawSocket for std::net::TcpStream","stable since":"1.0.0"},{"name":"impl std::os::windows::io::FromRawSocket for std::net::TcpStream","stable since":"1.1.0"},{"name":"impl std::os::windows::io::IntoRawSocket for std::net::TcpStream","stable since":"1.4.0"},{"name":"impl std::os::unix::io::AsRawFd for std::net::TcpStream","stable since":"1.0.0"},{"name":"impl std::os::unix::io::FromRawFd for std::net::TcpStream","stable since":"1.1.0"},{"name":"impl std::os::unix::io::IntoRawFd for std::net::TcpStream","stable since":"1.4.0"},{"name":"impl std::marker::Send for std::net::TcpStream","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::net::TcpStream","stable since":"1.0.0"}],"methods":[{"name":"pub fn connect<A: ToSocketAddrs>(addr: A) -> Result<TcpStream>","details":{"description":["Opens a TCP connection to a remote host.","addr is an address of the remote host. Anything which implements ToSocketAddrs trait can be supplied for the address; see this trait documentation for concrete examples.","If addr yields multiple addresses, connect will be attempted with each of the addresses until a connection is successful. If none of the addresses result in a successful connection, the error returned from the last connection attempt (the last address) is returned."],"example":["Open a TCP connection to 127.0.0.1:8080:","use std::net::TcpStream;\n\nif let Ok(stream) = TcpStream::connect(\"127.0.0.1:8080\") {\n    println!(\"Connected to the server!\");\n} else {\n    println!(\"Couldn't connect to server...\");\n}","Open a TCP connection to 127.0.0.1:8080. If the connection fails, open\na TCP connection to 127.0.0.1:8081:","use std::net::{SocketAddr, TcpStream};\n\nlet addrs = [\n    SocketAddr::from(([127, 0, 0, 1], 8080)),\n    SocketAddr::from(([127, 0, 0, 1], 8081)),\n];\nif let Ok(stream) = TcpStream::connect(&addrs[..]) {\n    println!(\"Connected to the server!\");\n} else {\n    println!(\"Couldn't connect to server...\");\n}"]}},{"name":"pub fn connect_timeout( addr: &SocketAddr, timeout: Duration) -> Result<TcpStream>","details":{"description":["Opens a TCP connection to a remote host with a timeout.","Unlike connect, connect_timeout takes a single SocketAddr since timeout must be applied to individual addresses.","It is an error to pass a zero Duration to this function.","Unlike other methods on TcpStream, this does not correspond to a single system call. It instead calls connect in nonblocking mode and then uses an OS-specific mechanism to await the completion of the connection request."]}},{"name":"pub fn peer_addr(&self) -> Result<SocketAddr>","details":{"description":["Returns the socket address of the remote peer of this TCP connection."],"example":["use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, TcpStream};\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nassert_eq!(stream.peer_addr().unwrap(),\n           SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080)));"]}},{"name":"pub fn local_addr(&self) -> Result<SocketAddr>","details":{"description":["Returns the socket address of the local half of this TCP connection."],"example":["use std::net::{IpAddr, Ipv4Addr, TcpStream};\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nassert_eq!(stream.local_addr().unwrap().ip(),\n           IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));"]}},{"name":"pub fn shutdown(&self, how: Shutdown) -> Result<()>","details":{"description":["Shuts down the read, write, or both halves of this connection.","This function will cause all pending and future I/O on the specified portions to return immediately with an appropriate value (see the documentation of Shutdown).","Platform-specific behavior","Calling this function multiple times may result in different behavior, depending on the operating system. On Linux, the second call will return Ok(()), but on macOS, it will return ErrorKind::NotConnected. This may change in the future."],"example":["use std::net::{Shutdown, TcpStream};\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.shutdown(Shutdown::Both).expect(\"shutdown call failed\");"]}},{"name":"pub fn try_clone(&self) -> Result<TcpStream>","details":{"description":["Creates a new independently owned handle to the underlying socket.","The returned TcpStream is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nlet stream_clone = stream.try_clone().expect(\"clone failed...\");"]}},{"name":"pub fn set_read_timeout(&self, dur: Option<Duration>) -> Result<()>","details":{"description":["Sets the read timeout to the timeout specified.","If the value specified is None, then read calls will block indefinitely. An Err is returned if the zero Duration is passed to this method.","Platform-specific behavior","Platforms may return a different error code whenever a read times out as a result of setting this option. For example Unix typically returns an error of the kind WouldBlock, but Windows may return TimedOut."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_read_timeout(None).expect(\"set_read_timeout call failed\");","An Err is returned if the zero Duration is passed to this\nmethod:","use std::io;\nuse std::net::TcpStream;\nuse std::time::Duration;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap();\nlet result = stream.set_read_timeout(Some(Duration::new(0, 0)));\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), io::ErrorKind::InvalidInput)"]}},{"name":"pub fn set_write_timeout(&self, dur: Option<Duration>) -> Result<()>","details":{"description":["Sets the write timeout to the timeout specified.","If the value specified is None, then write calls will block indefinitely. An Err is returned if the zero Duration is passed to this method.","Platform-specific behavior","Platforms may return a different error code whenever a write times out as a result of setting this option. For example Unix typically returns an error of the kind WouldBlock, but Windows may return TimedOut."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_write_timeout(None).expect(\"set_write_timeout call failed\");","An Err is returned if the zero Duration is passed to this\nmethod:","use std::io;\nuse std::net::TcpStream;\nuse std::time::Duration;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap();\nlet result = stream.set_write_timeout(Some(Duration::new(0, 0)));\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), io::ErrorKind::InvalidInput)"]}},{"name":"pub fn read_timeout(&self) -> Result<Option<Duration>>","details":{"description":["Returns the read timeout of this socket.","If the timeout is None, then read calls will block indefinitely.","Platform-specific behavior","Some platforms do not provide access to the current timeout."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_read_timeout(None).expect(\"set_read_timeout call failed\");\nassert_eq!(stream.read_timeout().unwrap(), None);"]}},{"name":"pub fn write_timeout(&self) -> Result<Option<Duration>>","details":{"description":["Returns the write timeout of this socket.","If the timeout is None, then write calls will block indefinitely.","Platform-specific behavior","Some platforms do not provide access to the current timeout."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_write_timeout(None).expect(\"set_write_timeout call failed\");\nassert_eq!(stream.write_timeout().unwrap(), None);"]}},{"name":"pub fn peek(&self, buf: &mut [u8]) -> Result<usize>","details":{"description":["Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.","Successive calls return the same data. This is accomplished by passing MSG_PEEK as a flag to the underlying recv system call."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8000\")\n                       .expect(\"couldn't bind to address\");\nlet mut buf = [0; 10];\nlet len = stream.peek(&mut buf).expect(\"peek failed\");"]}},{"name":"pub fn set_nodelay(&self, nodelay: bool) -> Result<()>","details":{"description":["Sets the value of the TCP_NODELAY option on this socket.","If set, this option disables the Nagle algorithm. This means that segments are always sent as soon as possible, even if there is only a small amount of data. When not set, data is buffered until there is a sufficient amount to send out, thereby avoiding the frequent sending of small packets."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_nodelay(true).expect(\"set_nodelay call failed\");"]}},{"name":"pub fn nodelay(&self) -> Result<bool>","details":{"description":["Gets the value of the TCP_NODELAY option on this socket.","For more information about this option, see set_nodelay."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_nodelay(true).expect(\"set_nodelay call failed\");\nassert_eq!(stream.nodelay().unwrap_or(false), true);"]}},{"name":"pub fn set_ttl(&self, ttl: u32) -> Result<()>","details":{"description":["Sets the value for the IP_TTL option on this socket.","This value sets the time-to-live field that is used in every packet sent from this socket."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_ttl(100).expect(\"set_ttl call failed\");"]}},{"name":"pub fn ttl(&self) -> Result<u32>","details":{"description":["Gets the value of the IP_TTL option for this socket.","For more information about this option, see set_ttl."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_ttl(100).expect(\"set_ttl call failed\");\nassert_eq!(stream.ttl().unwrap_or(0), 100);"]}},{"name":"pub fn take_error(&self) -> Result<Option<Error>>","details":{"description":["Get the value of the SO_ERROR option on this socket.","This will retrieve the stored error in the underlying socket, clearing the field in the process. This can be useful for checking errors between calls."],"example":["use std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.take_error().expect(\"No error was expected...\");"]}},{"name":"pub fn set_nonblocking(&self, nonblocking: bool) -> Result<()>","details":{"description":["Moves this TCP stream into or out of nonblocking mode.","This will result in read, write, recv and send operations becoming nonblocking, i.e. immediately returning from their calls. If the IO operation is successful, Ok is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind io::ErrorKind::WouldBlock is returned.","On Unix platforms, calling this method corresponds to calling fcntl FIONBIO. On Windows calling this method corresponds to calling ioctlsocket FIONBIO."],"example":["Reading bytes from a TCP stream in non-blocking mode:","use std::io::{self, Read};\nuse std::net::TcpStream;\n\nlet mut stream = TcpStream::connect(\"127.0.0.1:7878\")\n    .expect(\"Couldn't connect to the server...\");\nstream.set_nonblocking(true).expect(\"set_nonblocking call failed\");\n\nlet mut buf = vec![];\nloop {\n    match stream.read_to_end(&mut buf) {\n        Ok(_) => break,\n        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n            // wait until network socket is ready, typically implemented\n            // via platform-specific APIs such as epoll or IOCP\n            wait_for_fd();\n        }\n        Err(e) => panic!(\"encountered IO error: {}\", e),\n    };\n};\nprintln!(\"bytes: {:?}\", buf);"]}}]}