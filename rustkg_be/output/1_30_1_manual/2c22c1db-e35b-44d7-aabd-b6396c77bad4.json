{"stability":{"stable since":"1.2.0"},"apiName":"std::iter::once","apiType":"function","apiDocumentation":{"apiDescription":["Creates an iterator that yields an element exactly once.","This is commonly used to adapt a single value into a chain of other kinds of iteration. Maybe you have an iterator that covers almost everything, but you need an extra special case. Maybe you have a function which works on iterators, but you only need to process one value."],"examples":["Basic usage:","use std::iter;\n\n// one is the loneliest number\nlet mut one = iter::once(1);\n\nassert_eq!(Some(1), one.next());\n\n// just one, that's all we get\nassert_eq!(None, one.next());","Chaining together with another iterator. Let's say that we want to iterate\nover each file of the .foo directory, but also a configuration file,\n.foorc:","use std::iter;\nuse std::fs;\nuse std::path::PathBuf;\n\nlet dirs = fs::read_dir(\".foo\").unwrap();\n\n// we need to convert from an iterator of DirEntry-s to an iterator of\n// PathBufs, so we use map\nlet dirs = dirs.map(|file| file.unwrap().path());\n\n// now, our iterator just for our config file\nlet config = iter::once(PathBuf::from(\".foorc\"));\n\n// chain the two iterators together into one big iterator\nlet files = dirs.chain(config);\n\n// this will give us all of the files in .foo as well as .foorc\nfor f in files {\n    println!(\"{:?}\", f);\n}"]}}