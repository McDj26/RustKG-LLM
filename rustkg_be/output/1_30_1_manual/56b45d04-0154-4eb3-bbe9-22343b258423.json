{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"},"apiName":"std::sync::atomic::AtomicI8","apiType":"struct","apiDocumentation":{"apiDescription":["An integer type which can be safely shared between threads.","This type has the same in-memory representation as the underlying integer type, i8. For more about the differences between atomic types and non-atomic types, please see the module-level documentation."]},"trait implementations":[{"name":"impl std::fmt::Debug for std::sync::atomic::AtomicI8","stable since":"1.0.0"},{"name":"impl std::convert::From<i8> for std::sync::atomic::AtomicI8","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::sync::atomic::AtomicI8","stable since":"1.0.0"},{"name":"impl std::default::Default for std::sync::atomic::AtomicI8","stable since":"1.0.0"},{"name":"impl std::panic::RefUnwindSafe for std::sync::atomic::AtomicI8","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::sync::atomic::AtomicI8","stable since":"1.0.0"}],"methods":[{"name":"pub const fn new(v: i8) -> AtomicI8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn get_mut(&mut self) -> &mut i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn into_inner(self) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn load(&self, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn store(&self, val: i8, order: Ordering)","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn swap(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn compare_and_swap(&self, current: i8, new: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn compare_exchange( &self, current: i8, new: i8, success: Ordering, failure: Ordering) -> Result<i8, i8>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn compare_exchange_weak( &self, current: i8, new: i8, success: Ordering, failure: Ordering) -> Result<i8, i8>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn fetch_add(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn fetch_sub(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn fetch_and(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn fetch_nand(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn fetch_or(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn fetch_xor(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (integer_atomics #32976)"]},{"name":"pub fn fetch_update<F>( &self, f: F, fetch_order: Ordering, set_order: Ordering) -> Result<i8, i8> where F: FnMut(i8) -> Option<i8>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (no_more_cas #48655)no more CAS loops in user code\n"]},{"name":"pub fn fetch_max(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (atomic_min_max #48655)easier and faster min/max than writing manual CAS loop\n"]},{"name":"pub fn fetch_min(&self, val: i8, order: Ordering) -> i8","stability":["ðŸ”¬ This is a nightly-only experimental API.  (atomic_min_max #48655)easier and faster min/max than writing manual CAS loop\n"]}]}