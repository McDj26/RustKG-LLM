{"stability":{"stable since":"1.0.0"},"apiName":"std::iter::ExactSizeIterator","apiType":"trait","apiDocumentation":{"apiDescription":["An iterator that knows its exact length.","Many Iterators don't know how many times they will iterate, but some do. If an iterator knows how many times it can iterate, providing access to that information can be useful. For example, if you want to iterate backwards, a good start is to know where the end is.","When implementing an ExactSizeIterator, you must also implement Iterator. When doing so, the implementation of size_hint must return the exact size of the iterator.","The len method has a default implementation, so you usually shouldn't implement it. However, you may be able to provide a more performant implementation than the default, so overriding it in this case makes sense."],"examples":["Basic usage:","// a finite range knows exactly how many times it will iterate\nlet five = 0..5;\n\nassert_eq!(5, five.len());","In the module level docs, we implemented an Iterator,\nCounter. Let's implement ExactSizeIterator for it as well:","impl ExactSizeIterator for Counter {\n    // We can easily calculate the remaining number of iterations.\n    fn len(&self) -> usize {\n        5 - self.count\n    }\n}\n\n// And now we can use it!\n\nlet counter = Counter::new();\n\nassert_eq!(5, counter.len());"]},"trait provided methods":[{"name":"fn len(&self) -> usize","details":{"description":"Returns the exact number of times the iterator will iterate.","example":["Basic usage:","// a finite range knows exactly how many times it will iterate\nlet five = 0..5;\n\nassert_eq!(5, five.len());"]}},{"name":"fn is_empty(&self) -> bool","stability":["ðŸ”¬ This is a nightly-only experimental API.  (exact_size_is_empty #35428)"]}]}