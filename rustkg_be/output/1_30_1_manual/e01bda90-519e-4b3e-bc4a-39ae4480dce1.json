{"stability":{"stable since":"1.9.0"},"apiName":"std::ptr::write_volatile","apiType":"function","apiDocumentation":{"apiDescription":["Performs a volatile write of a memory location with the given value without reading or dropping the old value.","Volatile operations are intended to act on I/O memory, and are guaranteed to not be elided or reordered by the compiler across other volatile operations.","Notes","Rust does not currently have a rigorously and formally defined memory model, so the precise semantics of what \"volatile\" means here is subject to change over time. That being said, the semantics will almost always end up pretty similar to C11's definition of volatile.","The compiler shouldn't change the relative order or number of volatile memory operations. However, volatile memory operations on zero-sized types (e.g. if a zero-sized type is passed to write_volatile) are no-ops and may be ignored.","Safety","This operation is marked unsafe because it accepts a raw pointer.","It does not drop the contents of dst. This is safe, but it could leak allocations or resources, so care must be taken not to overwrite an object that should be dropped.","This is appropriate for initializing uninitialized memory, or overwriting memory that has previously been read from.","Just like in C, whether an operation is volatile has no bearing whatsoever on questions involving concurrent access from multiple threads. Volatile accesses behave exactly like non-atomic accesses in that regard. In particular, a race between a write_volatile and any other operation (reading or writing) on the same location is undefined behavior."],"examples":["Basic usage:","let mut x = 0;\nlet y = &mut x as *mut i32;\nlet z = 12;\n\nunsafe {\n    std::ptr::write_volatile(y, z);\n    assert_eq!(std::ptr::read_volatile(y), 12);\n}"]}}