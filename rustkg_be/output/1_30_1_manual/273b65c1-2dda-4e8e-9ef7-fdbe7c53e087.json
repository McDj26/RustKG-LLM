{"stability":{"stable since":"1.0.0"},"apiName":"std::ops::Index","apiType":"trait","apiDocumentation":{"apiDescription":["Used for indexing operations (container[index]) in immutable contexts.","container[index] is actually syntactic sugar for *container.index(index), but only when used as an immutable value. If a mutable value is requested, IndexMut is used instead. This allows nice things such as let value = v[index] if the type of value implements Copy."],"examples":["The following example implements Index on a read-only NucleotideCount\ncontainer, enabling individual counts to be retrieved with index syntax.","use std::ops::Index;\n\nenum Nucleotide {\n    A,\n    C,\n    G,\n    T,\n}\n\nstruct NucleotideCount {\n    a: usize,\n    c: usize,\n    g: usize,\n    t: usize,\n}\n\nimpl Index<Nucleotide> for NucleotideCount {\n    type Output = usize;\n\n    fn index(&self, nucleotide: Nucleotide) -> &usize {\n        match nucleotide {\n            Nucleotide::A => &self.a,\n            Nucleotide::C => &self.c,\n            Nucleotide::G => &self.g,\n            Nucleotide::T => &self.t,\n        }\n    }\n}\n\nlet nucleotide_count = NucleotideCount {a: 14, c: 9, g: 10, t: 12};\nassert_eq!(nucleotide_count[Nucleotide::A], 14);\nassert_eq!(nucleotide_count[Nucleotide::C], 9);\nassert_eq!(nucleotide_count[Nucleotide::G], 10);\nassert_eq!(nucleotide_count[Nucleotide::T], 12);"]},"trait required methods":[{"name":"fn index(&self, index: Idx) -> &Self::Output","details":{"description":"Performs the indexing (container[index]) operation."}}]}