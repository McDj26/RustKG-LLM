{"stability":{"stable since":"1.0.0"},"apiName":"std::any","apiType":"module","apiDocumentation":{"apiDescription":["This module implements the Any trait, which enables dynamic typing of any 'static type through runtime reflection.","Any itself can be used to get a TypeId, and has more features when used as a trait object. As &Any (a borrowed trait object), it has the is and downcast_ref methods, to test if the contained value is of a given type, and to get a reference to the inner value as a type. As &mut Any, there is also the downcast_mut method, for getting a mutable reference to the inner value. Box<Any> adds the downcast method, which attempts to convert to a Box<T>. See the Box documentation for the full details.","Note that &Any is limited to testing whether a value is of a specified concrete type, and cannot be used to test whether a type implements a trait."],"examples":["Consider a situation where we want to log out a value passed to a function.\nWe know the value we're working on implements Debug, but we don't know its\nconcrete type.  We want to give special treatment to certain types: in this\ncase printing out the length of String values prior to their value.\nWe don't know the concrete type of our value at compile time, so we need to\nuse runtime reflection instead.","use std::fmt::Debug;\nuse std::any::Any;\n\n// Logger function for any type that implements Debug.\nfn log<T: Any + Debug>(value: &T) {\n    let value_any = value as &Any;\n\n    // try to convert our value to a String.  If successful, we want to\n    // output the String's length as well as its value.  If not, it's a\n    // different type: just print it out unadorned.\n    match value_any.downcast_ref::<String>() {\n        Some(as_string) => {\n            println!(\"String ({}): {}\", as_string.len(), as_string);\n        }\n        None => {\n            println!(\"{:?}\", value);\n        }\n    }\n}\n\n// This function wants to log its parameter out prior to doing work with it.\nfn do_work<T: Any + Debug>(value: &T) {\n    log(value);\n    // ...do some other work\n}\n\nfn main() {\n    let my_string = \"Hello World\".to_string();\n    do_work(&my_string);\n\n    let my_i8: i8 = 100;\n    do_work(&my_i8);\n}"]},"children":["std::any::TypeId","std::any::Any"]}