{"stability":{"stable since":"1.0.0"},"apiName":"std::any::TypeId","apiType":"struct","apiDocumentation":{"apiDescription":["A TypeId represents a globally unique identifier for a type.","Each TypeId is an opaque object which does not allow inspection of what's inside but does allow basic operations such as cloning, comparison, printing, and showing.","A TypeId is currently only available for types which ascribe to 'static, but this limitation may be removed in the future.","While TypeId implements Hash, PartialOrd, and Ord, it is worth noting that the hashes and ordering will vary between Rust releases. Beware of relying on them inside of your code!"]},"trait implementations":[{"name":"impl std::hash::Hash for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd<std::any::TypeId> for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<std::any::TypeId> for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::marker::Copy for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::any::TypeId","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::any::TypeId","stable since":"1.0.0"}],"methods":[{"name":"pub const fn of<T>() -> TypeId where T: 'static + ?Sized","details":{"description":["Returns the TypeId of the type this generic function has been instantiated with."],"example":["use std::any::{Any, TypeId};\n\nfn is_string<T: ?Sized + Any>(_s: &T) -> bool {\n    TypeId::of::<String>() == TypeId::of::<T>()\n}\n\nfn main() {\n    assert_eq!(is_string(&0), false);\n    assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n}"]}}]}