{"stability":{"stable since":"1.0.0"},"apiName":"std::io::stdin","apiType":"function","apiDocumentation":{"apiDescription":["Constructs a new handle to the standard input of the current process.","Each handle returned is a reference to a shared global buffer whose access is synchronized via a mutex. If you need more explicit control over locking, see the lock() method."],"examples":["Using implicit synchronization:","use std::io::{self, Read};\n\nfn main() -> io::Result<()> {\n    let mut buffer = String::new();\n    io::stdin().read_to_string(&mut buffer)?;\n    Ok(())\n}","Using explicit synchronization:","use std::io::{self, Read};\n\nfn main() -> io::Result<()> {\n    let mut buffer = String::new();\n    let stdin = io::stdin();\n    let mut handle = stdin.lock();\n\n    handle.read_to_string(&mut buffer)?;\n    Ok(())\n}"]}}