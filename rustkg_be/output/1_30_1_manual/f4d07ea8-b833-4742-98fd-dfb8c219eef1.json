{"stability":{"stable since":"1.3.0"},"apiName":"std::time::Duration","apiType":"struct","apiDocumentation":{"apiDescription":["A Duration type to represent a span of time, typically used for system timeouts.","Each Duration is composed of a whole number of seconds and a fractional part represented in nanoseconds. If the underlying system does not support nanosecond-level precision, APIs binding a system timeout will typically round up the number of nanoseconds.","Durations implement many common traits, including Add, Sub, and other ops traits."],"examples":["use std::time::Duration;\n\nlet five_seconds = Duration::new(5, 0);\nlet five_seconds_and_five_nanos = five_seconds + Duration::new(0, 5);\n\nassert_eq!(five_seconds_and_five_nanos.as_secs(), 5);\nassert_eq!(five_seconds_and_five_nanos.subsec_nanos(), 5);\n\nlet ten_millis = Duration::from_millis(10);"]},"trait implementations":[{"name":"impl std::ops::DivAssign<u32> for std::time::Duration","stable since":"1.9.0"},{"name":"impl std::ops::MulAssign<u32> for std::time::Duration","stable since":"1.9.0"},{"name":"impl std::ops::SubAssign<std::time::Duration> for std::time::Duration","stable since":"1.9.0"},{"name":"impl std::hash::Hash for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::ops::AddAssign<std::time::Duration> for std::time::Duration","stable since":"1.9.0"},{"name":"impl std::clone::Clone for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd<std::time::Duration> for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::ops::Sub<std::time::Duration> for std::time::Duration","stable since":"1.0.0"},{"name":"impl<'a> std::iter::Sum<&'a std::time::Duration> for std::time::Duration","stable since":"1.16.0"},{"name":"impl std::iter::Sum<std::time::Duration> for std::time::Duration","stable since":"1.16.0"},{"name":"impl std::fmt::Debug for std::time::Duration","stable since":"1.27.0"},{"name":"impl std::cmp::Eq for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<std::time::Duration> for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::marker::Copy for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::ops::Mul<u32> for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::default::Default for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::ops::Div<u32> for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::ops::Add<std::time::Duration> for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::ops::Add<std::time::Duration> for std::time::Instant","stable since":"1.8.0"},{"name":"impl std::ops::AddAssign<std::time::Duration> for std::time::Instant","stable since":"1.9.0"},{"name":"impl std::ops::Sub<std::time::Duration> for std::time::Instant","stable since":"1.8.0"},{"name":"impl std::ops::SubAssign<std::time::Duration> for std::time::Instant","stable since":"1.9.0"},{"name":"impl std::ops::Add<std::time::Duration> for std::time::SystemTime","stable since":"1.8.0"},{"name":"impl std::ops::AddAssign<std::time::Duration> for std::time::SystemTime","stable since":"1.9.0"},{"name":"impl std::ops::Sub<std::time::Duration> for std::time::SystemTime","stable since":"1.8.0"},{"name":"impl std::ops::SubAssign<std::time::Duration> for std::time::SystemTime","stable since":"1.9.0"},{"name":"impl std::marker::Send for std::time::Duration","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::time::Duration","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(secs: u64, nanos: u32) -> Duration","details":{"description":["Creates a new Duration from the specified number of whole seconds and additional nanoseconds.","If the number of nanoseconds is greater than 1 billion (the number of nanoseconds in a second), then it will carry over into the seconds provided.","Panics","This constructor will panic if the carry from the nanoseconds overflows the seconds counter."],"example":["use std::time::Duration;\n\nlet five_seconds = Duration::new(5, 0);"]}},{"name":"pub const fn from_secs(secs: u64) -> Duration","details":{"description":["Creates a new Duration from the specified number of whole seconds."],"example":["use std::time::Duration;\n\nlet duration = Duration::from_secs(5);\n\nassert_eq!(5, duration.as_secs());\nassert_eq!(0, duration.subsec_nanos());"]}},{"name":"pub const fn from_millis(millis: u64) -> Duration","details":{"description":["Creates a new Duration from the specified number of milliseconds."],"example":["use std::time::Duration;\n\nlet duration = Duration::from_millis(2569);\n\nassert_eq!(2, duration.as_secs());\nassert_eq!(569_000_000, duration.subsec_nanos());"]}},{"name":"pub const fn from_micros(micros: u64) -> Duration","details":{"description":["Creates a new Duration from the specified number of microseconds."],"example":["use std::time::Duration;\n\nlet duration = Duration::from_micros(1_000_002);\n\nassert_eq!(1, duration.as_secs());\nassert_eq!(2000, duration.subsec_nanos());"]}},{"name":"pub const fn from_nanos(nanos: u64) -> Duration","details":{"description":["Creates a new Duration from the specified number of nanoseconds."],"example":["use std::time::Duration;\n\nlet duration = Duration::from_nanos(1_000_000_123);\n\nassert_eq!(1, duration.as_secs());\nassert_eq!(123, duration.subsec_nanos());"]}},{"name":"pub const fn as_secs(&self) -> u64","details":{"description":["Returns the number of whole seconds contained by this Duration.","The returned value does not include the fractional (nanosecond) part of the duration, which can be obtained using subsec_nanos."],"example":["use std::time::Duration;\n\nlet duration = Duration::new(5, 730023852);\nassert_eq!(duration.as_secs(), 5);","To determine the total number of seconds represented by the Duration,\nuse as_secs in combination with subsec_nanos:","use std::time::Duration;\n\nlet duration = Duration::new(5, 730023852);\n\nassert_eq!(5.730023852,\n           duration.as_secs() as f64\n           + duration.subsec_nanos() as f64 * 1e-9);"]}},{"name":"pub const fn subsec_millis(&self) -> u32","details":{"description":["Returns the fractional part of this Duration, in whole milliseconds.","This method does not return the length of the duration when represented by milliseconds. The returned number always represents a fractional portion of a second (i.e. it is less than one thousand)."],"example":["use std::time::Duration;\n\nlet duration = Duration::from_millis(5432);\nassert_eq!(duration.as_secs(), 5);\nassert_eq!(duration.subsec_millis(), 432);"]}},{"name":"pub const fn subsec_micros(&self) -> u32","details":{"description":["Returns the fractional part of this Duration, in whole microseconds.","This method does not return the length of the duration when represented by microseconds. The returned number always represents a fractional portion of a second (i.e. it is less than one million)."],"example":["use std::time::Duration;\n\nlet duration = Duration::from_micros(1_234_567);\nassert_eq!(duration.as_secs(), 1);\nassert_eq!(duration.subsec_micros(), 234_567);"]}},{"name":"pub const fn subsec_nanos(&self) -> u32","details":{"description":["Returns the fractional part of this Duration, in nanoseconds.","This method does not return the length of the duration when represented by nanoseconds. The returned number always represents a fractional portion of a second (i.e. it is less than one billion)."],"example":["use std::time::Duration;\n\nlet duration = Duration::from_millis(5010);\nassert_eq!(duration.as_secs(), 5);\nassert_eq!(duration.subsec_nanos(), 10_000_000);"]}},{"name":"pub fn as_millis(&self) -> u128","stability":["ðŸ”¬ This is a nightly-only experimental API.  (duration_as_u128 #50202)"]},{"name":"pub fn as_micros(&self) -> u128","stability":["ðŸ”¬ This is a nightly-only experimental API.  (duration_as_u128 #50202)"]},{"name":"pub fn as_nanos(&self) -> u128","stability":["ðŸ”¬ This is a nightly-only experimental API.  (duration_as_u128 #50202)"]},{"name":"pub fn checked_add(self, rhs: Duration) -> Option<Duration>","details":{"description":["Checked Duration addition. Computes self + other, returning None if overflow occurred."],"example":["Basic usage:","use std::time::Duration;\n\nassert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)), Some(Duration::new(0, 1)));\nassert_eq!(Duration::new(1, 0).checked_add(Duration::new(std::u64::MAX, 0)), None);"]}},{"name":"pub fn checked_sub(self, rhs: Duration) -> Option<Duration>","details":{"description":["Checked Duration subtraction. Computes self - other, returning None if the result would be negative or if overflow occurred."],"example":["Basic usage:","use std::time::Duration;\n\nassert_eq!(Duration::new(0, 1).checked_sub(Duration::new(0, 0)), Some(Duration::new(0, 1)));\nassert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);"]}},{"name":"pub fn checked_mul(self, rhs: u32) -> Option<Duration>","details":{"description":["Checked Duration multiplication. Computes self * other, returning None if overflow occurred."],"example":["Basic usage:","use std::time::Duration;\n\nassert_eq!(Duration::new(0, 500_000_001).checked_mul(2), Some(Duration::new(1, 2)));\nassert_eq!(Duration::new(std::u64::MAX - 1, 0).checked_mul(2), None);"]}},{"name":"pub fn checked_div(self, rhs: u32) -> Option<Duration>","details":{"description":["Checked Duration division. Computes self / other, returning None if other == 0."],"example":["Basic usage:","use std::time::Duration;\n\nassert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\nassert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\nassert_eq!(Duration::new(2, 0).checked_div(0), None);"]}}]}