{"stability":{"stable since":"1.1.0"},"apiName":"std::fs::FileType","apiType":"struct","apiDocumentation":{"apiDescription":["A structure representing a type of file with accessors for each file type. It is returned by Metadata::file_type method."]},"trait implementations":[{"name":"impl std::marker::Copy for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::os::windows::fs::FileTypeExt for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::os::unix::fs::FileTypeExt for std::fs::FileType","stable since":"1.5.0"},{"name":"impl std::marker::Send for std::fs::FileType","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::fs::FileType","stable since":"1.0.0"}],"methods":[{"name":"pub fn is_dir(&self) -> bool","details":{"description":["Test whether this file type represents a directory. The result is mutually exclusive to the results of is_file and is_symlink; only zero or one of these tests may pass."],"example":["fn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let file_type = metadata.file_type();\n\n    assert_eq!(file_type.is_dir(), false);\n    Ok(())\n}"]}},{"name":"pub fn is_file(&self) -> bool","details":{"description":["Test whether this file type represents a regular file. The result is mutually exclusive to the results of is_dir and is_symlink; only zero or one of these tests may pass."],"example":["fn main() -> std::io::Result<()> {\n    use std::fs;\n\n    let metadata = fs::metadata(\"foo.txt\")?;\n    let file_type = metadata.file_type();\n\n    assert_eq!(file_type.is_file(), true);\n    Ok(())\n}"]}},{"name":"pub fn is_symlink(&self) -> bool","details":{"description":["Test whether this file type represents a symbolic link. The result is mutually exclusive to the results of is_dir and is_file; only zero or one of these tests may pass.","The underlying Metadata struct needs to be retrieved with the fs::symlink_metadata function and not the fs::metadata function. The fs::metadata function follows symbolic links, so is_symlink would always return false for the target file."],"example":["use std::fs;\n\nfn main() -> std::io::Result<()> {\n    let metadata = fs::symlink_metadata(\"foo.txt\")?;\n    let file_type = metadata.file_type();\n\n    assert_eq!(file_type.is_symlink(), false);\n    Ok(())\n}"]}}]}