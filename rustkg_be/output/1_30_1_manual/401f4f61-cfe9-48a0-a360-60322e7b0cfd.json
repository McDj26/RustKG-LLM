{"stability":{"stable since":"1.28.0"},"apiName":"std::alloc","apiType":"module","apiDocumentation":{"apiDescription":["Memory allocation APIs","In a given program, the standard library has one “global” memory allocator that is used for example by Box<T> and Vec<T>.","Currently the default global allocator is unspecified. The compiler may link to a version of jemalloc on some platforms, but this is not guaranteed. Libraries, however, like cdylibs and staticlibs are guaranteed to use the System by default.","The #[global_allocator] attribute","This attribute allows configuring the choice of global allocator. You can use this to implement a completely custom global allocator to route all default allocation requests to a custom object.","use std::alloc::{GlobalAlloc, System, Layout}; struct MyAllocator; unsafe impl GlobalAlloc for MyAllocator { unsafe fn alloc(&self, layout: Layout) -> *mut u8 { System.alloc(layout) } unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) { System.dealloc(ptr, layout) } } #[global_allocator] static GLOBAL: MyAllocator = MyAllocator; fn main() { // This `Vec` will allocate memory through `GLOBAL` above let mut v = Vec::new(); v.push(1); }","The attribute is used on a static item whose type implements the GlobalAlloc trait. This type can be provided by an external library:","ⓘThis example is not tested","extern crate jemallocator; use jemallocator::Jemalloc; #[global_allocator] static GLOBAL: Jemalloc = Jemalloc; fn main() {}","The #[global_allocator] can only be used once in a crate or its recursive dependencies."]},"children":["std::alloc::Layout","std::alloc::LayoutErr","std::alloc::System","std::alloc::AllocErr","std::alloc::CannotReallocInPlace","std::alloc::Excess","std::alloc::Global","std::alloc::GlobalAlloc","std::alloc::Alloc","std::alloc::alloc","std::alloc::alloc_zeroed","std::alloc::dealloc","std::alloc::handle_alloc_error","std::alloc::realloc","std::alloc::set_alloc_error_hook","std::alloc::take_alloc_error_hook"]}