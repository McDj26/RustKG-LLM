{"stability":{"stable since":"1.0.0"},"apiName":"std::any::Any","apiType":"trait","apiDocumentation":{"apiDescription":["A type to emulate dynamic typing.","Most types implement Any. However, any type which contains a non-'static reference does not. See the module-level documentation for more details."]},"trait implementations":[{"name":"impl std::fmt::Debug for std::any::Any + 'static + std::marker::Send","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::any::Any + 'static","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::any::Any + 'static + std::marker::Sync + std::marker::Send","stable since":"1.28.0"}],"trait required methods":[{"name":"fn get_type_id(&self) -> TypeId","stability":["ðŸ”¬ This is a nightly-only experimental API.  (get_type_id #27745)this method will likely be replaced by an associated static\n"]}],"methods":[{"name":"pub fn is<T>(&self) -> bool where T: Any","details":{"description":["Returns true if the boxed type is the same as T."],"example":["use std::any::Any;\n\nfn is_string(s: &Any) {\n    if s.is::<String>() {\n        println!(\"It's a string!\");\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nfn main() {\n    is_string(&0);\n    is_string(&\"cookie monster\".to_string());\n}"]}},{"name":"pub fn downcast_ref<T>(&self) -> Option<&T> where T: Any","details":{"description":["Returns some reference to the boxed value if it is of type T, or None if it isn't."],"example":["use std::any::Any;\n\nfn print_if_string(s: &Any) {\n    if let Some(string) = s.downcast_ref::<String>() {\n        println!(\"It's a string({}): '{}'\", string.len(), string);\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nfn main() {\n    print_if_string(&0);\n    print_if_string(&\"cookie monster\".to_string());\n}"]}},{"name":"pub fn downcast_mut<T>(&mut self) -> Option<&mut T> where T: Any","details":{"description":["Returns some mutable reference to the boxed value if it is of type T, or None if it isn't."],"example":["use std::any::Any;\n\nfn modify_if_u32(s: &mut Any) {\n    if let Some(num) = s.downcast_mut::<u32>() {\n        *num = 42;\n    }\n}\n\nfn main() {\n    let mut x = 10u32;\n    let mut s = \"starlord\".to_string();\n\n    modify_if_u32(&mut x);\n    modify_if_u32(&mut s);\n\n    assert_eq!(x, 42);\n    assert_eq!(&s, \"starlord\");\n}"]}},{"name":"pub fn is<T>(&self) -> bool where T: Any","details":{"description":["Forwards to the method defined on the type Any."],"example":["use std::any::Any;\n\nfn is_string(s: &(Any + Send)) {\n    if s.is::<String>() {\n        println!(\"It's a string!\");\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nfn main() {\n    is_string(&0);\n    is_string(&\"cookie monster\".to_string());\n}"]}},{"name":"pub fn downcast_ref<T>(&self) -> Option<&T> where T: Any","details":{"description":["Forwards to the method defined on the type Any."],"example":["use std::any::Any;\n\nfn print_if_string(s: &(Any + Send)) {\n    if let Some(string) = s.downcast_ref::<String>() {\n        println!(\"It's a string({}): '{}'\", string.len(), string);\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nfn main() {\n    print_if_string(&0);\n    print_if_string(&\"cookie monster\".to_string());\n}"]}},{"name":"pub fn downcast_mut<T>(&mut self) -> Option<&mut T> where T: Any","details":{"description":["Forwards to the method defined on the type Any."],"example":["use std::any::Any;\n\nfn modify_if_u32(s: &mut (Any + Send)) {\n    if let Some(num) = s.downcast_mut::<u32>() {\n        *num = 42;\n    }\n}\n\nfn main() {\n    let mut x = 10u32;\n    let mut s = \"starlord\".to_string();\n\n    modify_if_u32(&mut x);\n    modify_if_u32(&mut s);\n\n    assert_eq!(x, 42);\n    assert_eq!(&s, \"starlord\");\n}"]}},{"name":"pub fn is<T>(&self) -> bool where T: Any","details":{"description":["Forwards to the method defined on the type Any."],"example":["use std::any::Any;\n\nfn is_string(s: &(Any + Send + Sync)) {\n    if s.is::<String>() {\n        println!(\"It's a string!\");\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nfn main() {\n    is_string(&0);\n    is_string(&\"cookie monster\".to_string());\n}"]}},{"name":"pub fn downcast_ref<T>(&self) -> Option<&T> where T: Any","details":{"description":["Forwards to the method defined on the type Any."],"example":["use std::any::Any;\n\nfn print_if_string(s: &(Any + Send + Sync)) {\n    if let Some(string) = s.downcast_ref::<String>() {\n        println!(\"It's a string({}): '{}'\", string.len(), string);\n    } else {\n        println!(\"Not a string...\");\n    }\n}\n\nfn main() {\n    print_if_string(&0);\n    print_if_string(&\"cookie monster\".to_string());\n}"]}},{"name":"pub fn downcast_mut<T>(&mut self) -> Option<&mut T> where T: Any","details":{"description":["Forwards to the method defined on the type Any."],"example":["use std::any::Any;\n\nfn modify_if_u32(s: &mut (Any + Send + Sync)) {\n    if let Some(num) = s.downcast_mut::<u32>() {\n        *num = 42;\n    }\n}\n\nfn main() {\n    let mut x = 10u32;\n    let mut s = \"starlord\".to_string();\n\n    modify_if_u32(&mut x);\n    modify_if_u32(&mut s);\n\n    assert_eq!(x, 42);\n    assert_eq!(&s, \"starlord\");\n}"]}}]}