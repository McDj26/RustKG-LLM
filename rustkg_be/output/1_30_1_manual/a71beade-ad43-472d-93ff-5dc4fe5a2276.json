{"stability":{"stable since":"1.0.0"},"apiName":"std::ops::RangeFrom","apiType":"struct","apiDocumentation":{"apiDescription":["A range only bounded inclusively below (start..).","The RangeFrom start.. contains all values with x >= start.","Note: Currently, no overflow checking is done for the Iterator implementation; if you use an integer range and the integer overflows, it might panic in debug mode or create an endless loop in release mode. This overflow behavior might change in the future."],"examples":["assert_eq!((2..), std::ops::RangeFrom { start: 2 });\nassert_eq!(2 + 3 + 4, (2..).take(3).sum());\n\nlet arr = [0, 1, 2, 3];\nassert_eq!(arr[ .. ], [0,1,2,3]);\nassert_eq!(arr[ ..3], [0,1,2  ]);\nassert_eq!(arr[1.. ], [  1,2,3]);  // RangeFrom\nassert_eq!(arr[1..3], [  1,2  ]);"]},"trait implementations":[{"name":"impl<A> std::iter::Iterator for std::ops::RangeFrom<A> where A: std::iter::Step","stable since":"1.0.0"},{"name":"impl std::slice::SliceIndex<str> for std::ops::RangeFrom<usize>","stable since":"1.20.0"},{"name":"impl<T> std::slice::SliceIndex<[T]> for std::ops::RangeFrom<usize>","stable since":"1.15.0"},{"name":"impl<Idx> std::hash::Hash for std::ops::RangeFrom<Idx> where Idx: std::hash::Hash","stable since":"1.0.0"},{"name":"impl<Idx> std::clone::Clone for std::ops::RangeFrom<Idx> where Idx: std::clone::Clone","stable since":"1.0.0"},{"name":"impl<A> std::iter::TrustedLen for std::ops::RangeFrom<A> where A: std::iter::Step","stable since":"1.0.0"},{"name":"impl std::ops::IndexMut<std::ops::RangeFrom<usize>> for str","stable since":"1.3.0"},{"name":"impl std::ops::Index<std::ops::RangeFrom<usize>> for str","stable since":"1.0.0"},{"name":"impl<Idx> std::fmt::Debug for std::ops::RangeFrom<Idx> where Idx: std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<Idx> std::cmp::Eq for std::ops::RangeFrom<Idx> where Idx: std::cmp::Eq","stable since":"1.0.0"},{"name":"impl<Idx> std::cmp::PartialEq<std::ops::RangeFrom<Idx>> for std::ops::RangeFrom<Idx> where Idx: std::cmp::PartialEq<Idx>","stable since":"1.0.0"},{"name":"impl<A> std::iter::FusedIterator for std::ops::RangeFrom<A> where A: std::iter::Step","stable since":"1.26.0"},{"name":"impl<'a, T> std::ops::RangeBounds<T> for std::ops::RangeFrom<&'a T>","stable since":"1.28.0"},{"name":"impl<T> std::ops::RangeBounds<T> for std::ops::RangeFrom<T>","stable since":"1.28.0"},{"name":"impl std::ops::IndexMut<std::ops::RangeFrom<usize>> for std::string::String","stable since":"1.3.0"},{"name":"impl std::ops::Index<std::ops::RangeFrom<usize>> for std::string::String","stable since":"1.0.0"},{"name":"impl<Idx> std::marker::Send for std::ops::RangeFrom<Idx> where Idx: std::marker::Send","stable since":"1.0.0"},{"name":"impl<Idx> std::marker::Sync for std::ops::RangeFrom<Idx> where Idx: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn contains<U>(&self, item: &U) -> bool where Idx: PartialOrd<U>, U: PartialOrd<Idx> + ?Sized","stability":["ðŸ”¬ This is a nightly-only experimental API.  (range_contains #32311)recently added as per RFC\n"]}]}