{"stability":{"stable since":"1.28.0"},"apiName":"std::alloc::GlobalAlloc","apiType":"trait","apiDocumentation":{"apiDescription":["A memory allocator that can be registered as the standard libraryâ€™s default though the #[global_allocator] attributes.","Some of the methods require that a memory block be currently allocated via an allocator. This means that:","the starting address for that memory block was previously returned by a previous call to an allocation method such as alloc, and the memory block has not been subsequently deallocated, where blocks are deallocated either by being passed to a deallocation method such as dealloc or by being passed to a reallocation method that returns a non-null pointer.","Example","use std::alloc::{GlobalAlloc, Layout, alloc}; use std::ptr::null_mut; struct MyAllocator; unsafe impl GlobalAlloc for MyAllocator { unsafe fn alloc(&self, _layout: Layout) -> *mut u8 { null_mut() } unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {} } #[global_allocator] static A: MyAllocator = MyAllocator; fn main() { unsafe { assert!(alloc(Layout::new::<u32>()).is_null()) } }","Unsafety","The GlobalAlloc trait is an unsafe trait for a number of reasons, and implementors must ensure that they adhere to these contracts:","It's undefined behavior if global allocators unwind. This restriction may be lifted in the future, but currently a panic from any of these functions may lead to memory unsafety. Layout queries and calculations in general must be correct. Callers of this trait are allowed to rely on the contracts defined on each method, and implementors must ensure such contracts remain true."]},"trait required methods":[{"name":"unsafe fn alloc(&self, layout: Layout) -> *mut u8","details":{"description":"Allocate memory as described by the given layout."}},{"name":"unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout)","details":{"description":"Deallocate the block of memory at the given ptr pointer with the given layout."}}],"trait provided methods":[{"name":"unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8","details":{"description":"Behaves like alloc, but also ensures that the contents\nare set to zero before being returned."}},{"name":"unsafe fn realloc( &self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8","details":{"description":"Shink or grow a block of memory to the given new_size.\nThe block is described by the given ptr pointer and layout."}}]}