{"stability":{"stable since":"1.0.0"},"apiName":"std::slice","apiType":"module","apiDocumentation":{"apiDescription":["A dynamically-sized view into a contiguous sequence, [T].","See also the slice primitive type.","Slices are a view into a block of memory represented as a pointer and a length.","// slicing a Vec let vec = vec![1, 2, 3]; let int_slice = &vec[..]; // coercing an array to a slice let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];","Slices are either mutable or shared. The shared slice type is &[T], while the mutable slice type is &mut [T], where T represents the element type. For example, you can mutate the block of memory that a mutable slice points to:","let x = &mut [1, 2, 3]; x[1] = 7; assert_eq!(x, &[1, 7, 3]);","Here are some of the things this module contains:","Structs","There are several structs that are useful for slices, such as Iter, which represents iteration over a slice.","Trait Implementations","There are several implementations of common traits for slices. Some examples include:","Clone Eq, Ord - for slices whose element type are Eq or Ord. Hash - for slices whose element type is Hash.","Iteration","The slices implement IntoIterator. The iterator yields references to the slice elements.","let numbers = &[0, 1, 2]; for n in numbers { println!(\"{} is a number!\", n); }","The mutable slice yields mutable references to the elements:","let mut scores = [7, 8, 9]; for score in &mut scores[..] { *score += 1; }","This iterator yields mutable references to the slice's elements, so while the element type of the slice is i32, the element type of the iterator is &mut i32.",".iter and .iter_mut are the explicit methods to return the default iterators. Further methods that return iterators are .split, .splitn, .chunks, .windows and more."]},"children":["std::slice::Chunks","std::slice::ChunksMut","std::slice::Iter","std::slice::IterMut","std::slice::RSplit","std::slice::RSplitMut","std::slice::RSplitN","std::slice::RSplitNMut","std::slice::Split","std::slice::SplitMut","std::slice::SplitN","std::slice::SplitNMut","std::slice::Windows","std::slice::ExactChunks","std::slice::ExactChunksMut","std::slice::SliceIndex","std::slice::SliceConcatExt","std::slice::from_mut","std::slice::from_raw_parts","std::slice::from_raw_parts_mut","std::slice::from_ref"]}