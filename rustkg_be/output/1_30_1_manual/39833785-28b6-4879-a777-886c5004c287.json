{"stability":{"stable since":"1.0.0"},"apiName":"std::default::Default","apiType":"trait","apiDocumentation":{"apiDescription":["A trait for giving a type a useful default value.","Sometimes, you want to fall back to some kind of default value, and don't particularly care what it is. This comes up often with structs that define a set of options:","struct SomeOptions { foo: i32, bar: f32, }","How can we define some default values? You can use Default:","#[derive(Default)] struct SomeOptions { foo: i32, bar: f32, } fn main() { let options: SomeOptions = Default::default(); }","Now, you get all of the default values. Rust implements Default for various primitives types.","If you want to override a particular option, but still retain the other defaults:","fn main() { let options = SomeOptions { foo: 42, ..Default::default() }; }","Derivable","This trait can be used with #[derive] if all of the type's fields implement Default. When derived, it will use the default value for each field's type.","How can I implement Default?","Provide an implementation for the default() method that returns the value of your type that should be the default:","enum Kind { A, B, C, } impl Default for Kind { fn default() -> Kind { Kind::A } }"],"examples":["#[derive(Default)]\nstruct SomeOptions {\n    foo: i32,\n    bar: f32,\n}"]},"trait required methods":[{"name":"fn default() -> Self","details":{"description":"Returns the \"default value\" for a type.","example":["Using built-in default values:","let i: i8 = Default::default();\nlet (x, y): (Option<String>, f64) = Default::default();\nlet (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default();","Making your own:","enum Kind {\n    A,\n    B,\n    C,\n}\n\nimpl Default for Kind {\n    fn default() -> Kind { Kind::A }\n}"]}}]}