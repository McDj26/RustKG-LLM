{"stability":{"stable since":"1.28.0"},"apiName":"std::num::NonZeroU8","apiType":"struct","apiDocumentation":{"apiDescription":["An integer that is known not to equal zero.","This enables some memory layout optimization. For example, Option<NonZeroU8> is the same size as u8:","use std::mem::size_of; assert_eq!(size_of::<Option<std::num::NonZeroU8>>(), size_of::<u8>());"]},"trait implementations":[{"name":"impl std::hash::Hash for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd<std::num::NonZeroU8> for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::fmt::Binary for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<std::num::NonZeroU8> for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::marker::Copy for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::fmt::UpperHex for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::fmt::Octal for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::fmt::LowerHex for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::fmt::Display for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::num::NonZeroU8","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::num::NonZeroU8","stable since":"1.0.0"}],"methods":[{"name":"pub const unsafe fn new_unchecked(n: u8) -> NonZeroU8","details":{"description":["Create a non-zero without checking the value.","Safety","The value must not be zero."]}},{"name":"pub fn new(n: u8) -> Option<NonZeroU8>","details":{"description":["Create a non-zero if the given value is not zero."]}},{"name":"pub fn get(self) -> u8","details":{"description":["Returns the value as a primitive type."]}}]}