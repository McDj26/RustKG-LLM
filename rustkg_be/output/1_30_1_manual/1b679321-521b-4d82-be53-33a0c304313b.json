{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::Pointer","apiType":"trait","apiDocumentation":{"apiDescription":["p formatting.","The Pointer trait should format its output as a memory location. This is commonly presented as hexadecimal.","For more information on formatters, see the module-level documentation."],"examples":["Basic usage with &i32:","let x = &42;\n\nlet address = format!(\"{:p}\", x); // this produces something like '0x7f06092ac6d0'","Implementing Pointer on a type:","use std::fmt;\n\nstruct Length(i32);\n\nimpl fmt::Pointer for Length {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n\n        write!(f, \"{:p}\", self as *const Length)\n    }\n}\n\nlet l = Length(42);\n\nprintln!(\"l is in memory here: {:p}\", l);"]},"trait required methods":[{"name":"fn fmt(&self, f: &mut Formatter) -> Result<(), Error>","details":{"description":"Formats the value using the given formatter."}}]}