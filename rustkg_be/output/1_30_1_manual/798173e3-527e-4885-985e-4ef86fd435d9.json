{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (convert_id #53500)"},"apiName":"std::convert::identity","apiType":"function","apiDocumentation":{"apiDescription":["An identity function.","Two things are important to note about this function:","It is not always equivalent to a closure like |x| x since the closure may coerce x into a different type. It moves the input x passed to the function.","While it might seem strange to have a function that just returns back the input, there are some interesting uses."],"examples":["Using identity to do nothing among other interesting functions:","#![feature(convert_id)]\nuse std::convert::identity;\n\nfn manipulation(x: u32) -> u32 {\n    // Let's assume that this function does something interesting.\n    x + 1\n}\n\nlet _arr = &[identity, manipulation];","Using identity to get a function that changes nothing in a conditional:","#![feature(convert_id)]\nuse std::convert::identity;\n\n\n\nlet do_stuff = if condition { manipulation } else { identity };\n\n// do more interesting stuff..\n\nlet _results = do_stuff(42);","Using identity to keep the Some variants of an iterator of Option<T>:","#![feature(convert_id)]\nuse std::convert::identity;\n\nlet iter = vec![Some(1), None, Some(3)].into_iter();\nlet filtered = iter.filter_map(identity).collect::<Vec<_>>();\nassert_eq!(vec![1, 3], filtered);"]}}