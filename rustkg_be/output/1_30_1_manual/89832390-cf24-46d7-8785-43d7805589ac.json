{"stability":{"stable since":"1.0.0"},"apiName":"std::net::ToSocketAddrs","apiType":"trait","apiDocumentation":{"apiDescription":["A trait for objects which can be converted or resolved to one or more SocketAddr values.","This trait is used for generic address resolution when constructing network objects. By default it is implemented for the following types:","SocketAddr: to_socket_addrs is the identity function. SocketAddrV4, SocketAddrV6, (IpAddr,u16), (Ipv4Addr,u16), (Ipv6Addr,u16): to_socket_addrs constructs a SocketAddr trivially. (&str,u16): the string should be either a string representation of an IpAddr address as expected by FromStr implementation or a host name. &str: the string should be either a string representation of a SocketAddr as expected by its FromStr implementation or a string like <host_name>:<port> pair where <port> is a u16 value.","This trait allows constructing network objects like TcpStream or UdpSocket easily with values of various types for the bind/connection address. It is needed because sometimes one type is more appropriate than the other: for simple uses a string like \"localhost:12345\" is much nicer than manual construction of the corresponding SocketAddr, but sometimes SocketAddr value is the main source of the address, and converting it to some other type (e.g. a string) just for it to be converted back to SocketAddr in constructor methods is pointless.","Addresses returned by the operating system that are not IP addresses are silently ignored."],"examples":["Creating a SocketAddr iterator that yields one item:","use std::net::{ToSocketAddrs, SocketAddr};\n\nlet addr = SocketAddr::from(([127, 0, 0, 1], 443));\nlet mut addrs_iter = addr.to_socket_addrs().unwrap();\n\nassert_eq!(Some(addr), addrs_iter.next());\nassert!(addrs_iter.next().is_none());","Creating a SocketAddr iterator from a hostname:","use std::net::{SocketAddr, ToSocketAddrs};\n\n// assuming 'localhost' resolves to 127.0.0.1\nlet mut addrs_iter = \"localhost:443\".to_socket_addrs().unwrap();\nassert_eq!(addrs_iter.next(), Some(SocketAddr::from(([127, 0, 0, 1], 443))));\nassert!(addrs_iter.next().is_none());\n\n// assuming 'foo' does not resolve\nassert!(\"foo:443\".to_socket_addrs().is_err());","Creating a SocketAddr iterator that yields multiple items:","use std::net::{SocketAddr, ToSocketAddrs};\n\nlet addr1 = SocketAddr::from(([0, 0, 0, 0], 80));\nlet addr2 = SocketAddr::from(([127, 0, 0, 1], 443));\nlet addrs = vec![addr1, addr2];\n\nlet mut addrs_iter = (&addrs[..]).to_socket_addrs().unwrap();\n\nassert_eq!(Some(addr1), addrs_iter.next());\nassert_eq!(Some(addr2), addrs_iter.next());\nassert!(addrs_iter.next().is_none());","Attempting to create a SocketAddr iterator from an improperly formatted\nsocket address &str (missing the port):","use std::io;\nuse std::net::ToSocketAddrs;\n\nlet err = \"127.0.0.1\".to_socket_addrs().unwrap_err();\nassert_eq!(err.kind(), io::ErrorKind::InvalidInput);","TcpStream::connect is an example of an function that utilizes\nToSocketAddrs as a trait bound on its parameter in order to accept\ndifferent types:","use std::net::{TcpStream, Ipv4Addr};\n\nlet stream = TcpStream::connect((\"127.0.0.1\", 443));\n// or\nlet stream = TcpStream::connect(\"127.0.0.1:443\");\n// or\nlet stream = TcpStream::connect((Ipv4Addr::new(127, 0, 0, 1), 443));"]},"trait required methods":[{"name":"fn to_socket_addrs(&self) -> Result<Self::Iter>","details":{"description":"Converts this object to an iterator of resolved SocketAddrs."}}]}