{"stability":{"stable since":"1.28.0"},"apiName":"std::ops::RangeBounds","apiType":"trait","apiDocumentation":{"apiDescription":["RangeBounds is implemented by Rust's built-in range types, produced by range syntax like .., a.., ..b or c..d."]},"trait required methods":[{"name":"fn start_bound(&self) -> Bound<&T>","details":{"description":"Start index bound.","example":["use std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((..10).start_bound(), Unbounded);\nassert_eq!((3..10).start_bound(), Included(&3));"]}},{"name":"fn end_bound(&self) -> Bound<&T>","details":{"description":"End index bound.","example":["use std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((3..).end_bound(), Unbounded);\nassert_eq!((3..10).end_bound(), Excluded(&10));"]}}],"trait provided methods":[{"name":"fn contains<U>(&self, item: &U) -> bool where T: PartialOrd<U>, U: PartialOrd<T> + ?Sized","stability":["ðŸ”¬ This is a nightly-only experimental API.  (range_contains #32311)recently added as per RFC\n"]}]}