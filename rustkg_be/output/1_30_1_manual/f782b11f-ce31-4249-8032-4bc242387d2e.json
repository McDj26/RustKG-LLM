{"stability":{"stable since":"1.0.0"},"apiName":"std::slice::Iter","apiType":"struct","apiDocumentation":{"apiDescription":["Immutable slice iterator","This struct is created by the iter method on slices."],"examples":["Basic usage:","// First, we declare a type which has `iter` method to get the `Iter` struct (&[usize here]):\nlet slice = &[1, 2, 3];\n\n// Then, we iterate over it:\nfor element in slice.iter() {\n    println!(\"{}\", element);\n}"]},"trait implementations":[{"name":"impl<'a, T> std::iter::Iterator for std::slice::Iter<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::DoubleEndedIterator for std::slice::Iter<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::clone::Clone for std::slice::Iter<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::iter::TrustedLen for std::slice::Iter<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Debug for std::slice::Iter<'a, T> where T: 'a + std::fmt::Debug","stable since":"1.9.0"},{"name":"impl<'a, T> std::iter::ExactSizeIterator for std::slice::Iter<'a, T>","stable since":"1.0.0"},{"name":"impl<'a, T> std::convert::AsRef<[T]> for std::slice::Iter<'a, T>","stable since":"1.13.0"},{"name":"impl<'a, T> std::iter::FusedIterator for std::slice::Iter<'a, T>","stable since":"1.26.0"},{"name":"impl<'a, T> std::marker::Sync for std::slice::Iter<'a, T> where T: std::marker::Sync","stable since":"1.0.0"},{"name":"impl<'a, T> std::marker::Send for std::slice::Iter<'a, T> where T: std::marker::Sync","stable since":"1.0.0"}],"methods":[{"name":"pub fn as_slice(&self) -> &'a [T]","details":{"description":["View the underlying data as a subslice of the original data.","This has the same lifetime as the original slice, and so the iterator can continue to be used while this exists."],"example":["Basic usage:","// First, we declare a type which has the `iter` method to get the `Iter`\n// struct (&[usize here]):\nlet slice = &[1, 2, 3];\n\n// Then, we get the iterator:\nlet mut iter = slice.iter();\n// So if we print what `as_slice` method returns here, we have \"[1, 2, 3]\":\nprintln!(\"{:?}\", iter.as_slice());\n\n// Next, we move to the second element of the slice:\niter.next();\n// Now `as_slice` returns \"[2, 3]\":\nprintln!(\"{:?}\", iter.as_slice());"]}}]}