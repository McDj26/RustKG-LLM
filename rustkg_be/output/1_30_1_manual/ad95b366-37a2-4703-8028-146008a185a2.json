{"stability":{"stable since":"1.0.0"},"apiName":"std::iter::Extend","apiType":"trait","apiDocumentation":{"apiDescription":["Extend a collection with the contents of an iterator.","Iterators produce a series of values, and collections can also be thought of as a series of values. The Extend trait bridges this gap, allowing you to extend a collection by including the contents of that iterator. When extending a collection with an already existing key, that entry is updated or, in the case of collections that permit multiple entries with equal keys, that entry is inserted."],"examples":["Basic usage:","// You can extend a String with some chars:\nlet mut message = String::from(\"The first three letters are: \");\n\nmessage.extend(&['a', 'b', 'c']);\n\nassert_eq!(\"abc\", &message[29..32]);","Implementing Extend:","// A sample collection, that's just a wrapper over Vec<T>\n#[derive(Debug)]\nstruct MyCollection(Vec<i32>);\n\n// Let's give it some methods so we can create one and add things\n// to it.\nimpl MyCollection {\n    fn new() -> MyCollection {\n        MyCollection(Vec::new())\n    }\n\n    fn add(&mut self, elem: i32) {\n        self.0.push(elem);\n    }\n}\n\n// since MyCollection has a list of i32s, we implement Extend for i32\nimpl Extend<i32> for MyCollection {\n\n    // This is a bit simpler with the concrete type signature: we can call\n    // extend on anything which can be turned into an Iterator which gives\n    // us i32s. Because we need i32s to put into MyCollection.\n    fn extend<T: IntoIterator<Item=i32>>(&mut self, iter: T) {\n\n        // The implementation is very straightforward: loop through the\n        // iterator, and add() each element to ourselves.\n        for elem in iter {\n            self.add(elem);\n        }\n    }\n}\n\nlet mut c = MyCollection::new();\n\nc.add(5);\nc.add(6);\nc.add(7);\n\n// let's extend our collection with three more numbers\nc.extend(vec![1, 2, 3]);\n\n// we've added these elements onto the end\nassert_eq!(\"MyCollection([5, 6, 7, 1, 2, 3])\", format!(\"{:?}\", c));"]},"trait required methods":[{"name":"fn extend<T>(&mut self, iter: T) where T: IntoIterator<Item = A>","details":{"description":"Extends a collection with the contents of an iterator.","example":["Basic usage:","// You can extend a String with some chars:\nlet mut message = String::from(\"abc\");\n\nmessage.extend(['d', 'e', 'f'].iter());\n\nassert_eq!(\"abcdef\", &message);"]}}]}