{"stability":{"stable since":"1.0.0"},"apiName":"reference","apiType":"primitive","apiDocumentation":{"apiDescription":["References, both shared and mutable.","A reference represents a borrow of some owned value. You can get one by using the & or &mut operators on a value, or by using a ref or ref mut pattern.","For those familiar with pointers, a reference is just a pointer that is assumed to not be null. In fact, Option<&T> has the same memory representation as a nullable pointer, and can be passed across FFI boundaries as such.","In most cases, references can be used much like the original value. Field access, method calling, and indexing work the same (save for mutability rules, of course). In addition, the comparison operators transparently defer to the referent's implementation, allowing references to be compared the same as owned values.","References have a lifetime attached to them, which represents the scope for which the borrow is valid. A lifetime is said to \"outlive\" another one if its representative scope is as long or longer than the other. The 'static lifetime is the longest lifetime, which represents the total life of the program. For example, string literals have a 'static lifetime because the text data is embedded into the binary of the program, rather than in an allocation that needs to be dynamically managed.","&mut T references can be freely coerced into &T references with the same referent type, and references with longer lifetimes can be freely coerced into references with shorter ones.","For more information on how to use references, see the book's section on \"References and Borrowing\".","The following traits are implemented for all &T, regardless of the type of its referent:","Copy Clone (Note that this will not defer to T's Clone implementation if it exists!) Deref Borrow Pointer","&mut T references get all of the above except Copy and Clone (to prevent creating multiple simultaneous mutable borrows), plus the following, regardless of the type of its referent:","DerefMut BorrowMut","The following traits are implemented on &T references if the underlying T also implements that trait:","All the traits in std::fmt except Pointer and fmt::Write PartialOrd Ord PartialEq Eq AsRef Fn (in addition, &T references get FnMut and FnOnce if T: Fn) Hash ToSocketAddrs","&mut T references get all of the above except ToSocketAddrs, plus the following, if T implements that trait:","AsMut FnMut (in addition, &mut T references get FnOnce if T: FnMut) fmt::Write Iterator DoubleEndedIterator ExactSizeIterator FusedIterator TrustedLen Send (note that &T references only get Send if T: Sync) io::Write Read Seek BufRead","Note that due to method call deref coercion, simply calling a trait method will act like they work on references as well as they do on owned values! The implementations described here are meant for generic contexts, where the final type T is a type parameter or otherwise not locally known."]},"trait implementations":[{"name":"impl<'a, I> std::iter::Iterator for &'a mut I where I: std::iter::Iterator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, I> std::iter::DoubleEndedIterator for &'a mut I where I: std::iter::DoubleEndedIterator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A, F> std::ops::FnMut<A> for &'a F where F: std::ops::Fn<A> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A, F> std::ops::FnMut<A> for &'a mut F where F: std::ops::FnMut<A> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, U> std::convert::AsMut<U> for &'a mut T where T: std::convert::AsMut<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, H> std::hash::Hasher for &'a mut H where H: std::hash::Hasher + ?std::marker::Sized","stable since":"1.22.0"},{"name":"impl<'a, T> std::hash::Hash for &'a mut T where T: std::hash::Hash + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::hash::Hash for &'a T where T: std::hash::Hash + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, F> std::future::UnsafeFutureObj<'a, T> for &'a mut F where F: std::future::Future<Output = T> + std::pin::Unpin + 'a","stable since":"1.0.0"},{"name":"impl<'a, T> std::clone::Clone for &'a T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, I> std::iter::TrustedLen for &'a mut I where I: std::iter::TrustedLen + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::borrow::BorrowMut<T> for &'a mut T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialOrd<&'b B> for &'a A where A: std::cmp::PartialOrd<B> + ?std::marker::Sized, B: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialOrd<&'b mut B> for &'a mut A where A: std::cmp::PartialOrd<B> + ?std::marker::Sized, B: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A> std::cmp::Ord for &'a A where A: std::cmp::Ord + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A> std::cmp::Ord for &'a mut A where A: std::cmp::Ord + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Pointer for &'a mut T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Pointer for &'a T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Binary for &'a T where T: std::fmt::Binary + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Binary for &'a mut T where T: std::fmt::Binary + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::ops::Generator for &'a mut T where T: std::ops::Generator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Debug for &'a T where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Debug for &'a mut T where T: std::fmt::Debug + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, I> std::iter::ExactSizeIterator for &'a mut I where I: std::iter::ExactSizeIterator + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A> std::cmp::Eq for &'a A where A: std::cmp::Eq + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A> std::cmp::Eq for &'a mut A where A: std::cmp::Eq + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, U> std::ops::CoerceUnsized<&'a mut U> for &'a mut T where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, U> std::ops::CoerceUnsized<*const U> for &'a T where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, T, U> std::ops::CoerceUnsized<&'a U> for &'b T where 'b: 'a, T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, U> std::ops::CoerceUnsized<*mut U> for &'a mut T where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, T, U> std::ops::CoerceUnsized<&'a U> for &'b mut T where 'b: 'a, T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, U> std::ops::CoerceUnsized<*const U> for &'a mut T where T: std::marker::Unsize<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b B> for &'a mut A where A: std::cmp::PartialEq<B> + ?std::marker::Sized, B: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut B> for &'a mut A where A: std::cmp::PartialEq<B> + ?std::marker::Sized, B: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b mut B> for &'a A where A: std::cmp::PartialEq<B> + ?std::marker::Sized, B: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, 'b, A, B> std::cmp::PartialEq<&'b B> for &'a A where A: std::cmp::PartialEq<B> + ?std::marker::Sized, B: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A, F> std::ops::Fn<A> for &'a F where F: std::ops::Fn<A> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, U> std::convert::AsRef<U> for &'a T where T: std::convert::AsRef<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T, U> std::convert::AsRef<U> for &'a mut T where T: std::convert::AsRef<U> + ?std::marker::Sized, U: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::marker::Copy for &'a T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, W> std::fmt::Write for &'a mut W where W: std::fmt::Write + ?std::marker::Sized","stable since":"1.4.0"},{"name":"impl<'a, I> std::iter::FusedIterator for &'a mut I where I: std::iter::FusedIterator + ?std::marker::Sized","stable since":"1.26.0"},{"name":"impl<'a, T> std::borrow::Borrow<T> for &'a mut T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::borrow::Borrow<T> for &'a T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::UpperExp for &'a T where T: std::fmt::UpperExp + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::UpperExp for &'a mut T where T: std::fmt::UpperExp + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::UpperHex for &'a mut T where T: std::fmt::UpperHex + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::UpperHex for &'a T where T: std::fmt::UpperHex + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Octal for &'a T where T: std::fmt::Octal + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Octal for &'a mut T where T: std::fmt::Octal + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::pin::Unpin for &'a T where T: 'a + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::pin::Unpin for &'a mut T where T: 'a + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A, F> std::ops::FnOnce<A> for &'a mut F where F: std::ops::FnMut<A> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, A, F> std::ops::FnOnce<A> for &'a F where F: std::ops::Fn<A> + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, F> std::future::Future for &'a mut F where F: std::pin::Unpin + std::future::Future + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::ops::DerefMut for &'a mut T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::marker::Send for &'a T where T: std::marker::Sync + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::marker::Send for &'a mut T where T: std::marker::Send + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::ops::Deref for &'a mut T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::ops::Deref for &'a T where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::LowerExp for &'a T where T: std::fmt::LowerExp + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::LowerExp for &'a mut T where T: std::fmt::LowerExp + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::LowerHex for &'a T where T: std::fmt::LowerHex + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::LowerHex for &'a mut T where T: std::fmt::LowerHex + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Display for &'a T where T: std::fmt::Display + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, T> std::fmt::Display for &'a mut T where T: std::fmt::Display + ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<'a, R: std::io::Read + ?std::marker::Sized> std::io::Read for &'a mut R","stable since":"1.0.0"},{"name":"impl<'a, W: std::io::Write + ?std::marker::Sized> std::io::Write for &'a mut W","stable since":"1.0.0"},{"name":"impl<'a, S: std::io::Seek + ?std::marker::Sized> std::io::Seek for &'a mut S","stable since":"1.0.0"},{"name":"impl<'a, B: std::io::BufRead + ?std::marker::Sized> std::io::BufRead for &'a mut B","stable since":"1.0.0"},{"name":"impl<'a, T: std::net::ToSocketAddrs + ?std::marker::Sized> std::net::ToSocketAddrs for &'a T","stable since":"1.0.0"},{"name":"impl<'a, T: ?std::marker::Sized> !std::panic::UnwindSafe for &'a mut T","stable since":"1.9.0"},{"name":"impl<'a, T: std::panic::RefUnwindSafe + ?std::marker::Sized> std::panic::UnwindSafe for &'a T","stable since":"1.9.0"}]}