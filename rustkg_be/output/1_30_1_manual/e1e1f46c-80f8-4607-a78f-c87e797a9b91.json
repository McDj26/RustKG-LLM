{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::Display","apiType":"trait","apiDocumentation":{"apiDescription":["Format trait for an empty format, {}.","Display is similar to Debug, but Display is for user-facing output, and so cannot be derived.","For more information on formatters, see the module-level documentation."],"examples":["Implementing Display on a type:","use std::fmt;\n\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl fmt::Display for Point {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n\nlet origin = Point { x: 0, y: 0 };\n\nprintln!(\"The origin is: {}\", origin);"]},"trait required methods":[{"name":"fn fmt(&self, f: &mut Formatter) -> Result<(), Error>","details":{"description":"Formats the value using the given formatter.","example":["use std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Display for Position {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"({}, {})\", self.longitude, self.latitude)\n    }\n}\n\nassert_eq!(\"(1.987, 2.983)\".to_owned(),\n           format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));"]}}]}