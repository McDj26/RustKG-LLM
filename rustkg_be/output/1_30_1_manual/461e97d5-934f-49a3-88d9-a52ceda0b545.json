{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (core_intrinsics)intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\n"},"apiName":"std::intrinsics","apiType":"module","apiDocumentation":{"apiDescription":["rustc compiler intrinsics.","The corresponding definitions are in librustc_codegen_llvm/intrinsic.rs.","Volatiles","The volatile intrinsics provide operations intended to act on I/O memory, which are guaranteed to not be reordered by the compiler across other volatile intrinsics. See the LLVM documentation on [volatile].","Atomics","The atomic intrinsics provide common atomic operations on machine words, with multiple possible memory orderings. They obey the same semantics as C++11. See the LLVM documentation on [atomics].","A quick refresher on memory ordering:","Acquire - a barrier for acquiring a lock. Subsequent reads and writes take place after the barrier. Release - a barrier for releasing a lock. Preceding reads and writes take place before the barrier. Sequentially consistent - sequentially consistent operations are guaranteed to happen in order. This is the standard mode for working with atomic types and is equivalent to Java's volatile."]},"children":["std::intrinsics::copy","std::intrinsics::copy_nonoverlapping","std::intrinsics::drop_in_place","std::intrinsics::transmute","std::intrinsics::write_bytes","std::intrinsics::abort","std::intrinsics::add_with_overflow","std::intrinsics::arith_offset","std::intrinsics::assume","std::intrinsics::atomic_and","std::intrinsics::atomic_and_acq","std::intrinsics::atomic_and_acqrel","std::intrinsics::atomic_and_rel","std::intrinsics::atomic_and_relaxed","std::intrinsics::atomic_cxchg","std::intrinsics::atomic_cxchg_acq","std::intrinsics::atomic_cxchg_acq_failrelaxed","std::intrinsics::atomic_cxchg_acqrel","std::intrinsics::atomic_cxchg_acqrel_failrelaxed","std::intrinsics::atomic_cxchg_failacq","std::intrinsics::atomic_cxchg_failrelaxed","std::intrinsics::atomic_cxchg_rel","std::intrinsics::atomic_cxchg_relaxed","std::intrinsics::atomic_cxchgweak","std::intrinsics::atomic_cxchgweak_acq","std::intrinsics::atomic_cxchgweak_acq_failrelaxed","std::intrinsics::atomic_cxchgweak_acqrel","std::intrinsics::atomic_cxchgweak_acqrel_failrelaxed","std::intrinsics::atomic_cxchgweak_failacq","std::intrinsics::atomic_cxchgweak_failrelaxed","std::intrinsics::atomic_cxchgweak_rel","std::intrinsics::atomic_cxchgweak_relaxed","std::intrinsics::atomic_fence","std::intrinsics::atomic_fence_acq","std::intrinsics::atomic_fence_acqrel","std::intrinsics::atomic_fence_rel","std::intrinsics::atomic_load","std::intrinsics::atomic_load_acq","std::intrinsics::atomic_load_relaxed","std::intrinsics::atomic_load_unordered","std::intrinsics::atomic_max","std::intrinsics::atomic_max_acq","std::intrinsics::atomic_max_acqrel","std::intrinsics::atomic_max_rel","std::intrinsics::atomic_max_relaxed","std::intrinsics::atomic_min","std::intrinsics::atomic_min_acq","std::intrinsics::atomic_min_acqrel","std::intrinsics::atomic_min_rel","std::intrinsics::atomic_min_relaxed","std::intrinsics::atomic_nand","std::intrinsics::atomic_nand_acq","std::intrinsics::atomic_nand_acqrel","std::intrinsics::atomic_nand_rel","std::intrinsics::atomic_nand_relaxed","std::intrinsics::atomic_or","std::intrinsics::atomic_or_acq","std::intrinsics::atomic_or_acqrel","std::intrinsics::atomic_or_rel","std::intrinsics::atomic_or_relaxed","std::intrinsics::atomic_singlethreadfence","std::intrinsics::atomic_singlethreadfence_acq","std::intrinsics::atomic_singlethreadfence_acqrel","std::intrinsics::atomic_singlethreadfence_rel","std::intrinsics::atomic_store","std::intrinsics::atomic_store_rel","std::intrinsics::atomic_store_relaxed","std::intrinsics::atomic_store_unordered","std::intrinsics::atomic_umax","std::intrinsics::atomic_umax_acq","std::intrinsics::atomic_umax_acqrel","std::intrinsics::atomic_umax_rel","std::intrinsics::atomic_umax_relaxed","std::intrinsics::atomic_umin","std::intrinsics::atomic_umin_acq","std::intrinsics::atomic_umin_acqrel","std::intrinsics::atomic_umin_rel","std::intrinsics::atomic_umin_relaxed","std::intrinsics::atomic_xadd","std::intrinsics::atomic_xadd_acq","std::intrinsics::atomic_xadd_acqrel","std::intrinsics::atomic_xadd_rel","std::intrinsics::atomic_xadd_relaxed","std::intrinsics::atomic_xchg","std::intrinsics::atomic_xchg_acq","std::intrinsics::atomic_xchg_acqrel","std::intrinsics::atomic_xchg_rel","std::intrinsics::atomic_xchg_relaxed","std::intrinsics::atomic_xor","std::intrinsics::atomic_xor_acq","std::intrinsics::atomic_xor_acqrel","std::intrinsics::atomic_xor_rel","std::intrinsics::atomic_xor_relaxed","std::intrinsics::atomic_xsub","std::intrinsics::atomic_xsub_acq","std::intrinsics::atomic_xsub_acqrel","std::intrinsics::atomic_xsub_rel","std::intrinsics::atomic_xsub_relaxed","std::intrinsics::bitreverse","std::intrinsics::breakpoint","std::intrinsics::bswap","std::intrinsics::ceilf32","std::intrinsics::ceilf64","std::intrinsics::copysignf32","std::intrinsics::copysignf64","std::intrinsics::cosf32","std::intrinsics::cosf64","std::intrinsics::ctlz","std::intrinsics::ctlz_nonzero","std::intrinsics::ctpop","std::intrinsics::cttz","std::intrinsics::cttz_nonzero","std::intrinsics::discriminant_value","std::intrinsics::exact_div","std::intrinsics::exp2f32","std::intrinsics::exp2f64","std::intrinsics::expf32","std::intrinsics::expf64","std::intrinsics::fabsf32","std::intrinsics::fabsf64","std::intrinsics::fadd_fast","std::intrinsics::fdiv_fast","std::intrinsics::floorf32","std::intrinsics::floorf64","std::intrinsics::fmaf32","std::intrinsics::fmaf64","std::intrinsics::fmul_fast","std::intrinsics::frem_fast","std::intrinsics::fsub_fast","std::intrinsics::init","std::intrinsics::likely","std::intrinsics::log10f32","std::intrinsics::log10f64","std::intrinsics::log2f32","std::intrinsics::log2f64","std::intrinsics::logf32","std::intrinsics::logf64","std::intrinsics::min_align_of","std::intrinsics::min_align_of_val","std::intrinsics::move_val_init","std::intrinsics::mul_with_overflow","std::intrinsics::nearbyintf32","std::intrinsics::nearbyintf64","std::intrinsics::needs_drop","std::intrinsics::nontemporal_store","std::intrinsics::offset","std::intrinsics::overflowing_add","std::intrinsics::overflowing_mul","std::intrinsics::overflowing_sub","std::intrinsics::powf32","std::intrinsics::powf64","std::intrinsics::powif32","std::intrinsics::powif64","std::intrinsics::pref_align_of","std::intrinsics::prefetch_read_data","std::intrinsics::prefetch_read_instruction","std::intrinsics::prefetch_write_data","std::intrinsics::prefetch_write_instruction","std::intrinsics::rintf32","std::intrinsics::rintf64","std::intrinsics::roundf32","std::intrinsics::roundf64","std::intrinsics::rustc_peek","std::intrinsics::sinf32","std::intrinsics::sinf64","std::intrinsics::size_of","std::intrinsics::size_of_val","std::intrinsics::sqrtf32","std::intrinsics::sqrtf64","std::intrinsics::sub_with_overflow","std::intrinsics::truncf32","std::intrinsics::truncf64","std::intrinsics::try","std::intrinsics::type_id","std::intrinsics::type_name","std::intrinsics::unaligned_volatile_load","std::intrinsics::unaligned_volatile_store","std::intrinsics::unchecked_div","std::intrinsics::unchecked_rem","std::intrinsics::unchecked_shl","std::intrinsics::unchecked_shr","std::intrinsics::uninit","std::intrinsics::unlikely","std::intrinsics::unreachable","std::intrinsics::volatile_copy_memory","std::intrinsics::volatile_copy_nonoverlapping_memory","std::intrinsics::volatile_load","std::intrinsics::volatile_set_memory","std::intrinsics::volatile_store"]}