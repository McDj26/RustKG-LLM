{"stability":{"stable since":"1.17.0"},"apiName":"std::ptr::write_unaligned","apiType":"function","apiDocumentation":{"apiDescription":["Overwrites a memory location with the given value without reading or dropping the old value.","Unlike write, the pointer may be unaligned.","Safety","This operation is marked unsafe because it accepts a raw pointer.","It does not drop the contents of dst. This is safe, but it could leak allocations or resources, so care must be taken not to overwrite an object that should be dropped.","Additionally, it does not drop src. Semantically, src is moved into the location pointed to by dst.","This is appropriate for initializing uninitialized memory, or overwriting memory that has previously been read from."],"examples":["Basic usage:","let mut x = 0;\nlet y = &mut x as *mut i32;\nlet z = 12;\n\nunsafe {\n    std::ptr::write_unaligned(y, z);\n    assert_eq!(std::ptr::read_unaligned(y), 12);\n}"]}}