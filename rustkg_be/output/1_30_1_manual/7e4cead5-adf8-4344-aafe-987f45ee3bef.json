{"stability":{"stable since":"1.0.0"},"apiName":"std::cell::Cell","apiType":"struct","apiDocumentation":{"apiDescription":["A mutable memory location."],"examples":["Here you can see how using Cell<T> allows to use mutable field inside\nimmutable struct (which is also called 'interior mutability').","use std::cell::Cell;\n\nstruct SomeStruct {\n    regular_field: u8,\n    special_field: Cell<u8>,\n}\n\nlet my_struct = SomeStruct {\n    regular_field: 0,\n    special_field: Cell::new(1),\n};\n\nlet new_value = 100;\n\n// ERROR, because my_struct is immutable\n// my_struct.regular_field = new_value;\n\n// WORKS, although `my_struct` is immutable, field `special_field` is mutable because it is Cell\nmy_struct.special_field.set(new_value);\nassert_eq!(my_struct.special_field.get(), new_value);","See the module-level documentation for more."]},"trait implementations":[{"name":"impl<T> std::clone::Clone for std::cell::Cell<T> where T: std::marker::Copy","stable since":"1.0.0"},{"name":"impl<T> std::cmp::PartialOrd<std::cell::Cell<T>> for std::cell::Cell<T> where T: std::marker::Copy + std::cmp::PartialOrd<T>","stable since":"1.10.0"},{"name":"impl<T> std::cmp::Ord for std::cell::Cell<T> where T: std::marker::Copy + std::cmp::Ord","stable since":"1.10.0"},{"name":"impl<T> std::fmt::Debug for std::cell::Cell<T> where T: std::marker::Copy + std::fmt::Debug","stable since":"1.0.0"},{"name":"impl<T> std::cmp::Eq for std::cell::Cell<T> where T: std::marker::Copy + std::cmp::Eq","stable since":"1.2.0"},{"name":"impl<T, U> std::ops::CoerceUnsized<std::cell::Cell<U>> for std::cell::Cell<T> where T: std::ops::CoerceUnsized<U>","stable since":"1.0.0"},{"name":"impl<T> std::cmp::PartialEq<std::cell::Cell<T>> for std::cell::Cell<T> where T: std::marker::Copy + std::cmp::PartialEq<T>","stable since":"1.0.0"},{"name":"impl<T> std::convert::From<T> for std::cell::Cell<T>","stable since":"1.12.0"},{"name":"impl<T> !std::marker::Sync for std::cell::Cell<T> where T: ?std::marker::Sized","stable since":"1.0.0"},{"name":"impl<T> std::default::Default for std::cell::Cell<T> where T: std::default::Default","stable since":"1.0.0"},{"name":"impl<T> std::marker::Send for std::cell::Cell<T> where T: std::marker::Send + ?std::marker::Sized","stable since":"1.0.0"}],"methods":[{"name":"pub fn get(&self) -> T","details":{"description":["Returns a copy of the contained value."],"example":["use std::cell::Cell;\n\nlet c = Cell::new(5);\n\nlet five = c.get();"]}},{"name":"pub fn update<F>(&self, f: F) -> T where F: FnOnce(T) -> T","stability":["ðŸ”¬ This is a nightly-only experimental API.  (cell_update #50186)"]},{"name":"pub const fn new(value: T) -> Cell<T>","details":{"description":["Creates a new Cell containing the given value."],"example":["use std::cell::Cell;\n\nlet c = Cell::new(5);"]}},{"name":"pub fn set(&self, val: T)","details":{"description":["Sets the contained value."],"example":["use std::cell::Cell;\n\nlet c = Cell::new(5);\n\nc.set(10);"]}},{"name":"pub fn swap(&self, other: &Cell<T>)","details":{"description":["Swaps the values of two Cells. Difference with std::mem::swap is that this function doesn't require &mut reference."],"example":["use std::cell::Cell;\n\nlet c1 = Cell::new(5i32);\nlet c2 = Cell::new(10i32);\nc1.swap(&c2);\nassert_eq!(10, c1.get());\nassert_eq!(5, c2.get());"]}},{"name":"pub fn replace(&self, val: T) -> T","details":{"description":["Replaces the contained value, and returns it."],"example":["use std::cell::Cell;\n\nlet cell = Cell::new(5);\nassert_eq!(cell.get(), 5);\nassert_eq!(cell.replace(10), 5);\nassert_eq!(cell.get(), 10);"]}},{"name":"pub fn into_inner(self) -> T","details":{"description":["Unwraps the value."],"example":["use std::cell::Cell;\n\nlet c = Cell::new(5);\nlet five = c.into_inner();\n\nassert_eq!(five, 5);"]}},{"name":"pub fn as_ptr(&self) -> *mut T","details":{"description":["Returns a raw pointer to the underlying data in this cell."],"example":["use std::cell::Cell;\n\nlet c = Cell::new(5);\n\nlet ptr = c.as_ptr();"]}},{"name":"pub fn get_mut(&mut self) -> &mut T","details":{"description":["Returns a mutable reference to the underlying data.","This call borrows Cell mutably (at compile-time) which guarantees that we possess the only reference."],"example":["use std::cell::Cell;\n\nlet mut c = Cell::new(5);\n*c.get_mut() += 1;\n\nassert_eq!(c.get(), 6);"]}},{"name":"pub fn from_mut(t: &mut T) -> &Cell<T>","stability":["ðŸ”¬ This is a nightly-only experimental API.  (as_cell #43038)"]},{"name":"pub fn take(&self) -> T","details":{"description":["Takes the value of the cell, leaving Default::default() in its place."],"example":["use std::cell::Cell;\n\nlet c = Cell::new(5);\nlet five = c.take();\n\nassert_eq!(five, 5);\nassert_eq!(c.into_inner(), 0);"]}},{"name":"pub fn as_slice_of_cells(&self) -> &[Cell<T>]","stability":["ðŸ”¬ This is a nightly-only experimental API.  (as_cell #43038)"]}]}