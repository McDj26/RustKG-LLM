{"stability":{"stable since":"1.0.0"},"apiName":"std::cmp::Ordering","apiType":"enum","apiDocumentation":{"apiDescription":["An Ordering is the result of a comparison between two values."],"examples":["use std::cmp::Ordering;\n\nlet result = 1.cmp(&2);\nassert_eq!(Ordering::Less, result);\n\nlet result = 1.cmp(&1);\nassert_eq!(Ordering::Equal, result);\n\nlet result = 2.cmp(&1);\nassert_eq!(Ordering::Greater, result);"]},"enum variants":["Less","An ordering where a compared value is less [than another].\n","Equal","An ordering where a compared value is equal [to another].\n","Greater","An ordering where a compared value is greater [than another].\n"],"trait implementations":[{"name":"impl std::hash::Hash for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd<std::cmp::Ordering> for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq<std::cmp::Ordering> for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::marker::Copy for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::cmp::Ordering","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::cmp::Ordering","stable since":"1.0.0"}],"methods":[{"name":"pub fn reverse(self) -> Ordering","details":{"description":["Reverses the Ordering.","Less becomes Greater. Greater becomes Less. Equal becomes Equal."],"example":["Basic behavior:","use std::cmp::Ordering;\n\nassert_eq!(Ordering::Less.reverse(), Ordering::Greater);\nassert_eq!(Ordering::Equal.reverse(), Ordering::Equal);\nassert_eq!(Ordering::Greater.reverse(), Ordering::Less);","This method can be used to reverse a comparison:","let mut data: &mut [_] = &mut [2, 10, 5, 8];\n\n// sort the array from largest to smallest.\ndata.sort_by(|a, b| a.cmp(b).reverse());\n\nlet b: &mut [_] = &mut [10, 8, 5, 2];\nassert!(data == b);"]}},{"name":"pub fn then(self, other: Ordering) -> Ordering","details":{"description":["Chains two orderings.","Returns self when it's not Equal. Otherwise returns other."],"example":["use std::cmp::Ordering;\n\nlet result = Ordering::Equal.then(Ordering::Less);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then(Ordering::Equal);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then(Ordering::Greater);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Equal.then(Ordering::Equal);\nassert_eq!(result, Ordering::Equal);\n\nlet x: (i64, i64, i64) = (1, 2, 7);\nlet y: (i64, i64, i64) = (1, 5, 3);\nlet result = x.0.cmp(&y.0).then(x.1.cmp(&y.1)).then(x.2.cmp(&y.2));\n\nassert_eq!(result, Ordering::Less);"]}},{"name":"pub fn then_with<F>(self, f: F) -> Ordering where F: FnOnce() -> Ordering","details":{"description":["Chains the ordering with the given function.","Returns self when it's not Equal. Otherwise calls f and returns the result."],"example":["use std::cmp::Ordering;\n\nlet result = Ordering::Equal.then_with(|| Ordering::Less);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then_with(|| Ordering::Equal);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Less.then_with(|| Ordering::Greater);\nassert_eq!(result, Ordering::Less);\n\nlet result = Ordering::Equal.then_with(|| Ordering::Equal);\nassert_eq!(result, Ordering::Equal);\n\nlet x: (i64, i64, i64) = (1, 2, 7);\nlet y: (i64, i64, i64)  = (1, 5, 3);\nlet result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));\n\nassert_eq!(result, Ordering::Less);"]}}]}