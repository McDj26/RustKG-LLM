{"stability":{"unstable":"ðŸ”¬ This is a nightly-only experimental API.  (pin #49150)"},"apiName":"std::marker::Unpin","apiType":"trait","apiDocumentation":{"apiDescription":["Types which can be safely moved after being pinned.","Since Rust itself has no notion of immovable types, and will consider moves to always be safe, this trait cannot prevent types from moving by itself.","Instead it can be used to prevent moves through the type system, by controlling the behavior of special pointer types like PinMut, which \"pin\" the type in place by not allowing it to be moved out of them. See the pin module documentation for more information on pinning.","Implementing this trait lifts the restrictions of pinning off a type, which then allows it to move out with functions such as replace.","So this, for example, can only be done on types implementing Unpin:","#![feature(pin)] use std::mem::replace; use std::pin::PinMut; let mut string = \"this\".to_string(); let mut pinned_string = PinMut::new(&mut string); // dereferencing the pointer mutably is only possible because String implements Unpin replace(&mut *pinned_string, \"other\".to_string());","This trait is automatically implemented for almost every type."]}}