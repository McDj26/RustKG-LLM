{"stability":{"stable since":"1.10.0","others":["This is supported on Unix only."]},"apiName":"std::os::unix::net::UnixStream","apiType":"struct","apiDocumentation":{"apiDescription":["A Unix stream socket."],"examples":["use std::os::unix::net::UnixStream;\nuse std::io::prelude::*;\n\nlet mut stream = UnixStream::connect(\"/path/to/my/socket\").unwrap();\nstream.write_all(b\"hello world\").unwrap();\nlet mut response = String::new();\nstream.read_to_string(&mut response).unwrap();\nprintln!(\"{}\", response);"]},"trait implementations":[{"name":"impl std::fmt::Debug for std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl std::io::Read for std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl<'a> std::io::Read for &'a std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl std::io::Write for std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl<'a> std::io::Write for &'a std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl std::os::unix::io::AsRawFd for std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl std::os::unix::io::FromRawFd for std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl std::os::unix::io::IntoRawFd for std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::os::unix::net::UnixStream","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::os::unix::net::UnixStream","stable since":"1.0.0"}],"methods":[{"name":"pub fn connect<P: AsRef<Path>>(path: P) -> Result<UnixStream>","stability":["This is supported on Unix only."]},{"name":"pub fn pair() -> Result<(UnixStream, UnixStream)>","stability":["This is supported on Unix only."]},{"name":"pub fn try_clone(&self) -> Result<UnixStream>","stability":["This is supported on Unix only."]},{"name":"pub fn local_addr(&self) -> Result<SocketAddr>","stability":["This is supported on Unix only."]},{"name":"pub fn peer_addr(&self) -> Result<SocketAddr>","stability":["This is supported on Unix only."]},{"name":"pub fn set_read_timeout(&self, timeout: Option<Duration>) -> Result<()>","stability":["This is supported on Unix only."]},{"name":"pub fn set_write_timeout(&self, timeout: Option<Duration>) -> Result<()>","stability":["This is supported on Unix only."]},{"name":"pub fn read_timeout(&self) -> Result<Option<Duration>>","stability":["This is supported on Unix only."]},{"name":"pub fn write_timeout(&self) -> Result<Option<Duration>>","stability":["This is supported on Unix only."]},{"name":"pub fn set_nonblocking(&self, nonblocking: bool) -> Result<()>","stability":["This is supported on Unix only."]},{"name":"pub fn take_error(&self) -> Result<Option<Error>>","stability":["This is supported on Unix only."]},{"name":"pub fn shutdown(&self, how: Shutdown) -> Result<()>","stability":["This is supported on Unix only."]}]}