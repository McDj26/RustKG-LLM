{"stability":{"stable since":"1.0.0"},"apiName":"std::fmt::Octal","apiType":"trait","apiDocumentation":{"apiDescription":["o formatting.","The Octal trait should format its output as a number in base-8.","For primitive signed integers (i8 to i128, and isize), negative values are formatted as the twoâ€™s complement representation.","The alternate flag, #, adds a 0o in front of the output.","For more information on formatters, see the module-level documentation."],"examples":["Basic usage with i32:","let x = 42; // 42 is '52' in octal\n\nassert_eq!(format!(\"{:o}\", x), \"52\");\nassert_eq!(format!(\"{:#o}\", x), \"0o52\");\n\nassert_eq!(format!(\"{:o}\", -16), \"37777777760\");","Implementing Octal on a type:","use std::fmt;\n\nstruct Length(i32);\n\nimpl fmt::Octal for Length {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let val = self.0;\n\n        write!(f, \"{:o}\", val) // delegate to i32's implementation\n    }\n}\n\nlet l = Length(9);\n\nprintln!(\"l as octal is: {:o}\", l);"]},"trait required methods":[{"name":"fn fmt(&self, f: &mut Formatter) -> Result<(), Error>","details":{"description":"Formats the value using the given formatter."}}]}