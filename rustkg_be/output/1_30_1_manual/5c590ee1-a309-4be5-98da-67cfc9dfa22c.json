{"stability":{"stable since":"1.0.0"},"apiName":"std::error::Error","apiType":"trait","apiDocumentation":{"apiDescription":["Error is a trait representing the basic expectations for error values, i.e. values of type E in Result<T, E>. Errors must describe themselves through the Display and Debug traits, and may provide cause chain information:","The cause method is generally used when errors cross \"abstraction boundaries\", i.e. when a one module must report an error that is \"caused\" by an error from a lower-level module. This setup makes it possible for the high-level module to provide its own errors that do not commit to any particular implementation, but also reveal some of its implementation for debugging via cause chains."]},"trait provided methods":[{"name":"fn description(&self) -> &str","details":{"description":"This method is soft-deprecated.","example":["match \"xc\".parse::<u32>() {\n    Err(e) => {\n        // Print `e` itself, not `e.description()`.\n        println!(\"Error: {}\", e);\n    }\n    _ => println!(\"No error\"),\n}"]}},{"name":"fn cause(&self) -> Option<&Error>","stability":["Deprecating in 1.33.0: replaced by Error::source, which can support downcasting\n"]},{"name":"fn source(&self) -> Option<&(Error + 'static)>","details":{"description":"The lower-level source of this error, if any.","example":["use std::error::Error;\nuse std::fmt;\n\n#[derive(Debug)]\nstruct SuperError {\n    side: SuperErrorSideKick,\n}\n\nimpl fmt::Display for SuperError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"SuperError is here!\")\n    }\n}\n\nimpl Error for SuperError {\n    fn description(&self) -> &str {\n        \"I'm the superhero of errors\"\n    }\n\n    fn source(&self) -> Option<&(dyn Error + 'static)> {\n        Some(&self.side)\n    }\n}\n\n#[derive(Debug)]\nstruct SuperErrorSideKick;\n\nimpl fmt::Display for SuperErrorSideKick {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"SuperErrorSideKick is here!\")\n    }\n}\n\nimpl Error for SuperErrorSideKick {\n    fn description(&self) -> &str {\n        \"I'm SuperError side kick\"\n    }\n}\n\nfn get_super_error() -> Result<(), SuperError> {\n    Err(SuperError { side: SuperErrorSideKick })\n}\n\nfn main() {\n    match get_super_error() {\n        Err(e) => {\n            println!(\"Error: {}\", e.description());\n            println!(\"Caused by: {}\", e.source().unwrap());\n        }\n        _ => println!(\"No error\"),\n    }\n}"]}}],"methods":[{"name":"pub fn is<T: Error + 'static>(&self) -> bool","details":{"description":["Returns true if the boxed type is the same as T"]}},{"name":"pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T>","details":{"description":["Returns some reference to the boxed value if it is of type T, or None if it isn't."]}},{"name":"pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T>","details":{"description":["Returns some mutable reference to the boxed value if it is of type T, or None if it isn't."]}},{"name":"pub fn is<T: Error + 'static>(&self) -> bool","details":{"description":["Forwards to the method defined on the type Any."]}},{"name":"pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T>","details":{"description":["Forwards to the method defined on the type Any."]}},{"name":"pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T>","details":{"description":["Forwards to the method defined on the type Any."]}},{"name":"pub fn is<T: Error + 'static>(&self) -> bool","details":{"description":["Forwards to the method defined on the type Any."]}},{"name":"pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T>","details":{"description":["Forwards to the method defined on the type Any."]}},{"name":"pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T>","details":{"description":["Forwards to the method defined on the type Any."]}},{"name":"pub fn downcast<T: Error + 'static>( self: Box<Self>) -> Result<Box<T>, Box<Error>>","details":{"description":["Attempt to downcast the box to a concrete type."]}},{"name":"pub fn downcast<T: Error + 'static>( self: Box<Self>) -> Result<Box<T>, Box<Error + Send>>","details":{"description":["Attempt to downcast the box to a concrete type."]}},{"name":"pub fn downcast<T: Error + 'static>( self: Box<Self>) -> Result<Box<T>, Box<Self>>","details":{"description":["Attempt to downcast the box to a concrete type."]}}]}