{"stability":{"stable since":"1.0.0"},"apiName":"std::ops::FnOnce","apiType":"trait","apiDocumentation":{"apiDescription":["The version of the call operator that takes a by-value receiver.","Instances of FnOnce can be called, but might not be callable multiple times. Because of this, if the only thing known about a type is that it implements FnOnce, it can only be called once.","FnOnce is implemented automatically by closure that might consume captured variables, as well as all types that implement FnMut, e.g. (safe) function pointers (since FnOnce is a supertrait of FnMut).","Since both Fn and FnMut are subtraits of FnOnce, any instance of Fn or FnMut can be used where a FnOnce is expected.","Use FnOnce as a bound when you want to accept a parameter of function-like type and only need to call it once. If you need to call the parameter repeatedly, use FnMut as a bound; if you also need it to not mutate state, use Fn.","See the chapter on closures in The Rust Programming Language for some more information on this topic.","Also of note is the special syntax for Fn traits (e.g. Fn(usize, bool) -> usize). Those interested in the technical details of this can refer to the relevant section in the Rustonomicon."],"examples":["Calling a by-value closure","let x = 5;\nlet square_x = move || x * x;\nassert_eq!(square_x(), 25);","Using a FnOnce parameter","fn consume_with_relish<F>(func: F)\n    where F: FnOnce() -> String\n{\n    // `func` consumes its captured variables, so it cannot be run more\n    // than once.\n    println!(\"Consumed: {}\", func());\n\n    println!(\"Delicious!\");\n\n    // Attempting to invoke `func()` again will throw a `use of moved\n    // value` error for `func`.\n}\n\nlet x = String::from(\"x\");\nlet consume_and_return_x = move || x;\nconsume_with_relish(consume_and_return_x);\n\n// `consume_and_return_x` can no longer be invoked at this point"]},"trait required methods":[{"name":"extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output","stability":["ðŸ”¬ This is a nightly-only experimental API.  (fn_traits #29625)"]}]}