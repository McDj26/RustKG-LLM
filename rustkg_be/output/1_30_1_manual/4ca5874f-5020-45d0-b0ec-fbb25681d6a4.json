{"stability":{"stable since":"1.0.0"},"apiName":"std::write","apiType":"macro","apiDocumentation":{"apiDescription":["Write formatted data into a buffer.","This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be formatted according to the specified format string and the result will be passed to the writer. The writer may be any value with a write_fmt method; generally this comes from an implementation of either the std::fmt::Write or the std::io::Write trait. The macro returns whatever the write_fmt method returns; commonly a std::fmt::Result, or an io::Result.","See std::fmt for more information on the format string syntax."],"examples":["use std::io::Write;\n\nlet mut w = Vec::new();\nwrite!(&mut w, \"test\").unwrap();\nwrite!(&mut w, \"formatted {}\", \"arguments\").unwrap();\n\nassert_eq!(w, b\"testformatted arguments\");","A module can import both std::fmt::Write and std::io::Write and call write! on objects\nimplementing either, as objects do not typically implement both. However, the module must\nimport the traits qualified so their names do not conflict:","use std::fmt::Write as FmtWrite;\nuse std::io::Write as IoWrite;\n\nlet mut s = String::new();\nlet mut v = Vec::new();\nwrite!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\nwrite!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\nassert_eq!(v, b\"s = \\\"abc 123\\\"\");","Note: This macro can be used in no_std setups as well\nIn a no_std setup you are responsible for the\nimplementation details of the components.","use core::fmt::Write;\n\nstruct Example;\n\nimpl Write for Example {\n    fn write_str(&mut self, _s: &str) -> core::fmt::Result {\n         unimplemented!();\n    }\n}\n\nlet mut m = Example{};\nwrite!(&mut m, \"Hello World\").expect(\"Not written\");"]}}