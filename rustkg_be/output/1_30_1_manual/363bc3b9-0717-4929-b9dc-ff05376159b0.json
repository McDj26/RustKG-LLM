{"stability":{"stable since":"1.0.0"},"apiName":"std::thread::panicking","apiType":"function","apiDocumentation":{"apiDescription":["Determines whether the current thread is unwinding because of panic.","A common use of this feature is to poison shared resources when writing unsafe code, by checking panicking when the drop is called.","This is usually not needed when writing safe code, as Mutexes already poison themselves when a thread panics while holding the lock.","This can also be used in multithreaded applications, in order to send a message to other threads warning that a thread has panicked (e.g. for monitoring purposes)."],"examples":["use std::thread;\n\nstruct SomeStruct;\n\nimpl Drop for SomeStruct {\n    fn drop(&mut self) {\n        if thread::panicking() {\n            println!(\"dropped while unwinding\");\n        } else {\n            println!(\"dropped while not unwinding\");\n        }\n    }\n}\n\n{\n    print!(\"a: \");\n    let a = SomeStruct;\n}\n\n{\n    print!(\"b: \");\n    let b = SomeStruct;\n    panic!()\n}"]}}