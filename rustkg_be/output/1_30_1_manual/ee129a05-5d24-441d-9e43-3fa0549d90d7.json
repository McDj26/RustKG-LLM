{"stability":{"stable since":"1.0.0"},"apiName":"std::io::Error","apiType":"struct","apiDocumentation":{"apiDescription":["The error type for I/O operations of the Read, Write, Seek, and associated traits.","Errors mostly originate from the underlying OS, but custom instances of Error can be created with crafted error messages and a particular value of ErrorKind."]},"trait implementations":[{"name":"impl std::convert::From<std::ffi::NulError> for std::io::Error","stable since":"1.0.0"},{"name":"impl<W> std::convert::From<std::io::IntoInnerError<W>> for std::io::Error","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::io::Error","stable since":"1.0.0"},{"name":"impl std::convert::From<std::io::ErrorKind> for std::io::Error","stable since":"1.14.0"},{"name":"impl std::fmt::Display for std::io::Error","stable since":"1.0.0"},{"name":"impl std::error::Error for std::io::Error","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::io::Error","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::io::Error","stable since":"1.0.0"}],"methods":[{"name":"pub fn new<E>(kind: ErrorKind, error: E) -> Error where E: Into<Box<Error + Send + Sync>>","details":{"description":["Creates a new I/O error from a known kind of error as well as an arbitrary error payload.","This function is used to generically create I/O errors which do not originate from the OS itself. The error argument is an arbitrary payload which will be contained in this Error."],"example":["use std::io::{Error, ErrorKind};\n\n// errors can be created from strings\nlet custom_error = Error::new(ErrorKind::Other, \"oh no!\");\n\n// errors can also be created from other errors\nlet custom_error2 = Error::new(ErrorKind::Interrupted, custom_error);"]}},{"name":"pub fn last_os_error() -> Error","details":{"description":["Returns an error representing the last OS error which occurred.","This function reads the value of errno for the target platform (e.g. GetLastError on Windows) and will return a corresponding instance of Error for the error code."],"example":["use std::io::Error;\n\nprintln!(\"last OS error: {:?}\", Error::last_os_error());"]}},{"name":"pub fn from_raw_os_error(code: i32) -> Error","details":{"description":["Creates a new instance of an Error from a particular OS error code."],"example":["On Linux:","use std::io;\n\nlet error = io::Error::from_raw_os_error(22);\nassert_eq!(error.kind(), io::ErrorKind::InvalidInput);","On Windows:","use std::io;\n\nlet error = io::Error::from_raw_os_error(10022);\nassert_eq!(error.kind(), io::ErrorKind::InvalidInput);"]}},{"name":"pub fn raw_os_error(&self) -> Option<i32>","details":{"description":["Returns the OS error that this error represents (if any).","If this Error was constructed via last_os_error or from_raw_os_error, then this function will return Some, otherwise it will return None."],"example":["use std::io::{Error, ErrorKind};\n\nfn print_os_error(err: &Error) {\n    if let Some(raw_os_err) = err.raw_os_error() {\n        println!(\"raw OS error: {:?}\", raw_os_err);\n    } else {\n        println!(\"Not an OS error\");\n    }\n}\n\nfn main() {\n    // Will print \"raw OS error: ...\".\n    print_os_error(&Error::last_os_error());\n    // Will print \"Not an OS error\".\n    print_os_error(&Error::new(ErrorKind::Other, \"oh no!\"));\n}"]}},{"name":"pub fn get_ref(&self) -> Option<&(Error + Send + Sync + 'static)>","details":{"description":["Returns a reference to the inner error wrapped by this error (if any).","If this Error was constructed via new then this function will return Some, otherwise it will return None."],"example":["use std::io::{Error, ErrorKind};\n\nfn print_error(err: &Error) {\n    if let Some(inner_err) = err.get_ref() {\n        println!(\"Inner error: {:?}\", inner_err);\n    } else {\n        println!(\"No inner error\");\n    }\n}\n\nfn main() {\n    // Will print \"No inner error\".\n    print_error(&Error::last_os_error());\n    // Will print \"Inner error: ...\".\n    print_error(&Error::new(ErrorKind::Other, \"oh no!\"));\n}"]}},{"name":"pub fn get_mut(&mut self) -> Option<&mut (Error + Send + Sync + 'static)>","details":{"description":["Returns a mutable reference to the inner error wrapped by this error (if any).","If this Error was constructed via new then this function will return Some, otherwise it will return None."],"example":["use std::io::{Error, ErrorKind};\nuse std::{error, fmt};\nuse std::fmt::Display;\n\n#[derive(Debug)]\nstruct MyError {\n    v: String,\n}\n\nimpl MyError {\n    fn new() -> MyError {\n        MyError {\n            v: \"oh no!\".to_string()\n        }\n    }\n\n    fn change_message(&mut self, new_message: &str) {\n        self.v = new_message.to_string();\n    }\n}\n\nimpl error::Error for MyError {\n    fn description(&self) -> &str { &self.v }\n}\n\nimpl Display for MyError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"MyError: {}\", &self.v)\n    }\n}\n\nfn change_error(mut err: Error) -> Error {\n    if let Some(inner_err) = err.get_mut() {\n        inner_err.downcast_mut::<MyError>().unwrap().change_message(\"I've been changed!\");\n    }\n    err\n}\n\nfn print_error(err: &Error) {\n    if let Some(inner_err) = err.get_ref() {\n        println!(\"Inner error: {}\", inner_err);\n    } else {\n        println!(\"No inner error\");\n    }\n}\n\nfn main() {\n    // Will print \"No inner error\".\n    print_error(&change_error(Error::last_os_error()));\n    // Will print \"Inner error: ...\".\n    print_error(&change_error(Error::new(ErrorKind::Other, MyError::new())));\n}"]}},{"name":"pub fn into_inner(self) -> Option<Box<Error + Send + Sync>>","details":{"description":["Consumes the Error, returning its inner error (if any).","If this Error was constructed via new then this function will return Some, otherwise it will return None."],"example":["use std::io::{Error, ErrorKind};\n\nfn print_error(err: Error) {\n    if let Some(inner_err) = err.into_inner() {\n        println!(\"Inner error: {}\", inner_err);\n    } else {\n        println!(\"No inner error\");\n    }\n}\n\nfn main() {\n    // Will print \"No inner error\".\n    print_error(Error::last_os_error());\n    // Will print \"Inner error: ...\".\n    print_error(Error::new(ErrorKind::Other, \"oh no!\"));\n}"]}},{"name":"pub fn kind(&self) -> ErrorKind","details":{"description":["Returns the corresponding ErrorKind for this error."],"example":["use std::io::{Error, ErrorKind};\n\nfn print_error(err: Error) {\n    println!(\"{:?}\", err.kind());\n}\n\nfn main() {\n    // Will print \"No inner error\".\n    print_error(Error::last_os_error());\n    // Will print \"Inner error: ...\".\n    print_error(Error::new(ErrorKind::AddrInUse, \"oh no!\"));\n}"]}}]}