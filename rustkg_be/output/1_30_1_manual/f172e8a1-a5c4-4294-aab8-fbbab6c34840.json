{"stability":{"stable since":"1.0.0"},"apiName":"std::cmp::Eq","apiType":"trait","apiDocumentation":{"apiDescription":["Trait for equality comparisons which are equivalence relations.","This means, that in addition to a == b and a != b being strict inverses, the equality must be (for all a, b and c):","reflexive: a == a; symmetric: a == b implies b == a; and transitive: a == b and b == c implies a == c.","This property cannot be checked by the compiler, and therefore Eq implies PartialEq, and has no extra methods.","Derivable","This trait can be used with #[derive]. When derived, because Eq has no extra methods, it is only informing the compiler that this is an equivalence relation rather than a partial equivalence relation. Note that the derive strategy requires all fields are Eq, which isn't always desired.","How can I implement Eq?","If you cannot use the derive strategy, specify that your type implements Eq, which has no methods:","enum BookFormat { Paperback, Hardback, Ebook } struct Book { isbn: i32, format: BookFormat, } impl PartialEq for Book { fn eq(&self, other: &Book) -> bool { self.isbn == other.isbn } } impl Eq for Book {}"]}}