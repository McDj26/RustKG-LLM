{"stability":{"stable since":"1.0.0"},"apiName":"std::ops::IndexMut","apiType":"trait","apiDocumentation":{"apiDescription":["Used for indexing operations (container[index]) in mutable contexts.","container[index] is actually syntactic sugar for *container.index_mut(index), but only when used as a mutable value. If an immutable value is requested, the Index trait is used instead. This allows nice things such as v[index] = value."],"examples":["A very simple implementation of a Balance struct that has two sides, where\neach can be indexed mutably and immutably.","use std::ops::{Index,IndexMut};\n\n#[derive(Debug)]\nenum Side {\n    Left,\n    Right,\n}\n\n#[derive(Debug, PartialEq)]\nenum Weight {\n    Kilogram(f32),\n    Pound(f32),\n}\n\nstruct Balance {\n    pub left: Weight,\n    pub right: Weight,\n}\n\nimpl Index<Side> for Balance {\n    type Output = Weight;\n\n    fn index<'a>(&'a self, index: Side) -> &'a Weight {\n        println!(\"Accessing {:?}-side of balance immutably\", index);\n        match index {\n            Side::Left => &self.left,\n            Side::Right => &self.right,\n        }\n    }\n}\n\nimpl IndexMut<Side> for Balance {\n    fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Weight {\n        println!(\"Accessing {:?}-side of balance mutably\", index);\n        match index {\n            Side::Left => &mut self.left,\n            Side::Right => &mut self.right,\n        }\n    }\n}\n\nlet mut balance = Balance {\n    right: Weight::Kilogram(2.5),\n    left: Weight::Pound(1.5),\n};\n\n// In this case, `balance[Side::Right]` is sugar for\n// `*balance.index(Side::Right)`, since we are only *reading*\n// `balance[Side::Right]`, not writing it.\nassert_eq!(balance[Side::Right], Weight::Kilogram(2.5));\n\n// However, in this case `balance[Side::Left]` is sugar for\n// `*balance.index_mut(Side::Left)`, since we are writing\n// `balance[Side::Left]`.\nbalance[Side::Left] = Weight::Kilogram(3.0);"]},"trait required methods":[{"name":"fn index_mut(&mut self, index: Idx) -> &mut Self::Output","details":{"description":"Performs the mutable indexing (container[index]) operation."}}]}