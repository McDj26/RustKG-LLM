{"stability":{"stable since":"1.0.0"},"apiName":"std::convert::AsRef","apiType":"trait","apiDocumentation":{"apiDescription":["A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.","AsRef is very similar to, but serves a slightly different purpose than, Borrow.","AsRef is to be used when wishing to convert to a reference of another type. Borrow is more related to the notion of taking the reference. It is useful when wishing to abstract over the type of reference (&T, &mut T) or allow both the referenced and owned type to be treated in the same manner.","The key difference between the two traits is the intention:","Use AsRef when the goal is to simply convert into a reference Use Borrow when the goal is related to writing code that is agnostic to the type of borrow and whether it is a reference or value","See the book for a more detailed comparison.","Note: this trait must not fail. If the conversion can fail, use a dedicated method which returns an Option<T> or a Result<T, E>.","Generic Implementations","AsRef auto-dereferences if the inner type is a reference or a mutable reference (e.g.: foo.as_ref() will work the same if foo has type &mut Foo or &&mut Foo)"],"examples":["Both String and &str implement AsRef<str>:","fn is_hello<T: AsRef<str>>(s: T) {\n   assert_eq!(\"hello\", s.as_ref());\n}\n\nlet s = \"hello\";\nis_hello(s);\n\nlet s = \"hello\".to_string();\nis_hello(s);"]},"trait required methods":[{"name":"fn as_ref(&self) -> &T","details":{"description":"Performs the conversion."}}]}