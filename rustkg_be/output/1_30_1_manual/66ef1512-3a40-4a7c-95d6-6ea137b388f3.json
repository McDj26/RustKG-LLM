{"stability":{"stable since":"1.0.0"},"apiName":"std::process::Stdio","apiType":"struct","apiDocumentation":{"apiDescription":["Describes what to do with a standard I/O stream for a child process when passed to the stdin, stdout, and stderr methods of Command."]},"trait implementations":[{"name":"impl std::fmt::Debug for std::process::Stdio","stable since":"1.16.0"},{"name":"impl std::convert::From<std::process::ChildStdin> for std::process::Stdio","stable since":"1.20.0"},{"name":"impl std::convert::From<std::process::ChildStdout> for std::process::Stdio","stable since":"1.20.0"},{"name":"impl std::convert::From<std::process::ChildStderr> for std::process::Stdio","stable since":"1.20.0"},{"name":"impl std::convert::From<std::fs::File> for std::process::Stdio","stable since":"1.20.0"},{"name":"impl std::os::windows::io::FromRawHandle for std::process::Stdio","stable since":"1.2.0"},{"name":"impl std::os::unix::io::FromRawFd for std::process::Stdio","stable since":"1.2.0"},{"name":"impl std::marker::Send for std::process::Stdio","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::process::Stdio","stable since":"1.0.0"}],"methods":[{"name":"pub fn piped() -> Stdio","details":{"description":["A new pipe should be arranged to connect the parent and child processes."],"example":["With stdout:","use std::process::{Command, Stdio};\n\nlet output = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(Stdio::piped())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"Hello, world!\\n\");\n// Nothing echoed to console","With stdin:","use std::io::Write;\nuse std::process::{Command, Stdio};\n\nlet mut child = Command::new(\"rev\")\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .spawn()\n    .expect(\"Failed to spawn child process\");\n\n{\n    let mut stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n    stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n}\n\nlet output = child.wait_with_output().expect(\"Failed to read stdout\");\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\\n\");"]}},{"name":"pub fn inherit() -> Stdio","details":{"description":["The child inherits from the corresponding parent descriptor."],"example":["With stdout:","use std::process::{Command, Stdio};\n\nlet output = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(Stdio::inherit())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n// \"Hello, world!\" echoed to console","With stdin:","use std::process::{Command, Stdio};\n\nlet output = Command::new(\"rev\")\n    .stdin(Stdio::inherit())\n    .stdout(Stdio::piped())\n    .output()\n    .expect(\"Failed to execute command\");\n\nprintln!(\"You piped in the reverse of: {}\", String::from_utf8_lossy(&output.stdout));"]}},{"name":"pub fn null() -> Stdio","details":{"description":["This stream will be ignored. This is the equivalent of attaching the stream to /dev/null"],"example":["With stdout:","use std::process::{Command, Stdio};\n\nlet output = Command::new(\"echo\")\n    .arg(\"Hello, world!\")\n    .stdout(Stdio::null())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n// Nothing echoed to console","With stdin:","use std::process::{Command, Stdio};\n\nlet output = Command::new(\"rev\")\n    .stdin(Stdio::null())\n    .stdout(Stdio::piped())\n    .output()\n    .expect(\"Failed to execute command\");\n\nassert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n// Ignores any piped-in input"]}}]}