{"stability":{"stable since":"1.0.0"},"apiName":"std::cmp::PartialEq","apiType":"trait","apiDocumentation":{"apiDescription":["Trait for equality comparisons which are partial equivalence relations.","This trait allows for partial equality, for types that do not have a full equivalence relation. For example, in floating point numbers NaN != NaN, so floating point types implement PartialEq but not Eq.","Formally, the equality must be (for all a, b and c):","symmetric: a == b implies b == a; and transitive: a == b and b == c implies a == c.","Note that these requirements mean that the trait itself must be implemented symmetrically and transitively: if T: PartialEq<U> and U: PartialEq<V> then U: PartialEq<T> and T: PartialEq<V>.","Derivable","This trait can be used with #[derive]. When derived on structs, two instances are equal if all fields are equal, and not equal if any fields are not equal. When derived on enums, each variant is equal to itself and not equal to the other variants.","How can I implement PartialEq?","PartialEq only requires the eq method to be implemented; ne is defined in terms of it by default. Any manual implementation of ne must respect the rule that eq is a strict inverse of ne; that is, !(a == b) if and only if a != b.","Implementations of PartialEq, PartialOrd, and Ord must agree with each other. It's easy to accidentally make them disagree by deriving some of the traits and manually implementing others.","An example implementation for a domain in which two books are considered the same book if their ISBN matches, even if the formats differ:","enum BookFormat { Paperback, Hardback, Ebook, } struct Book { isbn: i32, format: BookFormat, } impl PartialEq for Book { fn eq(&self, other: &Book) -> bool { self.isbn == other.isbn } } let b1 = Book { isbn: 3, format: BookFormat::Paperback }; let b2 = Book { isbn: 3, format: BookFormat::Ebook }; let b3 = Book { isbn: 10, format: BookFormat::Paperback }; assert!(b1 == b2); assert!(b1 != b3);","How can I compare two different types?","The type you can compare with is controlled by PartialEq's type parameter. For example, let's tweak our previous code a bit:","enum BookFormat { Paperback, Hardback, Ebook, } struct Book { isbn: i32, format: BookFormat, } impl PartialEq<BookFormat> for Book { fn eq(&self, other: &BookFormat) -> bool { match (&self.format, other) { (BookFormat::Paperback, BookFormat::Paperback) => true, (BookFormat::Hardback, BookFormat::Hardback) => true, (BookFormat::Ebook, BookFormat::Ebook) => true, (_, _) => false, } } } let b1 = Book { isbn: 3, format: BookFormat::Paperback }; assert!(b1 == BookFormat::Paperback); assert!(b1 != BookFormat::Ebook);","By changing impl PartialEq for Book to impl PartialEq<BookFormat> for Book, we've changed what type we can use on the right side of the == operator. This lets us use it in the assert! statements at the bottom.","You can also combine these implementations to let the == operator work with two different types:","enum BookFormat { Paperback, Hardback, Ebook, } struct Book { isbn: i32, format: BookFormat, } impl PartialEq<BookFormat> for Book { fn eq(&self, other: &BookFormat) -> bool { match (&self.format, other) { (&BookFormat::Paperback, &BookFormat::Paperback) => true, (&BookFormat::Hardback, &BookFormat::Hardback) => true, (&BookFormat::Ebook, &BookFormat::Ebook) => true, (_, _) => false, } } } impl PartialEq for Book { fn eq(&self, other: &Book) -> bool { self.isbn == other.isbn } } let b1 = Book { isbn: 3, format: BookFormat::Paperback }; let b2 = Book { isbn: 3, format: BookFormat::Ebook }; assert!(b1 == BookFormat::Paperback); assert!(b1 != BookFormat::Ebook); assert!(b1 == b2);"],"examples":["let x: u32 = 0;\nlet y: u32 = 1;\n\nassert_eq!(x == y, false);\nassert_eq!(x.eq(&y), false);"]},"trait required methods":[{"name":"[+] Expand attributes#[must_use] fn eq(&self, other: &Rhs) -> bool","details":{"description":"This method tests for self and other values to be equal, and is used\nby ==."}}],"trait provided methods":[{"name":"[+] Expand attributes#[must_use] fn ne(&self, other: &Rhs) -> bool","details":{"description":"This method tests for !=."}}]}