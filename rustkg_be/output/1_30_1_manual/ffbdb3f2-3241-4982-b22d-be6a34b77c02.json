{"stability":{"stable since":"1.0.0"},"apiName":"std::io::Stdout","apiType":"struct","apiDocumentation":{"apiDescription":["A handle to the global standard output stream of the current process.","Each handle shares a global buffer of data to be written to the standard output stream. Access is also synchronized via a lock and explicit control over locking is available via the lock method.","Created by the io::stdout method."]},"trait implementations":[{"name":"impl std::fmt::Debug for std::io::Stdout","stable since":"1.16.0"},{"name":"impl std::io::Write for std::io::Stdout","stable since":"1.0.0"},{"name":"impl std::os::windows::io::AsRawHandle for std::io::Stdout","stable since":"1.21.0"},{"name":"impl std::os::unix::io::AsRawFd for std::io::Stdout","stable since":"1.21.0"},{"name":"impl std::marker::Send for std::io::Stdout","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::io::Stdout","stable since":"1.0.0"}],"methods":[{"name":"pub fn lock(&self) -> StdoutLock","details":{"description":["Locks this handle to the standard output stream, returning a writable guard.","The lock is released when the returned lock goes out of scope. The returned guard also implements the Write trait for writing data."],"example":["use std::io::{self, Write};\n\nfn main() -> io::Result<()> {\n    let stdout = io::stdout();\n    let mut handle = stdout.lock();\n\n    handle.write(b\"hello world\")?;\n\n    Ok(())\n}"]}}]}