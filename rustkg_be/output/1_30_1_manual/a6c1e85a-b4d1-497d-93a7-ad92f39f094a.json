{"stability":{"stable since":"1.8.0"},"apiName":"std::time::SystemTime","apiType":"struct","apiDocumentation":{"apiDescription":["A measurement of the system clock, useful for talking to external entities like the file system or other processes.","Distinct from the Instant type, this time measurement is not monotonic. This means that you can save a file to the file system, then save another file to the file system, and the second file has a SystemTime measurement earlier than the first. In other words, an operation that happens after another operation in real time may have an earlier SystemTime!","Consequently, comparing two SystemTime instances to learn about the duration between them returns a Result instead of an infallible Duration to indicate that this sort of time drift may happen and needs to be handled.","Although a SystemTime cannot be directly inspected, the UNIX_EPOCH constant is provided in this module as an anchor in time to learn information about a SystemTime. By calculating the duration from this fixed point in time, a SystemTime can be converted to a human-readable time, or perhaps some other string representation.","The size of a SystemTime struct may vary depending on the target operating system.","Example:","use std::time::{Duration, SystemTime}; use std::thread::sleep; fn main() { let now = SystemTime::now(); // we sleep for 2 seconds sleep(Duration::new(2, 0)); match now.elapsed() { Ok(elapsed) => { // it prints '2' println!(\"{}\", elapsed.as_secs()); } Err(e) => { // an error occurred! println!(\"Error: {:?}\", e); } } }"]},"trait implementations":[{"name":"impl std::marker::Copy for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::cmp::PartialOrd for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::cmp::Ord for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::ops::Add<std::time::Duration> for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::ops::AddAssign<std::time::Duration> for std::time::SystemTime","stable since":"1.9.0"},{"name":"impl std::ops::Sub<std::time::Duration> for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::ops::SubAssign<std::time::Duration> for std::time::SystemTime","stable since":"1.9.0"},{"name":"impl std::fmt::Debug for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::time::SystemTime","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::time::SystemTime","stable since":"1.0.0"}],"methods":[{"name":"pub fn now() -> SystemTime","details":{"description":["Returns the system time corresponding to \"now\"."],"example":["use std::time::SystemTime;\n\nlet sys_time = SystemTime::now();"]}},{"name":"pub fn duration_since( &self, earlier: SystemTime) -> Result<Duration, SystemTimeError>","details":{"description":["Returns the amount of time elapsed from an earlier point in time.","This function may fail because measurements taken earlier are not guaranteed to always be before later measurements (due to anomalies such as the system clock being adjusted either forwards or backwards).","If successful, Ok(Duration) is returned where the duration represents the amount of time elapsed from the specified measurement to this one.","Returns an Err if earlier is later than self, and the error contains how far from self the time is."],"example":["use std::time::SystemTime;\n\nlet sys_time = SystemTime::now();\nlet difference = sys_time.duration_since(sys_time)\n                         .expect(\"SystemTime::duration_since failed\");\nprintln!(\"{:?}\", difference);"]}},{"name":"pub fn elapsed(&self) -> Result<Duration, SystemTimeError>","details":{"description":["Returns the amount of time elapsed since this system time was created.","This function may fail as the underlying system clock is susceptible to drift and updates (e.g. the system clock could go backwards), so this function may not always succeed. If successful, Ok(Duration) is returned where the duration represents the amount of time elapsed from this time measurement to the current time.","Returns an Err if self is later than the current system time, and the error contains how far from the current system time self is."],"example":["use std::thread::sleep;\nuse std::time::{Duration, SystemTime};\n\nlet sys_time = SystemTime::now();\nlet one_sec = Duration::from_secs(1);\nsleep(one_sec);\nassert!(sys_time.elapsed().unwrap() >= one_sec);"]}}]}