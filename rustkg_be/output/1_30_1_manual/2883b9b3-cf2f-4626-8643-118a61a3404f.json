{"stability":{"stable since":"1.0.0"},"apiName":"std::net::SocketAddr","apiType":"enum","apiDocumentation":{"apiDescription":["An internet socket address, either IPv4 or IPv6.","Internet socket addresses consist of an IP address, a 16-bit port number, as well as possibly some version-dependent additional information. See SocketAddrV4's and SocketAddrV6's respective documentation for more details.","The size of a SocketAddr instance may vary depending on the target operating system."],"examples":["use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n\nlet socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n\nassert_eq!(\"127.0.0.1:8080\".parse(), Ok(socket));\nassert_eq!(socket.port(), 8080);\nassert_eq!(socket.is_ipv4(), true);"]},"enum variants":["V4(SocketAddrV4)","An IPv4 socket address.\n","V6(SocketAddrV6)","An IPv6 socket address.\n"],"trait implementations":[{"name":"impl std::marker::Copy for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::clone::Clone for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::cmp::PartialEq for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::cmp::Eq for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::hash::Hash for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::fmt::Debug for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::convert::From<std::net::SocketAddrV4> for std::net::SocketAddr","stable since":"1.16.0"},{"name":"impl std::convert::From<std::net::SocketAddrV6> for std::net::SocketAddr","stable since":"1.16.0"},{"name":"impl<I: std::convert::Into<std::net::IpAddr>> std::convert::From<(I, u16)> for std::net::SocketAddr","stable since":"1.17.0"},{"name":"impl std::fmt::Display for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::net::ToSocketAddrs for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::str::FromStr for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::marker::Send for std::net::SocketAddr","stable since":"1.0.0"},{"name":"impl std::marker::Sync for std::net::SocketAddr","stable since":"1.0.0"}],"methods":[{"name":"pub fn new(ip: IpAddr, port: u16) -> SocketAddr","details":{"description":["Creates a new socket address from an IP address and a port number."],"example":["use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n\nlet socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\nassert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\nassert_eq!(socket.port(), 8080);"]}},{"name":"pub fn ip(&self) -> IpAddr","details":{"description":["Returns the IP address associated with this socket address."],"example":["use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n\nlet socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\nassert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));"]}},{"name":"pub fn set_ip(&mut self, new_ip: IpAddr)","details":{"description":["Changes the IP address associated with this socket address."],"example":["use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n\nlet mut socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\nsocket.set_ip(IpAddr::V4(Ipv4Addr::new(10, 10, 0, 1)));\nassert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(10, 10, 0, 1)));"]}},{"name":"pub fn port(&self) -> u16","details":{"description":["Returns the port number associated with this socket address."],"example":["use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n\nlet socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\nassert_eq!(socket.port(), 8080);"]}},{"name":"pub fn set_port(&mut self, new_port: u16)","details":{"description":["Changes the port number associated with this socket address."],"example":["use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n\nlet mut socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\nsocket.set_port(1025);\nassert_eq!(socket.port(), 1025);"]}},{"name":"pub fn is_ipv4(&self) -> bool","details":{"description":["Returns true if the IP address in this SocketAddr is an IPv4 address, and false otherwise."],"example":["use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n\nfn main() {\n    let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n    assert_eq!(socket.is_ipv4(), true);\n    assert_eq!(socket.is_ipv6(), false);\n}"]}},{"name":"pub fn is_ipv6(&self) -> bool","details":{"description":["Returns true if the IP address in this SocketAddr is an IPv6 address, and false otherwise."],"example":["use std::net::{IpAddr, Ipv6Addr, SocketAddr};\n\nfn main() {\n    let socket = SocketAddr::new(\n                     IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 65535, 0, 1)), 8080);\n    assert_eq!(socket.is_ipv4(), false);\n    assert_eq!(socket.is_ipv6(), true);\n}"]}}]}