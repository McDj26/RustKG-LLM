{"stability":{"stable since":"1.0.0"},"apiName":"std::ptr::copy","apiType":"function","apiDocumentation":{"apiDescription":["Copies count * size_of<T> bytes from src to dst. The source and destination may overlap.","copy is semantically equivalent to C's memmove.","Safety","Care must be taken with the ownership of src and dst. This method semantically moves the values of src into dst. However it does not drop the contents of dst, or prevent the contents of src from being dropped or used."],"examples":["Efficiently create a Rust vector from an unsafe buffer:","use std::ptr;\n\nunsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n    let mut dst = Vec::with_capacity(elts);\n    dst.set_len(elts);\n    ptr::copy(ptr, dst.as_mut_ptr(), elts);\n    dst\n}"]}}