{"relations":["is a","has full name","stable since","has description","is successor of","is predecessor of"],"relation_pairs":[["core::iter","is a","Module"],["core::iter","stable since","1.0.0"],["core::iter","has full name","core::iter"],["core::iter","has description","Composable external iteration."],["Chain","is a","struct"],["Chain","has full name","core::iter::Chain"],["Chain","has description","An iterator that strings two iterators together."],["Cloned","is a","struct"],["Cloned","has full name","core::iter::Cloned"],["Cloned","has description","An iterator that clones the elements of an underlying iterator."],["Cycle","is a","struct"],["Cycle","has full name","core::iter::Cycle"],["Cycle","has description","An iterator that repeats endlessly."],["Empty","is a","struct"],["Empty","has full name","core::iter::Empty"],["Empty","has description","An iterator that yields nothing."],["Enumerate","is a","struct"],["Enumerate","has full name","core::iter::Enumerate"],["Enumerate","has description","An iterator that yields the current count and the element during iteration."],["Filter","is a","struct"],["Filter","has full name","core::iter::Filter"],["Filter","has description","An iterator that filters the elements of iter with predicate."],["FilterMap","is a","struct"],["FilterMap","has full name","core::iter::FilterMap"],["FilterMap","has description","An iterator that uses f to both filter and map elements from iter."],["FlatMap","is a","struct"],["FlatMap","has full name","core::iter::FlatMap"],["FlatMap","has description","An iterator that maps each element to an iterator, and yields the elements of the produced iterators."],["Flatten","is a","struct"],["Flatten","has full name","core::iter::Flatten"],["Flatten","has description","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators."],["Fuse","is a","struct"],["Fuse","has full name","core::iter::Fuse"],["Fuse","has description","An iterator that yields None forever after the underlying iterator yields None once."],["Inspect","is a","struct"],["Inspect","has full name","core::iter::Inspect"],["Inspect","has description","An iterator that calls a function with a reference to each element before yielding it."],["Map","is a","struct"],["Map","has full name","core::iter::Map"],["Map","has description","An iterator that maps the values of iter with f."],["Once","is a","struct"],["Once","has full name","core::iter::Once"],["Once","has description","An iterator that yields an element exactly once."],["Peekable","is a","struct"],["Peekable","has full name","core::iter::Peekable"],["Peekable","has description","An iterator with a peek() that returns an optional reference to the next element."],["Repeat","is a","struct"],["Repeat","has full name","core::iter::Repeat"],["Repeat","has description","An iterator that repeats an element endlessly."],["RepeatWith","is a","struct"],["RepeatWith","has full name","core::iter::RepeatWith"],["RepeatWith","has description","An iterator that repeats elements of type A endlessly by applying the provided closure F: FnMut() -> A."],["Rev","is a","struct"],["Rev","has full name","core::iter::Rev"],["Rev","has description","A double-ended iterator with the direction inverted."],["Scan","is a","struct"],["Scan","has full name","core::iter::Scan"],["Scan","has description","An iterator to maintain state while iterating another iterator."],["Skip","is a","struct"],["Skip","has full name","core::iter::Skip"],["Skip","has description","An iterator that skips over n elements of iter."],["SkipWhile","is a","struct"],["SkipWhile","has full name","core::iter::SkipWhile"],["SkipWhile","has description","An iterator that rejects elements while predicate is true."],["StepBy","is a","struct"],["StepBy","has full name","core::iter::StepBy"],["StepBy","has description","An iterator for stepping iterators by a custom amount."],["Take","is a","struct"],["Take","has full name","core::iter::Take"],["Take","has description","An iterator that only iterates over the first n iterations of iter."],["TakeWhile","is a","struct"],["TakeWhile","has full name","core::iter::TakeWhile"],["TakeWhile","has description","An iterator that only accepts elements while predicate is true."],["Zip","is a","struct"],["Zip","has full name","core::iter::Zip"],["Zip","has description","An iterator that iterates two other iterators simultaneously."],["DoubleEndedIterator","is a","trait"],["DoubleEndedIterator","has full name","core::iter::DoubleEndedIterator"],["DoubleEndedIterator","has description","An iterator able to yield elements from both ends."],["ExactSizeIterator","is a","trait"],["ExactSizeIterator","has full name","core::iter::ExactSizeIterator"],["ExactSizeIterator","has description","An iterator that knows its exact length."],["Extend","is a","trait"],["Extend","has full name","core::iter::Extend"],["Extend","has description","Extend a collection with the contents of an iterator."],["FromIterator","is a","trait"],["FromIterator","has full name","core::iter::FromIterator"],["FromIterator","has description","Conversion from an Iterator."],["FusedIterator","is a","trait"],["FusedIterator","has full name","core::iter::FusedIterator"],["FusedIterator","has description","An iterator that always continues to yield None when exhausted."],["IntoIterator","is a","trait"],["IntoIterator","has full name","core::iter::IntoIterator"],["IntoIterator","has description","Conversion into an Iterator."],["Iterator","is a","trait"],["Iterator","has full name","core::iter::Iterator"],["Iterator","has description","An interface for dealing with iterators."],["Product","is a","trait"],["Product","has full name","core::iter::Product"],["Product","has description","Trait to represent types that can be created by multiplying elements of an iterator."],["Sum","is a","trait"],["Sum","has full name","core::iter::Sum"],["Sum","has description","Trait to represent types that can be created by summing up an iterator."],["Step","is a","trait"],["Step","has full name","core::iter::Step"],["Step","has description","Objects that can be stepped over in both directions."],["TrustedLen","is a","trait"],["TrustedLen","has full name","core::iter::TrustedLen"],["TrustedLen","has description","An iterator that reports an accurate length using size_hint."],["empty","is a","function"],["empty","has full name","core::iter::empty"],["empty","has description","Creates an iterator that yields nothing."],["once","is a","function"],["once","has full name","core::iter::once"],["once","has description","Creates an iterator that yields an element exactly once."],["repeat","is a","function"],["repeat","has full name","core::iter::repeat"],["repeat","has description","Creates a new iterator that endlessly repeats a single element."],["repeat_with","is a","function"],["repeat_with","has full name","core::iter::repeat_with"],["repeat_with","has description","Creates a new iterator that repeats elements of type A endlessly by applying the provided closure, the repeater, F: FnMut() -> A."]],"links":["../alloc/index.html","../any/index.html","../arch/index.html","../array/index.html","../ascii/index.html","../borrow/index.html","../cell/index.html","../char/index.html","../clone/index.html","../cmp/index.html","../convert/index.html","../default/index.html","../f32/index.html","../f64/index.html","../ffi/index.html","../fmt/index.html","../future/index.html","../hash/index.html","../hint/index.html","../i128/index.html","../i16/index.html","../i32/index.html","../i64/index.html","../i8/index.html","../intrinsics/index.html","../isize/index.html","../marker/index.html","../mem/index.html","../num/index.html","../ops/index.html","../option/index.html","../panic/index.html","../panicking/index.html","../pin/index.html","../prelude/index.html","../ptr/index.html","../raw/index.html","../result/index.html","../slice/index.html","../str/index.html","../sync/index.html","../task/index.html","../time/index.html","../u128/index.html","../u16/index.html","../u32/index.html","../u64/index.html","../u8/index.html","../unicode/index.html","../usize/index.html","../macro.assert.html","../macro.assert_eq.html","../macro.assert_ne.html","../macro.cfg.html","../macro.column.html","../macro.compile_error.html","../macro.concat.html","../macro.concat_idents.html","../macro.debug_assert.html","../macro.debug_assert_eq.html","../macro.debug_assert_ne.html","../macro.env.html","../macro.file.html","../macro.format_args.html","../macro.include.html","../macro.include_bytes.html","../macro.include_str.html","../macro.line.html","../macro.module_path.html","../macro.option_env.html","../macro.panic.html","../macro.stringify.html","../macro.try.html","../macro.unimplemented.html","../macro.unreachable.html","../macro.write.html","../macro.writeln.html","struct.Chain.html","struct.Cloned.html","struct.Cycle.html","struct.Empty.html","struct.Enumerate.html","struct.Filter.html","struct.FilterMap.html","struct.FlatMap.html","struct.Flatten.html","struct.Fuse.html","struct.Inspect.html","struct.Map.html","struct.Once.html","struct.Peekable.html","struct.Repeat.html","struct.RepeatWith.html","struct.Rev.html","struct.Scan.html","struct.Skip.html","struct.SkipWhile.html","struct.StepBy.html","struct.Take.html","struct.TakeWhile.html","struct.Zip.html","trait.DoubleEndedIterator.html","trait.ExactSizeIterator.html","trait.Extend.html","trait.FromIterator.html","trait.FusedIterator.html","trait.IntoIterator.html","trait.Iterator.html","trait.Product.html","trait.Sum.html","trait.Step.html","trait.TrustedLen.html","fn.empty.html","fn.once.html","fn.repeat.html","fn.repeat_with.html","../../src/core/iter/mod.rs.html"],"create_time":"2025-03-02T06:18:31.367Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/iter/index.html","id":"28976a57-3181-4d1d-9b79-febd450357ee","model":"deepseek-r1-250120"}