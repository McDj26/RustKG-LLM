{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has description","requires trait","creates","has parameter","has type"],"relation pairs":[["vec","is a","Macro"],["vec","has full name","std::vec"],["vec","stable since","1.0.0"],["vec","has declaration","macro_rules! vec { ( $ elem : expr ; $ n : expr ) => { ... }; ( $ ( $ x : expr ) , * ) => { ... }; ( $ ( $ x : expr , ) * ) => { ... }; }"],["vec","has description","Creates a Vec containing the arguments."],["vec","has description","vec! allows Vecs to be defined with the same syntax as array expressions."],["vec","has description","There are two forms of this macro:"],["vec","has description","Create a Vec containing a given list of elements"],["vec","has description","Create a Vec from a given element and size"],["vec","has description","Note that unlike array expressions this syntax supports all elements which implement Clone and the number of elements doesn't have to be a constant."],["vec","has description","This will use clone to duplicate an expression, so one should be careful using this with types having a nonstandard Clone implementation."],["vec","has description","For example, vec![Rc::new(1); 5] will create a vector of five references to the same boxed integer value, not five references pointing to independently boxed integers."],["vec","requires trait","Clone"],["vec","creates","Vec"],["vec","has parameter","$elem"],["$elem","has type","expr"],["vec","has parameter","$n"],["$n","has type","expr"],["vec","has parameter","$x"],["$x","has type","expr"]],"links":["../src/alloc/macros.rs.html","index.html","../std/vec/struct.Vec.html","../std/clone/trait.Clone.html"],"create_time":"2025-03-01T15:19:58.701Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/macro.vec.html","id":"c1c68629-1ca4-43a4-a9e2-ac90fa2e61f0","model":"deepseek-r1-250120"}