{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","has description","is version of","has associated type","has method","has argument","has type","has return type","implements","aliases"],"relation_pairs":[["FnBox","is a","Trait"],["FnBox","has full name","alloc::boxed::FnBox"],["FnBox","has declaration","pub trait FnBox<A> {\n    type Output;\n    fn call_box(self: Box<Self>, args: A) -> Self::Output;\n}"],["FnBox","has stability","This is a nightly-only experimental API. (fnbox #28796)"],["FnBox","has description","FnBox is a version of the FnOnce intended for use with boxed closure objects. The idea is that where one would normally store a Box<FnOnce()> in a data structure, you should use Box<FnBox()>. The two traits behave essentially the same, except that a FnBox closure can only be called if it is boxed. (Note that FnBox may be deprecated in the future if Box<FnOnce()> closures become directly usable.)"],["FnBox","is version of","FnOnce"],["FnBox","has associated type","Output"],["FnBox","has method","call_box"],["call_box","has argument","self"],["call_box","has argument","args"],["self (call_box)","has type","Box<Self>"],["args (call_box)","has type","A"],["call_box","has return type","Self::Output"],["F","implements","FnBox<A>"],["FnBox<A>::Output","aliases","F::Output"]],"links":["../../src/alloc/boxed.rs.html","../../alloc/boxed/struct.Box.html","../../core/ops/function/trait.FnOnce.html","../index.html","index.html","https://github.com/rust-lang/rust/issues/28796"],"create_time":"2025-03-01T17:36:26.059Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/boxed/trait.FnBox.html","id":"5acc33bb-5e75-421b-b1e6-13555600b669","model":"deepseek-r1-250120"}