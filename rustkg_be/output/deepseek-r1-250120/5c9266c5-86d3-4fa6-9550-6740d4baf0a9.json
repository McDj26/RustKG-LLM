{"relations":["is a","has full name","stable since","is successor of","is predecessor of","requires method","has return type","has argument","has description","has stability","implements","has declaration","has type","has section"],"relation_pairs":[["UnsafeFutureObj","is a","Trait"],["UnsafeFutureObj","has full name","std::future::UnsafeFutureObj"],["UnsafeFutureObj","has declaration","pub unsafe trait UnsafeFutureObj<'a, T>: 'a {\n    fn into_raw(self) -> *mut ();\n    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T>;\n    unsafe fn drop(ptr: *mut ());\n}"],["UnsafeFutureObj","has description","A custom implementation of a future trait object for FutureObj, providing a hand-rolled vtable.\nThis custom representation is typically used only in no_std contexts,\nwhere the default Box-based implementation is not available.\nThe implementor must guarantee that it is safe to call poll repeatedly (in\na non-concurrent fashion) with the result of into_raw until drop is\ncalled."],["into_raw","is a","function"],["into_raw","has return type","*mut ()"],["into_raw","has description","Convert an owned instance into a (conceptually owned) void pointer."],["poll","is a","function"],["poll","has argument","ptr: *mut ()"],["poll","has argument","cx: &mut Context"],["poll","has return type","Poll<T>"],["poll","has description","Poll the future represented by the given void pointer.\nSafety\nThe trait implementor must guarantee that it is safe to repeatedly call\npoll with the result of into_raw until drop is called; such calls\nare not, however, allowed to race with each other or with calls to\ndrop."],["drop","is a","function"],["drop","has argument","ptr: *mut ()"],["drop","has description","Drops the future represented by the given void pointer.\nSafety\nThe trait implementor must guarantee that it is safe to call this\nfunction once per into_raw invocation; that call cannot race with\nother calls to drop or poll."],["UnsafeFutureObj","requires method","into_raw"],["UnsafeFutureObj","requires method","poll"],["UnsafeFutureObj","requires method","drop"],["&mut F","implements","UnsafeFutureObj"],["Box<F>","implements","UnsafeFutureObj"],["PinBox<F>","implements","UnsafeFutureObj"],["PinMut<'a, F>","implements","UnsafeFutureObj"],["Future","is a","Trait"],["FutureObj","is a","struct"],["LocalFutureObj","is a","struct"],["from_generator","is a","function"],["get_task_cx","is a","function"],["poll_in_task_cx","is a","function"],["set_task_cx","is a","function"],["into_raw","has stability","This is a nightly-only experimental API. (futures_api #50547) futures in libcore are unstable"],["poll","has stability","This is a nightly-only experimental API. (futures_api #50547) futures in libcore are unstable"],["drop","has stability","This is a nightly-only experimental API. (futures_api #50547) futures in libcore are unstable"],["UnsafeFutureObj","has section","Required Methods"],["UnsafeFutureObj","has section","Implementors"]],"links":["../index.html","index.html","struct.FutureObj.html","struct.LocalFutureObj.html","trait.Future.html","fn.from_generator.html","fn.get_task_cx.html","fn.poll_in_task_cx.html","fn.set_task_cx.html","../../src/core/future/future_obj.rs.html","../../src/alloc/boxed.rs.html","../../src/alloc/pin.rs.html","../../src/core/pin.rs.html","../../std/task/struct.Context.html","../../std/task/enum.Poll.html","../primitive.pointer.html","../primitive.unit.html","../primitive.reference.html","https://github.com/rust-lang/rust/issues/50547"],"create_time":"2025-03-02T04:46:26.071Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/future/trait.UnsafeFutureObj.html","id":"5c9266c5-86d3-4fa6-9550-6740d4baf0a9","model":"deepseek-r1-250120"}