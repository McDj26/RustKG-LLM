{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","requires method","provides method","has description","has argument","has return type","implements"],"relation_pairs":[["Searcher","is a","Trait"],["Searcher","has full name","std::str::pattern::Searcher"],["Searcher","has declaration","pub unsafe trait Searcher<'a> {\n    fn haystack(&self) -> &'a str;\n    fn next(&mut self) -> SearchStep;\n\n    fn next_match(&mut self) -> Option<(usize, usize)> { ... }\n    fn next_reject(&mut self) -> Option<(usize, usize)> { ... }\n}"],["Searcher","has stability","This is a nightly-only experimental API. (pattern #27721)"],["Searcher","has description","A searcher for a string pattern."],["Searcher","has description","This trait provides methods for searching for non-overlapping matches of a pattern starting from the front (left) of a string."],["Searcher","has description","The trait is marked unsafe because the indices returned by the next() methods are required to lie on valid utf8 boundaries in the haystack."],["Searcher","requires method","haystack"],["Searcher","requires method","next"],["Searcher","provides method","next_match"],["Searcher","provides method","next_reject"],["haystack","is a","function"],["haystack","has return type","&'a str"],["haystack","has argument","self"],["haystack","has stability","This is a nightly-only experimental API. (pattern #27721)"],["haystack","has description","Getter for the underlying string to be searched in"],["next","is a","function"],["next","has return type","SearchStep"],["next","has argument","&mut self"],["next","has stability","This is a nightly-only experimental API. (pattern #27721)"],["next","has description","Performs the next search step starting from the front."],["next_match","is a","function"],["next_match","has return type","Option<(usize, usize)>"],["next_match","has stability","This is a nightly-only experimental API. (pattern #27721)"],["next_match","has description","Find the next Match result. See next()"],["next_reject","is a","function"],["next_reject","has return type","Option<(usize, usize)>"],["next_reject","has stability","This is a nightly-only experimental API. (pattern #27721)"],["next_reject","has description","Find the next Reject result. See next() and next_match()"],["CharSearcher","implements","Searcher"],["CharSliceSearcher","implements","Searcher"],["StrSearcher","implements","Searcher"],["CharPredicateSearcher","implements","Searcher"],["SearchStep","is a","enum"],["SearchStep","has description","Result of calling Searcher::next() or ReverseSearcher::next_back()."]],"links":["struct.CharPredicateSearcher.html","struct.CharSearcher.html","struct.CharSliceSearcher.html","struct.StrSearcher.html","enum.SearchStep.html","trait.DoubleEndedSearcher.html","trait.Pattern.html","trait.ReverseSearcher.html","../../../src/core/str/pattern.rs.html","../../primitive.str.html","../../../std/str/pattern/enum.SearchStep.html","../../../std/option/enum.Option.html"],"create_time":"2025-03-02T05:08:32.764Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/str/pattern/trait.Searcher.html","id":"dd2e3457-4c84-403a-a6b1-e25a4686e0f0","model":"deepseek-r1-250120"}