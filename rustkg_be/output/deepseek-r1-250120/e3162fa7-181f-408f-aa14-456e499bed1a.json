{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has description","has declaration","has stability","expands into","has example","has crate description","requires method","has return type","has argument","implements"],"relation_pairs":[["token_stream","is a","module"],["token_stream","has description","Public implementation details for the `TokenStream` type, such as iterators."],["quote","is a","macro"],["quote","has full name","proc_macro::quote"],["quote","has declaration","macro_rules! quote { () => { ... }; }"],["quote","has stability","This is a nightly-only experimental API. (proc_macro_quote #38356)"],["quote","has description","`quote!(..)` accepts arbitrary tokens and expands into a `TokenStream` describing the input. For example, `quote!(a + b)` will produce a expression, that, when evaluated, constructs the `TokenStream` `[Ident(\"a\"), Punct('+', Alone), Ident(\"b\")]`."],["quote","expands into","TokenStream"],["Diagnostic","is a","struct"],["Diagnostic","has description","A structure representing a diagnostic message and associated children messages."],["Group","is a","struct"],["Group","has description","A delimited token stream."],["Ident","is a","struct"],["Ident","has description","An identifier (`ident`)."],["LexError","is a","struct"],["LexError","has description","Error returned from `TokenStream::from_str`."],["LineColumn","is a","struct"],["LineColumn","has description","A line-column pair representing the start or end of a `Span`."],["Literal","is a","struct"],["Literal","has description","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`). Boolean literals like `true` and `false` do not belong here, they are `Ident`s."],["Punct","is a","struct"],["Punct","has description","An `Punct` is an single punctuation character like `+`, `-` or `#`."],["SourceFile","is a","struct"],["SourceFile","has description","The source file of a given `Span`."],["Span","is a","struct"],["Span","has description","A region of source code, along with macro expansion information."],["TokenStream","is a","struct"],["TokenStream","has description","The main type provided by this crate, representing an abstract stream of tokens, or, more specifically, a sequence of token trees. The type provide interfaces for iterating over those token trees and, conversely, collecting a number of token trees into one stream."],["Delimiter","is a","enum"],["Delimiter","has description","Describes how a sequence of token trees is delimited."],["Level","is a","enum"],["Level","has description","An enum representing a diagnostic level."],["Spacing","is a","enum"],["Spacing","has description","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace."],["TokenTree","is a","enum"],["TokenTree","has description","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`)."],["quote","is a","function"],["quote","has description","Quote a `TokenStream` into a `TokenStream`. This is the actual `quote!()` proc macro."],["quote_span","is a","function"],["quote_span","has description","Quote a `Span` into a `TokenStream`. This is needed to implement a custom quoter."],["alloc","is a","crate"],["alloc","has crate description","The Rust core allocation and collections library"],["core","is a","crate"],["core","has crate description","The Rust Core Library"],["proc_macro","is a","crate"],["proc_macro","has crate description","A support library for macro authors when defining new macros."],["std","is a","crate"],["std","has crate description","The Rust Standard Library"],["test","is a","crate"],["test","has crate description","Support code for rustc's built in unit-test and micro-benchmarking framework."]],"links":["token_stream/index.html","macro.quote.html","struct.Diagnostic.html","struct.Group.html","struct.Ident.html","struct.LexError.html","struct.LineColumn.html","struct.Literal.html","struct.Punct.html","struct.SourceFile.html","struct.Span.html","struct.TokenStream.html","enum.Delimiter.html","enum.Level.html","enum.Spacing.html","enum.TokenTree.html","fn.quote.html","fn.quote_span.html","../alloc/index.html","../core/index.html","../proc_macro/index.html","../std/index.html","../test/index.html","../src/proc_macro/lib.rs.html"],"create_time":"2025-03-02T06:27:57.112Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/proc_macro/macro.quote.html","id":"e3162fa7-181f-408f-aa14-456e499bed1a","model":"deepseek-r1-250120"}