{"relations":["is a","has full name","stable since","has declaration","has description","has method","has return type","has argument","has type","implements","requires method","has stability","has attribute"],"relation_pairs":[["RwLock","is a","Struct"],["RwLock","has full name","std::sync::RwLock"],["RwLock","stable since","1.0.0"],["RwLock","has declaration","pub struct RwLock<T: ?Sized> { /* fields omitted */ }"],["RwLock","has description","A reader-writer lock"],["RwLock","has method","new"],["RwLock","has method","read"],["RwLock","has method","try_read"],["RwLock","has method","write"],["RwLock","has method","try_write"],["RwLock","has method","is_poisoned"],["RwLock","has method","into_inner"],["RwLock","has method","get_mut"],["new","has return type","RwLock<T>"],["new","has argument","t"],["t","has type","T"],["read","has return type","LockResult<RwLockReadGuard<T>>"],["read","has argument","self"],["try_read","has return type","TryLockResult<RwLockReadGuard<T>>"],["try_read","has argument","self"],["write","has return type","LockResult<RwLockWriteGuard<T>>"],["write","has argument","self"],["try_write","has return type","TryLockResult<RwLockWriteGuard<T>>"],["try_write","has argument","self"],["is_poisoned","has return type","bool"],["is_poisoned","stable since","1.2.0"],["into_inner","has return type","LockResult<T>"],["into_inner","stable since","1.6.0"],["get_mut","has return type","LockResult<&mut T>"],["get_mut","stable since","1.6.0"],["RwLock","implements","UnwindSafe"],["RwLock","implements","RefUnwindSafe"],["RwLock","implements","Send"],["RwLock","implements","Sync"],["RwLock","implements","Drop"],["RwLock","implements","Debug"],["RwLock","implements","Default"],["RwLock","implements","From<T>"],["RwLock","has description","This type of lock allows a number of readers or at most one writer at any point in time."],["RwLock","has description","In comparison, a Mutex does not distinguish between readers or writers that acquire the lock, therefore blocking any threads waiting for the lock to become available. An RwLock will allow any number of readers to acquire the lock as long as a writer is not holding the lock."],["RwLock","has description","The priority policy of the lock is dependent on the underlying operating system's implementation."],["RwLock","has description","The type parameter T represents the data that this lock protects. It is required that T satisfies Send to be shared across threads and Sync to allow concurrent access through readers."]],"links":["../../src/std/sync/rwlock.rs.html","struct.Mutex.html","../../std/marker/trait.Sync.html","../../std/marker/trait.Send.html","../../std/ops/trait.Deref.html","../../std/ops/trait.DerefMut.html","../../std/panic/trait.UnwindSafe.html","../../std/panic/trait.RefUnwindSafe.html","../../std/ops/trait.Drop.html","../../std/fmt/trait.Debug.html","../../std/default/trait.Default.html","../../std/convert/trait.From.html","../../std/primitive.u32.html","../../std/primitive.bool.html","../../std/primitive.reference.html","../../std/result/enum.Result.html","fn.std::sync::RwLock::new.html","fn.std::sync::RwLock::read.html","fn.std::sync::RwLock::try_read.html","fn.std::sync::RwLock::write.html","fn.std::sync::RwLock::try_write.html","fn.std::sync::RwLock::is_poisoned.html","fn.std::sync::RwLock::into_inner.html","fn.std::sync::RwLock::get_mut.html"],"create_time":"2025-03-01T17:23:08.245Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/struct.RwLock.html","id":"5374feed-8d2c-4520-b12e-d8cba8c93f58","model":"deepseek-r1-250120"}