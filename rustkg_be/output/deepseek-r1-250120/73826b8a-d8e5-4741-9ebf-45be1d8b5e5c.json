{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has stability","requires method","provides method","has description","has argument","has type","has attribute","has declaration"],"relation pairs":[["Wake","is a","Trait"],["Wake","has full name","alloc::task::Wake"],["Wake","has stability","nightly-only experimental API (futures_api #50547)"],["Wake","has description","A way of waking up a specific task."],["Wake","has declaration","pub trait Wake: Send + Sync { fn wake(arc_self: &Arc<Self>); unsafe fn wake_local(arc_self: &Arc<Self>) { ... } }"],["Wake","requires method","wake"],["Wake","provides method","wake_local"],["wake","is a","function"],["wake","has full name","alloc::task::Wake::wake"],["wake","has argument","arc_self"],["arc_self","has type","&alloc::sync::Arc<Self>"],["wake","has description","Indicates that the associated task is ready to make progress and should be polled. Executors generally maintain a queue of 'ready' tasks; wake should place the associated task onto this queue."],["wake","has stability","nightly-only experimental API (futures_api #50547)"],["wake_local","is a","function"],["wake_local","has full name","alloc::task::Wake::wake_local"],["wake_local","has attribute","unsafe"],["wake_local","has argument","arc_self"],["arc_self","has type","&alloc::sync::Arc<Self>"],["wake_local","has description","Indicates that the associated task is ready to make progress and should be polled. This function is like wake, but can only be called from the thread on which this Wake was created. Executors generally maintain a queue of 'ready' tasks; wake_local should place the associated task onto this queue."],["wake_local","has stability","nightly-only experimental API (futures_api #50547)"],["Context","is a","struct"],["Context","has description","Information about the currently-running task."],["LocalWaker","is a","struct"],["LocalWaker","has description","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run."],["SpawnErrorKind","is a","struct"],["SpawnErrorKind","has description","Provides the reason that an executor was unable to spawn."],["SpawnLocalObjError","is a","struct"],["SpawnLocalObjError","has description","The result of a failed spawn"],["SpawnObjError","is a","struct"],["SpawnObjError","has description","The result of a failed spawn"],["Waker","is a","struct"],["Waker","has description","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run."],["Poll","is a","enum"],["Poll","has description","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead."],["Spawn","is a","trait"],["Spawn","has description","Spawns tasks that poll futures to completion onto its associated task executor."],["UnsafeWake","is a","trait"],["UnsafeWake","has description","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`."],["local_waker","is a","function"],["local_waker","has description","Creates a `LocalWaker` from a local `wake`."],["local_waker_from_nonlocal","is a","function"],["local_waker_from_nonlocal","has description","Creates a `LocalWaker` from a non-local `wake`."]],"links":["../../alloc/index.html","../../src/alloc/task.rs.html","struct.Context.html","struct.LocalWaker.html","struct.SpawnErrorKind.html","struct.SpawnLocalObjError.html","struct.SpawnObjError.html","struct.Waker.html","enum.Poll.html","trait.Spawn.html","trait.UnsafeWake.html","fn.local_waker.html","fn.local_waker_from_nonlocal.html","../../alloc/sync/struct.Arc.html","../index.html","index.html"],"create_time":"2025-03-02T04:39:05.648Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/task/trait.Wake.html","id":"73826b8a-d8e5-4741-9ebf-45be1d8b5e5c","model":"deepseek-r1-250120"}