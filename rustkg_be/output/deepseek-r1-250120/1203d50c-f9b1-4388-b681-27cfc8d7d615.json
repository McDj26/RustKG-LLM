{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","has description","has method","has argument","has return type","implements","has type","has attribute","requires method","has associated type"],"relation_pairs":[["PinMut","is a","Struct"],["PinMut","has full name","alloc::pin::PinMut"],["PinMut","has declaration","pub struct PinMut<'a, T> where T: 'a + 'a + ?Sized { /* fields omitted */ }"],["PinMut","has stability","ðŸ”¬ This is a nightly-only experimental API. (pin #49150)"],["PinMut","has description","A pinned reference."],["PinMut","has description","This type is similar to a mutable reference, except that it pins its value, which prevents it from moving out of the reference, unless it implements Unpin."],["new","is a","method"],["new","has full name","alloc::pin::PinMut::new"],["new","has argument","reference"],["new","has type","&'a mut T"],["new","has return type","PinMut<'a, T>"],["new","has stability","ðŸ”¬ This is a nightly-only experimental API. (pin #49150)"],["get_mut","is a","method"],["get_mut","has full name","alloc::pin::PinMut::get_mut"],["get_mut","has return type","&'a mut T"],["get_mut","has stability","ðŸ”¬ This is a nightly-only experimental API. (pin #49150)"],["new_unchecked","is a","method"],["new_unchecked","has full name","alloc::pin::PinMut::new_unchecked"],["new_unchecked","has attribute","unsafe"],["new_unchecked","has argument","reference"],["new_unchecked","has return type","PinMut<'a, T>"],["reborrow","is a","method"],["reborrow","has full name","alloc::pin::PinMut::reborrow"],["reborrow","has return type","PinMut<'b, T>"],["get_mut_unchecked","is a","method"],["get_mut_unchecked","has attribute","unsafe"],["get_mut_unchecked","has return type","&'a mut T"],["map_unchecked","is a","method"],["map_unchecked","has attribute","unsafe"],["map_unchecked","has argument","f"],["map_unchecked","has type","FnOnce(&mut T) -> &mut U"],["set","is a","method"],["set","has argument","value"],["set","has type","T"],["PinMut","implements","UnsafeFutureObj"],["UnsafeFutureObj::into_raw","has return type","*mut ()"],["UnsafeFutureObj::poll","has attribute","unsafe"],["UnsafeFutureObj::drop","has attribute","unsafe"],["PinMut","implements","Pointer"],["PinMut","implements","Debug"],["Debug::fmt","has argument","f"],["PinMut","implements","CoerceUnsized"],["PinMut","implements","Unpin"],["PinMut","implements","Future"],["Future::Output","has associated type","<F as Future>::Output"],["PinMut","implements","DerefMut"],["DerefMut::deref_mut","has return type","&mut T"],["PinMut","implements","Deref"],["Deref::Target","has associated type","T"],["PinMut","implements","Display"],["Display::fmt","has argument","f"]],"links":["../../src/core/pin.rs.html","../../std/marker/trait.Unpin.html","../../std/pin/index.html","../../core/future/future_obj/trait.UnsafeFutureObj.html","../../alloc/fmt/trait.Pointer.html","../../alloc/fmt/trait.Debug.html","../../core/ops/unsize/trait.CoerceUnsized.html","../../alloc/pin/trait.Unpin.html","../../src/core/future/future.rs.html","../../core/future/future/trait.Future.html","../../core/ops/deref/trait.DerefMut.html","../../core/ops/deref/trait.Deref.html","../../alloc/fmt/trait.Display.html"],"create_time":"2025-03-01T18:02:50.999Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/pin/struct.PinMut.html","id":"1203d50c-f9b1-4388-b681-27cfc8d7d615","model":"deepseek-r1-250120"}