{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has attribute","has calling convention","has argument","has type","has description","equivalent to","has safety note"],"relation pairs":[["std::ptr::copy","is a","Function"],["std::ptr::copy","has full name","std::ptr::copy"],["std::ptr::copy","stable since","1.0.0"],["std::ptr::copy","has attribute","unsafe"],["std::ptr::copy","has calling convention","rust-intrinsic"],["std::ptr::copy","has argument","std::ptr::copy::src"],["std::ptr::copy","has argument","std::ptr::copy::dst"],["std::ptr::copy","has argument","std::ptr::copy::count"],["std::ptr::copy::src","has type","*const T"],["std::ptr::copy::dst","has type","*mut T"],["std::ptr::copy::count","has type","usize"],["std::ptr::copy","has description","Copies count * size_of<T> bytes from src to dst. The source and destination may overlap."],["std::ptr::copy","equivalent to","C's memmove"],["std::ptr::copy","has safety note","Care must be taken with the ownership of src and dst. This method semantically moves the values of src into dst. However it does not drop the contents of dst, or prevent the contents of src from being dropped or used."]],"links":["../../src/core/intrinsics.rs.html","../index.html","index.html"],"create_time":"2025-03-01T17:59:08.964Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/ptr/fn.copy.html","id":"b6bf1106-8afa-4fbf-ac5d-9fac22071552","model":"deepseek-r1-250120"}