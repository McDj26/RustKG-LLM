{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has attribute","has declaration","has description","has argument","has type","has return type","contains","see also","has safety"],"relation pairs":[["from_utf8_unchecked","is a","Function"],["from_utf8_unchecked","has full name","alloc::str::from_utf8_unchecked"],["from_utf8_unchecked","stable since","1.0.0"],["from_utf8_unchecked","has attribute","unsafe"],["from_utf8_unchecked","has declaration","pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str"],["from_utf8_unchecked","has description","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8."],["from_utf8_unchecked","has safety","This function is unsafe because it does not check that the bytes passed to it are valid UTF-8. If this constraint is violated, undefined behavior results, as the rest of Rust assumes that &strs are valid UTF-8."],["from_utf8_unchecked","see also","from_utf8"],["from_utf8_unchecked","has argument","v"],["v","has type","&[u8]"],["from_utf8_unchecked","has return type","&str"],["alloc","contains","str"],["alloc::str","contains","from_utf8_unchecked"],["str","is a","primitive type"]],"links":["../../src/core/str/mod.rs.html","../index.html","index.html","fn.from_utf8.html","../../std/primitive.str.html"],"create_time":"2025-03-01T17:58:16.505Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/str/fn.from_utf8_unchecked.html","id":"440cbd80-9d71-4e07-81cd-e24884c2670e","model":"deepseek-r1-250120"}