{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has attribute","has description"],"relation pairs":[["Sized","is a","Trait"],["Sized","has full name","core::marker::Sized"],["Sized","stable since","1.0.0"],["Sized","has declaration","pub trait Sized { }"],["Sized","has attribute","#[lang = \"sized\"]"],["Sized","has description","Types with a constant size known at compile time.\n\nAll type parameters have an implicit bound of Sized. The special syntax\n?Sized can be used to remove this bound if it's not appropriate.\n\nThe one exception is the implicit Self type of a trait. A trait does not\nhave an implicit Sized bound as this is incompatible with trait objects\nwhere, by definition, the trait needs to work with all possible implementors,\nand thus could be any size.\n\nAlthough Rust will let you bind Sized to a trait, you won't\nbe able to use it to form a trait object later:"]],"links":["../../src/core/marker.rs.html","../index.html","index.html","../../book/first-edition/trait-objects.html"],"create_time":"2025-03-01T15:33:32.068Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/marker/trait.Sized.html","id":"71ead259-5654-47d4-a48f-2e44ea92e3c5","model":"deepseek-r1-250120"}