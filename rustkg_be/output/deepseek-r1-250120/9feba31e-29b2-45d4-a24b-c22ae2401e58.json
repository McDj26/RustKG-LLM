{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has attribute","has argument","has type","has description","related to"],"relation pairs":[["write","is a","Function"],["write","has full name","std::ptr::write"],["write","stable since","1.0.0"],["write","has declaration","pub unsafe fn write<T>(dst: *mut T, src: T)"],["write","has attribute","unsafe"],["write","has argument","dst"],["write","has argument","src"],["write::dst","has type","*mut T"],["write::src","has type","T"],["write","has description","Overwrites a memory location with the given value without reading or dropping the old value."],["write","has description","This operation is marked unsafe because it accepts a raw pointer."],["write","has description","It does not drop the contents of dst. This is safe, but it could leak allocations or resources, so care must be taken not to overwrite an object that should be dropped."],["write","has description","Additionally, it does not drop src. Semantically, src is moved into the location pointed to by dst."],["write","has description","This is appropriate for initializing uninitialized memory, or overwriting memory that has previously been read from."],["write","has description","The pointer must be aligned; use write_unaligned if that is not the case."],["write","related to","write_unaligned"]],"links":["../../src/core/ptr.rs.html","../index.html","index.html"],"create_time":"2025-03-01T18:03:15.540Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/ptr/fn.write.html","id":"9feba31e-29b2-45d4-a24b-c22ae2401e58","model":"deepseek-r1-250120"}