{"relations":["is a","has full name","stable since","has description","has method","has argument","has return type","has type","implements","has related struct","has related enum","has stability"],"relation_pairs":[["BTreeMap","is a","struct"],["BTreeMap","has full name","alloc::collections::btree_map::BTreeMap"],["BTreeMap","stable since","1.0.0"],["BTreeMap","has description","A map based on a B-Tree."],["new","is a","method"],["BTreeMap","has method","new"],["new","has description","Makes a new empty BTreeMap with a reasonable choice for B."],["new","has return type","BTreeMap<K, V>"],["clear","is a","method"],["BTreeMap","has method","clear"],["clear","has description","Clears the map, removing all values."],["get","is a","method"],["BTreeMap","has method","get"],["get","has description","Returns a reference to the value corresponding to the key."],["get","has argument","get::key"],["get::key","has type","&Q"],["get","has return type","Option<&V>"],["get_key_value","is a","method"],["BTreeMap","has method","get_key_value"],["get_key_value","has description","Returns the key-value pair corresponding to the supplied key."],["get_key_value","has stability","This is a nightly-only experimental API.  (map_get_key_value #49347)"],["get_key_value","has argument","get_key_value::k"],["get_key_value::k","has type","&Q"],["get_key_value","has return type","Option<(&K, &V)>"],["contains_key","is a","method"],["BTreeMap","has method","contains_key"],["contains_key","has description","Returns true if the map contains a value for the specified key."],["contains_key","has argument","contains_key::key"],["contains_key::key","has type","&Q"],["contains_key","has return type","bool"],["get_mut","is a","method"],["BTreeMap","has method","get_mut"],["get_mut","has description","Returns a mutable reference to the value corresponding to the key."],["get_mut","has argument","get_mut::key"],["get_mut::key","has type","&Q"],["get_mut","has return type","Option<&mut V>"],["insert","is a","method"],["BTreeMap","has method","insert"],["insert","has description","Inserts a key-value pair into the map."],["insert","has argument","insert::key"],["insert::key","has type","K"],["insert","has argument","insert::value"],["insert::value","has type","V"],["insert","has return type","Option<V>"],["remove","is a","method"],["BTreeMap","has method","remove"],["remove","has description","Removes a key from the map, returning the value at the key if the key was previously in the map."],["remove","has argument","remove::key"],["remove::key","has type","&Q"],["remove","has return type","Option<V>"],["append","is a","method"],["BTreeMap","has method","append"],["append","has description","Moves all elements from other into Self, leaving other empty."],["append","stable since","1.11.0"],["append","has argument","append::other"],["append::other","has type","&mut Self"],["range","is a","method"],["BTreeMap","has method","range"],["range","has description","Constructs a double-ended iterator over a sub-range of elements in the map."],["range","stable since","1.17.0"],["range","has argument","range::range"],["range::range","has type","R"],["range","has return type","Range<K, V>"],["BTreeMap","implements","Drop"],["BTreeMap","implements","Clone"],["BTreeMap","implements","IntoIterator"],["BTreeMap","implements","FromIterator<(K, V)>"],["BTreeMap","implements","Extend<(K, V)>"],["BTreeMap","implements","Extend<(&'a K, &'a V)>"],["BTreeMap","implements","Hash"],["BTreeMap","implements","Default"],["BTreeMap","implements","PartialEq"],["BTreeMap","implements","Eq"],["BTreeMap","implements","PartialOrd"],["BTreeMap","implements","Ord"],["BTreeMap","implements","Debug"],["BTreeMap","implements","Index<&'a Q>"],["IntoIter","is a","struct"],["BTreeMap","has related struct","IntoIter"],["Iter","is a","struct"],["BTreeMap","has related struct","Iter"],["IterMut","is a","struct"],["BTreeMap","has related struct","IterMut"],["Keys","is a","struct"],["BTreeMap","has related struct","Keys"],["OccupiedEntry","is a","struct"],["BTreeMap","has related struct","OccupiedEntry"],["Range","is a","struct"],["BTreeMap","has related struct","Range"],["RangeMut","is a","struct"],["BTreeMap","has related struct","RangeMut"],["VacantEntry","is a","struct"],["BTreeMap","has related struct","VacantEntry"],["Values","is a","struct"],["BTreeMap","has related struct","Values"],["ValuesMut","is a","struct"],["BTreeMap","has related struct","ValuesMut"],["Entry","is a","enum"],["BTreeMap","has related enum","Entry"]],"links":["../../../src/alloc/collections/btree/map.rs.html","struct.BTreeMap.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.Keys.html","struct.OccupiedEntry.html","struct.Range.html","struct.RangeMut.html","struct.VacantEntry.html","struct.Values.html","struct.ValuesMut.html","enum.Entry.html","../../index.html","../index.html","index.html","../../../index.html","../../../settings.html","../../../core/cmp/trait.Ord.html","../../../alloc/borrow/trait.Borrow.html","../../../core/ops/range/trait.RangeBounds.html","../../../std/process/struct.Command.html"],"create_time":"2025-03-02T06:41:40.460Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/collections/btree_map/struct.BTreeMap.html","id":"05659668-8b01-461f-84b7-46de32c0ada1","model":"deepseek-r1-250120"}