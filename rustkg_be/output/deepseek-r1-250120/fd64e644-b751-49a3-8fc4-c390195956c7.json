{"relations":["is a","has full name","stable since","has argument","has type","has return type","has description","creates","returns","requires method","supported on","can be cloned"],"relation_pairs":[["sync_channel","is a","function"],["sync_channel","has full name","std::sync::mpsc::sync_channel"],["sync_channel","stable since","1.0.0"],["sync_channel","has argument","bound"],["bound","has type","usize"],["sync_channel","returns","SyncSender<T>"],["sync_channel","returns","Receiver<T>"],["sync_channel","has description","Creates a new synchronous, bounded channel. All data sent on the SyncSender will become available on the Receiver in the same order as it was sent. Like asynchronous channels, the Receiver will block until a message becomes available. sync_channel differs greatly in the semantics of the sender, however. This channel has an internal buffer on which messages will be queued. bound specifies the buffer size. When the internal buffer becomes full, future sends will block waiting for the buffer to open up. Note that a buffer size of 0 is valid, in which case this becomes 'rendezvous channel' where each send will not return until a recv is paired with it. The SyncSender can be cloned to send to the same channel multiple times, but only one Receiver is supported. Like asynchronous channels, if the Receiver is disconnected while trying to send with the SyncSender, the send method will return a SendError. Similarly, If the SyncSender is disconnected while trying to recv, the recv method will return a RecvError."],["Receiver","is a","struct"],["Receiver","has full name","std::sync::mpsc::Receiver"],["Receiver","has description","The receiving half of Rust's channel type. This half can only be owned by one thread."],["SyncSender","is a","struct"],["SyncSender","has full name","std::sync::mpsc::SyncSender"],["SyncSender","can be cloned","send"],["SendError","is a","struct"],["SendError","has full name","std::sync::mpsc::SendError"],["RecvError","is a","struct"],["RecvError","has full name","std::sync::mpsc::RecvError"],["channel","is a","function"],["channel","has full name","std::sync::mpsc::channel"],["channel","has description","Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the Sender will become available on the Receiver in the same order as it was sent, and no send will block the calling thread. recv will block until a message is available."]],"links":["struct.Handle.html","struct.IntoIter.html","struct.Iter.html","struct.Receiver.html","struct.RecvError.html","struct.Select.html","struct.SendError.html","struct.Sender.html","struct.SyncSender.html","struct.TryIter.html","enum.RecvTimeoutError.html","enum.TryRecvError.html","enum.TrySendError.html","fn.channel.html","fn.sync_channel.html","../../../std/index.html","../../index.html","../index.html","index.html"],"create_time":"2025-03-02T04:52:02.529Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/fn.sync_channel.html","id":"fd64e644-b751-49a3-8fc4-c390195956c7","model":"deepseek-r1-250120"}