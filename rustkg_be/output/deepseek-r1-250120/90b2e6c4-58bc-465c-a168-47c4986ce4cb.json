{"relations":["is a","has full name","stable since","has description","returns","has method"],"relation_pairs":[["cell","is a","Module"],["cell","has full name","std::cell"],["cell","stable since","1.0.0"],["cell","has description","Shareable mutable containers."],["BorrowError","is a","struct"],["BorrowError","has full name","std::cell::BorrowError"],["BorrowError","has description","An error returned by RefCell::try_borrow."],["BorrowMutError","is a","struct"],["BorrowMutError","has full name","std::cell::BorrowMutError"],["BorrowMutError","has description","An error returned by RefCell::try_borrow_mut."],["Cell","is a","struct"],["Cell","has full name","std::cell::Cell"],["Cell","has description","A mutable memory location."],["Ref","is a","struct"],["Ref","has full name","std::cell::Ref"],["Ref","has description","Wraps a borrowed reference to a value in a RefCell box. A wrapper type for an immutably borrowed value from a RefCell<T>."],["RefCell","is a","struct"],["RefCell","has full name","std::cell::RefCell"],["RefCell","has description","A mutable memory location with dynamically checked borrow rules"],["RefMut","is a","struct"],["RefMut","has full name","std::cell::RefMut"],["RefMut","has description","A wrapper type for a mutably borrowed value from a RefCell<T>."],["UnsafeCell","is a","struct"],["UnsafeCell","has full name","std::cell::UnsafeCell"],["UnsafeCell","has description","The core primitive for interior mutability in Rust."],["RefCell","has method","try_borrow"],["RefCell::try_borrow","returns","BorrowError"],["RefCell","has method","try_borrow_mut"],["RefCell::try_borrow_mut","returns","BorrowMutError"]],"links":["../alloc/index.html","../any/index.html","../arch/index.html","../ascii/index.html","../borrow/index.html","../boxed/index.html","../char/index.html","../clone/index.html","../cmp/index.html","../collections/index.html","../convert/index.html","../default/index.html","../env/index.html","../error/index.html","../f32/index.html","../f64/index.html","../ffi/index.html","../fmt/index.html","../fs/index.html","../future/index.html","../hash/index.html","../hint/index.html","../i128/index.html","../i16/index.html","../i32/index.html","../i64/index.html","../i8/index.html","../intrinsics/index.html","../io/index.html","../isize/index.html","../iter/index.html","../marker/index.html","../mem/index.html","../net/index.html","../num/index.html","../ops/index.html","../option/index.html","../os/index.html","../panic/index.html","../path/index.html","../pin/index.html","../prelude/index.html","../process/index.html","../ptr/index.html","../raw/index.html","../rc/index.html","../result/index.html","../slice/index.html","../str/index.html","../string/index.html","../sync/index.html","../task/index.html","../thread/index.html","../time/index.html","../u128/index.html","../u16/index.html","../u32/index.html","../u64/index.html","../u8/index.html","../unit/index.html","../usize/index.html","../vec/index.html","struct.BorrowError.html","struct.BorrowMutError.html","struct.Cell.html","struct.Ref.html","struct.RefCell.html","struct.RefMut.html","struct.UnsafeCell.html","../../std/sync/struct.Mutex.html","../../std/sync/struct.RwLock.html","../../core/sync/atomic/index.html"],"create_time":"2025-03-02T05:15:56.715Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/cell/index.html","id":"90b2e6c4-58bc-465c-a168-47c4986ce4cb","model":"deepseek-r1-250120"}