{"relations":["is a","has full name","stable since","is successor of","is predecessor of","contains","has description","returns","has stability","is part of","has argument","has return type"],"relation_pairs":[["std::sync::mpsc","is a","Module"],["std::sync::mpsc","has full name","std::sync::mpsc"],["std::sync::mpsc","stable since","1.0.0"],["std::sync::mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync::mpsc","is part of","std::sync"],["std::sync::mpsc","contains","Receiver"],["std::sync::mpsc","contains","Sender"],["std::sync::mpsc","contains","SyncSender"],["std::sync::mpsc","contains","channel"],["std::sync::mpsc","contains","sync_channel"],["Receiver","is a","struct"],["Receiver","has full name","std::sync::mpsc::Receiver"],["Receiver","has description","The receiving half of Rust's channel (or sync_channel) type. This half can only be owned by one thread."],["Sender","is a","struct"],["Sender","has full name","std::sync::mpsc::Sender"],["Sender","has description","The sending-half of Rust's asynchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads."],["SyncSender","is a","struct"],["SyncSender","has full name","std::sync::mpsc::SyncSender"],["SyncSender","has description","The sending-half of Rust's synchronous sync_channel type."],["channel","is a","function"],["channel","has full name","std::sync::mpsc::channel"],["channel","returns","Sender"],["channel","returns","Receiver"],["channel","has description","Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the Sender will become available on the Receiver in the same order as it was sent, and no send will block the calling thread (this channel has an \"infinite buffer\", unlike sync_channel, which will block after its buffer limit is reached). recv will block until a message is available."],["sync_channel","is a","function"],["sync_channel","has full name","std::sync::mpsc::sync_channel"],["sync_channel","returns","SyncSender"],["sync_channel","returns","Receiver"],["sync_channel","has description","Creates a new synchronous, bounded channel. All data sent on the SyncSender will become available on the Receiver in the same order as it was sent. Like asynchronous channels, the Receiver will block until a message becomes available. sync_channel differs greatly in the semantics of the sender, however."],["Handle","is a","struct"],["Handle","has full name","std::sync::mpsc::Handle"],["Handle","has stability","Experimental"],["Handle","has description","A handle to a receiver which is currently a member of a Select set of receivers. This handle is used to keep the receiver in the set as well as interact with the underlying receiver."]],"links":["../../../std/index.html","struct.Receiver.html","fn.channel.html","fn.sync_channel.html","../../../src/std/sync/mpsc/mod.rs.html","../struct.Arc.html","../struct.Barrier.html","../struct.Condvar.html","../struct.Mutex.html","../struct.Once.html","../struct.RwLock.html","../enum.TryLockError.html","../constant.ONCE_INIT.html","struct.IntoIter.html","struct.Iter.html","struct.RecvError.html","struct.SendError.html","struct.TryIter.html","enum.RecvTimeoutError.html","enum.TryRecvError.html","enum.TrySendError.html","../../../../std/process/struct.Command.html","../../../primitive.u32.html"],"create_time":"2025-03-02T05:03:53.785Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/index.html","id":"8dbccabf-4e6e-49c3-8627-43a571e15256","model":"deepseek-r1-250120"}