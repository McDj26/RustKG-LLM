{"relations":["is a","has full name","stable since","has declaration","has description","calls","uses","related to","causes"],"relation_pairs":[["panic!","is a","Macro"],["panic!","has full name","std::panic"],["panic!","stable since","1.0.0"],["panic!","has declaration","macro_rules! panic { () => { ... }; ($msg:expr) => { ... }; ($msg:expr,) => { ... }; ($fmt:expr, $($arg:tt)+) => { ... }; }"],["panic!","has description","The entry point for panic of Rust threads."],["panic!","has description","This allows a program to terminate immediately and provide feedback to the caller of the program. panic! should be used when a program reaches an unrecoverable problem."],["panic!","has description","This macro is the perfect way to assert conditions in example code and in tests. panic! is closely tied with the unwrap method of both Option and Result enums."],["Option::unwrap","calls","panic!"],["Result::unwrap","calls","panic!"],["panic!","has description","The multi-argument form of this macro panics with a string and has the format! syntax for building a string."],["panic!","uses","format!"],["panic!","related to","compile_error!"],["panic!","causes","program termination with code 101"],["panic!","has description","See also the macro compile_error!, for raising errors during compilation."]],"links":["../src/std/macros.rs.html","../std/option/enum.Option.html","../std/result/enum.Result.html","../std/macro.format.html","../std/macro.compile_error.html","../book/second-edition/ch09-01-unrecoverable-errors-with-panic.html","index.html"],"create_time":"2025-03-01T15:12:15.228Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/macro.panic.html","id":"c4c6238a-dfa5-4b74-9473-e2bf0387ce98","model":"deepseek-r1-250120"}