{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has attribute","has stability","has description","implements","extends","has declaration"],"relation pairs":[["TrustedLen","is a","Trait"],["TrustedLen","has full name","core::iter::TrustedLen"],["TrustedLen","has attribute","unsafe"],["TrustedLen","has stability","This is a nightly-only experimental API. (#37572)"],["TrustedLen","has description","An iterator that reports an accurate length using size_hint."],["TrustedLen","has description","The iterator reports a size hint where it is either exact (lower bound is equal to upper bound), or the upper bound is None. The upper bound must only be None if the actual iterator length is larger than usize::MAX. In that case, the lower bound must be usize::MAX, resulting in a .size_hint of (usize::MAX, None)."],["TrustedLen","has description","The iterator must produce exactly the number of elements it reported or diverge before reaching the end."],["TrustedLen","has description","This trait must only be implemented when the contract is upheld. Consumers of this trait must inspect .size_hintâ€™s upper bound."],["TrustedLen","extends","Iterator"],["TrustedLen","has declaration","pub unsafe trait TrustedLen: Iterator { }"],["Range<i8>","implements","TrustedLen"],["Range<i16>","implements","TrustedLen"],["Range<i32>","implements","TrustedLen"],["Range<i64>","implements","TrustedLen"],["Range<isize>","implements","TrustedLen"],["Range<u8>","implements","TrustedLen"],["Range<u16>","implements","TrustedLen"],["Range<u32>","implements","TrustedLen"],["Range<u64>","implements","TrustedLen"],["Range<usize>","implements","TrustedLen"],["RangeInclusive<i8>","implements","TrustedLen"],["RangeInclusive<i16>","implements","TrustedLen"],["RangeInclusive<i32>","implements","TrustedLen"],["RangeInclusive<i64>","implements","TrustedLen"],["RangeInclusive<isize>","implements","TrustedLen"],["RangeInclusive<u8>","implements","TrustedLen"],["RangeInclusive<u16>","implements","TrustedLen"],["RangeInclusive<u32>","implements","TrustedLen"],["RangeInclusive<u64>","implements","TrustedLen"],["RangeInclusive<usize>","implements","TrustedLen"],["Bytes<'a>","implements","TrustedLen"],["core::option::Iter<'a, A>","implements","TrustedLen"],["core::option::IterMut<'a, A>","implements","TrustedLen"],["core::result::Iter<'a, A>","implements","TrustedLen"],["core::result::IterMut<'a, A>","implements","TrustedLen"],["Cloned<I>","implements","TrustedLen"],["&'a mut I","implements","TrustedLen"],["Chunks<'a, T>","implements","TrustedLen"],["ChunksMut<'a, T>","implements","TrustedLen"],["ExactChunks<'a, T>","implements","TrustedLen"],["ExactChunksMut<'a, T>","implements","TrustedLen"],["core::slice::Iter<'a, T>","implements","TrustedLen"],["core::slice::IterMut<'a, T>","implements","TrustedLen"],["Windows<'a, T>","implements","TrustedLen"],["core::option::IntoIter<A>","implements","TrustedLen"],["core::result::IntoIter<A>","implements","TrustedLen"],["Chain<A, B>","implements","TrustedLen"],["Zip<A, B>","implements","TrustedLen"],["RepeatWith<F>","implements","TrustedLen"],["Repeat<A>","implements","TrustedLen"],["RangeFrom<A>","implements","TrustedLen"],["Map<I, F>","implements","TrustedLen"],["Enumerate<I>","implements","TrustedLen"],["Rev<I>","implements","TrustedLen"],["Take<I>","implements","TrustedLen"],["Empty<T>","implements","TrustedLen"],["Once<T>","implements","TrustedLen"],["Chain","is a","struct"],["Chain","has description","An iterator that strings two iterators together."],["Cloned","is a","struct"],["Cloned","has description","An iterator that clones the elements of an underlying iterator."],["Cycle","is a","struct"],["Cycle","has description","An iterator that repeats endlessly."],["Empty","is a","struct"],["Empty","has description","An iterator that yields nothing."],["Enumerate","is a","struct"],["Enumerate","has description","An iterator that yields the current count and the element during iteration."],["Filter","is a","struct"],["Filter","has description","An iterator that filters the elements of `iter` with `predicate`."],["FilterMap","is a","struct"],["FilterMap","has description","An iterator that uses `f` to both filter and map elements from `iter`."],["FlatMap","is a","struct"],["FlatMap","has description","An iterator that maps each element to an iterator, and yields the elements of the produced iterators."],["Flatten","is a","struct"],["Flatten","has description","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators."],["Fuse","is a","struct"],["Fuse","has description","An iterator that yields `None` forever after the underlying iterator yields `None` once."],["Inspect","is a","struct"],["Inspect","has description","An iterator that calls a function with a reference to each element before yielding it."],["Map","is a","struct"],["Map","has description","An iterator that maps the values of `iter` with `f`."],["Once","is a","struct"],["Once","has description","An iterator that yields an element exactly once."],["Peekable","is a","struct"],["Peekable","has description","An iterator with a `peek()` that returns an optional reference to the next element."],["Repeat","is a","struct"],["Repeat","has description","An iterator that repeats an element endlessly."],["RepeatWith","is a","struct"],["RepeatWith","has description","An iterator that repeats elements of type `A` endlessly by applying the provided closure `F: FnMut() -> A`."],["Rev","is a","struct"],["Rev","has description","A double-ended iterator with the direction inverted."],["Scan","is a","struct"],["Scan","has description","An iterator to maintain state while iterating another iterator."],["Skip","is a","struct"],["Skip","has description","An iterator that skips over `n` elements of `iter`."],["SkipWhile","is a","struct"],["SkipWhile","has description","An iterator that rejects elements while `predicate` is true."],["StepBy","is a","struct"],["StepBy","has description","An iterator for stepping iterators by a custom amount."],["Take","is a","struct"],["Take","has description","An iterator that only iterates over the first `n` iterations of `iter`."],["TakeWhile","is a","struct"],["TakeWhile","has description","An iterator that only accepts elements while `predicate` is true."],["Zip","is a","struct"],["Zip","has description","An iterator that iterates two other iterators simultaneously."],["DoubleEndedIterator","is a","trait"],["DoubleEndedIterator","has description","An iterator able to yield elements from both ends."],["ExactSizeIterator","is a","trait"],["ExactSizeIterator","has description","An iterator that knows its exact length."],["Extend","is a","trait"],["Extend","has description","Extend a collection with the contents of an iterator."],["FromIterator","is a","trait"],["FromIterator","has description","Conversion from an `Iterator`."],["FusedIterator","is a","trait"],["FusedIterator","has description","An iterator that always continues to yield `None` when exhausted."],["IntoIterator","is a","trait"],["IntoIterator","has description","Conversion into an `Iterator`."],["Iterator","is a","trait"],["Iterator","has description","An interface for dealing with iterators."],["Product","is a","trait"],["Product","has description","Trait to represent types that can be created by multiplying elements of an iterator."],["Step","is a","trait"],["Step","has description","Objects that can be stepped over in both directions."],["Sum","is a","trait"],["Sum","has description","Trait to represent types that can be created by summing up an iterator."],["empty","is a","function"],["empty","has description","Creates an iterator that yields nothing."],["once","is a","function"],["once","has description","Creates an iterator that yields an element exactly once."],["repeat","is a","function"],["repeat","has description","Creates a new iterator that endlessly repeats a single element."],["repeat_with","is a","function"],["repeat_with","has description","Creates a new iterator that repeats elements of type `A` endlessly by applying the provided closure, the repeater, `F: FnMut() -> A`."]],"links":["../../core/index.html","struct.Chain.html","struct.Cloned.html","struct.Cycle.html","struct.Empty.html","struct.Enumerate.html","struct.Filter.html","struct.FilterMap.html","struct.FlatMap.html","struct.Flatten.html","struct.Fuse.html","struct.Inspect.html","struct.Map.html","struct.Once.html","struct.Peekable.html","struct.Repeat.html","struct.RepeatWith.html","struct.Rev.html","struct.Scan.html","struct.Skip.html","struct.SkipWhile.html","struct.StepBy.html","struct.Take.html","struct.TakeWhile.html","struct.Zip.html","trait.DoubleEndedIterator.html","trait.ExactSizeIterator.html","trait.Extend.html","trait.FromIterator.html","trait.FusedIterator.html","trait.IntoIterator.html","trait.Iterator.html","trait.Product.html","trait.Step.html","trait.Sum.html","fn.empty.html","fn.once.html","fn.repeat.html","fn.repeat_with.html","../../src/core/iter/traits.rs.html","../../src/core/iter/range.rs.html","../../src/core/str/mod.rs.html","../../src/core/option.rs.html","../../src/core/result.rs.html","../../src/core/iter/mod.rs.html","../../src/core/slice/mod.rs.html","../../src/core/iter/sources.rs.html","../index.html","index.html"],"create_time":"2025-03-02T04:48:15.490Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/iter/trait.TrustedLen.html","id":"8e799f44-ed5a-48e2-a798-b20a54c7d2fe","model":"deepseek-r1-250120"}