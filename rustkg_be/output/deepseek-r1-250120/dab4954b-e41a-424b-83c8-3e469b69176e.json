{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has description","calls","has return type","uses","see also","exits with code","has example"],"relation_pairs":[["panic!","is a","Macro"],["panic!","has full name","std::panic"],["panic!","stable since","1.0.0"],["panic!","has declaration","macro_rules! panic {\n    () => { ... };\n    ($msg:expr) => { ... };\n    ($msg:expr,) => { ... };\n    ($fmt:expr, $($arg:tt)+) => { ... };\n}"],["panic!","has description","The entry point for panic of Rust threads."],["panic!","has description","This allows a program to to terminate immediately and provide feedback\nto the caller of the program. `panic!` should be used when a program reaches\nan unrecoverable problem."],["panic!","has description","This macro is the perfect way to assert conditions in example code and in\ntests.  `panic!` is closely tied with the `unwrap` method of both `Option`\nand `Result` enums.  Both implementations call `panic!` when they are set\nto None or Err variants."],["panic!","has description","This macro is used to inject panic into a Rust thread, causing the thread to\npanic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\nand the single-argument form of the `panic!` macro will be the value which\nis transmitted."],["panic!","has description","`Result` enum is often a better solution for recovering from errors than\nusing the `panic!` macro.  This macro should be used to avoid proceeding using\nincorrect values, such as from external sources.  Detailed information about\nerror handling is found in the [book]."],["panic!","has description","The multi-argument form of this macro panics with a string and has the\n`format!` syntax for building a string."],["panic!","has description","See also the macro `compile_error!`, for raising errors during compilation."],["Option::unwrap","calls","panic!"],["Result::unwrap","calls","panic!"],["panic!","has return type","Box<Any>"],["panic!","uses","format!"],["panic!","see also","compile_error!"],["panic!","exits with code","101"],["panic!","has example","macro_rules! panic {\n    () => { ... };\n    ($msg:expr) => { ... };\n    ($msg:expr,) => { ... };\n    ($fmt:expr, $($arg:tt)+) => { ... };\n}"]],"links":["../src/std/macros.rs.html","index.html","../std/option/enum.Option.html","../std/result/enum.Result.html","../book/second-edition/ch09-01-unrecoverable-errors-with-panic.html","../std/macro.format.html","../std/macro.compile_error.html"],"create_time":"2025-03-01T15:43:52.554Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/macro.panic.html","id":"dab4954b-e41a-424b-83c8-3e469b69176e","model":"deepseek-r1-250120"}