{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","has method","requires method","has argument","has return type","has description","has safety note","has error condition","experimental since","has attribute"],"relation_pairs":[["Alloc","is a","Trait"],["Alloc","has full name","core::alloc::Alloc"],["Alloc","has declaration","pub unsafe trait Alloc { unsafe fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr>; ... }"],["Alloc","has stability","nightly-only experimental API"],["Alloc","experimental since","#32838"],["Alloc","has description","An implementation of Alloc can allocate, reallocate, and deallocate arbitrary blocks of data described via Layout."],["alloc","is a","function"],["alloc","has full name","core::alloc::Alloc::alloc"],["alloc","requires method","Alloc"],["alloc","has argument","self"],["alloc","has argument","layout"],["self","has type","&mut self"],["layout","has type","Layout"],["alloc","has return type","Result<NonNull<u8>, AllocErr>"],["alloc","has stability","nightly-only experimental API"],["alloc","has safety note","undefined behavior can result if the caller does not ensure layout has non-zero size"],["alloc","has description","Returns a pointer meeting the size and alignment guarantees of layout."],["alloc","has error condition","Returning Err indicates memory exhaustion or invalid layout constraints"],["dealloc","is a","function"],["dealloc","has full name","core::alloc::Alloc::dealloc"],["dealloc","requires method","Alloc"],["dealloc","has argument","self"],["dealloc","has argument","ptr"],["dealloc","has argument","layout"],["ptr","has type","NonNull<u8>"],["layout","has type","Layout"],["dealloc","has stability","nightly-only experimental API"],["dealloc","has safety note","ptr must denote a valid block and layout must fit"],["usable_size","is a","function"],["usable_size","has full name","core::alloc::Alloc::usable_size"],["usable_size","has method","Alloc"],["usable_size","has argument","self"],["usable_size","has argument","layout"],["usable_size","has return type","(usize, usize)"],["usable_size","has stability","nightly-only experimental API"],["usable_size","has description","Returns bounds on the guaranteed usable size of a successful allocation"],["realloc","is a","function"],["realloc","has full name","core::alloc::Alloc::realloc"],["realloc","has method","Alloc"],["realloc","has argument","self"],["realloc","has argument","ptr"],["realloc","has argument","layout"],["realloc","has argument","new_size"],["new_size","has type","usize"],["realloc","has return type","Result<NonNull<u8>, AllocErr>"],["realloc","has stability","nightly-only experimental API"],["Layout","is a","struct"],["Layout","has full name","core::alloc::Layout"],["AllocErr","is a","struct"],["AllocErr","has full name","core::alloc::AllocErr"],["NonNull<u8>","is a","struct"],["NonNull<u8>","has full name","core::ptr::NonNull<u8>"]],"links":["../../src/core/alloc.rs.html","../../core/alloc/struct.Layout.html","../../core/ptr/struct.NonNull.html","../../core/alloc/struct.AllocErr.html","../../core/alloc/struct.Excess.html","../../core/alloc/struct.CannotReallocInPlace.html","../../alloc/alloc/fn.handle_alloc_error.html","../index.html","index.html"],"create_time":"2025-03-01T15:58:09.853Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/alloc/trait.Alloc.html","id":"89027063-c0f2-4a2d-b9b5-7adc0e6d4b2c","model":"deepseek-r1-250120"}