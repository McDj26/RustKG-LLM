{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","requires method","has description","has argument","has type","has return type","implements","has attribute"],"relation_pairs":[["Waker","is a","Struct"],["Waker","has full name","core::task::Waker"],["Waker","has declaration","pub struct Waker { /* fields omitted */ }"],["Waker","has stability","This is a nightly-only experimental API. (futures_api #50547)"],["Waker","has description","A Waker is a handle for waking up a task by notifying its executor that it is ready to be run."],["Waker","has description","This handle contains a trait object pointing to an instance of the UnsafeWake trait, allowing notifications to get routed through it."],["Waker","implements","Unpin"],["Waker","implements","Send"],["Waker","implements","Sync"],["Waker","implements","Clone"],["Waker","implements","Debug"],["Waker","implements","Drop"],["Waker","implements","From<LocalWaker>"],["new","is a","function"],["new","has full name","core::task::Waker::new"],["new","has attribute","unsafe"],["new","has argument","inner"],["inner","has type","NonNull<UnsafeWake>"],["new","has return type","Self"],["new","has stability","This is a nightly-only experimental API. (futures_api #50547)"],["new","has description","Constructs a new Waker directly. Note that most code will not need to call this. Implementers of the UnsafeWake trait will typically provide a wrapper that calls this but you otherwise shouldn't call it directly. If you're working with the standard library then it's recommended to use the Waker::from function instead which works with the safe Arc type and the safe Wake trait."],["wake","is a","function"],["wake","has full name","core::task::Waker::wake"],["wake","has return type","()"],["wake","has stability","This is a nightly-only experimental API. (futures_api #50547)"],["wake","has description","Wake up the task associated with this Waker."],["will_wake","is a","function"],["will_wake","has full name","core::task::Waker::will_wake"],["will_wake","has argument","other"],["other","has type","&Waker"],["will_wake","has return type","bool"],["will_wake","has stability","This is a nightly-only experimental API. (futures_api #50547)"],["will_wake","has description","Returns whether or not this Waker and other awaken the same task. This function works on a best-effort basis, and may return false even when the Wakers would awaken the same task. However, if this function returns true, it is guaranteed that the Wakers will awaken the same task. This function is primarily used for optimization purposes."]],"links":["../../src/core/task/wake.rs.html","../../core/ptr/struct.NonNull.html","../../core/task/trait.UnsafeWake.html","../../core/marker/trait.Unpin.html","../../core/marker/trait.Send.html","../../core/marker/trait.Sync.html","../../core/clone/trait.Clone.html","../../core/fmt/trait.Debug.html","../../core/ops/trait.Drop.html","../../core/convert/trait.From.html","../../core/task/struct.LocalWaker.html","../../src/core/convert.rs.html","../../src/core/borrow.rs.html","../../src/core/any.rs.html"],"create_time":"2025-03-01T17:27:52.802Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/task/struct.Waker.html","id":"53d8acac-01e4-4269-aff5-255efe6672c9","model":"deepseek-r1-250120"}