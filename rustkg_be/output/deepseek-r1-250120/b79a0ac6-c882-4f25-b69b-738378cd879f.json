{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","requires method","has description","has argument","has type","has return type","implements","has associated type"],"relation_pairs":[["Try","is a","Trait"],["Try","has full name","std::ops::Try"],["Try","has declaration","pub trait Try { type Ok; type Error; fn into_result(self) -> Result<Self::Ok, Self::Error>; fn from_error(v: Self::Error) -> Self; fn from_ok(v: Self::Ok) -> Self; }"],["Try","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Try","has description","A trait for customizing the behavior of the ? operator."],["Try","has description","A type implementing Try is one that has a canonical way to view it in terms of a success/failure dichotomy. This trait allows both extracting those success or failure values from an existing instance and creating a new instance from a success or failure value."],["Ok","is a","associated type"],["Try","has associated type","Ok"],["Ok","has description","The type of this value when viewed as successful."],["Error","is a","associated type"],["Try","has associated type","Error"],["Error","has description","The type of this value when viewed as failed."],["Try","requires method","into_result"],["into_result","is a","function"],["into_result","has return type","Result<Self::Ok, Self::Error>"],["into_result","has description","Applies the ? operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function. If an Err(e) result is returned, the value e will be wrapped in the return type of the enclosing scope (which must itself implement Try). Specifically, the value X::from_error(From::from(e)) is returned, where X is the return type of the enclosing function."],["Try","requires method","from_error"],["from_error","is a","function"],["from_error","has argument","v"],["from_error","has type","Self::Error"],["from_error","has return type","Self"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["Try","requires method","from_ok"],["from_ok","is a","function"],["from_ok","has argument","v"],["from_ok","has type","Self::Ok"],["from_ok","has return type","Self"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["Option<T>","implements","Try"],["Option<T>::Ok","has type","T"],["Option<T>::Error","has type","NoneError"],["Result<T, E>","implements","Try"],["Result<T, E>::Ok","has type","T"],["Result<T, E>::Error","has type","E"],["Poll<Option<Result<T, E>>>","implements","Try"],["Poll<Option<Result<T, E>>>::Ok","has type","Poll<Option<T>>"],["Poll<Option<Result<T, E>>>::Error","has type","E"],["Poll<Result<T, E>>","implements","Try"],["Poll<Result<T, E>>::Ok","has type","Poll<T>"],["Poll<Result<T, E>>::Error","has type","E"]],"links":["../../src/core/ops/try.rs.html","../../std/result/enum.Result.html","../../std/option/struct.NoneError.html","../../std/task/enum.Poll.html","../index.html","index.html","../../std/option/enum.Option.html","https://github.com/rust-lang/rust/issues/42327"],"create_time":"2025-03-01T16:21:51.744Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/ops/trait.Try.html","id":"b79a0ac6-c882-4f25-b69b-738378cd879f","model":"deepseek-r1-250120"}