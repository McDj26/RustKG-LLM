{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has description","has method","has return type","has argument","has type","implements","has stability","requires trait"],"relation_pairs":[["HashMap","is a","Struct"],["HashMap","has full name","std::collections::HashMap"],["HashMap","stable since","1.0.0"],["HashMap","has declaration","pub struct HashMap<K, V, S = RandomState> { /* fields omitted */ }"],["HashMap","has description","A hash map implemented with linear probing and Robin Hood bucket stealing."],["HashMap","requires trait","Eq"],["HashMap","requires trait","Hash"],["HashMap","implements","Clone"],["HashMap","implements","PartialEq"],["HashMap","implements","Eq"],["HashMap","implements","Debug"],["HashMap","implements","Default"],["HashMap","implements","FromIterator"],["HashMap","implements","Extend"],["new","is a","method"],["new","has full name","std::collections::HashMap::new"],["new","has return type","HashMap<K, V, RandomState>"],["new","has description","Creates an empty HashMap. The hash map is initially created with a capacity of 0, so it will not allocate until it is first inserted into."],["HashMap","has method","new"],["with_capacity","is a","method"],["with_capacity","has full name","std::collections::HashMap::with_capacity"],["with_capacity","has argument","capacity"],["capacity","has type","usize"],["with_capacity","has return type","HashMap<K, V, RandomState>"],["with_capacity","has description","Creates an empty HashMap with the specified capacity. The hash map will be able to hold at least capacity elements without reallocating. If capacity is 0, the hash map will not allocate."],["HashMap","has method","with_capacity"],["with_hasher","is a","method"],["with_hasher","has full name","std::collections::HashMap::with_hasher"],["with_hasher","has argument","hash_builder"],["hash_builder","has type","S"],["with_hasher","stable since","1.7.0"],["with_hasher","has return type","HashMap<K, V, S>"],["with_hasher","has description","Creates an empty HashMap which will use the given hash builder to hash keys. The created map has the default initial capacity."],["HashMap","has method","with_hasher"],["hasher","is a","method"],["hasher","has full name","std::collections::HashMap::hasher"],["hasher","stable since","1.9.0"],["hasher","has return type","&S"],["hasher","has description","Returns a reference to the map's BuildHasher."],["HashMap","has method","hasher"],["capacity","is a","method"],["capacity","has full name","std::collections::HashMap::capacity"],["capacity","has return type","usize"],["capacity","has description","Returns the number of elements the map can hold without reallocating."],["HashMap","has method","capacity"],["try_reserve","has stability","nightly-only experimental API"],["shrink_to","has stability","nightly-only experimental API"],["Keys","is a","struct"],["Keys","has full name","std::collections::hash_map::Keys"],["Values","is a","struct"],["Values","has full name","std::collections::hash_map::Values"],["Iter","is a","struct"],["Iter","has full name","std::collections::hash_map::Iter"],["RandomState","is a","struct"],["RandomState","has full name","std::collections::hash_map::RandomState"]],"links":["../../src/std/collections/hash/map.rs.html","../index.html","index.html","../../std/collections/struct.HashMap.html","../../std/hash/trait.BuildHasher.html","../../std/primitive.usize.html","../../std/collections/hash_map/struct.RandomState.html","../../std/collections/hash_map/struct.Keys.html","../../std/collections/hash_map/struct.Values.html","../../std/collections/hash_map/struct.Iter.html","../../std/collections/hash_map/enum.Entry.html","https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf","http://codecapsule.com/2013/11/11/robin-hood-hashing/","http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/"],"create_time":"2025-03-01T16:48:59.739Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/collections/struct.HashMap.html","id":"71c2af4e-2f0d-4c58-8483-96bb70754b43","model":"deepseek-r1-250120"}