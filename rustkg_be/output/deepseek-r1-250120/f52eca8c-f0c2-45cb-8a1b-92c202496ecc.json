{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","has description","has method","has argument","has return type","has attribute","implements","is similar to","prevents moving unless implements","has associated type"],"relation_pairs":[["PinBox","is a","Struct"],["PinBox","has full name","alloc::pin::PinBox"],["PinBox","has declaration","pub struct PinBox<T: ?sized> { /* fields omitted */ }"],["PinBox","has stability","This is a nightly-only experimental API. (#49150)"],["PinBox","has description","A pinned, heap allocated reference."],["PinBox","has description","This type is similar to Box, except that it pins its value, which prevents it from moving out of the reference, unless it implements Unpin."],["PinBox","is similar to","Box"],["PinBox","prevents moving unless implements","Unpin"],["new","is a","function"],["new","has full name","alloc::pin::PinBox::new"],["new","has argument","data: T"],["new","has return type","PinBox<T>"],["new","has stability","This is a nightly-only experimental API. (#49150)"],["new","has description","Allocate memory on the heap, move the data into it and pin it."],["as_pin_mut","is a","function"],["as_pin_mut","has full name","alloc::pin::PinBox::as_pin_mut"],["as_pin_mut","has return type","PinMut<'a, T>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (#49150)"],["as_pin_mut","has description","Get a pinned reference to the data in this PinBox."],["from_raw","is a","function"],["from_raw","has attribute","unsafe"],["from_raw","has full name","alloc::pin::PinBox::from_raw"],["from_raw","has argument","raw: *mut T"],["from_raw","has return type","Self"],["from_raw","has stability","This is a nightly-only experimental API. (#49150)"],["from_raw","has description","Constructs a PinBox from a raw pointer."],["into_raw","is a","function"],["into_raw","has full name","alloc::pin::PinBox::into_raw"],["into_raw","has argument","b: PinBox<T>"],["into_raw","has return type","*mut T"],["into_raw","has stability","This is a nightly-only experimental API. (#49150)"],["into_raw","has description","Consumes the PinBox, returning the wrapped raw pointer."],["get_mut","is a","function"],["get_mut","has attribute","unsafe"],["get_mut","has full name","alloc::pin::PinBox::get_mut"],["get_mut","has argument","this: &'a mut PinBox<T>"],["get_mut","has return type","&'a mut T"],["get_mut","has stability","This is a nightly-only experimental API. (#49150)"],["get_mut","has description","Get a mutable reference to the data inside this PinBox."],["unpin","is a","function"],["unpin","has attribute","unsafe"],["unpin","has full name","alloc::pin::PinBox::unpin"],["unpin","has argument","this: PinBox<T>"],["unpin","has return type","Box<T>"],["unpin","has stability","This is a nightly-only experimental API. (#49150)"],["unpin","has description","Convert this PinBox into an unpinned Box."],["PinBox","implements","From<Box<T>>"],["PinBox","implements","Deref"],["PinBox::Deref","has associated type","Target = T"],["PinBox","implements","DerefMut (when T: Unpin)"],["PinBox","implements","Display (when T: Display)"],["PinBox","implements","Debug (when T: Debug)"],["PinBox","implements","Pointer"],["PinBox","implements","Future (when F: Future)"]],"links":["../../src/alloc/pin.rs.html","../boxed/struct.Box.html","../../std/marker/trait.Unpin.html","../../src/alloc/boxed.rs.html"],"create_time":"2025-03-01T18:03:17.142Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/pin/struct.PinBox.html","id":"f52eca8c-f0c2-45cb-8a1b-92c202496ecc","model":"deepseek-r1-250120"}