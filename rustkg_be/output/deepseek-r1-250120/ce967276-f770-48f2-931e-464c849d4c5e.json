{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has return type","has argument","has type","requires trait","implements","has associated type","has description","related to","suggested alternative"],"relation_pairs":[["repeat","is a","Function"],["repeat","has full name","std::iter::repeat"],["repeat","stable since","1.0.0"],["repeat","has declaration","pub fn repeat<T>(elt: T) -> Repeat<T> where T: Clone"],["repeat","has return type","Repeat<T>"],["repeat","has argument","elt"],["elt","has type","T"],["T","requires trait","Clone"],["std::iter::Repeat","is a","struct"],["std::iter::Repeat","has full name","std::iter::Repeat"],["std::iter::Repeat","implements","Iterator"],["Iterator","has associated type","Item"],["Iterator::Item","has type","A"],["A","requires trait","Clone"],["repeat","has description","Creates a new iterator that endlessly repeats a single element. The repeat() function repeats a single value over and over and over and over and over and 🔁. Infinite iterators like repeat() are often used with adapters like take, in order to make them finite. If the element type of the iterator you need does not implement Clone, or if you do not want to keep the repeated element in memory, you can instead use the repeat_with function."],["repeat","related to","take"],["repeat","suggested alternative","repeat_with"]],"links":["../../src/core/iter/sources.rs.html","../../std/iter/struct.Repeat.html","../../std/iter/trait.Iterator.html","fn.repeat_with.html","trait.Iterator.html"],"create_time":"2025-03-01T17:08:46.467Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/iter/fn.repeat.html","id":"ce967276-f770-48f2-931e-464c849d4c5e","model":"deepseek-r1-250120"}