{"relations":["is a","has full name","stable since","contains","has description","has attribute"],"relation_pairs":[["core::ops","is a","Module"],["core::ops","has full name","core::ops"],["core::ops","stable since","1.0.0"],["core::ops","has description","Overloadable operators."],["core","contains","ops"],["Range","is a","struct"],["Range","has description","A (half-open) range bounded inclusively below and exclusively above (start..end)."],["core::ops","contains","Range"],["RangeFrom","is a","struct"],["RangeFrom","has description","A range only bounded inclusively below (start..)."],["core::ops","contains","RangeFrom"],["RangeFull","is a","struct"],["RangeFull","has description","An unbounded range (..)."],["core::ops","contains","RangeFull"],["RangeInclusive","is a","struct"],["RangeInclusive","has description","An range bounded inclusively below and above (start..=end)."],["core::ops","contains","RangeInclusive"],["RangeTo","is a","struct"],["RangeTo","has description","A range only bounded exclusively above (..end)."],["core::ops","contains","RangeTo"],["RangeToInclusive","is a","struct"],["RangeToInclusive","has description","A range only bounded inclusively above (..=end)."],["core::ops","contains","RangeToInclusive"],["Bound","is a","enum"],["Bound","has description","An endpoint of a range of keys."],["core::ops","contains","Bound"],["GeneratorState","is a","enum"],["GeneratorState","has description","The result of a generator resumption."],["GeneratorState","has attribute","Experimental"],["core::ops","contains","GeneratorState"],["Add","is a","trait"],["Add","has description","The addition operator +."],["core::ops","contains","Add"],["AddAssign","is a","trait"],["AddAssign","has description","The addition assignment operator +=."],["core::ops","contains","AddAssign"],["BitAnd","is a","trait"],["BitAnd","has description","The bitwise AND operator &."],["core::ops","contains","BitAnd"],["BitAndAssign","is a","trait"],["BitAndAssign","has description","The bitwise AND assignment operator &=."],["core::ops","contains","BitAndAssign"],["BitOr","is a","trait"],["BitOr","has description","The bitwise OR operator |."],["core::ops","contains","BitOr"],["BitOrAssign","is a","trait"],["BitOrAssign","has description","The bitwise OR assignment operator |=."],["core::ops","contains","BitOrAssign"],["BitXor","is a","trait"],["BitXor","has description","The bitwise XOR operator ^."],["core::ops","contains","BitXor"],["BitXorAssign","is a","trait"],["BitXorAssign","has description","The bitwise XOR assignment operator ^=."],["core::ops","contains","BitXorAssign"],["Deref","is a","trait"],["Deref","has description","Used for immutable dereferencing operations, like *v."],["core::ops","contains","Deref"],["DerefMut","is a","trait"],["DerefMut","has description","Used for mutable dereferencing operations, like in *v = 1;."],["core::ops","contains","DerefMut"],["Div","is a","trait"],["Div","has description","The division operator /."],["core::ops","contains","Div"],["DivAssign","is a","trait"],["DivAssign","has description","The division assignment operator /=."],["core::ops","contains","DivAssign"],["Drop","is a","trait"],["Drop","has description","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'."],["core::ops","contains","Drop"],["Fn","is a","trait"],["Fn","has description","The version of the call operator that takes an immutable receiver."],["core::ops","contains","Fn"],["FnMut","is a","trait"],["FnMut","has description","The version of the call operator that takes a mutable receiver."],["core::ops","contains","FnMut"],["FnOnce","is a","trait"],["FnOnce","has description","The version of the call operator that takes a by-value receiver."],["core::ops","contains","FnOnce"],["Index","is a","trait"],["Index","has description","Used for indexing operations (container[index]) in immutable contexts."],["core::ops","contains","Index"],["IndexMut","is a","trait"],["IndexMut","has description","Used for indexing operations (container[index]) in mutable contexts."],["core::ops","contains","IndexMut"],["Mul","is a","trait"],["Mul","has description","The multiplication operator *."],["core::ops","contains","Mul"],["MulAssign","is a","trait"],["MulAssign","has description","The multiplication assignment operator *=."],["core::ops","contains","MulAssign"],["Neg","is a","trait"],["Neg","has description","The unary negation operator -."],["core::ops","contains","Neg"],["Not","is a","trait"],["Not","has description","The unary logical negation operator !."],["core::ops","contains","Not"],["RangeBounds","is a","trait"],["RangeBounds","has description","RangeBounds is implemented by Rust's built-in range types, produced by range syntax like .., a.., ..b or c..d."],["core::ops","contains","RangeBounds"],["Rem","is a","trait"],["Rem","has description","The remainder operator %."],["core::ops","contains","Rem"],["RemAssign","is a","trait"],["RemAssign","has description","The remainder assignment operator %=."],["core::ops","contains","RemAssign"],["Shl","is a","trait"],["Shl","has description","The left shift operator <<. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for _ << _, setting the result type for integer operations to the type of the left-hand-side operand."],["core::ops","contains","Shl"],["ShlAssign","is a","trait"],["ShlAssign","has description","The left shift assignment operator <<=."],["core::ops","contains","ShlAssign"],["Shr","is a","trait"],["Shr","has description","The right shift operator >>. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for _ >> _, setting the result type for integer operations to the type of the left-hand-side operand."],["core::ops","contains","Shr"],["ShrAssign","is a","trait"],["ShrAssign","has description","The right shift assignment operator >>=."],["core::ops","contains","ShrAssign"],["Sub","is a","trait"],["Sub","has description","The subtraction operator -."],["core::ops","contains","Sub"],["SubAssign","is a","trait"],["SubAssign","has description","The subtraction assignment operator -=."],["core::ops","contains","SubAssign"],["CoerceUnsized","is a","trait"],["CoerceUnsized","has attribute","Experimental"],["core::ops","contains","CoerceUnsized"],["Generator","is a","trait"],["Generator","has attribute","Experimental"],["core::ops","contains","Generator"],["Try","is a","trait"],["Try","has attribute","Experimental"],["core::ops","contains","Try"]],"links":["struct.Range.html","struct.RangeFrom.html","struct.RangeFull.html","struct.RangeInclusive.html","struct.RangeTo.html","struct.RangeToInclusive.html","enum.Bound.html","enum.GeneratorState.html","trait.Add.html","trait.AddAssign.html","trait.BitAnd.html","trait.BitAndAssign.html","trait.BitOr.html","trait.BitOrAssign.html","trait.BitXor.html","trait.BitXorAssign.html","trait.Deref.html","trait.DerefMut.html","trait.Div.html","trait.DivAssign.html","trait.Drop.html","trait.Fn.html","trait.FnMut.html","trait.FnOnce.html","trait.Index.html","trait.IndexMut.html","trait.Mul.html","trait.MulAssign.html","trait.Neg.html","trait.Not.html","trait.RangeBounds.html","trait.Rem.html","trait.RemAssign.html","trait.Shl.html","trait.ShlAssign.html","trait.Shr.html","trait.ShrAssign.html","trait.Sub.html","trait.SubAssign.html","trait.CoerceUnsized.html","trait.Generator.html","trait.Try.html","../../src/core/ops/mod.rs.html","../index.html","../alloc/index.html","../any/index.html","../arch/index.html","../array/index.html","../ascii/index.html","../borrow/index.html","../cell/index.html","../char/index.html","../clone/index.html","../cmp/index.html","../convert/index.html","../default/index.html","../f32/index.html","../f64/index.html","../ffi/index.html","../fmt/index.html","../future/index.html","../hash/index.html","../hint/index.html","../i128/index.html","../i16/index.html","../i32/index.html","../i64/index.html","../i8/index.html","../intrinsics/index.html","../isize/index.html","../iter/index.html","../marker/index.html","../mem/index.html","../num/index.html","../option/index.html","../panic/index.html","../panicking/index.html","../pin/index.html","../prelude/index.html","../ptr/index.html","../raw/index.html","../result/index.html","../slice/index.html","../str/index.html","../sync/index.html","../task/index.html","../time/index.html","../u128/index.html","../u16/index.html","../u32/index.html","../u64/index.html","../u8/index.html","../unicode/index.html","../usize/index.html"],"create_time":"2025-03-02T06:32:02.128Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/ops/index.html","id":"ab60bf12-8532-490b-9c46-2ffa12d58f52","model":"deepseek-r1-250120"}