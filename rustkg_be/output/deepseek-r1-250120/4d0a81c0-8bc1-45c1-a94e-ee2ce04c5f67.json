{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has description","has attribute"],"relation_pairs":[["char","is a","Module"],["char","has full name","std::char"],["char","stable since","1.2.0"],["char","has description","A character type."],["char","has description","The char type represents a single character. More specifically, since 'character' isn't a well-defined concept in Unicode, char is a 'Unicode scalar value', which is similar to, but not the same as, a 'Unicode code point'."],["char","has description","This module exists for technical reasons, the primary documentation for char is directly on the char primitive type itself."],["char","has description","This module is the home of the iterator implementations for the iterators implemented on char, as well as some useful constants and conversion functions that convert various types to char."],["DecodeUtf16","is a","struct"],["DecodeUtf16","has full name","std::char::DecodeUtf16"],["DecodeUtf16","has description","An iterator that decodes UTF-16 encoded code points from an iterator of u16s."],["DecodeUtf16Error","is a","struct"],["DecodeUtf16Error","has full name","std::char::DecodeUtf16Error"],["DecodeUtf16Error","has description","An error that can be returned when decoding UTF-16 code points."],["EscapeDebug","is a","struct"],["EscapeDebug","has full name","std::char::EscapeDebug"],["EscapeDebug","has description","An iterator that yields the literal escape code of a char."],["EscapeDefault","is a","struct"],["EscapeDefault","has full name","std::char::EscapeDefault"],["EscapeDefault","has description","An iterator that yields the literal escape code of a char."],["EscapeUnicode","is a","struct"],["EscapeUnicode","has full name","std::char::EscapeUnicode"],["EscapeUnicode","has description","Returns an iterator that yields the hexadecimal Unicode escape of a character, as chars."],["ParseCharError","is a","struct"],["ParseCharError","has full name","std::char::ParseCharError"],["ParseCharError","has description","An error which can be returned when parsing a char."],["ToLowercase","is a","struct"],["ToLowercase","has full name","std::char::ToLowercase"],["ToLowercase","has description","Returns an iterator that yields the lowercase equivalent of a char."],["ToUppercase","is a","struct"],["ToUppercase","has full name","std::char::ToUppercase"],["ToUppercase","has description","Returns an iterator that yields the uppercase equivalent of a char."],["CharTryFromError","is a","struct"],["CharTryFromError","has full name","std::char::CharTryFromError"],["CharTryFromError","has description","The error type returned when a conversion from u32 to char fails."],["CharTryFromError","has attribute","Experimental"],["UnicodeVersion","is a","struct"],["UnicodeVersion","has full name","std::char::UnicodeVersion"],["UnicodeVersion","has description","Represents a Unicode Version."],["UnicodeVersion","has attribute","Experimental"],["MAX","is a","constant"],["MAX","has full name","std::char::MAX"],["MAX","has description","The highest valid code point a char can have."],["REPLACEMENT_CHARACTER","is a","constant"],["REPLACEMENT_CHARACTER","has full name","std::char::REPLACEMENT_CHARACTER"],["REPLACEMENT_CHARACTER","has description","U+FFFD REPLACEMENT CHARACTER (ï¿½) is used in Unicode to represent a decoding error."],["UNICODE_VERSION","is a","constant"],["UNICODE_VERSION","has full name","std::char::UNICODE_VERSION"],["UNICODE_VERSION","has description","The version of Unicode that the Unicode parts of char and str methods are based on."],["UNICODE_VERSION","has attribute","Experimental"],["decode_utf16","is a","function"],["decode_utf16","has full name","std::char::decode_utf16"],["decode_utf16","has description","Create an iterator over the UTF-16 encoded code points in iter, returning unpaired surrogates as Errs."],["from_digit","is a","function"],["from_digit","has full name","std::char::from_digit"],["from_digit","has description","Converts a digit in the given radix to a char."],["from_u32_unchecked","is a","function"],["from_u32_unchecked","has full name","std::char::from_u32_unchecked"],["from_u32_unchecked","has description","Converts a u32 to a char, ignoring validity."],["from_u32_unchecked","has attribute","unsafe"],["from_u32","is a","function"],["from_u32","has full name","std::char::from_u32"],["from_u32","has description","Converts a u32 to a char."]],"links":["../../src/core/lib.rs.html","struct.DecodeUtf16.html","struct.DecodeUtf16Error.html","struct.EscapeDebug.html","struct.EscapeDefault.html","struct.EscapeUnicode.html","struct.ParseCharError.html","struct.ToLowercase.html","struct.ToUppercase.html","struct.CharTryFromError.html","struct.UnicodeVersion.html","constant.MAX.html","constant.REPLACEMENT_CHARACTER.html","constant.UNICODE_VERSION.html","fn.decode_utf16.html","fn.from_digit.html","fn.from_u32_unchecked.html","fn.from_u32.html","../../std/primitive.char.html","http://www.unicode.org/glossary/","http://www.unicode.org/"],"create_time":"2025-03-01T15:41:16.030Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/char/index.html","id":"4d0a81c0-8bc1-45c1-a94e-ee2ce04c5f67","model":"deepseek-r1-250120"}