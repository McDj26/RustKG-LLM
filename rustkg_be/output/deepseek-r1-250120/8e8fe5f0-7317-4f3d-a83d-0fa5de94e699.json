{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has attribute","has lang item","has argument","has type","has generic parameter","has description"],"relation_pairs":[["drop_in_place","is a","Function"],["drop_in_place","has full name","std::ptr::drop_in_place"],["drop_in_place","stable since","1.8.0"],["drop_in_place","has attribute","unsafe"],["drop_in_place","has lang item","drop_in_place"],["drop_in_place","has argument","to_drop"],["to_drop","has type","*mut T"],["drop_in_place","has generic parameter","T"],["drop_in_place","has description","Executes the destructor (if any) of the pointed-to value.\n\nThis has two use cases:\n\n* It is required to use drop_in_place to drop unsized types like trait objects, because they can't be read out onto the stack and dropped normally.\n\n* It is friendlier to the optimizer to do this over ptr::read when dropping manually allocated memory (e.g. when writing Box/Rc/Vec), as the compiler doesn't need to prove that it's sound to elide the copy.\n\n# Safety\n\nThis has all the same safety problems as ptr::read with respect to invalid pointers, types, and double drops."]],"links":["../index.html","index.html","../../src/core/ptr.rs.html"],"create_time":"2025-03-01T18:00:13.685Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/ptr/fn.drop_in_place.html","id":"8e8fe5f0-7317-4f3d-a83d-0fa5de94e699","model":"deepseek-r1-250120"}