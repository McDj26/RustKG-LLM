{"relations":["is a","has full name","stable since","is successor of","is predecessor of","implements","has argument","has type","has return type","has description","has declaration"],"relation_pairs":[["repeat_with","is a","Function"],["repeat_with","has full name","std::iter::repeat_with"],["repeat_with","stable since","1.28.0"],["RepeatWith<F>","implements","Iterator"],["repeat_with","has argument","repeater"],["repeater","has type","F"],["F","implements","FnMut() -> A"],["repeat_with","has return type","RepeatWith<F>"],["repeat_with","has description","Creates a new iterator that repeats elements of type A endlessly by applying the provided closure, the repeater, F: FnMut() -> A."],["repeat_with","has description","The repeat_with() function calls the repeater over and over and over and over and over and üîÅ."],["repeat_with","has description","Infinite iterators like repeat_with() are often used with adapters like take, in order to make them finite."],["repeat_with","has description","If the element type of the iterator you need implements Clone, and it is OK to keep the source element in memory, you should instead use the repeat function."],["repeat_with","has description","An iterator produced by repeat_with() is not a DoubleEndedIterator. If you need repeat_with() to return a DoubleEndedIterator, please open a GitHub issue explaining your use case."],["repeat_with","has declaration","pub fn repeat_with<A, F>(repeater: F) -> RepeatWith<F> where F: FnMut() -> A"]],"links":["../../src/core/iter/sources.rs.html","../../std/iter/struct.RepeatWith.html","../../std/iter/trait.Iterator.html","../../std/ops/trait.FnMut.html","fn.repeat.html","../index.html","index.html"],"create_time":"2025-03-01T17:08:51.388Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/iter/fn.repeat_with.html","id":"23d1682d-c979-4ee3-9816-456448dbe8a7","model":"deepseek-r1-250120"}