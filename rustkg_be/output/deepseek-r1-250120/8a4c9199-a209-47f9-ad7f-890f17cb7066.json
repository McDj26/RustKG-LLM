{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has argument","has return type","has description","contains","has type","has platform specific behavior","has example","has declaration"],"relation_pairs":[["exit","is a","Function"],["exit","has full name","std::process::exit"],["exit","stable since","1.0.0"],["exit","has declaration","pub fn exit(code: i32) -> !"],["exit","has argument","exit::code"],["exit::code","has type","i32"],["exit","has return type","!"],["std::process","contains","exit"],["exit","has description","Terminates the current process with the specified exit code."],["exit","has description","This function will never return and will immediately terminate the current process. The exit code is passed through to the underlying OS and will be available for consumption by another process."],["exit","has description","Note that because this function never returns, and that it terminates the process, no destructors on the current stack or any other thread's stack will be run. If a clean shutdown is needed it is recommended to only call this function at a known point where there are no more destructors left to run."],["exit","has platform specific behavior","Unix: On Unix-like platforms, it is unlikely that all 32 bits of exit will be visible to a parent process inspecting the exit code. On most Unix-like platforms, only the eight least-significant bits are considered."],["exit","has example","Due to platform-specific behavior, the exit code for this example will be 0 on Linux, but 256 on Windows."]],"links":["../index.html","index.html","../../src/std/process.rs.html"],"create_time":"2025-03-01T16:41:08.194Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/process/fn.exit.html","id":"8a4c9199-a209-47f9-ad7f-890f17cb7066","model":"deepseek-r1-250120"}