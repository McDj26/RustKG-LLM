{"relations":["is a","has full name","stable since","has attribute","requires method","provides method","has argument","has type","has return type","has description","has safety note","has example","has stability"],"relation_pairs":[["GlobalAlloc","is a","Trait"],["GlobalAlloc","has full name","core::alloc::GlobalAlloc"],["GlobalAlloc","stable since","1.28.0"],["GlobalAlloc","has attribute","unsafe"],["GlobalAlloc","has description","A memory allocator that can be registered as the standard libraryâ€™s default though the `#[global_allocator]` attributes."],["GlobalAlloc","requires method","alloc"],["GlobalAlloc","requires method","dealloc"],["GlobalAlloc","provides method","alloc_zeroed"],["GlobalAlloc","provides method","realloc"],["alloc","is a","function"],["alloc","has full name","core::alloc::GlobalAlloc::alloc"],["alloc","has attribute","unsafe"],["alloc","has argument","self"],["alloc","has argument","layout"],["alloc::layout","has type","Layout"],["alloc","has return type","*mut u8"],["alloc","has description","Allocate memory as described by the given layout. Returns a pointer to newly-allocated memory, or null to indicate allocation failure."],["alloc","has safety note","This function is unsafe because undefined behavior can result if the caller does not ensure that layout has non-zero size."],["dealloc","is a","function"],["dealloc","has full name","core::alloc::GlobalAlloc::dealloc"],["dealloc","has attribute","unsafe"],["dealloc","has argument","ptr"],["dealloc","has argument","layout"],["dealloc::ptr","has type","*mut u8"],["dealloc::layout","has type","Layout"],["dealloc","has description","Deallocate the block of memory at the given ptr pointer with the given layout."],["dealloc","has safety note","ptr must denote a block of memory currently allocated via this allocator, and layout must match."],["alloc_zeroed","is a","function"],["alloc_zeroed","has full name","core::alloc::GlobalAlloc::alloc_zeroed"],["alloc_zeroed","has attribute","unsafe"],["alloc_zeroed","has argument","layout"],["alloc_zeroed::layout","has type","Layout"],["alloc_zeroed","has return type","*mut u8"],["alloc_zeroed","has description","Behaves like alloc, but also ensures that the contents are set to zero before being returned."],["realloc","is a","function"],["realloc","has full name","core::alloc::GlobalAlloc::realloc"],["realloc","has attribute","unsafe"],["realloc","has argument","ptr"],["realloc","has argument","layout"],["realloc","has argument","new_size"],["realloc::ptr","has type","*mut u8"],["realloc::layout","has type","Layout"],["realloc::new_size","has type","usize"],["realloc","has return type","*mut u8"],["realloc","has description","Shrink or grow a block of memory to the given new_size. The block is described by the given ptr and layout."],["Layout","is a","struct"],["Layout","has full name","core::alloc::Layout"]],"links":["../../src/core/alloc.rs.html","../../core/alloc/struct.Layout.html","../../alloc/alloc/fn.handle_alloc_error.html","../index.html","index.html"],"create_time":"2025-03-01T11:12:03.821Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/alloc/trait.GlobalAlloc.html","id":"662be523-a53c-48e5-815f-37d832c94585","model":"deepseek-r1-250120"}