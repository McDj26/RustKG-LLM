{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has attribute","has description","requires method","has argument","has type","has return type","provides method"],"relation pairs":[["GlobalAlloc","is a","Trait"],["GlobalAlloc","has full name","alloc::alloc::GlobalAlloc"],["GlobalAlloc","stable since","1.28.0"],["GlobalAlloc","has declaration","pub unsafe trait GlobalAlloc { unsafe fn alloc(&self, layout: Layout) -> *mut u8; unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout); unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 { ... } unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 { ... } }"],["GlobalAlloc","has attribute","unsafe"],["GlobalAlloc","has description","A memory allocator that can be registered as the standard library’s default though the #[global_allocator] attributes."],["alloc","is a","function"],["alloc","has full name","alloc::alloc::GlobalAlloc::alloc"],["GlobalAlloc","requires method","alloc"],["alloc","has argument","self"],["alloc","has argument","layout"],["alloc::layout","has type","Layout"],["alloc","has return type","*mut u8"],["alloc","has description","Allocate memory as described by the given layout. Returns a pointer to newly-allocated memory, or null to indicate allocation failure."],["alloc","has attribute","unsafe"],["dealloc","is a","function"],["dealloc","has full name","alloc::alloc::GlobalAlloc::dealloc"],["GlobalAlloc","requires method","dealloc"],["dealloc","has argument","self"],["dealloc","has argument","ptr"],["dealloc::ptr","has type","*mut u8"],["dealloc","has argument","layout"],["dealloc::layout","has type","Layout"],["dealloc","has description","Deallocate the block of memory at the given ptr pointer with the given layout."],["dealloc","has attribute","unsafe"],["alloc_zeroed","is a","function"],["alloc_zeroed","has full name","alloc::alloc::GlobalAlloc::alloc_zeroed"],["GlobalAlloc","provides method","alloc_zeroed"],["alloc_zeroed","has argument","self"],["alloc_zeroed","has argument","layout"],["alloc_zeroed::layout","has type","Layout"],["alloc_zeroed","has return type","*mut u8"],["alloc_zeroed","has description","Behaves like alloc，但确保内容在返回前清零"],["alloc_zeroed","has attribute","unsafe"],["realloc","is a","function"],["realloc","has full name","alloc::alloc::GlobalAlloc::realloc"],["GlobalAlloc","provides method","realloc"],["realloc","has argument","self"],["realloc","has argument","ptr"],["realloc::ptr","has type","*mut u8"],["realloc","has argument","layout"],["realloc::layout","has type","Layout"],["realloc","has argument","new_size"],["realloc::new_size","has type","usize"],["realloc","has return type","*mut u8"],["realloc","has description","Shink or grow a block of memory to the given new_size. The block is described by the given ptr pointer and layout."],["realloc","has attribute","unsafe"]],"links":["../../src/core/alloc.rs.html","../../alloc/alloc/struct.Layout.html","../../alloc/alloc/fn.handle_alloc_error.html","../index.html","index.html"],"create_time":"2025-03-01T16:51:39.524Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/alloc/trait.GlobalAlloc.html","id":"dea50707-5c94-458c-a883-755d7a952f3c","model":"deepseek-r1-250120"}