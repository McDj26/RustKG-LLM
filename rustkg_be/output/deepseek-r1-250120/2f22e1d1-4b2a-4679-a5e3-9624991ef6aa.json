{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has attribute","has description"],"relation_pairs":[["ptr","is a","Module"],["ptr","has full name","std::ptr"],["ptr","stable since","1.0.0"],["ptr","has description","Raw, unsafe pointers, *const T, and *mut T."],["NonNull","is a","struct"],["NonNull","has full name","std::ptr::NonNull"],["NonNull","has description","*mut T but non-zero and covariant."],["std::ptr::copy","has attribute","unsafe"],["copy","is a","function"],["copy","has full name","std::ptr::copy"],["copy","has description","Copies count * size_of<T> bytes from src to dst. The source and destination may overlap."],["std::ptr::copy_nonoverlapping","has attribute","unsafe"],["copy_nonoverlapping","is a","function"],["copy_nonoverlapping","has full name","std::ptr::copy_nonoverlapping"],["copy_nonoverlapping","has description","Copies count * size_of<T> bytes from src to dst. The source and destination may not overlap."],["std::ptr::drop_in_place","has attribute","unsafe"],["drop_in_place","is a","function"],["drop_in_place","has full name","std::ptr::drop_in_place"],["drop_in_place","has description","Executes the destructor (if any) of the pointed-to value."],["eq","is a","function"],["eq","has full name","std::ptr::eq"],["eq","has description","Compare raw pointers for equality."],["null","is a","function"],["null","has full name","std::ptr::null"],["null","has description","Creates a null raw pointer."],["null_mut","is a","function"],["null_mut","has full name","std::ptr::null_mut"],["null_mut","has description","Creates a null mutable raw pointer."],["std::ptr::read","has attribute","unsafe"],["read","is a","function"],["read","has full name","std::ptr::read"],["read","has description","Reads the value from src without moving it. This leaves the memory in src unchanged."],["std::ptr::read_unaligned","has attribute","unsafe"],["read_unaligned","is a","function"],["read_unaligned","has full name","std::ptr::read_unaligned"],["read_unaligned","has description","Reads the value from src without moving it. This leaves the memory in src unchanged."],["std::ptr::read_volatile","has attribute","unsafe"],["read_volatile","is a","function"],["read_volatile","has full name","std::ptr::read_volatile"],["read_volatile","has description","Performs a volatile read of the value from src without moving it. This leaves the memory in src unchanged."],["std::ptr::replace","has attribute","unsafe"],["replace","is a","function"],["replace","has full name","std::ptr::replace"],["replace","has description","Moves src into the pointed dest, returning the previous dest value."],["std::ptr::swap","has attribute","unsafe"],["swap","is a","function"],["swap","has full name","std::ptr::swap"],["swap","has description","Swaps the values at two mutable locations of the same type, without deinitializing either."],["std::ptr::swap_nonoverlapping","has attribute","unsafe"],["swap_nonoverlapping","is a","function"],["swap_nonoverlapping","has full name","std::ptr::swap_nonoverlapping"],["swap_nonoverlapping","has description","Swaps a sequence of values at two mutable locations of the same type."],["std::ptr::write","has attribute","unsafe"],["write","is a","function"],["write","has full name","std::ptr::write"],["write","has description","Overwrites a memory location with the given value without reading or dropping the old value."],["std::ptr::write_bytes","has attribute","unsafe"],["write_bytes","is a","function"],["write_bytes","has full name","std::ptr::write_bytes"],["write_bytes","has description","Invokes memset on the specified pointer, setting count * size_of::<T>() bytes of memory starting at dst to val."],["std::ptr::write_unaligned","has attribute","unsafe"],["write_unaligned","is a","function"],["write_unaligned","has full name","std::ptr::write_unaligned"],["write_unaligned","has description","Overwrites a memory location with the given value without reading or dropping the old value."],["std::ptr::write_volatile","has attribute","unsafe"],["write_volatile","is a","function"],["write_volatile","has full name","std::ptr::write_volatile"],["write_volatile","has description","Performs a volatile write of a memory location with the given value without reading or dropping the old value."]],"links":["../../src/core/lib.rs.html","struct.NonNull.html","fn.copy.html","fn.copy_nonoverlapping.html","fn.drop_in_place.html","fn.eq.html","fn.null.html","fn.null_mut.html","fn.read.html","fn.read_unaligned.html","fn.read_volatile.html","fn.replace.html","fn.swap.html","fn.swap_nonoverlapping.html","fn.write.html","fn.write_bytes.html","fn.write_unaligned.html","fn.write_volatile.html","../../std/primitive.pointer.html","../index.html","../../index.html"],"create_time":"2025-03-01T17:19:57.156Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/ptr/index.html","id":"2f22e1d1-4b2a-4679-a5e3-9624991ef6aa","model":"deepseek-r1-250120"}