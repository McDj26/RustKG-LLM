{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has description","has argument","has return type","has stability","implements","has method","requires method","has type","requires","has associated type"],"relation pairs":[["Layout","is a","Struct"],["Layout","has full name","std::alloc::Layout"],["Layout","stable since","1.28.0"],["Layout","has declaration","pub struct Layout { /* fields omitted */ }"],["Layout","has description","Layout of a block of memory. An instance of `Layout` describes a particular layout of memory. You build a `Layout` up as an input to give to an allocator. All layouts have an associated non-negative size and a power-of-two alignment."],["from_size_align","is a","function"],["from_size_align","has full name","std::alloc::Layout::from_size_align"],["from_size_align","has argument","size: usize"],["from_size_align","has argument","align: usize"],["from_size_align","has return type","Result<Layout, LayoutErr>"],["from_size_align","has description","Constructs a `Layout` from a given `size` and `align`, or returns `LayoutErr` if conditions are not met."],["from_size_align_unchecked","is a","function"],["from_size_align_unchecked","has full name","std::alloc::Layout::from_size_align_unchecked"],["from_size_align_unchecked","has argument","size: usize"],["from_size_align_unchecked","has argument","align: usize"],["from_size_align_unchecked","has return type","Layout"],["from_size_align_unchecked","has description","Creates a layout bypassing all checks (unsafe)."],["size","is a","method"],["size","has full name","std::alloc::Layout::size"],["size","has return type","usize"],["size","has description","The minimum size in bytes for a memory block of this layout."],["align","is a","method"],["align","has full name","std::alloc::Layout::align"],["align","has return type","usize"],["align","has description","The minimum byte alignment for a memory block of this layout."],["align_to","has stability","ðŸ”¬ This is a nightly-only experimental API. (allocator_api #32838)"],["padding_needed_for","has stability","ðŸ”¬ This is a nightly-only experimental API. (allocator_api #32838)"],["repeat","has stability","ðŸ”¬ This is a nightly-only experimental API. (allocator_api #32838)"],["extend","has stability","ðŸ”¬ This is a nightly-only experimental API. (allocator_api #32838)"],["repeat_packed","has stability","ðŸ”¬ This is a nightly-only experimental API. (allocator_api #32838)"],["extend_packed","has stability","ðŸ”¬ This is a nightly-only experimental API. (allocator_api #32838)"],["array","has stability","ðŸ”¬ This is a nightly-only experimental API. (allocator_api #32838)"],["Layout","implements","Clone"],["Layout","implements","Debug"],["Layout","implements","Eq"],["Layout","implements","PartialEq"],["Layout","implements","Copy"]],"links":["../../src/core/alloc.rs.html","../primitive.usize.html","../primitive.reference.html","../primitive.tuple.html","../../std/result/enum.Result.html","../../std/alloc/struct.LayoutErr.html"],"create_time":"2025-03-01T11:02:35.254Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/alloc/struct.Layout.html","id":"75153ba1-40d7-472b-9439-0549a8034603","model":"deepseek-r1-250120"}