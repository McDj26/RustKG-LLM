{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","has field","has type","has description","implements","requires method","has argument","has return type","has trait bound","has associated type","has method"],"relation pairs":[["RangeToInclusive","is a","Struct"],["RangeToInclusive","has full name","core::ops::RangeToInclusive"],["RangeToInclusive","stable since","1.26.0"],["RangeToInclusive","has declaration","pub struct RangeToInclusive<Idx> { pub end: Idx, }"],["RangeToInclusive","has description","A range only bounded inclusively above (..=end). It cannot serve as an Iterator because it doesn't have a starting point."],["RangeToInclusive","has field","end"],["end","has type","Idx"],["end","has description","The upper bound of the range (inclusive)"],["RangeToInclusive","implements","Copy"],["RangeToInclusive","implements","Clone"],["RangeToInclusive","implements","PartialEq"],["RangeToInclusive","implements","Eq"],["RangeToInclusive","implements","Hash"],["RangeToInclusive","implements","Debug"],["RangeToInclusive","implements","RangeBounds<T>"],["RangeToInclusive","implements","SliceIndex<[T]>"],["contains","is a","method"],["contains","has stability","This is a nightly-only experimental API. (range_contains #32311)"],["contains","has description","Returns true if item is contained in the range."],["contains","has argument","item"],["item","has type","&U"],["contains","has trait bound","Idx: PartialOrd<U>, U: PartialOrd<Idx>"],["RangeToInclusive","has method","contains"],["clone","is a","method"],["clone","has return type","RangeToInclusive<Idx>"],["clone_from","is a","method"],["PartialEq","requires method","eq"],["PartialEq","requires method","ne"],["Hash","requires method","hash"],["Debug","requires method","fmt"],["RangeBounds<T>","requires method","start_bound"],["RangeBounds<T>","requires method","end_bound"],["SliceIndex<[T]>","has associated type","Output"],["Output","has type","[T]"]],"links":["../../src/core/ops/range.rs.html","../iter/trait.IntoIterator.html","../iter/trait.Iterator.html","../slice/trait.SliceIndex.html","../../core/cmp/trait.PartialOrd.html","../../core/marker/trait.Sized.html","../../core/marker/trait.Copy.html","../../core/clone/trait.Clone.html","../../core/cmp/trait.PartialEq.html","../../core/cmp/trait.Eq.html","../../core/hash/trait.Hash.html","../../core/fmt/trait.Debug.html","../../core/ops/trait.RangeBounds.html","../../core/slice/trait.SliceIndex.html","../../core/ops/trait.Index.html","../../core/ops/trait.IndexMut.html","../../core/convert/trait.Into.html","../../core/convert/trait.From.html","../../core/convert/trait.TryInto.html","../../core/convert/trait.TryFrom.html","../../core/borrow/trait.Borrow.html","../../core/borrow/trait.BorrowMut.html","../../core/any/trait.Any.html"],"create_time":"2025-03-02T03:26:04.206Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/ops/range/struct.RangeToInclusive.html","id":"8750016b-a148-4fd3-97d0-d1fba496892e","model":"deepseek-r1-250120"}