{"relations":["is a","has full name","stable since","has declaration","has description","has method","has return type","has argument","has type","implements","has attribute","requires method","has stability","experimental since"],"relation_pairs":[["RefCell","is a","Struct"],["RefCell","has full name","core::cell::RefCell"],["RefCell","stable since","1.0.0"],["RefCell","has declaration","pub struct RefCell<T: ?Sized> { /* fields omitted */ }"],["RefCell","has description","A mutable memory location with dynamically checked borrow rules"],["new","is a","function"],["RefCell","has method","new"],["new","has return type","RefCell<T>"],["new","has description","Creates a new RefCell containing value"],["into_inner","is a","function"],["RefCell","has method","into_inner"],["into_inner","has return type","T"],["into_inner","has description","Consumes the RefCell, returning the wrapped value"],["replace","is a","function"],["RefCell","has method","replace"],["replace","has argument","t"],["t","has type","T"],["replace","has return type","T"],["replace","stable since","1.24.0"],["replace","has description","Replaces the wrapped value with a new one, returning the old value"],["replace_with","is a","function"],["RefCell","has method","replace_with"],["replace_with","has attribute","unstable"],["replace_with","experimental since","refcell_replace_swap #43570"],["replace_with","has description","Replaces the wrapped value with a new one computed from f"],["swap","is a","function"],["RefCell","has method","swap"],["swap","stable since","1.24.0"],["swap","has description","Swaps the wrapped value of self with the wrapped value of other"],["borrow","is a","function"],["RefCell","has method","borrow"],["borrow","has return type","Ref<T>"],["borrow","has description","Immutably borrows the wrapped value"],["try_borrow","is a","function"],["RefCell","has method","try_borrow"],["try_borrow","stable since","1.13.0"],["try_borrow","has return type","Result<Ref<T>, BorrowError>"],["borrow_mut","is a","function"],["RefCell","has method","borrow_mut"],["borrow_mut","has return type","RefMut<T>"],["try_borrow_mut","is a","function"],["RefCell","has method","try_borrow_mut"],["try_borrow_mut","stable since","1.13.0"],["try_borrow_mut","has return type","Result<RefMut<T>, BorrowMutError>"],["as_ptr","is a","function"],["RefCell","has method","as_ptr"],["as_ptr","stable since","1.12.0"],["as_ptr","has return type","*mut T"],["get_mut","is a","function"],["RefCell","has method","get_mut"],["get_mut","stable since","1.11.0"],["get_mut","has return type","&mut T"],["RefCell","implements","Send"],["RefCell","implements","Sync"],["RefCell","implements","Clone"],["RefCell","implements","Default"],["RefCell","implements","PartialEq"],["RefCell","implements","Eq"],["RefCell","implements","PartialOrd"],["RefCell","implements","Ord"],["RefCell","implements","From<T>"],["RefCell","implements","Debug"]],"links":["../../src/core/cell.rs.html","../../core/ops/trait.FnOnce.html","../../core/marker/trait.Sized.html","../../core/clone/trait.Clone.html","../../core/default/trait.Default.html","../../core/cmp/trait.PartialEq.html","../../core/cmp/trait.Eq.html","../../core/cmp/trait.PartialOrd.html","../../core/cmp/trait.Ord.html","../../core/convert/trait.From.html","../../core/fmt/trait.Debug.html","../index.html","index.html"],"create_time":"2025-03-01T17:21:52.941Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/cell/struct.RefCell.html","id":"5875d770-6f23-4c4f-aca9-b03cfd883d25","model":"deepseek-r1-250120"}