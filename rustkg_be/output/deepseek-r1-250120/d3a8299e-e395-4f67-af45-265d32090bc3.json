{"create_time":"2025-03-01T17:25:37.315Z","id":"d3a8299e-e395-4f67-af45-265d32090bc3","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/cell/struct.UnsafeCell.html","result":"\n\n```json\n{\n  \"relations\": [\n    \"is a\",\n    \"has full name\",\n    \"stable since\",\n    \"is successor of\",\n    \"is predecessor of\",\n    \"has attribute\",\n    \"has description\",\n    \"uses\",\n    \"has method\",\n    \"has argument\",\n    \"has type\",\n    \"has return type\",\n    \"implements\",\n    \"does not implement\",\n    \"has stability\"\n  ],\n  \"relation_pairs\": [\n    [\"UnsafeCell\", \"is a\", \"Struct\"],\n    [\"UnsafeCell\", \"has full name\", \"core::cell::UnsafeCell\"],\n    [\"UnsafeCell\", \"stable since\", \"1.0.0\"],\n    [\"UnsafeCell\", \"has attribute\", \"lang = unsafe_cell\"],\n    [\"UnsafeCell\", \"has attribute\", \"repr(transparent)\"],\n    [\"UnsafeCell\", \"has description\", \"The core primitive for interior mutability in Rust.\"],\n    [\"Cell<T>\", \"uses\", \"UnsafeCell\"],\n    [\"RefCell<T>\", \"uses\", \"UnsafeCell\"],\n    [\"UnsafeCell\", \"has method\", \"new\"],\n    [\"new\", \"has argument\", \"value\"],\n    [\"value\", \"has type\", \"T\"],\n    [\"new\", \"has return type\", \"UnsafeCell<T>\"],\n    [\"new\", \"has description\", \"Constructs a new instance of UnsafeCell which will wrap the specified value. All access to the inner value through methods is unsafe.\"],\n    [\"UnsafeCell\", \"has method\", \"into_inner\"],\n    [\"into_inner\", \"has return type\", \"T\"],\n    [\"into_inner\", \"has description\", \"Unwraps the value.\"],\n    [\"UnsafeCell\", \"has method\", \"get\"],\n    [\"get\", \"has return type\", \"*mut T\"],\n    [\"get\", \"has description\", \"Gets a mutable pointer to the wrapped value. This can be cast to a pointer of any kind. Ensure that the access is unique (no active references, mutable or not) when casting to &mut T, and ensure that there are no mutations or mutable aliases going on when casting to &T\"],\n    [\"UnsafeCell<T>\", \"implements\", \"Default\"],\n    [\"impl<T: Default> Default for UnsafeCell<T>\", \"stable since\", \"1.10.0\"],\n    [\"UnsafeCell<T>\", \"implements\", \"From<T>\"],\n    [\"impl<T> From<T> for UnsafeCell<T>\", \"stable since\", \"1.12.0\"],\n    [\"UnsafeCell<T>\", \"does not implement\", \"Sync\"],\n    [\"UnsafeCell<T>\", \"implements\", \"CoerceUnsized<UnsafeCell<U>>\"],\n    [\"UnsafeCell<T>\", \"implements\", \"Debug\"],\n    [\"UnsafeCell<T>\", \"implements\", \"Send\"],\n    [\"UnsafeCell\", \"has stability\", \"This is supported on Windows only.\"]\n  ],\n  \"links\": [\n    \"../../src/core/cell.rs.html#1447-1449\",\n    \"../index.html\",\n    \"index.html\",\n    \"../../core/marker/trait.Sized.html\",\n    \"../../core/convert/trait.From.html\",\n    \"../../core/ops/trait.CoerceUnsized.html\",\n    \"../../core/fmt/trait.Debug.html\",\n    \"../../core/marker/trait.Sync.html\",\n    \"../../core/default/trait.Default.html\",\n    \"../../core/any/trait.Any.html\",\n    \"../../core/borrow/trait.Borrow.html\",\n    \"../../core/borrow/trait.BorrowMut.html\",\n    \"../../core/convert/trait.Into.html\",\n    \"../../core/convert/trait.TryInto.html\",\n    \"../../core/convert/trait.TryFrom.html\"\n  ]\n}\n```","model":"deepseek-r1-250120"}