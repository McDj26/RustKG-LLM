{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has attribute","has description","implements","requires method","has argument","has return type","has type","has stability","has associated type"],"relation_pairs":[["Filter","is a","Struct"],["Filter","has full name","std::iter::Filter"],["Filter","stable since","1.0.0"],["Filter","has declaration","pub struct Filter<I, P> { /* fields omitted */ }"],["Filter","has attribute","must_use"],["must_use","has description","iterator adaptors are lazy and do nothing unless consumed"],["Filter","has description","An iterator that filters the elements of iter with predicate."],["Filter","implements","Iterator"],["Filter::Item","is a","associated type"],["Filter::Item","has type","<I as Iterator>::Item"],["next","is a","function"],["Filter","has method","next"],["next","has argument","self"],["self","has type","&mut Self"],["next","has return type","Option<<I as Iterator>::Item>"],["next","has description","Advances the iterator and returns the next value."],["size_hint","is a","function"],["Filter","has method","size_hint"],["size_hint","has argument","self"],["self","has type","&Self"],["size_hint","has return type","(usize, Option<usize>)"],["size_hint","has description","Returns the bounds on the remaining length of the iterator."],["count","is a","function"],["Filter","has method","count"],["count","has return type","usize"],["count","has description","Consumes the iterator, counting the number of iterations and returning it."],["try_fold","is a","function"],["Filter","has method","try_fold"],["try_fold","has return type","R"],["try_fold","has description","An iterator method that applies a function as long as it returns successfully, producing a single, final value."],["fold","is a","function"],["Filter","has method","fold"],["fold","has return type","Acc"],["fold","has description","An iterator method that applies a function, producing a single, final value."],["last","is a","function"],["Filter","has method","last"],["last","has return type","Option<Self::Item>"],["last","has description","Consumes the iterator, returning the last element."],["nth","is a","function"],["Filter","has method","nth"],["nth","has argument","n"],["n","has type","usize"],["nth","has return type","Option<Self::Item>"],["nth","has description","Returns the nth element of the iterator."],["step_by","is a","function"],["Filter","has method","step_by"],["step_by","has argument","step"],["step","has type","usize"],["step_by","has return type","StepBy<Self>"],["step_by","has description","Creates an iterator starting at the same point, but stepping by the given amount at each iteration."]],"links":["../../src/core/iter/mod.rs.html","trait.Iterator.html","struct.Filter.html","../../std/iter/trait.Iterator.html","../../../primitive.u32.html","../../std/iter/struct.StepBy.html","../../std/iter/struct.Chain.html","../../std/iter/struct.Zip.html","../../std/iter/struct.Map.html","../../std/iter/struct.FilterMap.html","../../std/iter/struct.Enumerate.html","../../std/iter/struct.Peekable.html","../../std/iter/struct.SkipWhile.html","../../std/iter/struct.TakeWhile.html","../../std/iter/struct.Skip.html","../../std/iter/struct.Take.html","../../std/iter/struct.Scan.html","../../std/iter/struct.FlatMap.html","../../std/iter/struct.Flatten.html","../../std/iter/struct.Fuse.html","../../std/iter/struct.Inspect.html","../../std/iter/struct.Rev.html","../../std/iter/struct.Cloned.html","../../std/iter/struct.Cycle.html"],"create_time":"2025-03-01T16:22:59.322Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/iter/struct.Filter.html","id":"6ab7d78f-d645-499a-b672-845748cd1b1d","model":"deepseek-r1-250120"}