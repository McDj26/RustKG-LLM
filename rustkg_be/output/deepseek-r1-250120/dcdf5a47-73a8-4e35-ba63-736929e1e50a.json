{"relations":["is a","has full name","stable since","has declaration","has description","requires trait","uses method","has parameter","creates"],"relation pairs":[["vec!","is a","Macro"],["vec!","has full name","alloc::vec"],["vec!","stable since","1.0.0"],["vec!","has declaration","macro_rules! vec { ($elem:expr; $n:expr) => { ... }; ($($x:expr),*) => { ... }; ($($x:expr,)*) => { ... }; }"],["vec!","has description","Creates a Vec containing the arguments."],["vec!","has description","vec! allows Vecs to be defined with the same syntax as array expressions."],["vec!","has description","Note that unlike array expressions this syntax supports all elements which implement Clone and the number of elements doesn't have to be a constant."],["vec!","has description","This will use clone to duplicate an expression, so one should be careful using this with types having a nonstandard Clone implementation."],["vec!","requires trait","Clone"],["vec!","uses method","clone"],["vec!","creates","Vec"],["vec!","has parameter","$elem"],["vec!","has parameter","$n"],["vec!","has parameter","$x"]],"links":["../src/alloc/macros.rs.html","../std/vec/struct.Vec.html","../std/clone/trait.Clone.html","index.html"],"create_time":"2025-03-01T17:23:10.687Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/macro.vec.html","id":"dcdf5a47-73a8-4e35-ba63-736929e1e50a","model":"deepseek-r1-250120"}