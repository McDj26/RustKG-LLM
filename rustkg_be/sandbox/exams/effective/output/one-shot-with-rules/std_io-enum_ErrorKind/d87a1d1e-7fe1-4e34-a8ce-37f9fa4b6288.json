{"create_time":"2025-04-03T19:47:36.560Z","id":"d87a1d1e-7fe1-4e34-a8ce-37f9fa4b6288","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.20-x86_64-pc-windows-msvc/share/doc/rust/html/std/io/enum.ErrorKind.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_io-enum_ErrorKind\\merged_0bf67c34-5256-4816-9c36-38efb054be5a.json","relations":["belongs to module","has argument","has description","has full name","has return type","has variant","implements","is a","stable since"],"delete_triples":[{"triples":[["std::io::ErrorKind","has description","A list specifying general categories of I/O error."],["ErrorKind::InvalidData","has description","Data not valid for the operation were encountered. Unlike InvalidInput, this typically means that the operation parameters were valid, however the error was caused by malformed input data."],["ErrorKind::WriteZero","has description","An error returned when an operation could not be completed because a call to write returned Ok(0)."],["ErrorKind::UnexpectedEof","has description","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely."]],"startIndex":15766,"endIndex":56077},{"triples":[["ErrorKind","implements","Copy"],["std::io::ErrorKind","implements","Copy"]],"startIndex":17120,"endIndex":21289}],"add_triples":[{"triples":[["std::io::ErrorKind","has description","A list specifying general categories of I/O error. This list is intended to grow over time and it is not recommended to exhaustively match against it."],["ErrorKind::InvalidData","has description","Data not valid for the operation were encountered. Unlike InvalidInput, this typically means that the operation parameters were valid, however the error was caused by malformed input data. For example, a function that reads a file into a string will error with InvalidData if the file's contents are not valid UTF-8."],["ErrorKind::WriteZero","has description","An error returned when an operation could not be completed because a call to write returned Ok(0). This typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written."],["ErrorKind::UnexpectedEof","has description","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely. This typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read."],["std::io::ErrorKind","implements","Hash"],["std::io::ErrorKind","implements","PartialOrd"]],"startIndex":15766,"endIndex":56077},{"triples":[["std::io::ErrorKind::partial_cmp","is a","method"],["std::io::ErrorKind::partial_cmp","has argument","self"],["std::io::ErrorKind::partial_cmp","has argument","__arg_0"],["std::io::ErrorKind::partial_cmp","has return type","Option<Ordering>"],["std::io::ErrorKind::partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["std::io::ErrorKind::lt","is a","method"],["std::io::ErrorKind::lt","has argument","self"],["std::io::ErrorKind::lt","has argument","other"],["std::io::ErrorKind::lt","has return type","bool"],["std::io::ErrorKind::lt","has description","This method tests less than (for self and other) and is used by the < operator."],["std::io::ErrorKind::le","is a","method"],["std::io::ErrorKind::le","has argument","self"],["std::io::ErrorKind::le","has argument","other"],["std::io::ErrorKind::le","has return type","bool"],["std::io::ErrorKind::le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["std::io::ErrorKind::gt","is a","method"],["std::io::ErrorKind::gt","has argument","self"],["std::io::ErrorKind::gt","has argument","other"],["std::io::ErrorKind::gt","has return type","bool"],["std::io::ErrorKind::gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["std::io::ErrorKind::ge","is a","method"],["std::io::ErrorKind::ge","has argument","self"],["std::io::ErrorKind::ge","has argument","other"],["std::io::ErrorKind::ge","has return type","bool"],["std::io::ErrorKind::ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."]],"startIndex":17120,"endIndex":21289}],"metrics":{"escapeCount":0,"costTime":503925,"totalUsage":{"prompt_tokens":22324,"completion_tokens":15948,"cached_tokens":0,"reasoning_tokens":14445},"chunkLength":2,"chunksInfo":[{"chunkIndex":0,"strLength":40311,"costTime":251338},{"chunkIndex":1,"strLength":4169,"costTime":252587}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["std::io::ErrorKind","updates description","A list specifying general categories of I/O error. This list is intended to grow over time and it is not recommended to exhaustively match against it."],["ErrorKind::InvalidData","updates description","Data not valid for the operation were encountered. Unlike InvalidInput, this typically means that the operation parameters were valid, however the error was caused by malformed input data. For example, a function that reads a file into a string will error with InvalidData if the file's contents are not valid UTF-8."],["ErrorKind::WriteZero","updates description","An error returned when an operation could not be completed because a call to write returned Ok(0). This typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written."],["ErrorKind::UnexpectedEof","updates description","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely. This typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read."],["ErrorKind","removes feature","Copy"],["std::io::ErrorKind","removes feature","Copy"],["std::io::ErrorKind","adds feature","Hash"],["std::io::ErrorKind","adds feature","PartialOrd"],["std::io::ErrorKind","adds method","partial_cmp"],["std::io::ErrorKind","adds method","lt"],["std::io::ErrorKind","adds method","le"],["std::io::ErrorKind","adds method","gt"],["std::io::ErrorKind","adds method","ge"]]}