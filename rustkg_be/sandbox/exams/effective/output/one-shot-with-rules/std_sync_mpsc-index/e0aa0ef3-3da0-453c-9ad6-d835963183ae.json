{"create_time":"2025-04-04T13:43:25.510Z","id":"e0aa0ef3-3da0-453c-9ad6-d835963183ae","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_sync_mpsc-index\\merged_8292345c-37c1-421c-87e5-a8a5f27df5a6.json","relations":["associated with","contains","has attribute","has description","has full name","has method","has source code","has stability","is a","stability","stable since"],"delete_triples":[{"triples":[["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#1-1626"],["Handle","stability","Unstable"],["Select","stability","Unstable"]],"startIndex":21900,"endIndex":61981},{"triples":[["sync_channel","has description","Creates a new synchronous, bounded channel."],["channel","has description","Creates a new asynchronous channel, returning the sender/receiver halves."],["Sender","has description","The sending-half of Rust's asynchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads."],["Receiver","has description","The receiving-half of Rust's channel type. This half can only be owned by one thread"]],"startIndex":23452,"endIndex":26342}],"add_triples":[{"triples":[["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#1-1669"],["Handle","stability","Experimental"],["Select","stability","Experimental"]],"startIndex":21900,"endIndex":61981},{"triples":[["sync_channel","has description","Creates a new synchronous, bounded channel. All data sent on the SyncSender will become available on the Receiver in the same order as it was sent. Like asynchronous channels, the Receiver will block until a message becomes available. sync_channel differs greatly in the semantics of the sender, however."],["channel","has description","Creates a new asynchronous channel (returning the sender/receiver halves). All data sent will be available in the same order."],["Sender","has description","The sending-half of Rust's asynchronous channel type (using the channel). This half can only be owned by one thread, but it can be cloned to send to other threads."],["Receiver","has description","The receiving half of Rust's channel (or sync_channel) type. This half can only be owned by one thread. recv will block until a message is available while there is at least one Sender alive (including clones)."]],"startIndex":23452,"endIndex":26342}],"metrics":{"escapeCount":0,"costTime":357031,"totalUsage":{"prompt_tokens":22642,"completion_tokens":9240,"cached_tokens":0,"reasoning_tokens":8583},"chunkLength":2,"chunksInfo":[{"chunkIndex":0,"strLength":40081,"costTime":194395},{"chunkIndex":1,"strLength":2890,"costTime":162636}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["std::sync::mpsc","updates source code","src/std/sync/mpsc/mod.rs.html#1-1669"],["Handle","stability changed to","Experimental"],["Select","stability changed to","Experimental"],["sync_channel","updates description","Creates a new synchronous, bounded channel. All data sent on the SyncSender will become available on the Receiver in the same order as it was sent. Like asynchronous channels, the Receiver will block until a message becomes available. sync_channel differs greatly in the semantics of the sender, however."],["channel","updates description","Creates a new asynchronous channel (returning the sender/receiver halves). All data sent will be available in the same order."],["Sender","updates description","The sending-half of Rust's asynchronous channel type (using the channel). This half can only be owned by one thread, but it can be cloned to send to other threads."],["Receiver","updates description","The receiving half of Rust's channel (or sync_channel) type. This half can only be owned by one thread. recv will block until a message is available while there is at least one Sender alive (including clones)."]]}