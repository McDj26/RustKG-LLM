{"create_time":"2025-04-04T13:37:09.926Z","id":"9a8f5da6-354d-4085-95af-29bf7b8ed897","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.50-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_sync_mpsc-index\\merged_9bf306de-281e-47de-88fd-ee427e076755.json","relations":["associated with","contains","has attribute","has description","has full name","has method","has source code","has stability","is a","stability","stable since"],"delete_triples":[{"triples":[["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#11-3030"],["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#3-3046"],["Handle","has attribute","Unstable"],["Select","has attribute","Unstable"],["Handle","stability","Unstable"],["Select","stability","Unstable"],["Once","has description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the constructor"]],"startIndex":23473,"endIndex":47675}],"add_triples":[{"triples":[["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#1-1626"],["BarrierWaitResult","has description","A `BarrierWaitResult` is returned by [`Barrier::wait()`] when all threads in the [`Barrier`] have rendezvoused"],["Handle","has attribute","Experimental"],["Select","has attribute","Experimental"],["Handle","stability","Experimental"],["Select","stability","Experimental"],["Once","has description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with [`Once::new()`]."],["Once","has method","new"],["TryLockError","associated with","Mutex"],["TryLockError","associated with","RwLock"],["Weak","has description","A version of [`Arc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`."]],"startIndex":23473,"endIndex":47675}],"metrics":{"escapeCount":0,"costTime":62911,"totalUsage":{"prompt_tokens":11287,"completion_tokens":1532,"cached_tokens":0,"reasoning_tokens":1018},"chunkLength":1,"chunksInfo":[{"chunkIndex":0,"strLength":24202,"costTime":62911}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["std::sync::mpsc","source code changed to","src/std/sync/mpsc/mod.rs.html#1-1626"],["Handle","attribute changed to","Experimental"],["Handle","stability changed to","Experimental"],["Select","attribute changed to","Experimental"],["Select","stability changed to","Experimental"],["Once","description updated","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with [`Once::new()`]."],["Once","added method","new"],["TryLockError","associated with","Mutex"],["TryLockError","associated with","RwLock"],["Weak","added description","A version of [`Arc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option]`<`[`Arc`]`<T>>`."]]}