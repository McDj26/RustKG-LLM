{"create_time":"2025-04-04T14:20:09.216Z","id":"ec501c14-2c14-47f8-8300-5a4cfc1720d9","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.70-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_sync_mpsc-index\\merged_1fb9101f-fd1f-4a85-9c37-f767cf41d64c.json","relations":["associated with","contains","has attribute","has description","has full name","has method","has source code","has version","is a","stability","stable since"],"delete_triples":[{"triples":[["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#1-1669"],["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#1-1626"]],"startIndex":21210,"endIndex":61519},{"triples":[["sync_channel","has description","Creates a new synchronous, bounded channel. All data sent on the SyncSender will become available on the Receiver in the same order as it was sent. Like asynchronous channels, the Receiver will block until a message becomes available. sync_channel differs greatly in the semantics of the sender, however."]],"startIndex":22484,"endIndex":24478}],"add_triples":[{"triples":[["std::sync::mpsc","has source code","src/std/sync/mpsc/mod.rs.html#1-1262"],["Sender","has description","The sending-half of Rust's asynchronous channel type (using the channel). This half can only be owned by one thread, but it can be cloned to send to other threads."],["channel","has description","Creates a new asynchronous channel (returning the sender/receiver halves). All data sent will be available in the same order."],["sync_channel","has description","Creates a new synchronous, bounded channel where sends block until buffer space is available."]],"startIndex":21210,"endIndex":61519},{"triples":[["Receiver","has method","recv"]],"startIndex":22484,"endIndex":24478}],"metrics":{"escapeCount":0,"costTime":321392,"totalUsage":{"prompt_tokens":22988,"completion_tokens":8895,"cached_tokens":0,"reasoning_tokens":8464},"chunkLength":2,"chunksInfo":[{"chunkIndex":0,"strLength":40309,"costTime":51814},{"chunkIndex":1,"strLength":1994,"costTime":269578}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["std::sync::mpsc","updates source code to","src/std/sync/mpsc/mod.rs.html#1-1262"],["Sender","adds description","The sending-half of Rust's asynchronous channel type (using the channel). This half can only be owned by one thread, but it can be cloned to send to other threads."],["channel","adds description","Creates a new asynchronous channel (returning the sender/receiver halves). All data sent will be available in the same order."],["sync_channel","changes description to","Creates a new synchronous, bounded channel where sends block until buffer space is available."],["Receiver","adds method","recv"]]}