{"create_time":"2025-04-04T14:23:41.162Z","id":"merged_22bfa9bc-ed36-4ff0-98c8-e99dba30a736","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.80-x86_64-pc-windows-msvc/share/doc/rust/html/core/ffi/index.html","merged_triples":[{"triples":[["core","contains","alloc"],["alloc","has description","Memory allocation APIs"],["core","contains","any"],["any","has description","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["core","contains","arch"],["arch","has description","Platform dependent vendor intrinsics."],["core","contains","array"],["array","has description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["core","contains","ascii"],["ascii","has description","Operations on ASCII strings and characters."],["core","contains","borrow"],["borrow","has description","A module for working with borrowed data."],["core","contains","cell"],["cell","has description","Shareable mutable containers."],["core","contains","char"],["char","has description","A character type."],["core","contains","clone"],["clone","has description","The `Clone` trait for types that cannot be 'implicitly copied'."],["core","contains","cmp"],["cmp","has description","Functionality for ordering and comparison."],["core","contains","convert"],["convert","has description","Traits for conversions between types."],["core","contains","default"],["default","has description","The `Default` trait for types which may have meaningful default values."],["core","contains","f32"],["f32","has description","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["core","contains","f64"],["f64","has description","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["core","contains","ffi"],["ffi","has description","Utilities related to FFI bindings."],["ffi","stable since","1.30.0"],["core","contains","fmt"],["fmt","has description","Utilities for formatting and printing strings."],["core","contains","future"],["future","has description","Asynchronous values."],["core","contains","hash"],["hash","has description","Generic hashing support."],["core","contains","hint"],["hint","has description","Hints to compiler that affects how code should be emitted or optimized."],["core","contains","i128"],["i128","has description","The 128-bit signed integer type."],["core","contains","i16"],["i16","has description","The 16-bit signed integer type."],["core","contains","i32"],["i32","has description","The 32-bit signed integer type."],["core","contains","i64"],["i64","has description","The 64-bit signed integer type."],["core","contains","i8"],["i8","has description","The 8-bit signed integer type."],["core","contains","intrinsics"],["intrinsics","has description","rustc compiler intrinsics."],["core","contains","isize"],["isize","has description","The pointer-sized signed integer type."],["core","contains","iter"],["iter","has description","Composable external iteration."],["core","contains","marker"],["marker","has description","Primitive traits and types representing basic properties of types."],["core","contains","mem"],["mem","has description","Basic functions for dealing with memory."],["core","contains","num"],["num","has description","Numeric traits and functions for the built-in numeric types."],["core","contains","ops"],["ops","has description","Overloadable operators."],["core","contains","option"],["option","has description","Optional values."],["core","contains","panic"],["panic","has description","Panic support in the standard library."],["core","contains","panicking"],["panicking","has description","Panic support for libcore"],["core","contains","pin"],["pin","has description","Types which pin data to its location in memory"],["core","contains","prelude"],["prelude","has description","The libcore prelude"],["core","contains","ptr"],["ptr","has description","Raw, unsafe pointers, `*const T`, and `*mut T`."],["core","contains","raw"],["raw","has description","Contains struct definitions for the layout of compiler built-in types."],["core","contains","result"],["result","has description","Error handling with the `Result` type."],["core","contains","slice"],["slice","has description","Slice management and manipulation"],["core","contains","str"],["str","has description","String manipulation"],["core","contains","sync"],["sync","has description","Synchronization primitives"],["core","contains","task"],["task","has description","Types and Traits for working with asynchronous tasks."],["core","contains","time"],["time","has description","Temporal quantification."],["core","contains","u128"],["u128","has description","The 128-bit unsigned integer type."],["core","contains","u16"],["u16","has description","The 16-bit unsigned integer type."],["core","contains","u32"],["u32","has description","The 32-bit unsigned integer type."],["core","contains","u64"],["u64","has description","The 64-bit unsigned integer type."],["core","contains","u8"],["u8","has description","The 8-bit unsigned integer type."],["core","contains","unicode"],["unicode","has description",""],["core","contains","usize"],["usize","has description","The pointer-sized unsigned integer type."],["core","contains","assert"],["assert","is a","macro"],["assert","has description","Ensure that a boolean expression is `true` at runtime."],["core","contains","assert_eq"],["assert_eq","is a","macro"],["assert_eq","has description","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["core","contains","assert_ne"],["assert_ne","is a","macro"],["assert_ne","has description","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["core","contains","cfg"],["cfg","is a","macro"],["cfg","has description","Boolean evaluation of configuration flags, at compile-time."],["core","contains","column"],["column","is a","macro"],["column","has description","A macro which expands to the column number on which it was invoked."],["core","contains","compile_error"],["compile_error","is a","macro"],["compile_error","has description","Unconditionally causes compilation to fail with the given error message when encountered."],["core","contains","concat"],["concat","is a","macro"],["concat","has description","Concatenates literals into a static string slice."],["core","contains","concat_idents"],["concat_idents","is a","macro"],["concat_idents","has description","Concatenate identifiers into one identifier."],["core","contains","debug_assert"],["debug_assert","is a","macro"],["debug_assert","has description","Ensure that a boolean expression is `true` at runtime."],["core","contains","debug_assert_eq"],["debug_assert_eq","is a","macro"],["debug_assert_eq","has description","Asserts that two expressions are equal to each other."],["core","contains","debug_assert_ne"],["debug_assert_ne","is a","macro"],["debug_assert_ne","has description","Asserts that two expressions are not equal to each other."],["core","contains","env"],["env","is a","macro"],["env","has description","Inspect an environment variable at compile time."],["core","contains","file"],["file","is a","macro"],["file","has description","A macro which expands to the file name from which it was invoked."],["core","contains","format_args"],["format_args","is a","macro"],["format_args","has description","The core macro for formatted string creation & output."],["core","contains","include"],["include","is a","macro"],["include","has description","Parse a file as an expression or an item according to the context."],["core","contains","include_bytes"],["include_bytes","is a","macro"],["include_bytes","has description","Includes a file as a reference to a byte array."],["core","contains","include_str"],["include_str","is a","macro"],["include_str","has description","Includes a utf8-encoded file as a string."],["core","contains","line"],["line","is a","macro"],["line","has description","A macro which expands to the line number on which it was invoked."],["core","contains","module_path"],["module_path","is a","macro"],["module_path","has description","Expands to a string that represents the current module path."],["core","contains","option_env"],["option_env","is a","macro"],["option_env","has description","Optionally inspect an environment variable at compile time."],["panic","is a","macro"],["panic","has description","Entry point of thread panic, for details, see std::macros"],["core","contains","stringify"],["stringify","is a","macro"],["stringify","has description","A macro which stringifies its arguments."],["core","contains","try"],["try","is a","macro"],["try","has description","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["core","contains","unimplemented"],["unimplemented","is a","macro"],["unimplemented","has description","A standardized placeholder for marking unfinished code."],["core","contains","unreachable"],["unreachable","is a","macro"],["unreachable","has description","A utility macro for indicating unreachable code."],["core","contains","write"],["write","is a","macro"],["write","has description","Write formatted data into a buffer."],["core","contains","writeln"],["writeln","is a","macro"],["writeln","has description","Write formatted data into a buffer, with a newline appended."],["ffi","contains","c_void"],["c_void","is a","enum"],["c_void","has description","Equivalent to C's void type when used as a pointer."],["alloc","is a","module"],["alloc","has full name","core::alloc"],["any","is a","module"],["any","has full name","core::any"],["arch","is a","module"],["arch","has full name","core::arch"],["array","is a","module"],["array","has full name","core::array"],["ascii","is a","module"],["ascii","has full name","core::ascii"],["borrow","is a","module"],["borrow","has full name","core::borrow"],["cell","is a","module"],["cell","has full name","core::cell"],["char","is a","module"],["char","has full name","core::char"],["clone","is a","module"],["clone","has full name","core::clone"],["cmp","is a","module"],["cmp","has full name","core::cmp"],["convert","is a","module"],["convert","has full name","core::convert"],["default","is a","module"],["default","has full name","core::default"],["f32","is a","module"],["f32","has full name","core::f32"],["f64","is a","module"],["f64","has full name","core::f64"],["ffi","is a","module"],["ffi","has full name","core::ffi"],["fmt","is a","module"],["fmt","has full name","core::fmt"],["future","is a","module"],["future","has full name","core::future"],["hash","is a","module"],["hash","has full name","core::hash"],["hint","is a","module"],["hint","has full name","core::hint"],["i128","is a","module"],["i128","has full name","core::i128"],["i16","is a","module"],["i16","has full name","core::i16"],["i32","is a","module"],["i32","has full name","core::i32"],["i64","is a","module"],["i64","has full name","core::i64"],["i8","is a","module"],["i8","has full name","core::i8"],["intrinsics","is a","module"],["intrinsics","has full name","core::intrinsics"],["isize","is a","module"],["isize","has full name","core::isize"],["iter","is a","module"],["iter","has full name","core::iter"],["marker","is a","module"],["marker","has full name","core::marker"],["mem","is a","module"],["mem","has full name","core::mem"],["num","is a","module"],["num","has full name","core::num"],["ops","is a","module"],["ops","has full name","core::ops"],["option","is a","module"],["option","has full name","core::option"],["panic","is a","module"],["panic","has full name","core::panic"],["panicking","is a","module"],["panicking","has full name","core::panicking"],["pin","is a","module"],["pin","has full name","core::pin"],["prelude","is a","module"],["prelude","has full name","core::prelude"],["ptr","is a","module"],["ptr","has full name","core::ptr"],["raw","is a","module"],["raw","has full name","core::raw"],["result","is a","module"],["result","has full name","core::result"],["slice","is a","module"],["slice","has full name","core::slice"],["str","is a","module"],["str","has full name","core::str"],["sync","is a","module"],["sync","has full name","core::sync"],["task","is a","module"],["task","has full name","core::task"],["time","is a","module"],["time","has full name","core::time"],["u128","is a","module"],["u128","has full name","core::u128"],["u16","is a","module"],["u16","has full name","core::u16"],["u32","is a","module"],["u32","has full name","core::u32"],["u64","is a","module"],["u64","has full name","core::u64"],["u8","is a","module"],["u8","has full name","core::u8"],["unicode","is a","module"],["unicode","has full name","core::unicode"],["usize","is a","module"],["usize","has full name","core::usize"],["core","contains","un"],["arch","has description","SIMD and vendor intrinsics module."],["intrinsics","has description","Compiler intrinsics."],["ptr","has description","Manually manage memory through raw pointers."],["pin","has description","Types that pin data to its location in memory."],["slice","has description","Slice management and manipulation."],["str","has description","String manipulation."],["assert","has description","Asserts that a boolean expression is `true` at runtime."],["cfg","has description","Evaluates boolean combinations of configuration flags at compile-time."],["column","has description","Expands to the column number at which it was invoked."],["compile_error","has description","Causes compilation to fail with the given error message when encountered."],["format_args","has description","Constructs parameters for the other string-formatting macros."],["core","contains","Clone"],["Clone","is a","macro"],["Clone","has description","Derive macro generating an impl of the trait `Clone`."],["core","contains","Copy"],["Copy","is a","macro"],["Copy","has description","Derive macro generating an impl of the trait `Copy`."],["core","contains","Debug"],["Debug","is a","macro"],["Debug","has description","Derive macro generating an impl of the trait `Debug`."],["core","contains","Default"],["Default","is a","macro"],["Default","has description","Derive macro generating an impl of the trait `Default`."],["concat_idents","has description","Concatenates identifiers into one identifier."],["debug_assert","has description","Asserts that a boolean expression is `true` at runtime."],["env","has description","Inspects an environment variable at compile time."],["file","has description","Expands to the file name in which it was invoked."],["include","has description","Parses a file as an expression or an item according to the context."],["line","has description","Expands to the line number on which it was invoked."],["option_env","has description","Optionally inspects an environment variable at compile time."],["panic","has description","Panics the current thread."],["stringify","has description","Stringifies its arguments."],["try","has description","Unwraps a result or propagates its error."],["unimplemented","has description","Indicates unfinished code by panicking with a message of \"not yet implemented\"."],["unreachable","has description","Indicates unreachable code."],["write","has description","Writes formatted data into a buffer."],["core","contains","Eq"],["Eq","is a","macro"],["Eq","has description","Derive macro generating an impl of the trait `Eq`."],["core","contains","Hash"],["Hash","is a","macro"],["Hash","has description","Derive macro generating an impl of the trait `Hash`."],["core","contains","Ord"],["Ord","is a","macro"],["Ord","has description","Derive macro generating an impl of the trait `Ord`."],["core","contains","PartialEq"],["PartialEq","is a","macro"],["PartialEq","has description","Derive macro generating an impl of the trait `PartialEq`."],["core","contains","PartialOrd"],["PartialOrd","is a","macro"],["PartialOrd","has description","Derive macro generating an impl of the trait `PartialOrd`."],["core","contains","RustcDecodable"],["RustcDecodable","is a","macro"],["RustcDecodable","has description","Unstable implementation detail of the `rustc` compiler, do not use."],["core","contains","RustcEncodable"],["RustcEncodable","is a","macro"],["RustcEncodable","has description","Unstable implementation detail of the `rustc` compiler, do not use."],["core","contains","asm"],["asm","is a","macro"],["asm","has description","Inline assembly."],["core","contains","bench"],["bench","is a","macro"],["bench","has description","Attribute macro applied to a function to turn it into a benchmark test."],["core","contains","global_allocator"],["global_allocator","is a","macro"],["global_allocator","has description","Attribute macro applied to a static to register it as a global allocator."],["core","contains","global_asm"],["global_asm","is a","macro"],["global_asm","has description","Module-level inline assembly."],["core","contains","log_syntax"],["log_syntax","is a","macro"],["log_syntax","has description","Prints passed tokens into the standard output."],["core","contains","matches"],["matches","is a","macro"],["matches","has description","Returns whether the given expression matches any of the given patterns."],["core","contains","test"],["test","is a","macro"],["test","has description","Attribute macro applied to a function to turn it into a unit test."],["core","contains","test_case"],["test_case","is a","macro"],["test_case","has description","An implementation detail of the `#[test]` and `#[bench]` macros."],["core","contains","todo"],["todo","is a","macro"],["todo","has description","Indicates unfinished code."],["core","contains","trace_macros"],["trace_macros","is a","macro"],["trace_macros","has description","Enables or disables tracing functionality used for debugging other macros."],["unimplemented","has description","Indicates unfinished code by panicking with a message of 'not yet implemented'."],["core","contains","lazy"],["lazy","is a","module"],["lazy","has description","Lazy values and one-time initialization of static data."],["core","contains","primitive"],["primitive","is a","module"],["primitive","has description","This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types."],["ffi","has description","Utilities related to foreign function interface (FFI) bindings."],["hint","has description","Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime."],["include_str","has description","Includes a UTF-8 encoded file as a string."],["array","has description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should be able to generalize to all lengths."],["core","contains","cfg_accessible"],["cfg_accessible","is a","macro"],["cfg_accessible","has description","Keeps the item it's applied to if the passed path is accessible, and removes it otherwise."],["core","contains","llvm_asm"],["llvm_asm","is a","macro"],["llvm_asm","has description","LLVM-style inline assembly."],["core","contains","raw_const"],["raw_const","is a","macro"],["raw_const","has description","Create a `const` raw pointer to a place, without creating an intermediate reference."],["core","contains","raw_mut"],["raw_mut","is a","macro"],["raw_mut","has description","Create a `mut` raw pointer to a place, without creating an intermediate reference."],["core","contains","ready"],["ready","is a","macro"],["ready","has description","Extracts the successful type of a `Poll<T>`."],["unimplemented","has description","Indicates unimplemented code by panicking with a message of \"not implemented\"."],["array","has description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually, we should be able to generalize to all lengths."],["unimplemented","has description","Indicates unimplemented code by panicking with a message of 'not implemented'."],["lazy","has full name","core::lazy"],["primitive","has full name","core::primitive"],["ready","has description","Extracts the successful type of a `Poll<T>`.`"],["std::alloc::alloc","has feature","unsafe"],["ffi","has description","Platform-specific types, as defined by C. Code that interacts via FFI will almost certainly be using the base types provided by C, which aren’t nearly as nicely defined as Rust’s primitive types. This module provides types which will match those defined by C, so that code that interacts with C will refer to the correct types."],["ffi","contains","VaList"],["VaList","is a","struct"],["VaList","has description","A wrapper for a va_list"],["VaList","has feature","Experimental"],["ffi","contains","VaListImpl"],["VaListImpl","is a","struct"],["VaListImpl","has description","Basic implementation of a va_list"],["VaListImpl","has feature","Experimental"],["ffi","contains","CStr"],["CStr","is a","struct"],["CStr","has description","Representation of a borrowed C string."],["ffi","contains","FromBytesUntilNulError"],["FromBytesUntilNulError","is a","struct"],["FromBytesUntilNulError","has description","An error indicating that no nul byte was present."],["ffi","contains","FromBytesWithNulError"],["FromBytesWithNulError","is a","struct"],["FromBytesWithNulError","has description","An error indicating that a nul byte was not in the expected position."],["ffi","contains","NonZero_c_char"],["NonZero_c_char","is a","type"],["NonZero_c_char","has description","Type alias for NonZero version of c_char"],["NonZero_c_char","has feature","Experimental"],["c_void","has description","Equivalent to C’s void type when used as a pointer."],["ffi","has description","Platform-specific types, as defined by C."],["CStr","has description","Representation of a borrowed C string"],["c_void","has description","Equivalent to C's void type when used as a pointer"],["FromBytesUntilNulError","has description","An error indicating that no nul byte was present"],["c_void","has description","Equivalent to C’s void type when used as a pointer"],["core","has version","1.80.1"]],"startIndex":0,"endIndex":39000}],"changes_info_triples":[],"model":"deepseek-r1-250120"}