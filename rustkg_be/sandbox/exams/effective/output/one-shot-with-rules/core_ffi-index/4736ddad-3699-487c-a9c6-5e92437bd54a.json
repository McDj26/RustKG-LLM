{"create_time":"2025-04-04T14:16:56.867Z","id":"4736ddad-3699-487c-a9c6-5e92437bd54a","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.70-x86_64-pc-windows-msvc/share/doc/rust/html/core/ffi/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\core_ffi-index\\merged_23a3ee32-18be-4152-94b7-a7cf8fc411aa.json","relations":["contains","has description","has feature","is a","stable since"],"delete_triples":[{"triples":[["ffi","has description","Utilities related to FFI bindings."]],"startIndex":3822,"endIndex":34444}],"add_triples":[{"triples":[["ffi","has description","Platform-specific types, as defined by C. Code that interacts via FFI will almost certainly be using the base types provided by C, which aren’t nearly as nicely defined as Rust’s primitive types. This module provides types which will match those defined by C, so that code that interacts with C will refer to the correct types."],["ffi","contains","VaList"],["VaList","is a","struct"],["VaList","has description","A wrapper for a va_list"],["VaList","has feature","Experimental"],["ffi","contains","VaListImpl"],["VaListImpl","is a","struct"],["VaListImpl","has description","Basic implementation of a va_list"],["VaListImpl","has feature","Experimental"],["ffi","contains","CStr"],["CStr","is a","struct"],["CStr","has description","Representation of a borrowed C string."],["ffi","contains","FromBytesUntilNulError"],["FromBytesUntilNulError","is a","struct"],["FromBytesUntilNulError","has description","An error indicating that no nul byte was present."],["ffi","contains","FromBytesWithNulError"],["FromBytesWithNulError","is a","struct"],["FromBytesWithNulError","has description","An error indicating that a nul byte was not in the expected position."],["ffi","contains","NonZero_c_char"],["NonZero_c_char","is a","type"],["NonZero_c_char","has description","Type alias for NonZero version of c_char"],["NonZero_c_char","has feature","Experimental"],["ffi","contains","c_void"],["c_void","is a","enum"],["c_void","has description","Equivalent to C’s void type when used as a pointer."]],"startIndex":3822,"endIndex":34444}],"metrics":{"escapeCount":0,"costTime":132645,"totalUsage":{"prompt_tokens":17536,"completion_tokens":3424,"cached_tokens":0,"reasoning_tokens":2890},"chunkLength":1,"chunksInfo":[{"chunkIndex":0,"strLength":30622,"costTime":132645}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["ffi","updates description","Platform-specific types, as defined by C. Code that interacts via FFI will almost certainly be using the base types provided by C, which aren’t nearly as nicely defined as Rust’s primitive types. This module provides types which will match those defined by C, so that code that interacts with C will refer to the correct types."],["ffi","adds","VaList"],["ffi","adds","VaListImpl"],["ffi","adds","CStr"],["ffi","adds","FromBytesUntilNulError"],["ffi","adds","FromBytesWithNulError"],["ffi","adds","NonZero_c_char"],["ffi","adds","c_void"]]}