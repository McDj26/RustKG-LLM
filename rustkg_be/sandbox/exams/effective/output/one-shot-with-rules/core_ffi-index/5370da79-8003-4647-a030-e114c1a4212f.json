{"create_time":"2025-04-04T14:16:27.046Z","id":"5370da79-8003-4647-a030-e114c1a4212f","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.70-x86_64-pc-windows-msvc/share/doc/rust/html/core/ffi/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\core_ffi-index\\merged_23a3ee32-18be-4152-94b7-a7cf8fc411aa.json","relations":["contains","has description","has feature","has full name","is a","stable since"],"delete_triples":[{"triples":[["ffi","has description","Utilities related to FFI bindings."]],"startIndex":3822,"endIndex":34444}],"add_triples":[{"triples":[["ffi","has description","Platform-specific types, as defined by C. Code that interacts via FFI will almost certainly be using the base types provided by C, which aren’t nearly as nicely defined as Rust’s primitive types. This module provides types which will match those defined by C, so that code that interacts with C will refer to the correct types."],["ffi","contains","VaList"],["VaList","is a","struct"],["VaList","has description","A wrapper for a va_list"],["ffi","contains","VaListImpl"],["VaListImpl","is a","struct"],["VaListImpl","has description","Basic implementation of a va_list"],["ffi","contains","CStr"],["CStr","is a","struct"],["CStr","has description","Representation of a borrowed C string."],["ffi","contains","c_void"],["c_void","is a","enum"],["c_void","has description","Equivalent to C’s void type when used as a pointer."],["ffi","contains","NonZero_c_char"],["NonZero_c_char","is a","type"],["NonZero_c_char","has description","Type alias for NonZero version of c_char"]],"startIndex":3822,"endIndex":34444}],"metrics":{"escapeCount":0,"costTime":101178,"totalUsage":{"prompt_tokens":17536,"completion_tokens":2711,"cached_tokens":0,"reasoning_tokens":2329},"chunkLength":1,"chunksInfo":[{"chunkIndex":0,"strLength":30622,"costTime":101178}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["ffi","updates description","Platform-specific types, as defined by C. Code that interacts via FFI will almost certainly be using the base types provided by C, which aren’t nearly as nicely defined as Rust’s primitive types. This module provides types which will match those defined by C, so that code that interacts with C will refer to the correct types."],["ffi","adds component","VaList"],["ffi","adds component","VaListImpl"],["ffi","adds component","CStr"],["ffi","adds component","c_void"],["ffi","adds component","NonZero_c_char"]]}