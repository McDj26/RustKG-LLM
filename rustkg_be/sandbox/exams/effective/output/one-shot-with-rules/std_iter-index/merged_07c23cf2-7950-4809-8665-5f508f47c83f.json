{"create_time":"2025-03-29T05:26:20.933Z","id":"merged_07c23cf2-7950-4809-8665-5f508f47c83f","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.50-x86_64-pc-windows-msvc/share/doc/rust/html/std/iter/index.html","merged_triples":[{"triples":[["std::iter","is a","module"],["std::iter","has full name","std::iter"],["std::iter","stable since","1.0.0"],["std::iter","has description","Composable external iteration."],["std::iter::Chain","is a","struct"],["std::iter::Chain","has full name","std::iter::Chain"],["std::iter::Chain","has description","An iterator that strings two iterators together."],["std::iter","contains","std::iter::Chain"],["std::iter::Cloned","is a","struct"],["std::iter::Cloned","has full name","std::iter::Cloned"],["std::iter::Cloned","has description","An iterator that clones the elements of an underlying iterator."],["std::iter","contains","std::iter::Cloned"],["std::iter::Cycle","is a","struct"],["std::iter::Cycle","has full name","std::iter::Cycle"],["std::iter::Cycle","has description","An iterator that repeats endlessly."],["std::iter","contains","std::iter::Cycle"],["std::iter::DoubleEndedIterator","is a","trait"],["std::iter::DoubleEndedIterator","has full name","std::iter::DoubleEndedIterator"],["std::iter::DoubleEndedIterator","has description","An iterator able to yield elements from both ends."],["std::iter","contains","std::iter::DoubleEndedIterator"],["std::iter::empty","is a","function"],["std::iter::empty","has full name","std::iter::empty"],["std::iter::empty","has description","Creates an iterator that yields nothing."],["std::iter","contains","std::iter::empty"],["std::iter::Iterator","is a","trait"],["std::iter::Iterator","has full name","std::iter::Iterator"],["std::iter::Iterator","has description","An interface for dealing with iterators."],["std::iter","contains","std::iter::Iterator"],["std::iter::ExactSizeIterator","is a","trait"],["std::iter::ExactSizeIterator","has full name","std::iter::ExactSizeIterator"],["std::iter::ExactSizeIterator","has description","An iterator that knows its exact length."],["std::iter","contains","std::iter::ExactSizeIterator"],["std::iter::Extend","is a","trait"],["std::iter::Extend","has full name","std::iter::Extend"],["std::iter::Extend","has description","Extend a collection with the contents of an iterator."],["std::iter","contains","std::iter::Extend"],["std::iter::FromIterator","is a","trait"],["std::iter::FromIterator","has full name","std::iter::FromIterator"],["std::iter::FromIterator","has description","Conversion from an Iterator."],["std::iter","contains","std::iter::FromIterator"],["std::iter::IntoIterator","is a","trait"],["std::iter::IntoIterator","has full name","std::iter::IntoIterator"],["std::iter::IntoIterator","has description","Conversion into an Iterator."],["std::iter","contains","std::iter::IntoIterator"],["std","contains","iter"],["iter","stable since","1.0.0"],["iter","description","Composable external iteration."],["iter","description","If you've found yourself with a collection of some kind..."],["any","is a","module"],["any","description","This module implements the `Any` trait..."],["ascii","is a","module"],["ascii","description","Operations on ASCII strings and characters."],["borrow","is a","module"],["borrow","description","A module for working with borrowed data."],["boxed","is a","module"],["boxed","description","A pointer type for heap allocation."],["cell","is a","module"],["cell","description","Shareable mutable containers."],["assert!","is a","macro"],["assert!","description","Ensure that a boolean expression is `true`..."],["assert_eq!","is a","macro"],["assert_eq!","description","Asserts that two expressions are equal..."],["cfg!","is a","macro"],["cfg!","description","Boolean evaluation of configuration flags."],["Iterator","is a","trait"],["Iterator","description","An interface for dealing with iterators."],["Iterator","has associated type","Item"],["Iterator","has method","next()"],["Counter","implements","Iterator"],["Counter","has method","new()"],["Chain","is a","struct"],["Chain","description","An iterator that strings two iterators together."],["Cloned","is a","struct"],["Cloned","description","An iterator that clones the elements..."],["Cycle","is a","struct"],["Cycle","description","An iterator that repeats endlessly."],["DoubleEndedIterator","is a","trait"],["DoubleEndedIterator","description","An iterator able to yield elements..."],["ExactSizeIterator","is a","trait"],["ExactSizeIterator","description","An iterator that knows its exact length."],["empty","is a","function"],["empty","description","Creates an iterator that yields nothing."],["once","is a","function"],["once","description","Creates an iterator that yields an element exactly once."],["iter","is a","module"],["iter","has full name","std::iter"],["iter","has description","Composable external iteration."],["std","contains","any"],["std","contains","ascii"],["std","contains","borrow"],["std","contains","boxed"],["std","contains","cell"],["std","contains","char"],["std","contains","clone"],["std","contains","cmp"],["std","contains","collections"],["std","contains","convert"],["std","contains","default"],["std","contains","env"],["std","contains","error"],["std","contains","f32"],["std","contains","f64"],["std","contains","ffi"],["std","contains","fmt"],["std","contains","fs"],["std","contains","hash"],["std","contains","i16"],["std","contains","i32"],["std","contains","i64"],["std","contains","i8"],["std","contains","intrinsics"],["std","contains","io"],["std","contains","isize"],["std","contains","marker"],["std","contains","mem"],["std","contains","net"],["std","contains","num"],["std","contains","ops"],["std","contains","option"],["std","contains","os"],["std","contains","panic"],["std","contains","path"],["std","contains","prelude"],["std","contains","process"],["std","contains","ptr"],["std","contains","raw"],["std","contains","rc"],["std","contains","result"],["std","contains","slice"],["std","contains","str"],["std","contains","string"],["std","contains","sync"],["std","contains","thread"],["std","contains","time"],["std","contains","u16"],["std","contains","u32"],["std","contains","u64"],["std","contains","u8"],["std","contains","usize"],["std","contains","vec"],["Chain","has full name","std::iter::Chain"],["Chain","has description","An iterator that strings two iterators together."],["Cloned","has full name","std::iter::Cloned"],["Cloned","has description","An iterator that clones the elements of an underlying iterator."],["Cycle","has full name","std::iter::Cycle"],["Cycle","has description","An iterator that repeats endlessly."],["Empty","is a","struct"],["Empty","has full name","std::iter::Empty"],["Empty","has description","An iterator that yields nothing."],["Enumerate","is a","struct"],["Enumerate","has full name","std::iter::Enumerate"],["Enumerate","has description","An iterator that yields the current count and the element during iteration."],["Filter","is a","struct"],["Filter","has full name","std::iter::Filter"],["Filter","has description","An iterator that filters the elements of iter with predicate."],["FilterMap","is a","struct"],["FilterMap","has full name","std::iter::FilterMap"],["FilterMap","has description","An iterator that uses f to both filter and map elements from iter."],["FlatMap","is a","struct"],["FlatMap","has full name","std::iter::FlatMap"],["FlatMap","has description","An iterator that maps each element to an iterator, and yields the elements of the produced iterators."],["Fuse","is a","struct"],["Fuse","has full name","std::iter::Fuse"],["Fuse","has description","An iterator that yields None forever after the underlying iterator yields None once."],["Inspect","is a","struct"],["Inspect","has full name","std::iter::Inspect"],["Inspect","has description","An iterator that calls a function with a reference to each element before yielding it."],["Map","is a","struct"],["Map","has full name","std::iter::Map"],["Map","has description","An iterator that maps the values of iter with f."],["Once","is a","struct"],["Once","has full name","std::iter::Once"],["Once","has description","An iterator that yields an element exactly once."],["Peekable","is a","struct"],["Peekable","has full name","std::iter::Peekable"],["Peekable","has description","An iterator with a peek() that returns an optional reference to the next element."],["Repeat","is a","struct"],["Repeat","has full name","std::iter::Repeat"],["Repeat","has description","An iterator that repeats an element endlessly."],["Rev","is a","struct"],["Rev","has full name","std::iter::Rev"],["Rev","has description","An double-ended iterator with the direction inverted."],["Scan","is a","struct"],["Scan","has full name","std::iter::Scan"],["Scan","has description","An iterator to maintain state while iterating another iterator."],["Skip","is a","struct"],["Skip","has full name","std::iter::Skip"],["Skip","has description","An iterator that skips over n elements of iter."],["SkipWhile","is a","struct"],["SkipWhile","has full name","std::iter::SkipWhile"],["SkipWhile","has description","An iterator that rejects elements while predicate is true."],["Take","is a","struct"],["Take","has full name","std::iter::Take"],["Take","has description","An iterator that only iterates over the first n iterations of iter."],["TakeWhile","is a","struct"],["TakeWhile","has full name","std::iter::TakeWhile"],["TakeWhile","has description","An iterator that only accepts elements while predicate is true."],["Zip","is a","struct"],["Zip","has full name","std::iter::Zip"],["Zip","has description","An iterator that iterates two other iterators simultaneously."],["StepBy","is a","struct"],["StepBy","has full name","std::iter::StepBy"],["StepBy","has description","An adapter for stepping range iterators by a custom amount."],["DoubleEndedIterator","has full name","std::iter::DoubleEndedIterator"],["DoubleEndedIterator","has description","An iterator able to yield elements from both ends."],["ExactSizeIterator","has full name","std::iter::ExactSizeIterator"],["ExactSizeIterator","has description","An iterator that knows its exact length."],["Extend","is a","trait"],["Extend","has full name","std::iter::Extend"],["Extend","has description","Extend a collection with the contents of an iterator."],["FromIterator","is a","trait"],["FromIterator","has full name","std::iter::FromIterator"],["FromIterator","has description","Conversion from an Iterator."],["IntoIterator","is a","trait"],["IntoIterator","has full name","std::iter::IntoIterator"],["IntoIterator","has description","Conversion into an Iterator."],["Iterator","has full name","std::iter::Iterator"],["Iterator","has description","An interface for dealing with iterators."],["Iterator","has method","next"],["next","has argument","&mut self"],["next","has return type","Option<Self::Item>"],["Iterator","implements","IntoIterator"],["empty","has full name","std::iter::empty"],["empty","has description","Creates an iterator that yields nothing."],["Iterator","has adapter","map"],["Iterator","has adapter","take"],["Iterator","has adapter","collect"],["assert","is a","macro"],["assert","has description","Ensure that a boolean expression is `true` at runtime."],["assert_eq","is a","macro"],["assert_eq","has description","Asserts that two expressions are equal to each other (using `PartialEq`)."],["assert_ne","is a","macro"],["assert_ne","has description","Asserts that two expressions are not equal to each other (using `PartialEq`)."],["debug_assert_ne","is a","macro"],["debug_assert_ne","has description","Asserts that two expressions are not equal to each other."],["eprint","is a","macro"],["eprint","has description","Macro for printing to the standard error."],["eprintln","is a","macro"],["eprintln","has description","Macro for printing to the standard error, with a newline."],["std","contains","heap"],["heap","is a","module"],["heap","has description","dox"],["iter","has description","If you've found yourself with a collection of some kind..."],["any","has description","This module implements the `Any` trait..."],["ascii","has description","Operations on ASCII strings and characters."],["borrow","has description","A module for working with borrowed data."],["boxed","has description","A pointer type for heap allocation."],["cell","has description","Shareable mutable containers."],["process","has description","A module for working with processes."],["ptr","has description","Manually manage memory through raw pointers"],["array","is a","primitive type"],["array","has description","A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`."],["bool","is a","primitive type"],["bool","has description","The boolean type."],["any","has description","A module for dynamic typing through runtime reflection."],["f32","has description","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["f64","has description","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["std","contains","alloc"],["alloc","has description","Memory allocation APIs"],["std","contains","arch"],["arch","has description","SIMD and vendor intrinsics module."],["std","contains","future"],["future","has description","Asynchronous values."],["std","contains","hint"],["hint","has description","Hints to compiler that affects how code should be emitted or optimized."],["std","contains","pin"],["pin","has description","Types which pin data to its location in memory"],["std","contains","task"],["task","has description","Types and Traits for working with asynchronous tasks."],["std","contains","await"],["std","contains","reference"],["reference","has description","References, both shared and mutable."],["std","contains","never"],["never","has description","The `!` type, also called \"never\"."],["std","contains","unit"],["unit","has description","The `()` type, sometimes called \"unit\" or \"nil\"."],["std","contains","primitive::fn"],["std","contains","primitive::never"],["std","contains","primitive::reference"],["std","contains","primitive::unit"],["std","contains","is_aarch64_feature_detected"],["std","contains","is_arm_feature_detected"],["std","contains","is_mips64_feature_detected"],["std","contains","is_mips_feature_detected"],["std","contains","is_powerpc64_feature_detected"],["std","contains","is_powerpc_feature_detected"],["std","contains","is_x86_feature_detected"],["std","contains","keyword::fn"],["std","contains","keyword::let"],["std","contains","keyword::struct"],["f32","has description","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f64","has description","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["std","contains","fn"],["fn","is a","primitive type"],["fn","has description","Function pointers, like `fn(usize) -> bool`."],["never","is a","primitive type"],["reference","is a","primitive type"],["unit","is a","primitive type"],["alloc","is a","module"],["future","is a","module"],["hint","is a","module"],["pin","is a","module"],["task","is a","module"],["await","is a","macro"],["fn","is a","keyword"],["std","contains","let"],["let","is a","keyword"],["std","contains","struct"],["struct","is a","keyword"],["std","contains","array"],["std","contains","backtrace"],["array","is a","module"],["array","has description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["backtrace","is a","module"],["backtrace","has description","Support for capturing a stack backtrace of an OS thread"],["slice","has description","A dynamically-sized view into a contiguous sequence, `[T]`. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors."],["asm","is a","macro"],["asm","has description","Inline assembly."],["dbg","is a","macro"],["dbg","has description","Prints and returns the value of a given expression for quick and dirty debugging."],["global_asm","is a","macro"],["global_asm","has description","Module-level inline assembly."],["async","is a","keyword"],["async","has description","Return a [`Future`] instead of blocking the current thread."],["await","is a","keyword"],["await","has description","Suspend execution until the result of a [`Future`] is ready."],["intrinsics","has description","Compiler intrinsics."],["pin","has description","Types that pin data to its location in memory."],["Self","is a","keyword"],["Self","has description","The implementing type within a [`trait`] or [`impl`] block, or the current type within a type definition."],["as","is a","keyword"],["as","has description","Cast between types, or rename an import."],["std","contains","asm"],["std","contains","async"],["pin","has description","Types which pin data to its location in memory."],["std","contains","dbg"],["f32","has description","A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008)."],["f64","has description","A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008)."],["unit","has description","The `()` type, also called \"unit\"."],["hint","has description","Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime."],["std","contains","lazy"],["lazy","is a","module"],["lazy","has description","Lazy values and one-time initialization of static data."],["std","contains","primitive"],["primitive","is a","module"],["primitive","has description","This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types."],["await","has description","Suspend execution until the result of a `Future` is ready."],["std","contains","llvm_asm"],["llvm_asm","is a","macro"],["llvm_asm","has description","LLVM-style inline assembly."],["dyn","has description","`dyn` is a prefix of a trait object's type."],["fn","has description","A function or function pointer."]],"startIndex":0,"endIndex":39000},{"triples":[["std::iter::once","is a","function"],["std::iter::once","has full name","std::iter::once"],["std::iter::once","has description","Creates an iterator that yields an element exactly once."],["std::iter","contains","std::iter::once"],["std::iter::repeat","is a","function"],["std::iter::repeat","has full name","std::iter::repeat"],["std::iter::repeat","has description","Creates a new iterator that endlessly repeats a single element."],["std::iter","contains","std::iter::repeat"],["std::iter","contains","empty"],["empty","has full name","std::iter::empty"],["std::iter","contains","once"],["once","has full name","std::iter::once"],["std::iter","contains","repeat"],["repeat","is a","function"],["repeat","has full name","std::iter::repeat"],["repeat","description","Creates a new iterator that endlessly repeats a single element."],["once","is a","function"],["once","has description","Creates an iterator that yields an element exactly once."],["iter","contains","once"],["repeat","has description","Creates a new iterator that endlessly repeats a single element."],["iter","contains","repeat"],["std::iter::StepBy","has description","An adapter for stepping iterators by a custom amount."],["std::iter::StepBy","has feature","Experimental"],["std::iter::Rev","has description","A double-ended iterator with the direction inverted."],["std::iter::Product","is a","trait"],["std::iter::Product","has description","Trait to represent types that can be created by multiplying elements of an iterator."],["std::iter","contains","std::iter::Product"],["std::iter::Sum","is a","trait"],["std::iter::Sum","has description","Trait to represent types that can be created by summing up an iterator."],["std::iter","contains","std::iter::Sum"],["std::iter::FusedIterator","is a","trait"],["std::iter::FusedIterator","has description","An iterator that always continues to yield None when exhausted."],["std::iter","contains","std::iter::FusedIterator"],["std::iter::FusedIterator","has feature","Experimental"],["std::iter::TrustedLen","is a","trait"],["std::iter::TrustedLen","has description","An iterator that reports an accurate length using size_hint."],["std::iter","contains","std::iter::TrustedLen"],["std::iter::TrustedLen","has feature","Experimental"],["std::iter::Product","has full name","std::iter::Product"],["std::iter::Sum","has full name","std::iter::Sum"],["std::iter::FusedIterator","has full name","std::iter::FusedIterator"],["std::iter::TrustedLen","has full name","std::iter::TrustedLen"],["std::iter","contains","Product"],["std::iter","contains","Sum"],["std::iter","contains","FusedIterator"],["std::iter","contains","TrustedLen"],["StepBy","has description","An adapter for stepping iterators by a custom amount."],["StepBy","has feature","Experimental"],["Rev","has description","A double-ended iterator with the direction inverted."],["Product","is a","trait"],["Product","has full name","std::iter::Product"],["Product","has description","Trait to represent types that can be created by multiplying elements of an iterator."],["Sum","is a","trait"],["Sum","has full name","std::iter::Sum"],["Sum","has description","Trait to represent types that can be created by summing up an iterator."],["FusedIterator","is a","trait"],["FusedIterator","has full name","std::iter::FusedIterator"],["FusedIterator","has description","An iterator that always continues to yield None when exhausted."],["FusedIterator","has feature","Experimental"],["TrustedLen","is a","trait"],["TrustedLen","has full name","std::iter::TrustedLen"],["TrustedLen","has description","An iterator that reports an accurate length using size_hint."],["TrustedLen","has feature","Experimental"],["std::iter::Flatten","is a","struct"],["std::iter::Flatten","has full name","std::iter::Flatten"],["std::iter::Flatten","has description","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators."],["std::iter","contains","std::iter::Flatten"],["std::iter::RepeatWith","is a","struct"],["std::iter::RepeatWith","has full name","std::iter::RepeatWith"],["std::iter::RepeatWith","has description","An iterator that repeats elements of type A endlessly by applying the provided closure F: FnMut() -> A."],["std::iter","contains","std::iter::RepeatWith"],["std::iter::repeat_with","is a","function"],["std::iter::repeat_with","has full name","std::iter::repeat_with"],["std::iter::repeat_with","has description","Creates a new iterator that repeats elements of type A endlessly by applying the provided closure, the repeater, F: FnMut() -> A."],["std::iter","contains","std::iter::repeat_with"],["std::iter::StepBy","has description","An iterator for stepping iterators by a custom amount."],["std::iter::Copied","is a","struct"],["std::iter::Copied","has full name","std::iter::Copied"],["std::iter::Copied","has description","An iterator that copies the elements of an underlying iterator."],["std::iter","contains","std::iter::Copied"],["std::iter::FromFn","is a","struct"],["std::iter::FromFn","has full name","std::iter::FromFn"],["std::iter::FromFn","has description","An iterator where each iteration calls the provided closure F: FnMut() -> Option<T>."],["std::iter","contains","std::iter::FromFn"],["std::iter::Successors","is a","struct"],["std::iter::Successors","has full name","std::iter::Successors"],["std::iter::Successors","has description","An new iterator where each successive item is computed based on the preceding one."],["std::iter","contains","std::iter::Successors"],["std::iter::from_fn","is a","function"],["std::iter::from_fn","has full name","std::iter::from_fn"],["std::iter::from_fn","has description","Creates a new iterator where each iteration calls the provided closure F: FnMut() -> Option<T>."],["std::iter","contains","std::iter::from_fn"],["std::iter::successors","is a","function"],["std::iter::successors","has full name","std::iter::successors"],["std::iter::successors","has description","Creates a new iterator where each successive item is computed based on the preceding one."],["std::iter","contains","std::iter::successors"],["Iterator","has method","for_each()"],["std::iter::SkipWhile","has description","An iterator that rejects elements while predicate returns true."],["std::iter::TakeWhile","has description","An iterator that only accepts elements while predicate returns true."],["Iterator","has method","for_each"],["std::iter::OnceWith","is a","struct"],["std::iter::OnceWith","has description","An iterator that yields a single element of type A by applying the provided closure F: FnOnce() -> A."],["std::iter","contains","std::iter::OnceWith"],["std::iter","contains","std::iter::once_with"],["std::iter::once_with","is a","function"],["std::iter::once_with","has description","Creates an iterator that lazily generates a value exactly once by invoking the provided closure."],["std::iter::Chain","has description","An iterator that links two iterators together, in a chain."],["std::iter::MapWhile","is a","struct"],["std::iter::MapWhile","has description","An iterator that only accepts elements while predicate returns Some(_)."],["std::iter::MapWhile","has feature","Experimental"],["std::iter::InPlaceIterable","is a","trait"],["std::iter::InPlaceIterable","has description","An iterator that when yielding an item will have taken at least one element from its underlying SourceIter."],["std::iter::SourceIter","is a","trait"],["std::iter::SourceIter","has description","This trait provides transitive access to source-stage in an interator-adapter pipeline under the conditions that"],["std::iter::Step","has description","Objects that have a notion of successor and predecessor operations."],["std::iter","contains","std::iter::MapWhile"],["std::iter","contains","std::iter::InPlaceIterable"],["std::iter::InPlaceIterable","has feature","Experimental"],["std::iter::SourceIter","has description","This trait provides transitive access to source-stage in an iterator-adapter pipeline under the conditions that"],["std::iter","contains","std::iter::SourceIter"],["std::iter::SourceIter","has feature","Experimental"],["std::iter::SourceIter","has description","This trait provides transitive access to source-stage in an iterator-adapter pipeline"]],"startIndex":39000,"endIndex":78000}],"model":"deepseek-r1-250120"}