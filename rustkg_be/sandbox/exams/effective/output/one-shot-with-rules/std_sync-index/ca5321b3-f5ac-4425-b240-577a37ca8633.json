{"create_time":"2025-04-04T13:49:04.360Z","id":"ca5321b3-f5ac-4425-b240-577a37ca8633","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_sync-index\\merged_13c0cdae-f365-4bbb-8872-5fa9e9405c70.json","relations":["contains","has attribute","has description","has full name","is a","stable since"],"delete_triples":[{"triples":[["sync","has description","Useful synchronization primitives."],["sync","has description","This module contains useful safe and unsafe synchronization primitives. Most of the primitives in this module do not provide any sort of locking and/or blocking at all, but rather provide the necessary tools to build other types of concurrent primitives."]],"startIndex":28567,"endIndex":68299},{"triples":[["std::sync::OnceState","has attribute","Experimental"]],"startIndex":40596,"endIndex":63008}],"add_triples":[{"triples":[["std::sync","has description","Advanced synchronization primitives for threading."],["std::sync","stable since","1.31.0"]],"startIndex":28567,"endIndex":68299},{"triples":[["std::sync::atomic","is a","module"],["std::sync::atomic","has description","Atomic types"],["std::sync::mpsc","is a","module"],["std::sync::mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync::Arc","is a","struct"],["std::sync::Arc","has description","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["std::sync::Barrier","is a","struct"],["std::sync::Barrier","has description","Ensures multiple threads will wait for each other to reach a point in the program, before continuing execution all together."],["std::sync::Condvar","is a","struct"],["std::sync::Condvar","has description","A Condition Variable"],["std::sync::Mutex","is a","struct"],["std::sync::Mutex","has description","A mutual exclusion primitive useful for protecting shared data"],["std::sync::Once","is a","struct"],["std::sync::Once","has description","Used for thread-safe, one-time initialization of a global variable."],["std::sync::RwLock","is a","struct"],["std::sync::RwLock","has description","A reader-writer lock"]],"startIndex":40596,"endIndex":63008}],"metrics":{"escapeCount":0,"costTime":352816,"totalUsage":{"prompt_tokens":26584,"completion_tokens":8883,"cached_tokens":0,"reasoning_tokens":8203},"chunkLength":2,"chunksInfo":[{"chunkIndex":0,"strLength":39732,"costTime":124095},{"chunkIndex":1,"strLength":22412,"costTime":228721}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["sync","renamed to","std::sync"],["sync","adds feature","std::sync::atomic"],["sync","adds feature","std::sync::mpsc"],["sync","adds feature","std::sync::Arc"],["sync","adds feature","std::sync::Barrier"],["sync","adds feature","std::sync::Condvar"],["sync","adds feature","std::sync::Mutex"],["sync","adds feature","std::sync::Once"],["sync","adds feature","std::sync::RwLock"]]}