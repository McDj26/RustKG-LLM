{"create_time":"2025-04-04T13:31:44.292Z","id":"c3fc140c-fb69-4cf8-8fa4-a162037376d0","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.10-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","relations":["contains","has attribute","has description","has full name","is a","stable since"],"add_triples":[{"triples":[["std","contains","sync"],["sync","is a","module"],["sync","has full name","std::sync"],["sync","stable since","1.0.0"],["sync","has description","Useful synchronization primitives."],["sync","contains","atomic"],["sync","contains","mpsc"],["atomic","is a","module"],["atomic","has full name","std::sync::atomic"],["atomic","has description","Atomic types"],["mpsc","is a","module"],["mpsc","has full name","std::sync::mpsc"],["mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["Arc","is a","struct"],["Arc","has full name","std::sync::Arc"],["Arc","has description","An atomically reference counted wrapper for shared state."],["Barrier","is a","struct"],["Barrier","has full name","std::sync::Barrier"],["Barrier","has description","A barrier enables multiple threads to synchronize the beginning of some computation."],["BarrierWaitResult","is a","struct"],["BarrierWaitResult","has full name","std::sync::BarrierWaitResult"],["BarrierWaitResult","has description","A result returned from wait."],["Condvar","is a","struct"],["Condvar","has full name","std::sync::Condvar"],["Condvar","has description","A Condition Variable"],["Mutex","is a","struct"],["Mutex","has full name","std::sync::Mutex"],["Mutex","has description","A mutual exclusion primitive useful for protecting shared data"],["MutexGuard","is a","struct"],["MutexGuard","has full name","std::sync::MutexGuard"],["MutexGuard","has description","An RAII implementation of a 'scoped lock' of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["Once","is a","struct"],["Once","has full name","std::sync::Once"],["Once","has description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the ONCE_INIT value."],["PoisonError","is a","struct"],["PoisonError","has full name","std::sync::PoisonError"],["PoisonError","has description","A type of error which can be returned whenever a lock is acquired."],["RwLock","is a","struct"],["RwLock","has full name","std::sync::RwLock"],["RwLock","has description","A reader-writer lock"],["RwLockReadGuard","is a","struct"],["RwLockReadGuard","has full name","std::sync::RwLockReadGuard"],["RwLockReadGuard","has description","RAII structure used to release the shared read access of a lock when dropped."],["RwLockWriteGuard","is a","struct"],["RwLockWriteGuard","has full name","std::sync::RwLockWriteGuard"],["RwLockWriteGuard","has description","RAII structure used to release the exclusive write access of a lock when dropped."],["WaitTimeoutResult","is a","struct"],["WaitTimeoutResult","has full name","std::sync::WaitTimeoutResult"],["WaitTimeoutResult","has description","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["Weak","is a","struct"],["Weak","has full name","std::sync::Weak"],["Weak","has description","A weak pointer to an Arc."],["OnceState","is a","struct"],["OnceState","has full name","std::sync::OnceState"],["OnceState","has attribute","unstable"],["OnceState","has description","State yielded to the call_once_force method which can be used to query whether the Once was previously poisoned or not."],["StaticCondvar","is a","struct"],["StaticCondvar","has full name","std::sync::StaticCondvar"],["StaticCondvar","has attribute","deprecated"],["StaticCondvar","has attribute","unstable"],["StaticCondvar","has description","Statically allocated condition variables."],["StaticMutex","is a","struct"],["StaticMutex","has full name","std::sync::StaticMutex"],["StaticMutex","has attribute","deprecated"],["StaticMutex","has attribute","unstable"],["StaticMutex","has description","The static mutex type is provided to allow for static allocation of mutexes."],["StaticRwLock","is a","struct"],["StaticRwLock","has full name","std::sync::StaticRwLock"],["StaticRwLock","has attribute","deprecated"],["StaticRwLock","has attribute","unstable"],["StaticRwLock","has description","Structure representing a statically allocated RwLock."],["TryLockError","is a","enum"],["TryLockError","has full name","std::sync::TryLockError"],["TryLockError","has description","An enumeration of possible errors which can occur while calling the try_lock method."],["ONCE_INIT","is a","constant"],["ONCE_INIT","has full name","std::sync::ONCE_INIT"],["ONCE_INIT","has description","Initialization value for static Once values."],["CONDVAR_INIT","is a","constant"],["CONDVAR_INIT","has full name","std::sync::CONDVAR_INIT"],["CONDVAR_INIT","has attribute","deprecated"],["CONDVAR_INIT","has attribute","unstable"],["CONDVAR_INIT","has description","Constant initializer for a statically allocated condition variable."],["MUTEX_INIT","is a","constant"],["MUTEX_INIT","has full name","std::sync::MUTEX_INIT"],["MUTEX_INIT","has attribute","deprecated"],["MUTEX_INIT","has attribute","unstable"],["MUTEX_INIT","has description","Static initialization of a mutex. This constant can be used to initialize other mutex constants."],["RW_LOCK_INIT","is a","constant"],["RW_LOCK_INIT","has full name","std::sync::RW_LOCK_INIT"],["RW_LOCK_INIT","has attribute","deprecated"],["RW_LOCK_INIT","has attribute","unstable"],["RW_LOCK_INIT","has description","Constant initialization for a statically-initialized rwlock."],["LockResult","is a","type definition"],["LockResult","has full name","std::sync::LockResult"],["LockResult","has description","A type alias for the result of a lock method which can be poisoned."],["TryLockResult","is a","type definition"],["TryLockResult","has full name","std::sync::TryLockResult"],["TryLockResult","has description","A type alias for the result of a nonblocking locking method."]],"startIndex":0,"endIndex":39000}],"metrics":{"escapeCount":0,"costTime":262101,"totalUsage":{"prompt_tokens":8617,"completion_tokens":6922,"cached_tokens":0,"reasoning_tokens":5065},"chunkLength":1,"chunksInfo":[{"contextLength":0,"contentLength":20539,"costTime":262101}]},"model":"deepseek-r1-250120","extraInfo":{}}