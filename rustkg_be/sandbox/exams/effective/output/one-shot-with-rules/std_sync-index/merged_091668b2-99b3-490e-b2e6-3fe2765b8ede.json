{"create_time":"2025-04-04T17:58:02.983Z","id":"merged_091668b2-99b3-490e-b2e6-3fe2765b8ede","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.10-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","merged_triples":[{"triples":[["std::sync","is a","module"],["std::sync","stable since","1.0.0"],["std::sync","has description","Useful synchronization primitives."],["std::sync","has description","This module contains useful safe and unsafe synchronization primitives. Most of the primitives in this module do not provide any sort of locking and/or blocking at all, but rather provide the necessary tools to build other types of concurrent primitives."],["std::sync","contains","atomic"],["atomic","is a","module"],["atomic","has description","Atomic types"],["std::sync","contains","mpsc"],["mpsc","is a","module"],["mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["Arc","is a","struct"],["Arc","has full name","std::sync::Arc"],["Arc","has description","An atomically reference counted wrapper for shared state."],["std::sync","contains","Arc"],["Barrier","is a","struct"],["Barrier","has full name","std::sync::Barrier"],["Barrier","has description","A barrier enables multiple threads to synchronize the beginning of some computation."],["std::sync","contains","Barrier"],["BarrierWaitResult","is a","struct"],["BarrierWaitResult","has full name","std::sync::BarrierWaitResult"],["BarrierWaitResult","has description","A result returned from wait."],["std::sync","contains","BarrierWaitResult"],["Condvar","is a","struct"],["Condvar","has full name","std::sync::Condvar"],["Condvar","has description","A Condition Variable"],["std::sync","contains","Condvar"],["Mutex","is a","struct"],["Mutex","has full name","std::sync::Mutex"],["Mutex","has description","A mutual exclusion primitive useful for protecting shared data"],["std::sync","contains","Mutex"],["MutexGuard","is a","struct"],["MutexGuard","has full name","std::sync::MutexGuard"],["MutexGuard","has description","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync","contains","MutexGuard"],["Once","is a","struct"],["Once","has full name","std::sync::Once"],["Once","has description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the ONCE_INIT value."],["std::sync","contains","Once"],["PoisonError","is a","struct"],["PoisonError","has full name","std::sync::PoisonError"],["PoisonError","has description","A type of error which can be returned whenever a lock is acquired."],["std::sync","contains","PoisonError"],["RwLock","is a","struct"],["RwLock","has full name","std::sync::RwLock"],["RwLock","has description","A reader-writer lock"],["std::sync","contains","RwLock"],["RwLockReadGuard","is a","struct"],["RwLockReadGuard","has full name","std::sync::RwLockReadGuard"],["RwLockReadGuard","has description","RAII structure used to release the shared read access of a lock when dropped."],["std::sync","contains","RwLockReadGuard"],["RwLockWriteGuard","is a","struct"],["RwLockWriteGuard","has full name","std::sync::RwLockWriteGuard"],["RwLockWriteGuard","has description","RAII structure used to release the exclusive write access of a lock when dropped."],["std::sync","contains","RwLockWriteGuard"],["WaitTimeoutResult","is a","struct"],["WaitTimeoutResult","has full name","std::sync::WaitTimeoutResult"],["WaitTimeoutResult","has description","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["std::sync","contains","WaitTimeoutResult"],["Weak","is a","struct"],["Weak","has full name","std::sync::Weak"],["Weak","has description","A weak pointer to an Arc."],["std::sync","contains","Weak"],["OnceState","is a","struct"],["OnceState","has full name","std::sync::OnceState"],["OnceState","has description","State yielded to the call_once_force method which can be used to query whether the Once was previously poisoned or not."],["OnceState","has attribute","unstable"],["std::sync","contains","OnceState"],["StaticCondvar","is a","struct"],["StaticCondvar","has full name","std::sync::StaticCondvar"],["StaticCondvar","has description","Statically allocated condition variables."],["StaticCondvar","has attribute","deprecated"],["StaticCondvar","has attribute","unstable"],["std::sync","contains","StaticCondvar"],["StaticMutex","is a","struct"],["StaticMutex","has full name","std::sync::StaticMutex"],["StaticMutex","has description","The static mutex type is provided to allow for static allocation of mutexes."],["StaticMutex","has attribute","deprecated"],["StaticMutex","has attribute","unstable"],["std::sync","contains","StaticMutex"],["StaticRwLock","is a","struct"],["StaticRwLock","has full name","std::sync::StaticRwLock"],["StaticRwLock","has description","Structure representing a statically allocated RwLock."],["StaticRwLock","has attribute","deprecated"],["StaticRwLock","has attribute","unstable"],["std::sync","contains","StaticRwLock"],["TryLockError","is a","enum"],["TryLockError","has full name","std::sync::TryLockError"],["TryLockError","has description","An enumeration of possible errors which can occur while calling the try_lock method."],["std::sync","contains","TryLockError"],["ONCE_INIT","is a","constant"],["ONCE_INIT","has full name","std::sync::ONCE_INIT"],["ONCE_INIT","has description","Initialization value for static Once values."],["std::sync","contains","ONCE_INIT"],["CONDVAR_INIT","is a","constant"],["CONDVAR_INIT","has full name","std::sync::CONDVAR_INIT"],["CONDVAR_INIT","has description","Constant initializer for a statically allocated condition variable."],["CONDVAR_INIT","has attribute","deprecated"],["CONDVAR_INIT","has attribute","unstable"],["std::sync","contains","CONDVAR_INIT"],["MUTEX_INIT","is a","constant"],["MUTEX_INIT","has full name","std::sync::MUTEX_INIT"],["MUTEX_INIT","has description","Static initialization of a mutex. This constant can be used to initialize other mutex constants."],["MUTEX_INIT","has attribute","deprecated"],["MUTEX_INIT","has attribute","unstable"],["std::sync","contains","MUTEX_INIT"],["RW_LOCK_INIT","is a","constant"],["RW_LOCK_INIT","has full name","std::sync::RW_LOCK_INIT"],["RW_LOCK_INIT","has description","Constant initialization for a statically-initialized rwlock."],["RW_LOCK_INIT","has attribute","deprecated"],["RW_LOCK_INIT","has attribute","unstable"],["std::sync","contains","RW_LOCK_INIT"],["LockResult","is a","type"],["LockResult","has full name","std::sync::LockResult"],["LockResult","has description","A type alias for the result of a lock method which can be poisoned."],["std::sync","contains","LockResult"],["TryLockResult","is a","type"],["TryLockResult","has full name","std::sync::TryLockResult"],["TryLockResult","has description","A type alias for the result of a nonblocking locking method."],["std::sync","contains","TryLockResult"],["OnceState","has attribute","Unstable"],["StaticCondvar","has attribute","Deprecated"],["StaticCondvar","has attribute","Unstable"],["StaticMutex","has attribute","Deprecated"],["StaticMutex","has attribute","Unstable"],["StaticRwLock","has attribute","Deprecated"],["StaticRwLock","has attribute","Unstable"],["CONDVAR_INIT","has attribute","Deprecated"],["CONDVAR_INIT","has attribute","Unstable"],["MUTEX_INIT","has attribute","Deprecated"],["MUTEX_INIT","has attribute","Unstable"],["RW_LOCK_INIT","has attribute","Deprecated"],["RW_LOCK_INIT","has attribute","Unstable"],["std","contains","sync"],["sync","is a","module"],["sync","has full name","std::sync"],["sync","stable since","1.0.0"],["sync","has description","Useful synchronization primitives."],["sync","contains","atomic"],["sync","contains","mpsc"],["atomic","has full name","std::sync::atomic"],["mpsc","has full name","std::sync::mpsc"],["MutexGuard","has description","An RAII implementation of a 'scoped lock' of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["LockResult","is a","type definition"],["TryLockResult","is a","type definition"]],"startIndex":0,"endIndex":39000}],"changes_info_triples":[],"model":"deepseek-r1-250120"}