{"create_time":"2025-04-04T17:58:03.127Z","id":"merged_1da289e4-251a-48be-9d5f-7e2875cfb696","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.70-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","merged_triples":[{"triples":[["std::sync","is a","module"],["std::sync","stable since","1.0.0"],["std::sync","has description","Useful synchronization primitives."],["std::sync","has description","This module contains useful safe and unsafe synchronization primitives. Most of the primitives in this module do not provide any sort of locking and/or blocking at all, but rather provide the necessary tools to build other types of concurrent primitives."],["std::sync","contains","atomic"],["atomic","is a","module"],["atomic","has description","Atomic types"],["std::sync","contains","mpsc"],["mpsc","is a","module"],["mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["Arc","is a","struct"],["Arc","has full name","std::sync::Arc"],["Arc","has description","An atomically reference counted wrapper for shared state."],["std::sync","contains","Arc"],["Barrier","is a","struct"],["Barrier","has full name","std::sync::Barrier"],["Barrier","has description","A barrier enables multiple threads to synchronize the beginning of some computation."],["std::sync","contains","Barrier"],["BarrierWaitResult","is a","struct"],["BarrierWaitResult","has full name","std::sync::BarrierWaitResult"],["BarrierWaitResult","has description","A result returned from wait."],["std::sync","contains","BarrierWaitResult"],["Condvar","is a","struct"],["Condvar","has full name","std::sync::Condvar"],["Condvar","has description","A Condition Variable"],["std::sync","contains","Condvar"],["Mutex","is a","struct"],["Mutex","has full name","std::sync::Mutex"],["Mutex","has description","A mutual exclusion primitive useful for protecting shared data"],["std::sync","contains","Mutex"],["MutexGuard","is a","struct"],["MutexGuard","has full name","std::sync::MutexGuard"],["MutexGuard","has description","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync","contains","MutexGuard"],["Once","is a","struct"],["Once","has full name","std::sync::Once"],["Once","has description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the ONCE_INIT value."],["std::sync","contains","Once"],["PoisonError","is a","struct"],["PoisonError","has full name","std::sync::PoisonError"],["PoisonError","has description","A type of error which can be returned whenever a lock is acquired."],["std::sync","contains","PoisonError"],["RwLock","is a","struct"],["RwLock","has full name","std::sync::RwLock"],["RwLock","has description","A reader-writer lock"],["std::sync","contains","RwLock"],["RwLockReadGuard","is a","struct"],["RwLockReadGuard","has full name","std::sync::RwLockReadGuard"],["RwLockReadGuard","has description","RAII structure used to release the shared read access of a lock when dropped."],["std::sync","contains","RwLockReadGuard"],["RwLockWriteGuard","is a","struct"],["RwLockWriteGuard","has full name","std::sync::RwLockWriteGuard"],["RwLockWriteGuard","has description","RAII structure used to release the exclusive write access of a lock when dropped."],["std::sync","contains","RwLockWriteGuard"],["WaitTimeoutResult","is a","struct"],["WaitTimeoutResult","has full name","std::sync::WaitTimeoutResult"],["WaitTimeoutResult","has description","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["std::sync","contains","WaitTimeoutResult"],["Weak","is a","struct"],["Weak","has full name","std::sync::Weak"],["Weak","has description","A weak pointer to an Arc."],["std::sync","contains","Weak"],["OnceState","is a","struct"],["OnceState","has full name","std::sync::OnceState"],["OnceState","has description","State yielded to the call_once_force method which can be used to query whether the Once was previously poisoned or not."],["OnceState","has attribute","unstable"],["std::sync","contains","OnceState"],["StaticCondvar","is a","struct"],["StaticCondvar","has full name","std::sync::StaticCondvar"],["StaticCondvar","has description","Statically allocated condition variables."],["StaticCondvar","has attribute","deprecated"],["StaticCondvar","has attribute","unstable"],["std::sync","contains","StaticCondvar"],["StaticMutex","is a","struct"],["StaticMutex","has full name","std::sync::StaticMutex"],["StaticMutex","has description","The static mutex type is provided to allow for static allocation of mutexes."],["StaticMutex","has attribute","deprecated"],["StaticMutex","has attribute","unstable"],["std::sync","contains","StaticMutex"],["StaticRwLock","is a","struct"],["StaticRwLock","has full name","std::sync::StaticRwLock"],["StaticRwLock","has description","Structure representing a statically allocated RwLock."],["StaticRwLock","has attribute","deprecated"],["StaticRwLock","has attribute","unstable"],["std::sync","contains","StaticRwLock"],["TryLockError","is a","enum"],["TryLockError","has full name","std::sync::TryLockError"],["TryLockError","has description","An enumeration of possible errors which can occur while calling the try_lock method."],["std::sync","contains","TryLockError"],["ONCE_INIT","is a","constant"],["ONCE_INIT","has full name","std::sync::ONCE_INIT"],["ONCE_INIT","has description","Initialization value for static Once values."],["std::sync","contains","ONCE_INIT"],["CONDVAR_INIT","is a","constant"],["CONDVAR_INIT","has full name","std::sync::CONDVAR_INIT"],["CONDVAR_INIT","has description","Constant initializer for a statically allocated condition variable."],["CONDVAR_INIT","has attribute","deprecated"],["CONDVAR_INIT","has attribute","unstable"],["std::sync","contains","CONDVAR_INIT"],["MUTEX_INIT","is a","constant"],["MUTEX_INIT","has full name","std::sync::MUTEX_INIT"],["MUTEX_INIT","has description","Static initialization of a mutex. This constant can be used to initialize other mutex constants."],["MUTEX_INIT","has attribute","deprecated"],["MUTEX_INIT","has attribute","unstable"],["std::sync","contains","MUTEX_INIT"],["RW_LOCK_INIT","is a","constant"],["RW_LOCK_INIT","has full name","std::sync::RW_LOCK_INIT"],["RW_LOCK_INIT","has description","Constant initialization for a statically-initialized rwlock."],["RW_LOCK_INIT","has attribute","deprecated"],["RW_LOCK_INIT","has attribute","unstable"],["std::sync","contains","RW_LOCK_INIT"],["LockResult","is a","type"],["LockResult","has full name","std::sync::LockResult"],["LockResult","has description","A type alias for the result of a lock method which can be poisoned."],["std::sync","contains","LockResult"],["TryLockResult","is a","type"],["TryLockResult","has full name","std::sync::TryLockResult"],["TryLockResult","has description","A type alias for the result of a nonblocking locking method."],["std::sync","contains","TryLockResult"],["OnceState","has attribute","Unstable"],["StaticCondvar","has attribute","Deprecated"],["StaticCondvar","has attribute","Unstable"],["StaticMutex","has attribute","Deprecated"],["StaticMutex","has attribute","Unstable"],["StaticRwLock","has attribute","Deprecated"],["StaticRwLock","has attribute","Unstable"],["CONDVAR_INIT","has attribute","Deprecated"],["CONDVAR_INIT","has attribute","Unstable"],["MUTEX_INIT","has attribute","Deprecated"],["MUTEX_INIT","has attribute","Unstable"],["RW_LOCK_INIT","has attribute","Deprecated"],["RW_LOCK_INIT","has attribute","Unstable"],["std","contains","sync"],["sync","is a","module"],["sync","has full name","std::sync"],["sync","stable since","1.0.0"],["sync","has description","Useful synchronization primitives."],["sync","contains","atomic"],["sync","contains","mpsc"],["atomic","has full name","std::sync::atomic"],["mpsc","has full name","std::sync::mpsc"],["MutexGuard","has description","An RAII implementation of a 'scoped lock' of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["LockResult","is a","type definition"],["TryLockResult","is a","type definition"],["process","has description","A module for working with processes"],["ptr","has description","Manually manage memory through raw pointers"],["rc","has description","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'"],["Arc","has description","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'"],["Weak","has description","A version of Arc that holds a non-owning reference to the managed value"],["marker","has description","Primitive traits and types representing basic properties of types"],["fmt","has description","Utilities for formatting and printing `String`s"],["vec","has description","A contiguous growable array type with heap-allocated contents, written `Vec<T>`"],["std","contains","heap"],["heap","is a","module"],["heap","has full name","std::heap"],["heap","has description","dox"],["f32","has description","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["f64","has description","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["marker","has description","Primitive traits and marker types representing basic properties of types."],["process","has description","A module for working with processes."],["rc","has description","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["vec","has description","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."],["assert_ne","is a","macro"],["debug_assert_ne","is a","macro"],["try!","has description","Helper macro for reducing boilerplate code for matching Result together with converting downstream errors."],["std","contains","assert_ne"],["std","contains","debug_assert_ne"],["std","contains","compile_error"],["std","contains","eprint"],["std","contains","eprintln"],["marker","has description","Primitive traits and properties of types."],["Arc","has description","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["std","contains","hint"],["hint","is a","module"],["hint","has full name","std::hint"],["hint","has description","Hints to compiler that affects how code should be emitted or optimized."],["format","has description","Creates a `String` using interpolation of runtime expressions. See using interpolation for details."],["OnceState","has description","State yielded to call_once_force’s closure parameter. The state can be used to query the poison status of the Once."],["TryLockError","has description","An enumeration of possible errors associated with a `TryLockResult` which can occur while trying to acquire a lock, from the `try_lock` method on a `Mutex` or the `try_read` and `try_write` methods on an `RwLock`."],["std","contains","fn"],["fn","is a","keyword"],["std","contains","let"],["let","is a","keyword"],["std","contains","struct"],["struct","is a","keyword"],["fmt","has description","Utilities for formatting and printing `String`s."],["std","contains","alloc"],["alloc","is a","module"],["alloc","has description","Memory allocation APIs"],["std","contains","arch"],["arch","is a","module"],["arch","has description","SIMD and vendor intrinsics module."],["std","contains","future"],["future","is a","module"],["future","has description","Asynchronous values."],["std","contains","pin"],["pin","is a","module"],["pin","has description","Types which pin data to its location in memory"],["std","contains","task"],["task","is a","module"],["task","has description","Types and Traits for working with asynchronous tasks."],["f32","has description","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f64","has description","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["format","has description","Creates a `String` using interpolation of runtime expressions."],["println","has description","Macro for printing to the standard output, with a newline."],["std","contains","never"],["never","is a","primitive"],["never","has description","The `!` type, also called \"never\"."],["std","contains","unit"],["unit","is a","primitive"],["unit","has description","The `()` type, sometimes called \"unit\" or \"nil\"."],["future","has full name","std::future"],["pin","has full name","std::pin"],["std","contains","array"],["array","is a","module"],["array","has description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["std","contains","backtrace"],["backtrace","is a","module"],["backtrace","has description","Support for capturing a stack backtrace of an OS thread."],["slice","has description","A dynamically-sized view into a contiguous sequence, `[T]`. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors."],["std","contains","asm"],["asm","is a","macro"],["asm","has description","Inline assembly."],["std","contains","async"],["async","is a","keyword"],["std","contains","await"],["await","is a","keyword"],["Weak","has description","A version of Arc that holds a non-owning reference to the managed allocation."],["TryLockError","has description","An enumeration of possible errors associated with a TryLockResult which can occur while trying to acquire a lock, from the try_lock method on a Mutex or the try_read and try_write methods on an RwLock."],["std","contains","Self"],["Self","is a","keyword"],["Weak","has description","A version of Arc that holds a non-owning reference to the managed allocation"],["ONCE_INIT","has attribute","deprecated"],["Weak","has description","Weak is a version of Arc that holds a non-owning reference to the managed allocation."],["std::sync","has description","Advanced synchronization primitives for threading."],["std::sync","stable since","1.31.0"],["OnceLock","is a","struct"],["OnceLock","has full name","std::sync::OnceLock"],["OnceLock","has description","A synchronization primitive which can be written to only once."],["Exclusive","is a","struct"],["Exclusive","has full name","std::sync::Exclusive"],["Exclusive","has attribute","unstable"],["Exclusive","has description","Exclusive provides only mutable access, also referred to as exclusive access to the underlying value."],["LazyLock","is a","struct"],["LazyLock","has full name","std::sync::LazyLock"],["LazyLock","has attribute","unstable"],["LazyLock","has description","A value which is initialized on the first access."],["Exclusive","has description","Exclusive provides only mutable access, also referred to as exclusive access to the underlying value. It provides no immutable, or shared access to the underlying value."],["std::sync","contains","OnceLock"],["std::sync","contains","Exclusive"],["std::sync","contains","LazyLock"]],"startIndex":0,"endIndex":39000},{"triples":[["sync","is current module","true"],["lazy","is a","module"],["lazy","has description","Lazy values and one-time initialization of static data."],["primitive","is a","module"],["primitive","has description","This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types."],["f32","has description","A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008)."],["f64","has description","A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008)."],["unit","has description","The `()` type, also called \"unit\"."],["dyn","has description","`dyn` is a prefix of a trait object's type."],["static","has description","A static item is a value which is valid for the entire duration of your program (a 'static' lifetime)."],["llvm_asm","is a","macro"],["llvm_asm","has description","LLVM-style inline assembly."],["std","contains","sync"],["sync","has description","Useful synchronization primitives."],["f32","has description","A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008)"],["f64","has description","A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008)"],["unit","has description","The () type, also called \"unit\""],["std","contains","lazy"],["static","has description","A static item is a value which is valid for the entire duration of your program (a 'static lifetime)"],["sync","contains","OnceState"],["OnceState","has description","State yielded to Once::call_once_force()’s closure parameter. The state can be used to query the poison status of the Once."],["std","contains","primitive"],["const","has description","Compile-time constants and compile-time evaluable functions."],["unit","has description","The () type, also called 'unit'."],["include_str","has description","Includes a UTF-8 encoded file as a string."],["unimplemented","has description","Indicates unimplemented code by panicking with a message of 'not implemented'."],["std::sync","contains","OnceState"],["array","has description","Implementations of things like Eq for fixed-length arrays up to a certain length. Eventually, we should be able to generalize to all lengths."],["string","has description","A UTF-8–encoded, growable string."],["dyn","has description","dyn is a prefix of a trait object's type."],["else","has description","What expression to evaluate when an if condition evaluates to false."],["hint","has description","Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime."],["std::sync","contains","atomic"],["atomic","is a module","module"],["atomic","has description","Atomic types"],["std::sync","contains","mpsc"],["mpsc","is a module","module"],["mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync","contains","Arc"],["Arc","is a struct","struct"],["Arc","has description","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["std::sync","contains","Barrier"],["Barrier","is a struct","struct"],["Barrier","has description","A barrier enables multiple threads to synchronize the beginning of some computation."],["std::sync","contains","Condvar"],["Condvar","is a struct","struct"],["Condvar","has description","A Condition Variable"],["std::sync","contains","Mutex"],["Mutex","is a struct","struct"],["Mutex","has description","A mutual exclusion primitive useful for protecting shared data"],["std::sync","contains","Once"],["Once","is a struct","struct"],["Once","has description","A synchronization primitive which can be used to run a one-time global initialization."],["std::sync","contains","RwLock"],["RwLock","is a struct","struct"],["RwLock","has description","A reader-writer lock"],["std::sync","contains","TryLockError"],["TryLockError","is a enum","enum"],["TryLockError","has description","An enumeration of possible errors associated with a TryLockResult"],["std::sync","contains","ONCE_INIT"],["ONCE_INIT","is a constant","constant"],["ONCE_INIT","has attribute","deprecated"],["ONCE_INIT","has description","Initialization value for static Once values."],["std::sync::atomic","is a","module"],["std::sync::atomic","has description","Atomic types"],["std::sync::mpsc","is a","module"],["std::sync::mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync::Arc","is a","struct"],["std::sync::Arc","has description","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["std::sync::Barrier","is a","struct"],["std::sync::Barrier","has description","Ensures multiple threads will wait for each other to reach a point in the program, before continuing execution all together."],["std::sync::Condvar","is a","struct"],["std::sync::Condvar","has description","A Condition Variable"],["std::sync::Mutex","is a","struct"],["std::sync::Mutex","has description","A mutual exclusion primitive useful for protecting shared data"],["std::sync::Once","is a","struct"],["std::sync::Once","has description","Used for thread-safe, one-time initialization of a global variable."],["std::sync::RwLock","is a","struct"],["std::sync::RwLock","has description","A reader-writer lock"],["atomic","is a","module"],["mpsc","is a","module"],["Arc","has full name","Atomically Reference Counted"],["Barrier","has description","Ensures multiple threads will wait for each other to reach a point in the program, before continuing execution all together."],["ONCE_INIT","has attribute","Deprecated"]],"startIndex":40723,"endIndex":69139}],"changes_info_triples":[["std::sync","description updated","Advanced synchronization primitives for threading."],["std::sync","stable since updated","1.31.0"],["std::sync","adds feature","OnceLock"],["std::sync","adds feature","Exclusive"],["std::sync","adds feature","LazyLock"],["std::sync","adds","OnceLock"],["std::sync","updates stable since","1.31.0"],["std::sync","updates description","Advanced synchronization primitives for threading."]],"model":"deepseek-r1-250120"}