{
  "create_time": "2025-03-29T05:06:17.671Z",
  "id": "merged_12947fa8-d7d9-4430-b687-cbfa02495948",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.20-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Weak.html",
  "merged_triples": [
    {
      "triples": [
        ["Weak", "is a", "struct"],
        ["Weak", "has full name", "std::rc::Weak"],
        ["Weak", "stable since", "1.4.0"],
        ["Weak", "has description", "A weak version of Rc<T>."],
        [
          "Weak",
          "has description",
          "Weak references do not count when determining if the inner value should be dropped."
        ],
        ["std::rc", "contains", "Weak"],
        ["std::rc", "contains", "Rc"],
        ["Weak", "has method", "new"],
        ["new", "is a", "function"],
        ["new", "has full name", "std::rc::Weak::new"],
        ["new", "stable since", "1.10.0"],
        ["new", "has return type", "Weak<T>"],
        [
          "new",
          "has description",
          "Constructs a new Weak<T> without an accompanying instance of T."
        ],
        ["Weak", "has method", "upgrade"],
        ["upgrade", "is a", "function"],
        ["upgrade", "has full name", "std::rc::Weak::upgrade"],
        ["upgrade", "has return type", "Option<Rc<T>>"],
        [
          "upgrade",
          "has description",
          "Upgrades a weak reference to a strong reference."
        ],
        ["upgrade", "has argument", "self"],
        ["Weak", "implements", "Drop"],
        ["Weak", "implements", "Clone"],
        ["Weak", "implements", "Debug"],
        ["Weak", "implements", "Default"],
        ["Weak", "implements", "CoerceUnsized"],
        ["Weak", "does not implement", "Send"],
        ["Weak", "does not implement", "Sync"],
        ["Weak", "is weak version of", "Rc"],
        ["Rc", "is a", "struct"],
        ["Rc", "has full name", "std::rc::Rc"],
        ["Weak", "has method", "drop"],
        [
          "drop",
          "has description",
          "Drops the Weak<T>. This will decrement the weak reference count."
        ],
        ["Weak", "has method", "clone"],
        [
          "clone",
          "has description",
          "Makes a clone of the Weak<T>. This increases the weak reference count."
        ],
        ["Weak", "has method", "default"],
        ["default", "has return type", "Weak<T>"],
        [
          "default",
          "has description",
          "Returns the \"default value\" for a type."
        ],
        ["default", "stable since", "1.10.0"],
        ["Weak", "has method", "fmt"],
        [
          "fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["fmt", "has argument", "self"],
        ["fmt", "has argument", "f"],
        ["fmt::f", "has type", "&mut Formatter"],
        ["fmt", "has return type", "Result<(), Error>"],
        [
          "Weak",
          "has description",
          "A weak version of Rc<T>. Weak references do not count when determining if the inner value should be dropped. See the module level documentation for more."
        ],
        [
          "Weak",
          "has declaration",
          "pub struct Weak<T> where T: ?Sized { // some fields omitted }"
        ],
        ["Weak::new", "is a", "function"],
        ["Weak::new", "stable since", "1.10.0"],
        [
          "Weak::new",
          "has description",
          "Constructs a new Weak<T> without an accompanying instance of T. This allocates memory for T, but does not initialize it. Calling Weak<T>::upgrade() on the return value always gives None."
        ],
        ["Weak::new", "returns", "Weak<T>"],
        ["Weak::upgrade", "is a", "function"],
        [
          "Weak::upgrade",
          "has description",
          "Upgrades a weak reference to a strong reference. Upgrades the Weak<T> reference to an Rc<T>, if possible. Returns None if there were no strong references and the data was destroyed."
        ],
        ["Weak::upgrade", "returns", "Option<Rc<T>>"],
        [
          "Weak::drop",
          "has description",
          "Drops the Weak<T>. This will decrement the weak reference count."
        ],
        [
          "Weak::clone",
          "has description",
          "Makes a clone of the Weak<T>. This increases the weak reference count."
        ],
        [
          "Weak::default",
          "has description",
          "Returns the 'default value' for a type."
        ],
        [
          "Weak::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Weak", "has generic parameter", "T"],
        ["Weak", "has where clause", "T: ?Sized"],
        [
          "Weak",
          "has description",
          "See the module level documentation for more."
        ],
        [
          "new",
          "has description",
          "Constructs a new Weak<T> without an accompanying instance of T. This allocates memory for T, but does not initialize it. Calling Weak<T>::upgrade() on the return value always gives None."
        ],
        ["upgrade", "has argument", "upgrade::self"],
        ["upgrade::self", "has type", "&Weak<T>"],
        [
          "upgrade",
          "has description",
          "Upgrades a weak reference to a strong reference. Upgrades the Weak<T> reference to an Rc<T>, if possible. Returns None if there were no strong references and the data was destroyed."
        ],
        ["drop", "is a", "function"],
        ["clone", "is a", "function"],
        ["clone", "has return type", "Weak<T>"],
        ["fmt", "is a", "function"],
        ["default", "is a", "function"],
        [
          "default",
          "has description",
          "Returns the 'default value' for a type."
        ],
        [
          "Weak",
          "has description",
          "Weak is a version of Rc that holds a non-owning reference to the managed value."
        ],
        [
          "Weak",
          "has description",
          "The value is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."
        ],
        [
          "Weak",
          "has description",
          "Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped."
        ],
        [
          "Weak",
          "has description",
          "A Weak pointer is useful for keeping a temporary reference to the value within Rc without extending its lifetime."
        ],
        [
          "Weak",
          "has description",
          "The typical way to obtain a Weak pointer is to call Rc::downgrade."
        ],
        [
          "Rc",
          "has description",
          "A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'."
        ],
        ["Rc", "has method", "downgrade"],
        [
          "upgrade",
          "has description",
          "Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful. Returns None if the value has since been dropped."
        ],
        [
          "new",
          "has description",
          "Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."
        ],
        ["drop", "has description", "Drops the Weak pointer."],
        [
          "clone",
          "has description",
          "Makes a clone of the Weak pointer that points to the same value."
        ],
        [
          "default",
          "has description",
          "Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."
        ],
        [
          "Weak",
          "has description",
          "Weak is used to prevent circular references between Rc pointers."
        ],
        [
          "Weak::new",
          "has description",
          "Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."
        ],
        [
          "upgrade",
          "has description",
          "Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful."
        ],
        [
          "Weak",
          "has description",
          "Weak is a version of Rc that holds a non-owning reference to the managed value. The value is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."
        ],
        [
          "Weak",
          "has description",
          "Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped"
        ],
        [
          "Weak",
          "has description",
          "Weak itself makes no guarantees about the value still being present and may return None when upgraded"
        ],
        [
          "Weak",
          "has description",
          "A Weak pointer is useful for keeping a temporary reference without extending lifetime"
        ],
        [
          "Weak",
          "has description",
          "Used to prevent circular references between Rc pointers"
        ],
        [
          "Weak",
          "has description",
          "Typical way to obtain Weak is Rc::downgrade"
        ],
        [
          "Weak::upgrade",
          "has description",
          "Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful"
        ],
        [
          "Weak::upgrade",
          "has description",
          "Returns None if the value has since been dropped"
        ],
        [
          "Weak::new",
          "has description",
          "Constructs a new Weak<T> without initializing it. Calling upgrade always gives None"
        ]
      ],
      "startIndex": 0,
      "endIndex": 39000
    }
  ],
  "model": "deepseek-r1-250120"
}
