{"create_time":"2025-03-29T05:38:53.426Z","id":"merged_61d63615-90b3-41f8-b0b5-8e27ebe733ce","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Weak.html","merged_triples":[{"triples":[["Weak","is a","struct"],["Weak","has full name","std::rc::Weak"],["Weak","stable since","1.4.0"],["Weak","has description","A weak version of Rc<T>."],["Weak","has description","Weak references do not count when determining if the inner value should be dropped."],["std::rc","contains","Weak"],["std::rc","contains","Rc"],["Weak","has method","new"],["new","is a","function"],["new","has full name","std::rc::Weak::new"],["new","stable since","1.10.0"],["new","has return type","Weak<T>"],["new","has description","Constructs a new Weak<T> without an accompanying instance of T."],["Weak","has method","upgrade"],["upgrade","is a","function"],["upgrade","has full name","std::rc::Weak::upgrade"],["upgrade","has return type","Option<Rc<T>>"],["upgrade","has description","Upgrades a weak reference to a strong reference."],["upgrade","has argument","self"],["Weak","implements","Drop"],["Weak","implements","Clone"],["Weak","implements","Debug"],["Weak","implements","Default"],["Weak","implements","CoerceUnsized"],["Weak","does not implement","Send"],["Weak","does not implement","Sync"],["Weak","is weak version of","Rc"],["Rc","is a","struct"],["Rc","has full name","std::rc::Rc"],["Weak","has method","drop"],["drop","has description","Drops the Weak<T>. This will decrement the weak reference count."],["Weak","has method","clone"],["clone","has description","Makes a clone of the Weak<T>. This increases the weak reference count."],["Weak","has method","default"],["default","has return type","Weak<T>"],["default","has description","Returns the \"default value\" for a type."],["default","stable since","1.10.0"],["Weak","has method","fmt"],["fmt","has description","Formats the value using the given formatter."],["fmt","has argument","self"],["fmt","has argument","f"],["fmt::f","has type","&mut Formatter"],["fmt","has return type","Result<(), Error>"],["Weak","has description","A weak version of Rc<T>. Weak references do not count when determining if the inner value should be dropped. See the module level documentation for more."],["Weak","has declaration","pub struct Weak<T> where T: ?Sized { // some fields omitted }"],["Weak::new","is a","function"],["Weak::new","stable since","1.10.0"],["Weak::new","has description","Constructs a new Weak<T> without an accompanying instance of T. This allocates memory for T, but does not initialize it. Calling Weak<T>::upgrade() on the return value always gives None."],["Weak::new","returns","Weak<T>"],["Weak::upgrade","is a","function"],["Weak::upgrade","has description","Upgrades a weak reference to a strong reference. Upgrades the Weak<T> reference to an Rc<T>, if possible. Returns None if there were no strong references and the data was destroyed."],["Weak::upgrade","returns","Option<Rc<T>>"],["Weak::drop","has description","Drops the Weak<T>. This will decrement the weak reference count."],["Weak::clone","has description","Makes a clone of the Weak<T>. This increases the weak reference count."],["Weak::default","has description","Returns the 'default value' for a type."],["Weak::fmt","has description","Formats the value using the given formatter."],["Weak","has generic parameter","T"],["Weak","has where clause","T: ?Sized"],["Weak","has description","See the module level documentation for more."],["new","has description","Constructs a new Weak<T> without an accompanying instance of T. This allocates memory for T, but does not initialize it. Calling Weak<T>::upgrade() on the return value always gives None."],["upgrade","has argument","upgrade::self"],["upgrade::self","has type","&Weak<T>"],["upgrade","has description","Upgrades a weak reference to a strong reference. Upgrades the Weak<T> reference to an Rc<T>, if possible. Returns None if there were no strong references and the data was destroyed."],["drop","is a","function"],["clone","is a","function"],["clone","has return type","Weak<T>"],["fmt","is a","function"],["default","is a","function"],["default","has description","Returns the 'default value' for a type."],["Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed value."],["Weak","has description","The value is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped."],["Weak","has description","A Weak pointer is useful for keeping a temporary reference to the value within Rc without extending its lifetime."],["Weak","has description","The typical way to obtain a Weak pointer is to call Rc::downgrade."],["Rc","has description","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'."],["Rc","has method","downgrade"],["upgrade","has description","Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful. Returns None if the value has since been dropped."],["new","has description","Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."],["drop","has description","Drops the Weak pointer."],["clone","has description","Makes a clone of the Weak pointer that points to the same value."],["default","has description","Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."],["Weak","has description","Weak is used to prevent circular references between Rc pointers."],["Weak::new","has description","Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."],["upgrade","has description","Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful."],["Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed value. The value is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped"],["Weak","has description","Weak itself makes no guarantees about the value still being present and may return None when upgraded"],["Weak","has description","A Weak pointer is useful for keeping a temporary reference without extending lifetime"],["Weak","has description","Used to prevent circular references between Rc pointers"],["Weak","has description","Typical way to obtain Weak is Rc::downgrade"],["Weak::upgrade","has description","Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful"],["Weak::upgrade","has description","Returns None if the value has since been dropped"],["Weak::new","has description","Constructs a new Weak<T> without initializing it. Calling upgrade always gives None"],["Weak","implements","!Sync"],["Weak","implements","!Send"],["Weak::new","has description","Constructs a new Weak<T>, without allocating any memory. Calling upgrade on the return value always gives None."],["T","implements","BorrowMut"],["BorrowMut","has method","borrow_mut"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["T","implements","Any"],["Any","has method","get_type_id"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["T","implements","ToOwned"],["ToOwned","has method","to_owned"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["ToOwned","has associated type","Owned"],["Owned","is a","type"],["Owned","has value","T"],["ToOwned","has method","clone_into"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has argument","target"],["target","has type","&mut T"],["std::rc::Weak","has method","new"],["std::rc::Weak","has method","upgrade"],["std::rc::Weak","implements","Drop"],["std::rc::Weak","implements","Default"],["std::rc::Weak","implements","Clone"],["std::rc::Weak","implements","Debug"],["std::rc::Weak","implements","CoerceUnsized"],["std::rc::Weak","does not implement","Sync"],["std::rc::Weak","does not implement","Send"],["std::rc::Weak::new","has return type","Weak<T>"],["std::rc::Weak::upgrade","has return type","Option<Rc<T>>"],["std::rc::Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed value."],["std::rc::Weak","has version","1.4.0"],["std::rc::Weak","is a version of","Rc"],["Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed allocation."],["Weak","has description","The allocation is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the value stored in the allocation from being dropped, and Weak itself makes no guarantees about the value still being present and may return None when upgraded."],["Weak","has description","A Weak pointer is useful for keeping a temporary reference without extending lifetime."],["Weak","has description","Used to prevent circular references between Rc pointers."],["Weak","has description","Typical way to obtain Weak is Rc::downgrade."],["Weak","has method","as_raw"],["as_raw","is a","function"],["as_raw","has description","Returns a raw pointer to the object T pointed to by this Weak<T>."],["as_raw","has return type","*const T"],["Weak","has method","into_raw"],["into_raw","is a","function"],["into_raw","has description","Consumes the Weak<T> and turns it into a raw pointer."],["into_raw","has return type","*const T"],["Weak","has method","from_raw"],["from_raw","is a","function"],["from_raw","has description","Converts a raw pointer previously created by into_raw back into Weak<T>."],["from_raw","has argument","ptr"],["ptr","has type","*const T"],["Weak","has method","strong_count"],["strong_count","is a","function"],["strong_count","has description","Gets the number of strong (Rc) pointers pointing to this allocation."],["strong_count","has return type","usize"],["Weak","has method","weak_count"],["weak_count","is a","function"],["weak_count","has description","Gets the number of Weak pointers pointing to this allocation."],["weak_count","has return type","Option<usize>"],["Weak","has method","ptr_eq"],["ptr_eq","is a","function"],["ptr_eq","has description","Returns true if the two Weaks point to the same allocation."],["ptr_eq","has return type","bool"],["Weak","does not implement","RefUnwindSafe"],["Weak","implements","Unpin"],["Weak","does not implement","UnwindSafe"],["new","has description","Constructs a new Weak<T>, without allocating any memory. Calling upgrade on the return value always gives None."],["Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed allocation. The allocation is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped, and Weak itself makes no guarantees about the value still being present and may return None when upgraded."],["Weak","has description","Weak is used to prevent circular references between Rc pointers, since mutual owning references would never allow either Rc to be dropped."],["Weak","implements","DispatchFromDyn"],["from_raw","has return type","Weak<T>"],["ptr_eq","stable since","1.39.0"],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the allocation itself (the backing store) from being deallocated."],["Weak","has method","as_ptr"],["as_ptr","is a","function"],["as_ptr","stable since","1.45.0"],["as_ptr","has description","Returns a raw pointer to the object T pointed to by this Weak<T>."],["into_raw","stable since","1.45.0"],["into_raw","has description","Consumes the Weak<T> and turns it into a raw pointer while preserving weak count."],["from_raw","stable since","1.45.0"],["weak_count","has return type","usize"],["as_ptr","has return type","*const T"],["strong_count","stable since","1.41.0"],["weak_count","stable since","1.41.0"],["Weak","implements","!RefUnwindSafe"],["Weak","implements","!UnwindSafe"],["Weak","has version","1.4.0"],["new","stable since","1.45.0"],["Weak::new","stable since","1.45.0"],["new","has description","Constructs a new Weak<T>, without allocating any memory. Calling upgrade on the return value always gives None"],["Weak::new","has description","Constructs a new Weak<T>, without allocating any memory. Calling upgrade on the return value always gives None"],["default","has description","Constructs a new Weak<T>, without allocating any memory. Calling upgrade on the return value always gives None."],["Weak::default","has description","Constructs a new Weak<T>, without allocating any memory. Calling upgrade on the return value always gives None."]],"startIndex":0,"endIndex":39000},{"triples":[["Weak","implements","Clone"],["Weak","implements","Debug"],["Weak","implements","CoerceUnsized"],["Weak","does not implement","Send"],["Weak","does not implement","Sync"],["clone","has description","Makes a clone of the Weak pointer that points to the same allocation."],["fmt","has description","Formats the value using the given formatter."],["std::rc::Weak","does not implement","Send"],["std::rc::Weak","does not implement","Sync"],["Weak::clone","has description","Makes a clone of the Weak pointer that points to the same allocation."],["Weak::fmt","has description","Formats the value using the given formatter."],["Weak","implements","DispatchFromDyn"],["drop","has description","Drops the Weak pointer."],["Weak::drop","is a","function"],["Weak::drop","has description","Drops the Weak pointer."],["Weak","does not implement","RefUnwindSafe"]],"startIndex":39519,"endIndex":70878}],"model":"deepseek-r1-250120"}