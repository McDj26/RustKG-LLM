{"create_time":"2025-03-29T05:18:24.862Z","id":"47d572c2-8cf0-4da5-acc8-1be53e040fc7","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.40-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Weak.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_rc-struct_Weak\\merged_1859afa1-9e71-44eb-be2b-965beb9aca99.json","relations":["contains","does not implement","has argument","has associated type","has declaration","has description","has full name","has generic parameter","has method","has return type","has type","has version","has where clause","implements","is a","is weak version of","stable since"],"delete_triples":[{"triples":[["Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed value. The value is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped"],["Weak","has description","A Weak pointer is useful for keeping a temporary reference to the value within Rc without extending its lifetime."],["Weak","has description","It is also used to prevent circular references between Rc pointers, since mutual owning references would never allow either Rc to be dropped."],["Weak","has description","The typical way to obtain a Weak pointer is to call Rc::downgrade."],["new","has description","Constructs a new Weak<T> without an accompanying instance of T."],["upgrade","has description","Upgrades a weak reference to a strong reference. Upgrades the Weak<T> reference to an Rc<T>, if possible. Returns None if there were no strong references and the data was destroyed."]],"startIndex":217,"endIndex":38837},{"triples":[["clone","has description","Makes a clone of the Weak<T>."]],"startIndex":39519,"endIndex":70878}],"add_triples":[{"triples":[["Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed allocation."],["Weak","has description","The allocation is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the value stored in the allocation from being dropped, and Weak itself makes no guarantees about the value still being present and may return None when upgraded."],["Weak","has description","A Weak pointer is useful for keeping a temporary reference without extending lifetime."],["Weak","has description","Used to prevent circular references between Rc pointers."],["Weak","has description","Typical way to obtain Weak is Rc::downgrade."],["Weak","has method","as_raw"],["as_raw","is a","function"],["as_raw","has description","Returns a raw pointer to the object T pointed to by this Weak<T>."],["as_raw","has return type","*const T"],["Weak","has method","into_raw"],["into_raw","is a","function"],["into_raw","has description","Consumes the Weak<T> and turns it into a raw pointer."],["into_raw","has return type","*const T"],["Weak","has method","from_raw"],["from_raw","is a","function"],["from_raw","has description","Converts a raw pointer previously created by into_raw back into Weak<T>."],["from_raw","has argument","ptr"],["ptr","has type","*const T"],["Weak","has method","strong_count"],["strong_count","is a","function"],["strong_count","has description","Gets the number of strong (Rc) pointers pointing to this allocation."],["strong_count","has return type","usize"],["Weak","has method","weak_count"],["weak_count","is a","function"],["weak_count","has description","Gets the number of Weak pointers pointing to this allocation."],["weak_count","has return type","Option<usize>"],["Weak","has method","ptr_eq"],["ptr_eq","is a","function"],["ptr_eq","has description","Returns true if the two Weaks point to the same allocation."],["ptr_eq","has return type","bool"],["Weak","does not implement","RefUnwindSafe"],["Weak","implements","Unpin"],["Weak","does not implement","UnwindSafe"],["new","has description","Constructs a new Weak<T>, without allocating any memory. Calling upgrade on the return value always gives None."],["upgrade","has description","Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful. Returns None if the value has since been dropped."]],"startIndex":217,"endIndex":38837},{"triples":[["Weak","implements","Clone"],["Weak","implements","Debug"],["Weak","implements","CoerceUnsized"],["Weak","does not implement","Send"],["Weak","does not implement","Sync"],["clone","has description","Makes a clone of the Weak pointer that points to the same allocation."],["fmt","has description","Formats the value using the given formatter."]],"startIndex":39519,"endIndex":70878}],"metrics":{"escapeCount":0,"costTime":204240,"totalUsage":{"prompt_tokens":48460,"completion_tokens":5851,"cached_tokens":0,"reasoning_tokens":4177},"chunkLength":2,"chunksInfo":[{"oldContextLength":227,"oldStrLength":19097,"newContextLength":227,"newStrLength":38641,"costTime":144173},{"oldContextLength":227,"oldStrLength":28355,"newContextLength":227,"newStrLength":31380,"costTime":60067}]},"model":"deepseek-r1-250120","extraInfo":{}}