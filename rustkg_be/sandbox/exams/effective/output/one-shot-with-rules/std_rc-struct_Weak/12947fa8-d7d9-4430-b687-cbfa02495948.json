{"create_time":"2025-03-29T05:06:17.654Z","id":"12947fa8-d7d9-4430-b687-cbfa02495948","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.20-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Weak.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_rc-struct_Weak\\merged_0a0a17fb-53d1-46d6-9e1b-dec105e8f478.json","relations":["does not implement","has argument","has declaration","has description","has full name","has generic parameter","has method","has return type","has where clause","implements","is a","is weak version of","stable since"],"delete_triples":[{"triples":[["Weak","has description","A weak version of Rc<T>."],["Weak","has description","Weak references do not count when determining if the inner value should be dropped."],["Weak","has description","See the module level documentation for more."],["Rc","has description","A reference-counted pointer type over an immutable value."],["upgrade","has description","Upgrades a weak reference to a strong reference. Upgrades the Weak<T> reference to an Rc<T>, if possible. Returns None if there were no strong references and the data was destroyed."],["new","has description","Constructs a new Weak<T> without an accompanying instance of T. This allocates memory for T, but does not initialize it. Calling Weak<T>::upgrade() on the return value always gives None."],["drop","has description","Drops the Weak<T>. This will decrement the weak reference count."],["clone","has description","Makes a clone of the Weak<T>. This increases the weak reference count."],["default","has description","Returns the 'default value' for a type."]],"startIndex":215,"endIndex":21561}],"add_triples":[{"triples":[["Weak","has description","Weak is a version of Rc that holds a non-owning reference to the managed value."],["Weak","has description","The value is accessed by calling upgrade on the Weak pointer, which returns an Option<Rc<T>>."],["Weak","has description","Since a Weak reference does not count towards ownership, it will not prevent the inner value from being dropped."],["Weak","has description","A Weak pointer is useful for keeping a temporary reference to the value within Rc without extending its lifetime."],["Weak","has description","The typical way to obtain a Weak pointer is to call Rc::downgrade."],["Rc","has description","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'."],["Rc","has method","downgrade"],["upgrade","has description","Attempts to upgrade the Weak pointer to an Rc, extending the lifetime of the value if successful. Returns None if the value has since been dropped."],["new","has description","Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."],["drop","has description","Drops the Weak pointer."],["clone","has description","Makes a clone of the Weak pointer that points to the same value."],["default","has description","Constructs a new Weak<T>, allocating memory for T without initializing it. Calling upgrade on the return value always gives None."]],"startIndex":215,"endIndex":21561}],"metrics":{"escapeCount":0,"costTime":285059,"totalUsage":{"prompt_tokens":14853,"completion_tokens":8330,"cached_tokens":0,"reasoning_tokens":7631},"chunkLength":1,"chunksInfo":[{"oldContextLength":227,"oldStrLength":14286,"newContextLength":227,"newStrLength":21367,"costTime":285059}]},"model":"deepseek-r1-250120","extraInfo":{}}