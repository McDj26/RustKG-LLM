{
  "create_time": "2025-03-26T15:57:27.358Z",
  "id": "merged_b178bafc-aaff-4e69-9f90-b8629e7af226",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html",
  "merged_triples": [
    {
      "triples": [
        ["std::option", "contains", "NoneError"],
        ["Option", "contains", "as_pin_mut"],
        [
          "Option::as_pin_mut",
          "has description",
          "Converts from Option<T> to Option<PinMut<'_, T>>"
        ],
        ["Option", "contains", "iter"],
        [
          "Option::iter",
          "has description",
          "An iterator over a reference to the Some variant of an Option."
        ],
        ["Option", "contains", "iter_mut"],
        [
          "Option::iter_mut",
          "has description",
          "An iterator over a mutable reference to the Some variant of an Option."
        ],
        ["Option", "contains", "and"],
        ["Option::and", "has description", "..."],
        ["Option", "contains", "and_then"],
        ["Option::and_then", "has description", "..."],
        ["Option", "contains", "filter"],
        ["Option::filter", "has description", "..."],
        ["Option", "contains", "or"],
        ["Option::or", "has description", "..."],
        ["Option", "contains", "or_else"],
        ["Option::or_else", "has description", "..."],
        ["Option", "contains", "xor"],
        ["Option::xor", "has description", "..."],
        ["Option", "contains", "get_or_insert"],
        ["Option::get_or_insert", "has description", "..."],
        ["Option", "contains", "get_or_insert_with"],
        ["Option::get_or_insert_with", "has description", "..."],
        ["Option", "contains", "take"],
        ["Option::take", "has description", "..."],
        ["Option", "contains", "replace"],
        ["Option::replace", "has description", "..."],
        ["Option", "contains", "cloned"],
        ["Option::cloned", "has description", "..."],
        ["Option", "contains", "unwrap_or_default"],
        ["Option::unwrap_or_default", "has description", "..."],
        ["Option", "contains", "deref"],
        ["Option::deref", "has description", "..."],
        ["Option", "contains", "transpose"],
        ["Option::transpose", "has description", "..."],
        ["Option", "implements", "IntoIterator"],
        ["Option", "implements", "Hash"],
        ["Option", "implements", "Clone"],
        ["Option", "implements", "PartialOrd"],
        ["Option", "implements", "Ord"],
        ["Option", "implements", "Debug"],
        ["Option", "implements", "Eq"],
        ["Option", "implements", "PartialEq"],
        ["Option", "implements", "From<&'a mut Option<T>>"],
        ["Option", "implements", "From<T>"],
        ["Option", "implements", "From<&'a Option<T>>"],
        ["Option", "implements", "Copy"],
        ["Option", "implements", "FromIterator"],
        ["Option", "implements", "Try"],
        ["Option", "implements", "Default"],
        [
          "NoneError",
          "has description",
          "The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result."
        ],
        ["std::option::Option", "has method", "as_pin_mut"],
        ["std::option::Option", "has method", "iter"],
        ["std::option::Option", "has method", "iter_mut"],
        ["std::option::Option", "has method", "and"],
        ["std::option::Option", "has method", "and_then"],
        ["std::option::Option", "has method", "filter"],
        ["std::option::Option", "has method", "or"],
        ["std::option::Option", "has method", "or_else"],
        ["std::option::Option", "has method", "xor"],
        ["std::option::Option", "has method", "get_or_insert"],
        ["std::option::Option", "has method", "get_or_insert_with"],
        ["std::option::Option", "has method", "take"],
        ["std::option::Option", "has method", "replace"],
        ["std::option::Option", "has method", "cloned"],
        ["std::option::Option", "has method", "unwrap_or_default"],
        ["std::option::Option", "has method", "deref"],
        ["std::option::Option", "has method", "transpose"],
        [
          "std::option::Option::as_pin_mut",
          "has feature",
          "nightly-only experimental"
        ],
        [
          "std::option::NoneError",
          "has description",
          "The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result."
        ],
        ["option", "contains", "NoneError"],
        ["NoneError", "is a", "struct"],
        ["Option", "has method", "as_pin_mut"],
        [
          "Option::as_pin_mut",
          "has description",
          "Converts from `Option<T>` to `Option<PinMut<'_, T>>`"
        ],
        ["Option", "has method", "iter"],
        ["Option", "has method", "iter_mut"],
        ["Option", "has method", "and"],
        ["Option", "has method", "and_then"],
        ["Option", "has method", "filter"],
        ["Option", "has method", "or"],
        ["Option", "has method", "or_else"],
        ["Option", "has method", "xor"],
        ["Option", "has method", "get_or_insert"],
        ["Option", "has method", "get_or_insert_with"],
        ["Option", "has method", "take"],
        ["Option", "has method", "replace"],
        ["Option", "has method", "cloned"],
        ["Option", "has method", "unwrap_or_default"],
        ["Option", "has method", "deref"],
        ["Option", "has method", "transpose"],
        ["Option", "implements", "PartialOrd<Option<T>>"],
        ["Option", "implements", "PartialEq<Option<T>>"],
        ["Option", "implements", "FromIterator<Option<A>>"],
        ["Option", "has method", "contains"],
        ["Option", "has method", "as_deref"],
        ["Option", "has method", "as_deref_mut"],
        ["Option", "has method", "copied"],
        ["Option", "has method", "flatten"],
        ["Option", "has method", "expect_none"],
        ["Option", "has method", "unwrap_none"],
        ["Option", "implements", "Product<Option<U>>"],
        ["Option", "implements", "StructuralEq"],
        ["Option", "implements", "StructuralPartialEq"],
        ["Option", "implements", "Sum<Option<U>>"],
        ["Option", "implements", "RefUnwindSafe"],
        ["Option", "implements", "Send"],
        ["Option", "implements", "Sync"],
        ["Option", "implements", "Unpin"],
        ["Option", "implements", "UnwindSafe"],
        ["Option::contains", "has feature", "nightly-only experimental"],
        ["Option", "has method", "as_pin_ref"],
        ["Option", "implements", "Product"],
        ["Option", "implements", "Sum"],
        ["Option", "has method", "insert"],
        ["Option", "has method", "zip"],
        ["Option", "has method", "zip_with"],
        ["Option", "implements", "From<!>"],
        ["Option", "contains", "insert"],
        ["Option", "contains", "zip"],
        ["Option", "contains", "zip_with"],
        ["Option", "contains", "get_or_insert_default"],
        ["Option", "contains", "inspect"],
        ["Option", "contains", "is_some_with"],
        ["Option", "has method", "get_or_insert_default"],
        ["Option", "has method", "inspect"],
        ["Option", "has method", "is_some_with"],
        ["Option", "implements", "FromResidual"],
        ["Option", "implements", "Residual"],
        ["Option", "has method", "unwrap_unchecked"],
        ["Option", "has method", "unzip"],
        ["Option::unwrap_unchecked", "has feature", "unsafe"],
        ["Option", "contains", "unzip"],
        ["Option", "contains", "unwrap_unchecked"],
        ["Option::is_some_with", "has feature", "nightly-only experimental"]
      ],
      "startIndex": 0,
      "endIndex": 38530
    },
    {
      "triples": [
        ["Option", "has method", "filter"],
        [
          "Option::filter",
          "has description",
          "Returns None if the option is None, otherwise calls predicate with the wrapped value and returns the result."
        ],
        ["Option::filter", "has generic parameter", "P"],
        ["P", "requires trait", "FnOnce(&T) -> bool"],
        ["Option::filter", "has argument", "predicate"],
        ["Option::filter::predicate", "has type", "P"],
        ["Option", "has method", "xor"],
        [
          "Option::xor",
          "has description",
          "Returns Some if exactly one of self, optb is Some, otherwise returns None."
        ],
        ["Option::xor", "requires feature", "option_xor"],
        ["Option::xor", "has stability", "experimental"],
        ["Option::xor", "has argument", "optb"],
        ["Option::xor::optb", "has type", "Option<T>"],
        ["Option::xor", "returns", "Option<T>"],
        [
          "std::option::Option::filter",
          "has description",
          "Returns None if the option is None, otherwise calls predicate with the wrapped value and returns the result."
        ],
        ["std::option::Option::filter", "has argument", "predicate"],
        [
          "std::option::Option::filter::predicate",
          "has type",
          "FnOnce(&T) -> bool"
        ],
        ["std::option::Option::filter", "returns", "Option<T>"],
        ["std::option::Option::filter", "has generic parameter", "P"],
        [
          "std::option::Option::xor",
          "has feature",
          "nightly-only experimental"
        ],
        [
          "std::option::Option::xor",
          "has description",
          "Returns Some if exactly one of self, optb is Some, otherwise returns None."
        ],
        ["std::option::Option::xor", "has argument", "optb"],
        ["std::option::Option::xor::optb", "has type", "Option<T>"],
        ["Iter", "implements", "Iterator"],
        ["IterMut", "implements", "Iterator"],
        [
          "filter",
          "has description",
          "Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."
        ],
        ["filter", "has argument", "predicate"],
        ["predicate", "has type", "FnOnce(&T) -> bool"],
        [
          "xor",
          "has description",
          "Returns Some if exactly one of self, optb is Some, otherwise returns None."
        ],
        [
          "or",
          "has description",
          "Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."
        ],
        [
          "std::option::Option::insert",
          "has feature",
          "nightly-only experimental"
        ],
        ["Option::zip", "has description", "Zips self with another Option."],
        ["Option::zip", "has argument", "other"],
        ["Option::zip::other", "has type", "Option<U>"],
        ["Option::zip", "returns", "Option<(T, U)>"],
        ["Option::zip", "has generic parameter", "U"],
        [
          "Option::zip_with",
          "has description",
          "Zips self and another Option with function f."
        ],
        ["Option::zip_with", "has argument", "other"],
        ["Option::zip_with::other", "has type", "Option<U>"],
        ["Option::zip_with", "has argument", "f"],
        ["Option::zip_with::f", "has type", "FnOnce(T, U) -> R"],
        ["Option::zip_with", "returns", "Option<R>"],
        ["Option::zip_with", "has generic parameter", "U"],
        ["Option::zip_with", "has generic parameter", "F"],
        ["Option::zip_with", "has generic parameter", "R"],
        ["Option::zip_with", "has feature", "option_zip"],
        [
          "Option::insert",
          "has description",
          "Inserts value into the option if it is None, then returns a mutable reference to the contained value."
        ],
        ["Option::insert", "has argument", "value"],
        ["Option::insert::value", "has type", "T"],
        ["Option::insert", "returns", "&mut T"],
        ["Option::insert", "has feature", "nightly-only"],
        ["Option::zip_with::f", "has type", "F"],
        ["F", "requires trait", "FnOnce(T, U) -> R"],
        ["Option::zip_with", "has feature", "nightly-only experimental"],
        [
          "Option::insert",
          "has description",
          "Inserts `value` into the option then returns a mutable reference to it."
        ],
        ["Option::insert", "has feature", "nightly-only experimental"],
        ["Option", "has method", "insert"],
        ["Option", "has method", "zip"],
        ["Option", "has method", "zip_with"],
        ["Option::zip_with", "requires trait", "FnOnce(T, U) -> R"],
        ["Option::inspect", "has feature", "nightly-only experimental"],
        [
          "Option::inspect",
          "has description",
          "Calls the provided closure with a reference to the contained value (if Some)."
        ],
        ["Option", "has method", "unwrap_unchecked"],
        [
          "Option::unwrap_unchecked",
          "has description",
          "Returns the contained Some value, consuming the self value, without checking that the value is not None."
        ],
        ["Option::unwrap_unchecked", "has feature", "unsafe"],
        [
          "Option::get_or_insert_default",
          "has description",
          "Inserts the default value into the option if it is None, then returns a mutable reference to the contained value."
        ],
        [
          "Option::get_or_insert_default",
          "has feature",
          "option_get_or_insert_default"
        ],
        ["Option", "has method", "contains"],
        [
          "Option::contains",
          "has description",
          "Returns true if the option is a Some value containing the given value."
        ],
        ["Option::contains", "has generic parameter", "U"],
        ["U", "requires trait", "PartialEq<T>"],
        ["Option::contains", "has argument", "x"],
        ["Option::contains::x", "has type", "&U"],
        ["Option::contains", "has feature", "option_result_contains"],
        [
          "Option::filter",
          "has description",
          "Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."
        ],
        [
          "std::option::Option::filter",
          "has description",
          "Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."
        ],
        [
          "Option::get_or_insert_default",
          "has feature",
          "nightly-only experimental"
        ],
        ["Option::contains", "has feature", "nightly-only experimental"],
        ["Option", "has method", "get_or_insert_default"]
      ],
      "startIndex": 39929,
      "endIndex": 78929
    },
    {
      "triples": [
        ["Option", "has method", "replace"],
        ["replace", "has full name", "std::option::Option::replace"],
        ["replace", "has argument", "value"],
        ["replace::value", "has type", "T"],
        ["replace", "returns", "Option<T>"],
        [
          "replace",
          "has description",
          "Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."
        ],
        ["replace", "has stability", "experimental"],
        ["replace", "requires feature", "option_replace"],
        ["Option", "has method", "deref"],
        ["deref", "has full name", "std::option::Option::deref"],
        ["deref", "returns", "Option<&T::Target>"],
        [
          "deref",
          "has description",
          "Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."
        ],
        ["deref", "has stability", "experimental"],
        ["deref", "requires feature", "inner_deref"],
        ["Option", "has method", "transpose"],
        ["transpose", "has full name", "std::option::Option::transpose"],
        ["transpose", "returns", "Result<Option<T>, E>"],
        [
          "transpose",
          "has description",
          "Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."
        ],
        ["transpose", "has stability", "experimental"],
        ["transpose", "requires feature", "transpose_result"],
        ["replace", "has argument", "self"],
        ["replace::self", "has type", "&mut self"],
        [
          "replace",
          "has description",
          "Replaces the actual value in the option by the value given in parameter, returning the old value if present."
        ],
        ["replace", "has feature", "nightly-only experimental"],
        ["Option<&mut T>", "has method", "cloned"],
        [
          "cloned",
          "has description",
          "Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."
        ],
        ["transpose", "has feature", "nightly-only experimental"],
        [
          "transpose",
          "has description",
          "Transposes an Option of a Result into a Result of an Option."
        ],
        ["deref", "has feature", "nightly-only experimental"],
        ["Option<T>", "has method", "deref"],
        [
          "deref",
          "has description",
          "Converts from &Option<T> to Option<&T::Target> via Deref."
        ],
        ["Option<Result<T, E>>", "has method", "transpose"],
        [
          "transpose",
          "has description",
          "Transposes an Option of a Result into a Result of an Option. None maps to Ok(None), Some(Ok(_)) and Some(Err(_)) map to Ok(Some(_)) and Err(_)."
        ],
        ["Option::replace", "has feature", "nightly-only experimental"],
        ["Option::expect_none", "has feature", "option_expect_none"],
        ["Option::unwrap_none", "has feature", "option_unwrap_none"],
        [
          "Option::copied",
          "has description",
          "Maps an Option<&mut T> to an Option<T> by copying the contents of the option"
        ],
        [
          "Option::as_deref",
          "has description",
          "Converts from Option<T> to Option<&T::Target> via Deref"
        ],
        [
          "Option::as_deref_mut",
          "has description",
          "Converts from Option<T> to Option<&mut T::Target> via DerefMut"
        ],
        ["Option::replace", "has feature", "option_replace"],
        ["Option::replace", "returns", "Option<T>"],
        ["Option", "has method", "take"],
        ["Option::take", "returns", "Option<T>"],
        ["Option", "has method", "get_or_insert_with"],
        ["Option::get_or_insert_with", "has argument", "f"],
        ["Option::get_or_insert_with::f", "has type", "F"],
        ["Option::expect_none", "has feature", "nightly-only experimental"],
        ["Option::unwrap_none", "has feature", "nightly-only experimental"],
        ["Option", "has method", "copied"],
        [
          "Option::copied",
          "has description",
          "Maps an Option<&T> to an Option<T> by copying the contents of the option."
        ],
        ["Option::copied", "returns", "Option<T>"],
        ["Option::as_deref", "returns", "Option<&T::Target>"],
        ["Option::as_deref_mut", "returns", "Option<&mut T::Target>"],
        [
          "Option::expect_none",
          "has description",
          "Consumes self while expecting None and returning nothing."
        ],
        [
          "Option::unwrap_none",
          "has description",
          "Consumes self while expecting None and returning nothing."
        ],
        ["Option", "has method", "flatten"],
        [
          "flatten",
          "has description",
          "Converts from Option<Option<T>> to Option<T>"
        ],
        ["flatten", "returns", "Option<T>"],
        ["Option<T>", "has method", "flatten"],
        ["flatten", "has version", "1.40.0"],
        [
          "Option::expect_none",
          "has description",
          "Consumes self while expecting None and returning nothing. Panics if the value is a Some, with a custom panic message provided by the Some's value."
        ],
        [
          "Option::unwrap_none",
          "has description",
          "Consumes self while expecting None and returning nothing. Panics if the value is a Some, with a custom panic message provided by the Some's value."
        ],
        [
          "Option::flatten",
          "has description",
          "Converts from Option<Option<T>> to Option<T>"
        ],
        ["Option::flatten", "returns", "Option<T>"],
        ["Option", "has method", "zip"],
        ["zip", "has description", "Zips self with another Option."],
        ["zip", "returns", "Option<(T, U)>"],
        ["zip", "has stability", "1.46.0"],
        ["zip", "has feature", "const unstable"],
        ["Option", "has method", "zip_with"],
        [
          "zip_with",
          "has description",
          "Zips self and another Option with function f."
        ],
        ["zip_with", "has feature", "option_zip"],
        ["zip_with", "has stability", "nightly-only experimental"],
        ["Option", "has method", "unzip"],
        [
          "unzip",
          "has description",
          "Unzips an option containing a tuple of two options."
        ],
        ["unzip", "returns", "(Option<T>, Option<U>)"],
        ["unzip", "has feature", "unzip_option"],
        ["zip_with", "has feature", "nightly-only experimental"],
        ["unzip", "has feature", "nightly-only experimental"],
        ["Option::zip", "has version", "1.46.0"],
        ["Option::zip", "has description", "Zips self with another Option."],
        ["Option::zip", "has feature", "nightly-only experimental"],
        [
          "Option::zip_with",
          "has description",
          "Zips self and another Option with function f."
        ],
        ["Option::zip_with", "has feature", "option_zip"],
        [
          "Option::unzip",
          "has description",
          "Unzips an option containing a tuple of two options."
        ],
        ["Option::unzip", "has feature", "unzip_option"]
      ],
      "startIndex": 78988,
      "endIndex": 117988
    },
    {
      "triples": [
        ["Option<T>", "implements", "PartialOrd"],
        ["Option<T>", "implements", "Debug"],
        ["Option<T>", "implements", "Eq"],
        ["Option<T>", "implements", "Copy"],
        ["Option<T>", "implements", "From<&'a mut Option<T>>"],
        ["Option<T>", "implements", "From<T>"],
        ["Option<T>", "implements", "From<&'a Option<T>>"],
        ["Option<T>", "implements", "Hash"],
        ["Option<T>", "implements", "Ord"],
        ["Option<T>", "implements", "PartialEq"],
        ["Option<T>", "implements", "Try"],
        ["Option<T> as Try", "has associated type", "Ok = T"],
        ["Option<T> as Try", "has associated type", "Error = NoneError"],
        ["Option<T>", "has method", "partial_cmp"],
        ["partial_cmp", "has argument", "other"],
        ["partial_cmp", "returns", "Option<Ordering>"],
        ["Option<T>", "has method", "fmt"],
        ["fmt", "has argument", "f"],
        ["fmt", "returns", "Result<(), Error>"],
        ["Option<&'a mut T>", "implements", "From<&'a mut Option<T>>"],
        ["Option<&'a T>", "implements", "From<&'a Option<T>>"],
        ["Option<T>", "has method", "into_result"],
        ["into_result", "has return type", "Result<T, NoneError>"],
        [
          "into_result",
          "has description",
          "Applies the `?` operator. A return of `Ok(t)` means execution continues normally; `Err(e)` branches to the innermost `catch` or returns from the function."
        ],
        ["Option<T>", "has method", "from_ok"],
        ["from_ok", "has return type", "Option<T>"],
        [
          "from_ok",
          "has description",
          "Wrap an OK value to construct the composite result."
        ],
        ["Option<T>", "has method", "from_error"],
        ["from_error", "has return type", "Option<T>"],
        [
          "from_error",
          "has description",
          "Wrap an error value to construct the composite result."
        ],
        [
          "Option::flatten",
          "has description",
          "Converts from Option<Option<T>> to Option<T>"
        ],
        ["Option<Option<T>>", "has method", "flatten"],
        ["Option", "implements", "Try"],
        ["Option", "implements", "From"],
        ["Option", "implements", "Default"],
        ["Option", "implements", "Hash"],
        ["Option", "implements", "Clone"],
        ["Option", "implements", "Eq"],
        ["Option", "implements", "PartialEq"],
        ["Option", "implements", "Ord"],
        ["Option", "implements", "PartialOrd"],
        [
          "transpose",
          "has description",
          "Transposes an Option of a Result into a Result of an Option. None maps to Ok(None), Some(Ok(_)) and Some(Err(_)) map to Ok(Some(_)) and Err(_)."
        ],
        ["as_deref_mut", "returns", "Option<&mut <T as Deref>::Target>"],
        ["as_deref_mut", "has argument", "self"],
        ["as_deref_mut::self", "has type", "&mut self"],
        ["flatten", "returns", "Option<T>"],
        ["flatten", "has argument", "self"],
        ["flatten::self", "has type", "self"],
        ["Option<T>", "implements", "FromIterator<Option<A>>"],
        ["Option<T>", "implements", "Sum<Option<U>>"],
        ["Option<T>", "implements", "Clone"],
        ["Option<T>", "has method", "sum"],
        ["as_deref_mut", "returns", "Option<&mut T::Target>"],
        [
          "as_deref_mut",
          "has description",
          "Converts from Option<T> (or &mut Option<T>) to Option<&mut T::Target>."
        ],
        [
          "flatten",
          "has description",
          "Converts from Option<Option<T>> to Option<T>."
        ],
        ["Option<T>", "implements", "Sum"],
        [
          "sum",
          "has description",
          "Takes each element in the Iterator: if it is a None, no further elements are taken, and the None is returned. Should no None occur, the sum of all elements is returned."
        ],
        ["sum", "returns", "Option<T>"],
        ["Option<T>", "has method", "clone"],
        ["clone", "has description", "Returns a copy of the value."],
        ["Option<T>", "has method", "clone_from"],
        [
          "clone_from",
          "has description",
          "Performs copy-assignment from source."
        ],
        ["Option<T>", "implements", "Default"],
        ["Option<T>", "implements", "FromResidual"],
        ["Option<T>", "implements", "Residual"],
        ["Option<T>", "has method", "from_residual"],
        ["Option<T>", "has method", "from_iter"],
        [
          "from_residual",
          "has description",
          "Constructs the type from a compatible Residual type."
        ],
        [
          "from_iter",
          "has description",
          "Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."
        ],
        ["Option<T>", "has method", "zip"],
        ["Option<T>", "has method", "zip_with"]
      ],
      "startIndex": 118389,
      "endIndex": 157387
    },
    {
      "triples": [
        ["I", "implements", "IntoIterator"],
        [
          "IntoIterator for I",
          "has associated type",
          "Item = <I as Iterator>::Item"
        ],
        ["IntoIterator for I", "has associated type", "IntoIter = I"],
        ["I", "has method", "into_iter"],
        ["into_iter", "returns", "I"],
        ["T", "implements", "TryInto"],
        [
          "TryInto for T",
          "has associated type",
          "Error = <U as TryFrom<T>>::Error"
        ],
        ["T", "has method", "try_into"],
        ["try_into", "returns", "Result<U, <U as TryFrom<T>>::Error>"],
        ["try_into", "has argument", "self"],
        ["try_into", "has feature", "nightly-only experimental"],
        ["try_into", "has description", "Performs the conversion."],
        ["T", "implements", "Into"],
        ["T", "has method", "into"],
        ["into", "returns", "U"],
        ["into", "has argument", "self"],
        ["T", "implements", "Borrow"],
        ["T", "has method", "borrow"],
        ["borrow", "returns", "&T"],
        ["T", "implements", "BorrowMut"],
        ["T", "has method", "borrow_mut"],
        ["borrow_mut", "returns", "&mut T"],
        ["T", "implements", "Any"],
        ["Any for T", "has method", "get_type_id"],
        ["get_type_id", "returns", "TypeId"],
        ["get_type_id", "has feature", "nightly-only experimental"],
        ["T", "implements", "ToOwned"],
        ["ToOwned for T", "has associated type", "Owned = T"],
        ["T", "has method", "to_owned"],
        ["to_owned", "returns", "T"],
        ["T", "has method", "clone_into"],
        ["clone_into", "has argument", "target: &mut T"],
        ["clone_into", "has feature", "nightly-only experimental"]
      ],
      "startIndex": 157387,
      "endIndex": 176900
    },
    {
      "triples": [
        ["TryFrom<T> for U", "has associated type", "Error = Infallible"],
        ["TryFrom<T> for U", "has method", "try_from"],
        ["TryInto<U> for T", "has method", "try_into"],
        ["Into<U> for T", "has method", "into"],
        ["Borrow<T> for T", "has method", "borrow"],
        ["BorrowMut<T> for T", "has method", "borrow_mut"],
        ["Any for T", "has method", "type_id"],
        ["ToOwned for T", "has method", "to_owned"],
        ["ToOwned for T", "has method", "clone_into"],
        ["TryFrom<T>", "has feature", "nightly-only experimental"],
        ["TryInto<U>", "has feature", "nightly-only experimental"],
        ["T", "implements", "Borrow<T>"],
        ["T", "implements", "BorrowMut<T>"],
        ["T", "implements", "Any"],
        ["T", "implements", "ToOwned"],
        ["T", "has method", "borrow"],
        ["T", "has method", "borrow_mut"],
        ["T", "has method", "type_id"],
        ["T", "has method", "to_owned"],
        ["TryFrom<T>", "has associated type", "Error = Infallible"],
        ["T", "implements", "TryFrom<U>"],
        ["T", "implements", "Into<U>"],
        ["T", "implements", "TryInto<U>"],
        ["IntoIterator", "has associated type", "Item = <I as Iterator>::Item"],
        ["IntoIterator", "has associated type", "IntoIter = I"],
        ["I", "has method", "into_iter"],
        ["T", "has method", "try_into"],
        ["T", "has method", "clone_into"],
        ["TryFrom<U> for T", "has associated type", "Error = Infallible"],
        ["TryFrom<U> for T", "has method", "try_from"],
        ["try_from", "returns", "Result<T, Infallible>"],
        ["Option", "implements", "Ord"],
        ["Option", "implements", "PartialEq"],
        ["Option", "implements", "PartialOrd"],
        ["Option", "implements", "Product"],
        ["Option", "implements", "Sum"],
        ["Option", "implements", "Try"],
        ["Option", "implements", "StructuralEq"],
        ["Option", "implements", "StructuralPartialEq"],
        ["Option<T>", "implements", "Ord"],
        ["Option<T>", "implements", "PartialEq<Option<T>>"],
        ["Option<T>", "implements", "PartialOrd<Option<T>>"],
        ["Option<T>", "implements", "Product<Option<U>>"],
        ["Option<T>", "implements", "Sum<Option<U>>"],
        ["Option<T>", "implements", "Try"],
        ["Option<T>", "implements", "IntoIterator"],
        ["Option<T>", "has method", "cmp"],
        ["cmp", "has argument", "other"],
        ["cmp", "returns", "Ordering"],
        ["Option<T>", "implements", "PartialEq"],
        ["Option<T>", "has method", "eq"],
        ["eq", "has argument", "other"],
        ["eq", "returns", "bool"],
        ["Option<T>", "has method", "ne"],
        ["ne", "has argument", "other"],
        ["ne", "returns", "bool"],
        ["Option<T>", "implements", "PartialOrd"],
        ["Option<T>", "has method", "product"],
        ["product", "returns", "Option<T>"],
        ["Option<T>::Try", "has associated type", "Ok=T"],
        ["Option<T>::Try", "has associated type", "Error=NoneError"],
        ["Option<T>", "has method", "into_result"],
        ["into_result", "returns", "Result<T, NoneError>"],
        ["Option<T>", "has method", "from_ok"],
        ["from_ok", "returns", "Option<T>"],
        ["Option<T>", "has method", "from_error"],
        ["from_error", "returns", "Option<T>"],
        ["Option::zip", "returns", "Option<(T, U)>"],
        ["Option::zip", "has stability", "1.46.0"],
        ["Option::zip", "has feature", "const unstable"],
        ["Option::zip_with", "has feature", "option_zip"],
        ["Option::zip_with", "has stability", "nightly-only experimental"],
        ["Option::unzip", "returns", "(Option<T>, Option<U>)"],
        ["Option::unzip", "has feature", "unzip_option"],
        ["Option<T>", "implements", "Iterator"],
        ["Option<T>", "implements", "Product"],
        ["Option<T>", "implements", "Sum"],
        ["IntoIter<T>", "implements", "Iterator"],
        ["IntoIter<T>", "has associated type", "Item"],
        [
          "IntoIter<T>::Item",
          "has description",
          "The type of the elements being iterated over"
        ],
        ["Option<T>", "has method", "partial_cmp"],
        ["Option<T>", "has method", "sum"],
        [
          "Option::sum",
          "has description",
          "Takes each element in the Iterator: if it is a None, no further elements are taken, and the None is returned. Should no None occur, the sum of all elements is returned."
        ]
      ],
      "startIndex": 196103,
      "endIndex": 218118
    },
    {
      "triples": [
        ["From<!> for T", "has method", "from"],
        ["T", "implements", "From<!>"],
        ["From<T> for T", "has method", "from"],
        ["T", "implements", "From<T>"],
        ["Into<U> for T", "has method", "into"],
        ["T", "implements", "Into<U>"],
        ["TryFrom<U> for T", "has method", "try_from"],
        ["TryFrom<U> for T", "has associated type", "Error = Infallible"],
        ["T", "implements", "TryFrom<U>"],
        ["TryInto<U> for T", "has method", "try_into"],
        ["T", "implements", "TryInto<U>"],
        [
          "TryInto<U> for T",
          "has associated type",
          "Error = <U as TryFrom<T>>::Error"
        ],
        ["BorrowMut<T> for T", "has feature", "const unstable"],
        ["From<T> for T", "has description", "Returns the argument unchanged."],
        [
          "Into<U> for T",
          "has description",
          "Calls U::from(self). This conversion is whatever the implementation of From<T> for U chooses to do."
        ],
        ["ToOwned", "has method", "clone_into"],
        ["ToOwned::clone_into", "has feature", "nightly-only experimental"],
        ["TryFrom<U> for T", "has description", "Performs the conversion."],
        ["TryInto<U> for T", "has description", "Performs the conversion."],
        ["BorrowMut<T>", "implements", "BorrowMut"],
        ["BorrowMut<T>", "has method", "borrow_mut"],
        ["From<T>", "has description", "Returns the argument unchanged"],
        ["Into<U> for T", "has description", "Calls U::from(self)"],
        ["ToOwned", "has associated type", "Owned = T"],
        ["ToOwned", "has method", "to_owned"],
        [
          "BorrowMut::borrow_mut",
          "has description",
          "Mutably borrows from an owned value"
        ],
        ["ToOwned::clone_into", "has feature", "toowned_clone_into"],
        ["Into<U> for T", "has description", "Calls U::from(self)."]
      ],
      "startIndex": 220906,
      "endIndex": 235958
    }
  ],
  "model": "deepseek-r1-250120"
}
