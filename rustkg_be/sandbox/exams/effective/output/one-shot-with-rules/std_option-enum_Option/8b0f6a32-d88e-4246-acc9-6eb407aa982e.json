{"create_time":"2025-03-26T14:00:06.298Z","id":"8b0f6a32-d88e-4246-acc9-6eb407aa982e","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\merged_3235c2a5-82d7-49cb-8973-bb05d953fe81.json","relations":["contains","has argument","has associated type","has description","has feature","has full name","has generic parameter","has method","has parameter","has return type","has type","implements","is a","requires trait","returns"],"delete_triples":[{"triples":[],"startIndex":0,"endIndex":38530},{"triples":[],"startIndex":39929,"endIndex":78929},{"triples":[],"startIndex":78988,"endIndex":117988},{"triples":[],"startIndex":118389,"endIndex":157387},{"triples":[["Option<T>","implements","IntoIterator"],["Option<T> as IntoIterator","has associated type","Item = T"],["Option<T> as IntoIterator","has associated type","IntoIter = IntoIter<T>"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["&'a Option<T>","implements","IntoIterator"],["IntoIterator for &'a Option<T>","has associated type","Item = &'a T"],["IntoIterator for &'a Option<T>","has associated type","IntoIter = Iter<'a, T>"],["&'a Option<T>","has method","into_iter"],["into_iter (for &'a Option<T>)","has return type","Iter<'a, T>"],["&'a mut Option<T>","implements","IntoIterator"],["IntoIterator for &'a mut Option<T>","has associated type","Item = &'a mut T"],["IntoIterator for &'a mut Option<T>","has associated type","IntoIter = IterMut<'a, T>"],["&'a mut Option<T>","has method","into_iter"],["into_iter (for &'a mut Option<T>)","has return type","IterMut<'a, T>"],["&Option<T>","implements","IntoIterator"],["&Option<T> as IntoIterator","has associated type","Item = &T"],["&Option<T> as IntoIterator","has associated type","IntoIter = Iter<T>"],["&Option<T>","has method","into_iter"],["into_iter","has full name","std::option::Option::into_iter"],["into_iter","returns","Iter<T>"],["&mut Option<T>","implements","IntoIterator"],["&mut Option<T> as IntoIterator","has associated type","Item = &mut T"],["&mut Option<T> as IntoIterator","has associated type","IntoIter = IterMut<T>"],["&mut Option<T>","has method","into_iter"],["into_iter","returns","IterMut<T>"]],"startIndex":157387,"endIndex":176900}],"add_triples":[{"triples":[["std::option","contains","NoneError"],["std::option::Option","has method","as_pin_mut"],["std::option::Option","has method","iter"],["std::option::Option","has method","iter_mut"],["std::option::Option","has method","and"],["std::option::Option","has method","and_then"],["std::option::Option","has method","filter"],["std::option::Option","has method","or"],["std::option::Option","has method","or_else"],["std::option::Option","has method","xor"],["std::option::Option","has method","get_or_insert"],["std::option::Option","has method","get_or_insert_with"],["std::option::Option","has method","take"],["std::option::Option","has method","replace"],["std::option::Option","has method","cloned"],["std::option::Option","has method","unwrap_or_default"],["std::option::Option","has method","deref"],["std::option::Option","has method","transpose"],["std::option::Option::as_pin_mut","has feature","nightly-only experimental"],["std::option::NoneError","has description","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result."]],"startIndex":0,"endIndex":38530},{"triples":[["std::option::Option::filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns the result."],["std::option::Option::filter","has argument","predicate"],["std::option::Option::filter::predicate","has type","FnOnce(&T) -> bool"],["std::option::Option::filter","returns","Option<T>"],["std::option::Option::filter","has generic parameter","P"],["std::option::Option::xor","has feature","nightly-only experimental"],["std::option::Option::xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["std::option::Option::xor","has argument","optb"],["std::option::Option::xor::optb","has type","Option<T>"]],"startIndex":39929,"endIndex":78929},{"triples":[["Option","has method","replace"],["replace","has argument","self"],["replace::self","has type","&mut self"],["replace","has argument","value"],["replace::value","has type","T"],["replace","returns","Option<T>"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present."],["replace","has feature","nightly-only experimental"],["Option<&mut T>","has method","cloned"],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["transpose","has feature","nightly-only experimental"],["transpose","returns","Result<Option<T>, E>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["deref","has feature","nightly-only experimental"],["deref","returns","Option<&T::Target>"]],"startIndex":78988,"endIndex":117988},{"triples":[["Option<T>","implements","Try"],["Option<T> as Try","has associated type","Ok = T"],["Option<T> as Try","has associated type","Error = NoneError"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&'a T>","implements","From<&'a Option<T>>"]],"startIndex":118389,"endIndex":157387},{"triples":[["I","implements","IntoIterator"],["IntoIterator for I","has associated type","Item = <I as Iterator>::Item"],["IntoIterator for I","has associated type","IntoIter = I"],["I","has method","into_iter"],["into_iter","returns","I"],["T","implements","TryInto"],["TryInto for T","has associated type","Error = <U as TryFrom<T>>::Error"],["T","has method","try_into"],["try_into","returns","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has argument","self"],["try_into","has feature","nightly-only experimental"],["try_into","has description","Performs the conversion."],["T","implements","Into"],["T","has method","into"],["into","returns","U"],["into","has argument","self"],["T","implements","Borrow"],["T","has method","borrow"],["borrow","returns","&T"],["T","implements","BorrowMut"],["T","has method","borrow_mut"],["borrow_mut","returns","&mut T"],["T","implements","Any"],["Any for T","has method","get_type_id"],["get_type_id","returns","TypeId"],["get_type_id","has feature","nightly-only experimental"],["T","implements","ToOwned"],["ToOwned for T","has associated type","Owned = T"],["T","has method","to_owned"],["to_owned","returns","T"],["T","has method","clone_into"],["clone_into","has argument","target: &mut T"],["clone_into","has feature","nightly-only experimental"]],"startIndex":157387,"endIndex":176900}],"metrics":{"escapeCount":0,"costTime":1020866,"totalUsage":{"prompt_tokens":108163,"completion_tokens":29402,"cached_tokens":0,"reasoning_tokens":26996},"chunkLength":5,"chunksInfo":[{"oldContextLength":27,"oldStrLength":29160,"newContextLength":27,"newStrLength":38551,"costTime":190619},{"oldContextLength":227,"oldStrLength":22329,"newContextLength":227,"newStrLength":39021,"costTime":260055},{"oldContextLength":227,"oldStrLength":10296,"newContextLength":227,"newStrLength":39021,"costTime":94384},{"oldContextLength":227,"oldStrLength":18273,"newContextLength":227,"newStrLength":39019,"costTime":247435},{"oldContextLength":227,"oldStrLength":8050,"newContextLength":227,"newStrLength":19534,"costTime":228373}]},"model":"deepseek-r1-250120","extraInfo":{}}