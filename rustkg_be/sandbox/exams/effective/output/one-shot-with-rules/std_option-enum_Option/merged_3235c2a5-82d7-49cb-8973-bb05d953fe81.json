{
  "create_time": "2025-03-26T14:07:13.057Z",
  "id": "merged_3235c2a5-82d7-49cb-8973-bb05d953fe81",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.20-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html",
  "merged_triples": [
    {
      "triples": [
        [
          "IntoIter",
          "has description",
          "An iterator over the value in [`Some`] variant of an [`Option`]."
        ],
        [
          "Iter",
          "has description",
          "An iterator over a reference to the [`Some`] variant of an [`Option`]."
        ],
        [
          "IterMut",
          "has description",
          "An iterator over a mutable reference to the [`Some`] variant of an [`Option`]."
        ],
        [
          "Option::expect",
          "has description",
          "Unwraps an option, yielding the content of a Some"
        ],
        ["Option::expect", "panics with", "custom message provided by msg"],
        [
          "Option::unwrap",
          "has description",
          "Moves the value v out of the Option<T> if it is Some(v)"
        ],
        ["Option::unwrap", "panics with", "None value"],
        ["Option::unwrap_or", "has parameter", "def: T"],
        [
          "Option::unwrap_or",
          "has description",
          "Returns the contained value or a default"
        ],
        ["Option::map", "has generic parameter", "U"],
        ["Option::map", "has generic parameter", "F"],
        [
          "Option::map",
          "has description",
          "Maps an Option<T> to Option<U> by applying a function"
        ],
        ["Option", "has method", "unwrap_or_else"],
        ["Option", "has method", "map_or"],
        ["Option", "has method", "map_or_else"],
        ["Option", "has method", "ok_or"],
        ["Option", "has method", "ok_or_else"],
        ["Option", "has method", "iter"],
        ["Option", "has method", "iter_mut"],
        ["Option", "has method", "and"],
        ["Option", "has method", "or"],
        [
          "IntoIter",
          "has description",
          "An iterator over the value in Some variant of an Option."
        ],
        [
          "Iter",
          "has description",
          "An iterator over a reference to the Some variant of an Option."
        ],
        [
          "IterMut",
          "has description",
          "An iterator over a mutable reference to the Some variant of an Option."
        ]
      ],
      "startIndex": 215,
      "endIndex": 39215
    },
    {
      "triples": [
        ["Option", "has method", "get_or_insert"],
        [
          "get_or_insert",
          "has full name",
          "std::option::Option::get_or_insert"
        ],
        ["get_or_insert", "has argument", "v"],
        ["get_or_insert::v", "has type", "T"],
        ["get_or_insert", "has return type", "&mut T"],
        [
          "get_or_insert",
          "has description",
          "Inserts v into the option if it is None, then returns a mutable reference to the contained value."
        ],
        ["Option", "has method", "get_or_insert_with"],
        [
          "get_or_insert_with",
          "has full name",
          "std::option::Option::get_or_insert_with"
        ],
        ["get_or_insert_with", "has argument", "f"],
        ["get_or_insert_with::f", "has type", "F"],
        ["F", "requires trait", "FnOnce() -> T"],
        ["get_or_insert_with", "has return type", "&mut T"],
        [
          "get_or_insert_with",
          "has description",
          "Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."
        ],
        [
          "Option::or_else",
          "has description",
          "Returns the option if it contains a value, otherwise calls f and returns the result."
        ],
        [
          "Option::take",
          "has description",
          "Takes the value out of the option, leaving a None in its place."
        ],
        ["get_or_insert", "has argument", "self"],
        ["get_or_insert::self", "has type", "&mut self"],
        ["get_or_insert", "returns", "&mut T"],
        ["get_or_insert_with", "has argument", "self"],
        ["get_or_insert_with::self", "has type", "&mut self"],
        ["get_or_insert_with", "returns", "&mut T"],
        ["Option", "has method", "cloned"],
        ["cloned", "has full name", "std::option::Option::cloned"],
        ["cloned", "returns", "Option<T>"],
        [
          "cloned",
          "has description",
          "Maps an Option<&T> to an Option<T> by cloning the contents of the option."
        ],
        ["Option", "has method", "unwrap_or_default"],
        [
          "unwrap_or_default",
          "has full name",
          "std::option::Option::unwrap_or_default"
        ],
        ["unwrap_or_default", "returns", "T"],
        ["unwrap_or_default", "has argument", "self"],
        ["unwrap_or_default::self", "has type", "&self"],
        [
          "unwrap_or_default",
          "has description",
          "Returns the contained value or a default"
        ],
        [
          "and_then",
          "has description",
          "Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."
        ],
        [
          "Option",
          "has description",
          "The Option type. See the module level documentation for more."
        ],
        [
          "or",
          "has description",
          "Returns the option if it contains a value, otherwise returns optb. Examples show short-circuiting behavior"
        ],
        [
          "or_else",
          "has description",
          "Returns the option if it contains a value, otherwise calls f and returns the result. Enables lazy fallback evaluation"
        ],
        [
          "take",
          "has description",
          "Takes the value out of the option, leaving a None in its place. Modifies the original option in-place"
        ]
      ],
      "startIndex": 39217,
      "endIndex": 78217
    },
    {
      "triples": [
        ["Option<T>", "has method", "max"],
        ["max", "has full name", "std::option::Option::max"],
        ["max", "returns", "Self"],
        ["max", "has argument", "self"],
        ["max", "has argument", "other: Self"],
        [
          "max",
          "has description",
          "Compares and returns the maximum of two values."
        ],
        ["Option<T>", "has method", "min"],
        ["min", "has full name", "std::option::Option::min"],
        ["min", "returns", "Self"],
        ["min", "has argument", "self"],
        ["min", "has argument", "other: Self"],
        [
          "min",
          "has description",
          "Compares and returns the minimum of two values."
        ],
        ["&'a Option<T>", "implements", "IntoIterator"],
        [
          "IntoIterator for &'a Option<T>",
          "has associated type",
          "Item = &'a T"
        ],
        [
          "IntoIterator for &'a Option<T>",
          "has associated type",
          "IntoIter = Iter<'a, T>"
        ],
        ["&'a mut Option<T>", "implements", "IntoIterator"],
        [
          "IntoIterator for &'a mut Option<T>",
          "has associated type",
          "Item = &'a mut T"
        ],
        [
          "IntoIterator for &'a mut Option<T>",
          "has associated type",
          "IntoIter = IterMut<'a, T>"
        ],
        ["&'a Option<T>", "has method", "into_iter"],
        ["into_iter (for &'a Option<T>)", "has return type", "Iter<'a, T>"],
        ["&'a mut Option<T>", "has method", "into_iter"],
        [
          "into_iter (for &'a mut Option<T>)",
          "has return type",
          "IterMut<'a, T>"
        ],
        ["Option", "has method", "max"],
        ["max::self", "has type", "self"],
        ["max", "has argument", "other"],
        ["max::other", "has type", "Self"],
        ["Option", "has method", "min"],
        ["min::self", "has type", "self"],
        ["min", "has argument", "other"],
        ["min::other", "has type", "Self"],
        ["&Option<T>", "implements", "IntoIterator"],
        ["&Option<T> as IntoIterator", "has associated type", "Item = &T"],
        [
          "&Option<T> as IntoIterator",
          "has associated type",
          "IntoIter = Iter<T>"
        ],
        ["Iter<T>", "is a", "struct"],
        ["&Option<T>", "has method", "into_iter"],
        ["into_iter", "has full name", "std::option::Option::into_iter"],
        ["into_iter", "returns", "Iter<T>"],
        [
          "into_iter",
          "has description",
          "Creates an iterator from a value. Read more"
        ],
        ["&mut Option<T>", "implements", "IntoIterator"],
        [
          "&mut Option<T> as IntoIterator",
          "has associated type",
          "Item = &mut T"
        ],
        [
          "&mut Option<T> as IntoIterator",
          "has associated type",
          "IntoIter = IterMut<T>"
        ],
        ["IterMut<T>", "is a", "struct"],
        ["&mut Option<T>", "has method", "into_iter"],
        ["into_iter", "returns", "IterMut<T>"],
        ["max", "has full name", "std::cmp::Ord::max"],
        ["max::self", "has type", "Self"],
        [
          "max",
          "has description",
          "Compares and returns the maximum of two values. Read more"
        ],
        ["min", "has full name", "std::cmp::Ord::min"],
        ["min::self", "has type", "Self"],
        [
          "min",
          "has description",
          "Compares and returns the minimum of two values. Read more"
        ],
        ["Option<T>", "implements", "IntoIterator"],
        ["Option<T> as IntoIterator", "has associated type", "Item = T"],
        [
          "Option<T> as IntoIterator",
          "has associated type",
          "IntoIter = IntoIter<T>"
        ],
        [
          "into_iter",
          "has description",
          "Returns a consuming iterator over the possibly contained value."
        ]
      ],
      "startIndex": 78242,
      "endIndex": 89034
    }
  ],
  "model": "deepseek-r1-250120"
}
