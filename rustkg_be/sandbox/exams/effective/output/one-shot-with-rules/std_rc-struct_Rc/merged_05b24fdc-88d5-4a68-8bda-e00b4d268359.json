{"create_time":"2025-03-29T05:12:19.293Z","id":"merged_05b24fdc-88d5-4a68-8bda-e00b4d268359","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.20-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Rc.html","merged_triples":[{"triples":[["Rc","is a","struct"],["Rc","has full name","std::rc::Rc"],["Rc","has declaration","pub struct Rc<T> where T: ?Sized { // some fields omitted }"],["Rc","has description","A reference-counted pointer type over an immutable value."],["new","is a","method"],["new","has full name","std::rc::Rc::new"],["Rc","has method","new"],["new","has argument","new::value"],["new::value","has type","T"],["new","has return type","Rc<T>"],["new","has description","Constructs a new Rc<T>."],["new","has example","use std::rc::Rc; let five = Rc::new(5);"],["try_unwrap","is a","method"],["try_unwrap","has full name","std::rc::Rc::try_unwrap"],["Rc","has method","try_unwrap"],["try_unwrap","has argument","try_unwrap::this"],["try_unwrap::this","has type","Rc<T>"],["try_unwrap","has return type","Result<T, Rc<T>>"],["try_unwrap","has description","Unwraps the contained value if the Rc<T> has exactly one strong reference. Otherwise, an Err is returned with the same Rc<T>. This will succeed even if there are outstanding weak references."],["try_unwrap","stable since","1.4.0"],["downgrade","is a","method"],["downgrade","has full name","std::rc::Rc::downgrade"],["Rc","has method","downgrade"],["downgrade","has argument","downgrade::this"],["downgrade::this","has type","&Rc<T>"],["downgrade","has return type","Weak<T>"],["downgrade","has description","Downgrades the Rc<T> to a Weak<T> reference."],["downgrade","stable since","1.4.0"],["Rc","implements","Deref"],["Deref","is a","trait"],["Rc","has method","deref"],["deref","has return type","&T"],["Rc","implements","Clone"],["clone","is a","method"],["clone","has description","Makes a clone of the Rc<T>. When you clone an Rc<T>, it will create another pointer to the data and increase the strong reference counter."],["would_unwrap","has stability","Unstable (rc_would_unwrap #28356): just added for niche usecase"],["weak_count","has stability","Unstable (rc_counts #28356): not clearly useful"],["strong_count","has stability","Unstable (rc_counts #28356): not clearly useful"],["is_unique","has stability","Unstable (rc_counts #28356): uniqueness has unclear meaning"],["Rc","implements","Drop"],["drop","has description","Drops the Rc<T>. This will decrement the strong reference count. If the strong reference count becomes zero and the only other references are Weak<T> ones, drops the inner value."],["Rc","stable since","1.0.0"],["Rc::new","is a","function"],["Rc::new","has full name","std::rc::Rc::new"],["Rc::new","has argument","value"],["value","has type","T"],["Rc::new","has return type","Rc<T>"],["Rc::new","has description","Constructs a new Rc<T>."],["Rc::try_unwrap","is a","function"],["Rc::try_unwrap","stable since","1.4.0"],["Rc::try_unwrap","has argument","this"],["this","has type","Rc<T>"],["Rc::try_unwrap","has return type","Result<T, Rc<T>>"],["Rc::try_unwrap","has description","Unwraps the contained value if the Rc<T> has exactly one strong reference. Otherwise, an Err is returned with the same Rc<T>."],["Rc::would_unwrap","is a","function"],["Rc::would_unwrap","has stability","Unstable (rc_would_unwrap #28356): just added for niche usecase"],["Rc::would_unwrap","has description","Checks if Rc::try_unwrap would return Ok."],["Rc::downgrade","stable since","1.4.0"],["Rc::downgrade","has return type","Weak<T>"],["Rc::downgrade","has description","Downgrades the Rc<T> to a Weak<T> reference."],["Rc<T>","implements","Clone"],["Rc<T>","implements","Deref"],["Rc<T>::Deref","has associated type","Target = T"],["Rc<T>","implements","Drop"],["Rc<T>","excludes","Send"],["Rc<T>","excludes","Sync"],["std::rc","contains","Rc"],["std::rc","contains","Weak"],["Rc::make_mut","stable since","1.4.0"],["Rc::make_mut","has description","Make a mutable reference into the given Rc<T> by cloning the inner data..."],["Rc::get_mut","stable since","1.4.0"],["Rc::get_mut","has description","Returns a mutable reference to the contained value if the Rc<T> is unique."],["Rc","has generic parameter","T"],["new","has argument","value: T"],["Deref for Rc<T>","has Target type","T"],["Rc","implements","PartialEq"],["Rc","has stability","!Send"],["Rc","has stability","!Sync"],["Rc::new","has description","Constructs a new Rc<T>"],["try_unwrap","has description","Unwraps the contained value if the Rc<T> has exactly one strong reference"],["Rc","has description","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'."],["Rc","has method","into_raw"],["into_raw","is a","method"],["into_raw","has full name","std::rc::Rc::into_raw"],["into_raw","has return type","*const T"],["into_raw","stable since","1.17.0"],["Rc","has method","from_raw"],["from_raw","is a","method"],["from_raw","has full name","std::rc::Rc::from_raw"],["from_raw","has argument","ptr"],["ptr","has type","*const T"],["from_raw","stable since","1.17.0"],["Rc","has method","ptr_eq"],["ptr_eq","is a","method"],["ptr_eq","has full name","std::rc::Rc::ptr_eq"],["ptr_eq","has return type","bool"],["ptr_eq","stable since","1.17.0"],["Rc<T>","implements","Eq"],["Rc<T>","implements","PartialOrd"],["downgrade","has description","Creates a new Weak pointer to this value."],["Rc::downgrade","has description","Creates a new Weak pointer to this value."],["try_unwrap","has description","Returns the contained value if the Rc has exactly one strong reference."],["Rc::try_unwrap","has description","Returns the contained value if the Rc has exactly one strong reference."],["Weak","has description","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value."],["into_raw","has argument","this"],["into_raw","has description","Consumes the Rc, returning the wrapped pointer."],["from_raw","has return type","Rc<T>"],["from_raw","has description","Constructs an Rc from a raw pointer."],["ptr_eq","has argument","this"],["ptr_eq","has argument","other"],["ptr_eq","has description","Returns true if the two Rcs point to the same value"],["Rc","implements","Eq"],["Rc","implements","PartialOrd"],["Rc::try_unwrap","has description","Returns the contained value if the Rc has exactly one strong reference"],["Weak","has description","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`."],["ptr_eq","has description","Returns true if the two Rcs point to the same value (not just values that compare as equal)."],["try_unwrap","has description","Returns the contained value if the Rc has exactly one strong reference. Otherwise, an Err is returned with the same Rc."],["Rc","has method","weak_count"],["weak_count","has description","Get the number of weak references to this value."],["Rc","has method","strong_count"],["strong_count","has description","Get the number of strong references to this value."]],"startIndex":0,"endIndex":39000},{"triples":[["Display","is a","trait"],["Rc","implements","Display"],["std::fmt::Display::fmt","is a","method"],["Rc","has method","std::fmt::Display::fmt"],["std::fmt::Display::fmt","has full name","std::fmt::Display::fmt"],["std::fmt::Display::fmt","has description","Formats the value using the given formatter."],["std::fmt::Display::fmt","has argument","std::fmt::Display::fmt::self"],["std::fmt::Display::fmt::self","has type","&Rc<T>"],["std::fmt::Display::fmt","has argument","std::fmt::Display::fmt::f"],["std::fmt::Display::fmt::f","has type","&mut Formatter"],["std::fmt::Display::fmt","has return type","Result<(), Error>"],["Debug","is a","trait"],["Rc","implements","Debug"],["std::fmt::Debug::fmt","is a","method"],["Rc","has method","std::fmt::Debug::fmt"],["std::fmt::Debug::fmt","has full name","std::fmt::Debug::fmt"],["std::fmt::Debug::fmt","has description","Formats the value using the given formatter."],["std::fmt::Debug::fmt","has argument","std::fmt::Debug::fmt::self"],["std::fmt::Debug::fmt::self","has type","&Rc<T>"],["std::fmt::Debug::fmt","has argument","std::fmt::Debug::fmt::f"],["std::fmt::Debug::fmt::f","has type","&mut Formatter"],["std::fmt::Debug::fmt","has return type","Result<(), Error>"],["Pointer","is a","trait"],["Rc","implements","Pointer"],["std::fmt::Pointer::fmt","is a","method"],["Rc","has method","std::fmt::Pointer::fmt"],["std::fmt::Pointer::fmt","has full name","std::fmt::Pointer::fmt"],["std::fmt::Pointer::fmt","has description","Formats the value using the given formatter."],["std::fmt::Pointer::fmt","has argument","std::fmt::Pointer::fmt::self"],["std::fmt::Pointer::fmt::self","has type","&Rc<T>"],["std::fmt::Pointer::fmt","has argument","std::fmt::Pointer::fmt::f"],["std::fmt::Pointer::fmt::f","has type","&mut Formatter"],["std::fmt::Pointer::fmt","has return type","Result<(), Error>"],["From","is a","trait"],["Rc","implements","From"],["from","is a","method"],["Rc","has method","from"],["from","has full name","std::convert::From::from"],["from","has description","Performs the conversion."],["from","has argument","from::t"],["from::t","has type","T"],["from","has return type","Rc<T>"],["from","stable since","1.6.0"],["Borrow","is a","trait"],["Rc","implements","Borrow"],["borrow","is a","method"],["Rc","has method","borrow"],["borrow","has full name","std::borrow::Borrow::borrow"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has argument","borrow::self"],["borrow::self","has type","&Rc<T>"],["borrow","has return type","&T"],["AsRef","is a","trait"],["Rc","implements","AsRef"],["as_ref","is a","method"],["Rc","has method","as_ref"],["as_ref","has full name","std::convert::AsRef::as_ref"],["as_ref","has description","Performs the conversion."],["as_ref","has argument","as_ref::self"],["as_ref::self","has type","&Rc<T>"],["as_ref","has return type","&T"],["as_ref","stable since","1.5.0"],["UnwindSafe","is a","trait"],["Rc","implements","UnwindSafe"],["Rc","stable since","1.9.0"],["Rc<T>","implements","Display"],["Rc<T>","implements","Debug"],["Rc<T>","implements","Pointer"],["Rc<T>","implements","From<T>"],["Rc<T>","implements","Borrow<T>"],["Rc<T>","implements","AsRef<T>"],["Rc<T>","implements","UnwindSafe"],["Rc<T>::Display::fmt","is a","function"],["Rc<T>::Display::fmt","has argument","self"],["self","has type","&Rc<T>"],["Rc<T>::Display::fmt","has argument","f"],["f","has type","&mut Formatter"],["Rc<T>::Display::fmt","has return type","Result<(), Error>"],["Rc<T>::Display::fmt","has description","Formats the value using the given formatter."],["Rc<T>::Debug::fmt","is a","function"],["Rc<T>::Debug::fmt","has argument","self"],["Rc<T>::Debug::fmt","has argument","f"],["Rc<T>::Debug::fmt","has return type","Result<(), Error>"],["Rc<T>::Debug::fmt","has description","Formats the value using the given formatter."],["Rc<T>::Pointer::fmt","is a","function"],["Rc<T>::Pointer::fmt","has argument","self"],["self","has type","Rc<T>"],["Rc<T>::Pointer::fmt","has argument","f"],["Rc<T>::Pointer::fmt","has return type","Result<(), Error>"],["Rc<T>::Pointer::fmt","has description","Formats the value using the given formatter."],["Rc<T>::from","is a","function"],["Rc<T>::from","has argument","t"],["t","has type","T"],["Rc<T>::from","has return type","Rc<T>"],["Rc<T>::from","has description","Performs the conversion."],["Rc<T>::from","stable since","1.6.0"],["Rc<T>::borrow","is a","function"],["Rc<T>::borrow","has argument","self"],["Rc<T>::borrow","has return type","&T"],["Rc<T>::borrow","has description","Immutably borrows from an owned value."],["Rc<T>::as_ref","is a","function"],["Rc<T>::as_ref","has argument","self"],["Rc<T>::as_ref","has return type","&T"],["Rc<T>::as_ref","has description","Performs the conversion."],["Rc<T>::as_ref","stable since","1.5.0"],["Rc<T>","stable since","1.9.0"],["Display","has method","fmt"],["Display::fmt","is a","method"],["Display::fmt","has description","Formats the value using the given formatter."],["Display::fmt","has argument","self"],["Display::fmt::self","has type","&Rc<T>"],["Display::fmt","has argument","f"],["Display::fmt::f","has type","&mut Formatter"],["Display::fmt","has return type","Result<(), Error>"],["Debug","has method","fmt"],["Debug::fmt","is a","method"],["Debug::fmt","has description","Formats the value using the given formatter."],["Debug::fmt","has argument","self"],["Debug::fmt::self","has type","&Rc<T>"],["Debug::fmt","has argument","f"],["Debug::fmt::f","has type","&mut Formatter"],["Debug::fmt","has return type","Result<(), Error>"],["Pointer","has method","fmt"],["Pointer::fmt","is a","method"],["Pointer::fmt","has description","Formats the value using the given formatter."],["Pointer::fmt","has argument","self"],["Pointer::fmt::self","has type","&Rc<T>"],["Pointer::fmt","has argument","f"],["Pointer::fmt::f","has type","&mut Formatter"],["Pointer::fmt","has return type","Result<(), Error>"],["From","has method","from"],["From::from","is a","method"],["From::from","has description","Performs the conversion."],["From::from","has argument","t"],["From::from::t","has type","T"],["From::from","has return type","Rc<T>"],["From::from","stable since","1.6.0"],["Borrow","has method","borrow"],["Borrow::borrow","is a","method"],["Borrow::borrow","has description","Immutably borrows from an owned value."],["Borrow::borrow","has argument","self"],["Borrow::borrow::self","has type","&Rc<T>"],["Borrow::borrow","has return type","&T"],["AsRef","has method","as_ref"],["AsRef::as_ref","is a","method"],["AsRef::as_ref","has description","Performs the conversion."],["AsRef::as_ref","has argument","self"],["AsRef::as_ref::self","has type","&Rc<T>"],["AsRef::as_ref","has return type","&T"],["AsRef::as_ref","stable since","1.5.0"],["Formatter","is a","struct"],["Formatter","has full name","std::fmt::Formatter"],["Error","is a","struct"],["Error","has full name","std::fmt::Error"],["Result","is a","enum"],["Result","has full name","std::result::Result"],["Rc<T>","implements","CoerceUnsized"],["Rc<T>::hash","has description","Feeds this value into the given [Hasher]."],["Rc<T>::hash_slice","has description","Feeds a slice of this type into the given [Hasher]."],["max","has stability","Unstable (ord_max_min #25663)"],["min","has stability","Unstable (ord_max_min #25663)"],["clone","has description","Makes a clone of the Rc pointer. This creates another pointer to the same inner value, increasing the strong reference count."],["Rc","implements","CoerceUnsized"],["Rc","has method","max"],["max","is a","method"],["Rc","has method","min"],["min","is a","method"],["Rc::drop","has description","Drops the Rc. This will decrement the strong reference count. If the strong reference count reaches zero then the only other references (if any) are Weak, so we drop the inner value."],["Rc::clone","has description","Makes a clone of the Rc pointer. This creates another pointer to the same inner value, increasing the strong reference count."],["Rc::hash","has description","Feeds this value into the given Hasher. Read more"],["Rc<T>","implements","Hash"],["Rc<T>","implements","Ord"],["Rc<T>","implements","Clone"],["Rc<T>","implements","Deref"],["Rc<T>","implements","Drop"],["Rc<T>","implements","PartialEq<Rc<T>>"],["Rc<T>","excludes","Sync"],["Rc<T>","excludes","Send"],["Rc<T>","implements","CoerceUnsized<Rc<U>>"]],"startIndex":39000,"endIndex":78000}],"model":"deepseek-r1-250120"}