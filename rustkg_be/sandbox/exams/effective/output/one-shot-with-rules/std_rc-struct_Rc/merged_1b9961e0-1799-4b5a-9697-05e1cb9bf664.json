{
  "create_time": "2025-03-29T06:27:45.320Z",
  "id": "merged_1b9961e0-1799-4b5a-9697-05e1cb9bf664",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.50-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Rc.html",
  "merged_triples": [
    {
      "triples": [
        ["Rc", "is a", "struct"],
        ["Rc", "has full name", "std::rc::Rc"],
        [
          "Rc",
          "has declaration",
          "pub struct Rc<T> where T: ?Sized { // some fields omitted }"
        ],
        [
          "Rc",
          "has description",
          "A reference-counted pointer type over an immutable value."
        ],
        ["new", "is a", "method"],
        ["new", "has full name", "std::rc::Rc::new"],
        ["Rc", "has method", "new"],
        ["new", "has argument", "new::value"],
        ["new::value", "has type", "T"],
        ["new", "has return type", "Rc<T>"],
        ["new", "has description", "Constructs a new Rc<T>."],
        ["new", "has example", "use std::rc::Rc; let five = Rc::new(5);"],
        ["try_unwrap", "is a", "method"],
        ["try_unwrap", "has full name", "std::rc::Rc::try_unwrap"],
        ["Rc", "has method", "try_unwrap"],
        ["try_unwrap", "has argument", "try_unwrap::this"],
        ["try_unwrap::this", "has type", "Rc<T>"],
        ["try_unwrap", "has return type", "Result<T, Rc<T>>"],
        [
          "try_unwrap",
          "has description",
          "Unwraps the contained value if the Rc<T> has exactly one strong reference. Otherwise, an Err is returned with the same Rc<T>. This will succeed even if there are outstanding weak references."
        ],
        ["try_unwrap", "stable since", "1.4.0"],
        ["downgrade", "is a", "method"],
        ["downgrade", "has full name", "std::rc::Rc::downgrade"],
        ["Rc", "has method", "downgrade"],
        ["downgrade", "has argument", "downgrade::this"],
        ["downgrade::this", "has type", "&Rc<T>"],
        ["downgrade", "has return type", "Weak<T>"],
        [
          "downgrade",
          "has description",
          "Downgrades the Rc<T> to a Weak<T> reference."
        ],
        ["downgrade", "stable since", "1.4.0"],
        ["Rc", "implements", "Deref"],
        ["Deref", "is a", "trait"],
        ["Rc", "has method", "deref"],
        ["deref", "has return type", "&T"],
        ["Rc", "implements", "Clone"],
        ["clone", "is a", "method"],
        [
          "clone",
          "has description",
          "Makes a clone of the Rc<T>. When you clone an Rc<T>, it will create another pointer to the data and increase the strong reference counter."
        ],
        [
          "would_unwrap",
          "has stability",
          "Unstable (rc_would_unwrap #28356): just added for niche usecase"
        ],
        [
          "weak_count",
          "has stability",
          "Unstable (rc_counts #28356): not clearly useful"
        ],
        [
          "strong_count",
          "has stability",
          "Unstable (rc_counts #28356): not clearly useful"
        ],
        [
          "is_unique",
          "has stability",
          "Unstable (rc_counts #28356): uniqueness has unclear meaning"
        ],
        ["Rc", "implements", "Drop"],
        [
          "drop",
          "has description",
          "Drops the Rc<T>. This will decrement the strong reference count. If the strong reference count becomes zero and the only other references are Weak<T> ones, drops the inner value."
        ],
        ["Rc", "stable since", "1.0.0"],
        ["Rc::new", "is a", "function"],
        ["Rc::new", "has full name", "std::rc::Rc::new"],
        ["Rc::new", "has argument", "value"],
        ["value", "has type", "T"],
        ["Rc::new", "has return type", "Rc<T>"],
        ["Rc::new", "has description", "Constructs a new Rc<T>."],
        ["Rc::try_unwrap", "is a", "function"],
        ["Rc::try_unwrap", "stable since", "1.4.0"],
        ["Rc::try_unwrap", "has argument", "this"],
        ["this", "has type", "Rc<T>"],
        ["Rc::try_unwrap", "has return type", "Result<T, Rc<T>>"],
        [
          "Rc::try_unwrap",
          "has description",
          "Unwraps the contained value if the Rc<T> has exactly one strong reference. Otherwise, an Err is returned with the same Rc<T>."
        ],
        ["Rc::would_unwrap", "is a", "function"],
        [
          "Rc::would_unwrap",
          "has stability",
          "Unstable (rc_would_unwrap #28356): just added for niche usecase"
        ],
        [
          "Rc::would_unwrap",
          "has description",
          "Checks if Rc::try_unwrap would return Ok."
        ],
        ["Rc::downgrade", "stable since", "1.4.0"],
        ["Rc::downgrade", "has return type", "Weak<T>"],
        [
          "Rc::downgrade",
          "has description",
          "Downgrades the Rc<T> to a Weak<T> reference."
        ],
        ["Rc<T>", "implements", "Clone"],
        ["Rc<T>", "implements", "Deref"],
        ["Rc<T>::Deref", "has associated type", "Target = T"],
        ["Rc<T>", "implements", "Drop"],
        ["Rc<T>", "excludes", "Send"],
        ["Rc<T>", "excludes", "Sync"],
        ["std::rc", "contains", "Rc"],
        ["std::rc", "contains", "Weak"],
        ["Rc::make_mut", "stable since", "1.4.0"],
        [
          "Rc::make_mut",
          "has description",
          "Make a mutable reference into the given Rc<T> by cloning the inner data..."
        ],
        ["Rc::get_mut", "stable since", "1.4.0"],
        [
          "Rc::get_mut",
          "has description",
          "Returns a mutable reference to the contained value if the Rc<T> is unique."
        ],
        ["Rc", "has generic parameter", "T"],
        ["new", "has argument", "value: T"],
        ["Deref for Rc<T>", "has Target type", "T"],
        ["Rc", "implements", "PartialEq"],
        ["Rc", "has stability", "!Send"],
        ["Rc", "has stability", "!Sync"],
        ["Rc::new", "has description", "Constructs a new Rc<T>"],
        [
          "try_unwrap",
          "has description",
          "Unwraps the contained value if the Rc<T> has exactly one strong reference"
        ],
        [
          "Rc",
          "has description",
          "A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'."
        ],
        ["Rc", "has method", "into_raw"],
        ["into_raw", "is a", "method"],
        ["into_raw", "has full name", "std::rc::Rc::into_raw"],
        ["into_raw", "has return type", "*const T"],
        ["into_raw", "stable since", "1.17.0"],
        ["Rc", "has method", "from_raw"],
        ["from_raw", "is a", "method"],
        ["from_raw", "has full name", "std::rc::Rc::from_raw"],
        ["from_raw", "has argument", "ptr"],
        ["ptr", "has type", "*const T"],
        ["from_raw", "stable since", "1.17.0"],
        ["Rc", "has method", "ptr_eq"],
        ["ptr_eq", "is a", "method"],
        ["ptr_eq", "has full name", "std::rc::Rc::ptr_eq"],
        ["ptr_eq", "has return type", "bool"],
        ["ptr_eq", "stable since", "1.17.0"],
        ["Rc<T>", "implements", "Eq"],
        ["Rc<T>", "implements", "PartialOrd"],
        [
          "downgrade",
          "has description",
          "Creates a new Weak pointer to this value."
        ],
        [
          "Rc::downgrade",
          "has description",
          "Creates a new Weak pointer to this value."
        ],
        [
          "try_unwrap",
          "has description",
          "Returns the contained value if the Rc has exactly one strong reference."
        ],
        [
          "Rc::try_unwrap",
          "has description",
          "Returns the contained value if the Rc has exactly one strong reference."
        ],
        [
          "Weak",
          "has description",
          "`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value."
        ],
        ["into_raw", "has argument", "this"],
        [
          "into_raw",
          "has description",
          "Consumes the Rc, returning the wrapped pointer."
        ],
        ["from_raw", "has return type", "Rc<T>"],
        ["from_raw", "has description", "Constructs an Rc from a raw pointer."],
        ["ptr_eq", "has argument", "this"],
        ["ptr_eq", "has argument", "other"],
        [
          "ptr_eq",
          "has description",
          "Returns true if the two Rcs point to the same value"
        ],
        ["Rc", "implements", "Eq"],
        ["Rc", "implements", "PartialOrd"],
        [
          "Rc::try_unwrap",
          "has description",
          "Returns the contained value if the Rc has exactly one strong reference"
        ],
        [
          "Weak",
          "has description",
          "`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`."
        ],
        [
          "ptr_eq",
          "has description",
          "Returns true if the two Rcs point to the same value (not just values that compare as equal)."
        ],
        [
          "try_unwrap",
          "has description",
          "Returns the contained value if the Rc has exactly one strong reference. Otherwise, an Err is returned with the same Rc."
        ],
        ["Rc", "has method", "weak_count"],
        [
          "weak_count",
          "has description",
          "Get the number of weak references to this value."
        ],
        ["Rc", "has method", "strong_count"],
        [
          "strong_count",
          "has description",
          "Get the number of strong references to this value."
        ],
        ["Rc::new", "has description", "Constructs a new `Rc<T>`."],
        ["Rc::try_unwrap", "has version", "1.4.0"],
        [
          "Rc::try_unwrap",
          "has description",
          "Returns the contained value, if the `Rc` has exactly one strong reference."
        ],
        ["Rc::into_raw", "has version", "1.17.0"],
        ["Rc::from_raw", "has feature", "unsafe"],
        ["Rc::from_raw", "has version", "1.17.0"],
        [
          "Rc::from_raw",
          "has description",
          "Constructs an `Rc` from a raw pointer."
        ],
        ["Rc::downgrade", "has version", "1.4.0"],
        [
          "Rc::downgrade",
          "has description",
          "Creates a new `Weak` pointer to this value."
        ],
        ["Rc::weak_count", "has version", "1.15.0"],
        [
          "Rc::weak_count",
          "has description",
          "Gets the number of `Weak` pointers to this value."
        ],
        ["Rc::strong_count", "has version", "1.15.0"],
        [
          "Rc::strong_count",
          "has description",
          "Gets the number of strong (`Rc`) pointers to this value."
        ],
        ["Rc", "has method", "get_mut"],
        ["Rc::get_mut", "has version", "1.4.0"],
        [
          "Rc::get_mut",
          "has description",
          "Returns a mutable reference to the inner value, if there are no other `Rc` or `Weak` pointers to the same value."
        ],
        ["Rc::ptr_eq", "has version", "1.17.0"],
        [
          "Rc::ptr_eq",
          "has description",
          "Returns true if the two `Rc`s point to the same value (not just values that compare as equal)."
        ],
        ["Rc", "has method", "make_mut"],
        ["Rc::make_mut", "has version", "1.4.0"],
        [
          "Rc::make_mut",
          "has description",
          "Makes a mutable reference into the given `Rc`."
        ],
        ["Rc", "has method", "downcast"],
        ["Rc::downcast", "has version", "1.29.0"],
        [
          "Rc::downcast",
          "has description",
          "Attempt to downcast the `Rc<Any>` to a concrete type."
        ],
        ["Rc", "implements", "Default"],
        ["Rc", "implements", "Borrow<T>"],
        ["Rc", "implements", "PartialOrd<Rc<T>>"],
        ["Rc", "implements", "AsRef<T>"],
        ["Rc", "implements", "!Sync"],
        ["Rc", "implements", "!Send"],
        ["Rc", "implements", "Unpin"],
        ["Rc", "implements", "Display"],
        ["Rc", "implements", "From<Vec<T>>"],
        ["Rc", "implements", "From<String>"],
        ["Rc", "implements", "From<T>"],
        ["Rc", "implements", "From<&'a str>"],
        ["Rc", "implements", "From<&'a [T]>"],
        ["Rc", "implements", "From<Box<T>>"],
        ["Rc", "implements", "Hash"],
        ["Rc", "implements", "Debug"],
        ["Rc", "implements", "CoerceUnsized<Rc<U>>"],
        ["Rc", "implements", "PartialEq<Rc<T>>"],
        ["Rc", "implements", "Pointer"],
        ["Rc", "implements", "Ord"],
        ["Rc", "implements", "From<CString>"],
        ["Rc", "implements", "From<&'a CStr>"],
        ["Rc", "implements", "From<OsString>"],
        ["Rc", "implements", "From<&'a OsStr>"],
        ["Rc", "implements", "UnwindSafe"],
        ["Rc", "implements", "From<PathBuf>"],
        ["Rc", "implements", "From<&'a Path>"],
        ["Rc", "has method", "as_ref"],
        ["as_ref", "is a", "method"],
        ["as_ref", "has full name", "std::rc::Rc::as_ref"],
        [
          "as_ref",
          "has description",
          "Returns a reference to the inner value."
        ],
        ["Rc", "implements", "AsRef"],
        ["Rc", "implements", "Borrow"],
        ["Rc", "implements", "CoerceUnsized"],
        ["std", "contains", "rc"],
        ["rc", "contains", "Rc"],
        ["rc", "contains", "Weak"],
        ["Rc", "implements", "From<&str>"],
        ["Rc", "implements", "From<&CStr>"],
        ["Rc", "implements", "From<&OsStr>"],
        ["Rc", "implements", "From<&Path>"],
        ["Rc", "has method", "partial_cmp"],
        ["Rc", "has method", "lt"],
        ["Rc", "has method", "le"],
        ["Rc", "has method", "gt"],
        ["Rc", "has method", "ge"],
        ["Rc", "has method", "borrow"],
        ["Rc::downcast", "has feature", "unsafe"],
        [
          "Rc",
          "has description",
          "A single-threaded reference-counted pointer. 'Rc' stands for 'Reference Counted'."
        ],
        [
          "Rc::downcast",
          "has description",
          "Attempt to downcast the Rc to a concrete type."
        ],
        ["Rc", "has method", "new_uninit"],
        ["Rc", "has method", "pin"],
        ["Rc", "has method", "assume_init"],
        ["Rc", "has method", "get_mut_unchecked"],
        ["Rc", "has method", "into_raw_non_null"],
        ["Rc", "has method", "new_uninit_slice"],
        [
          "Rc::try_unwrap",
          "has description",
          "Returns the contained value if the Rc has exactly one strong reference. Otherwise, an Err is returned with the same Rc."
        ],
        ["new_uninit", "has stability", "Unstable (new_uninit #63291)"],
        [
          "get_mut_unchecked",
          "has stability",
          "Unstable (get_mut_unchecked #63291)"
        ],
        [
          "get_mut_unchecked",
          "has stability",
          "Unstable (get_mut_unchecked #63292)"
        ],
        [
          "Rc::into_raw_non_null",
          "has stability",
          "Unstable (rc_into_raw_non_null #47336)"
        ],
        [
          "ptr_eq",
          "has description",
          "Returns true if the two Rcs point to the same allocation (in a vein similar to ptr::eq)."
        ],
        [
          "Weak",
          "has description",
          "`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`."
        ],
        ["assume_init", "is a", "method"],
        ["assume_init", "has full name", "std::rc::Rc::assume_init"],
        ["assume_init", "has description", "Converts to Rc<T>."],
        ["assume_init", "has stability", "Unstable (new_uninit #63291)"],
        ["get_mut_unchecked", "is a", "method"],
        [
          "get_mut_unchecked",
          "has full name",
          "std::rc::Rc::get_mut_unchecked"
        ],
        ["into_raw_non_null", "is a", "method"],
        [
          "into_raw_non_null",
          "has full name",
          "std::rc::Rc::into_raw_non_null"
        ],
        ["into_raw_non_null", "has return type", "NonNull<T>"],
        ["new_uninit", "is a", "method"],
        ["new_uninit", "has full name", "std::rc::Rc::new_uninit"],
        [
          "new_uninit",
          "has description",
          "Constructs a new Rc with uninitialized contents."
        ],
        ["new_uninit_slice", "is a", "method"],
        ["new_uninit_slice", "has full name", "std::rc::Rc::new_uninit_slice"],
        [
          "new_uninit_slice",
          "has description",
          "Constructs a new reference-counted slice with uninitialized contents."
        ],
        ["new_uninit_slice", "has stability", "Unstable (new_uninit #63291)"],
        ["pin", "is a", "method"],
        ["pin", "has full name", "std::rc::Rc::pin"],
        ["pin", "has description", "Constructs a new Pin<Rc<T>>."],
        ["pin", "stable since", "1.33.0"],
        ["Rc", "implements", "FromIterator<T>"],
        ["Rc", "implements", "DispatchFromDyn<Rc<U>>"],
        [
          "into_raw_non_null",
          "has stability",
          "Unstable (rc_into_raw_non_null #47336)"
        ],
        [
          "Rc::ptr_eq",
          "has description",
          "Returns true if the two Rcs point to the same value (not just values that compare as equal)"
        ],
        [
          "Rc::downgrade",
          "has description",
          "Creates a new Weak pointer to this allocation"
        ],
        [
          "Rc::get_mut",
          "has description",
          "Returns a mutable reference into the given Rc if there are no other Rc or Weak pointers to the same allocation"
        ],
        ["assume_init", "has description", "Converts to Rc<T>"],
        ["Rc::assume_init", "is a", "method"],
        ["Rc::assume_init", "has description", "Converts to Rc<T>."],
        ["Rc::assume_init", "has feature", "unsafe"],
        ["Rc::get_mut_unchecked", "is a", "method"],
        [
          "Rc::get_mut_unchecked",
          "has description",
          "Returns a mutable reference to the inner value if there are no other Rc or Weak pointers to the same value."
        ],
        ["Rc::new_uninit", "is a", "method"],
        [
          "Rc::new_uninit",
          "has description",
          "Constructs a new Rc with uninitialized contents."
        ],
        ["Rc::new_uninit", "has stability", "Unstable (new_uninit #63291)"],
        ["Rc::new_uninit_slice", "is a", "method"],
        [
          "Rc::new_uninit_slice",
          "has description",
          "Constructs a new reference-counted slice with uninitialized contents."
        ],
        [
          "Rc::new_uninit_slice",
          "has stability",
          "Unstable (new_uninit #63291)"
        ],
        ["Rc::pin", "is a", "method"],
        ["Rc::pin", "has return type", "Pin<Rc<T>>"],
        [
          "Rc::pin",
          "has description",
          "Constructs a new Pin<Rc<T>>. If T does not implement Unpin, then value will be pinned in memory and unable to be moved."
        ],
        ["Rc::into_raw_non_null", "is a", "method"],
        ["Rc::into_raw_non_null", "has return type", "NonNull<T>"],
        [
          "Rc::try_unwrap",
          "has description",
          "Returns the contained value, if the Rc has exactly one strong reference."
        ],
        [
          "Rc::into_raw_non_null",
          "has description",
          "Consumes the Rc, returning the wrapped pointer as NonNull<T>."
        ],
        ["Rc::get_mut_unchecked", "has feature", "unsafe"],
        ["Rc", "has method", "new_cyclic"],
        ["new_cyclic", "is a", "method"],
        ["new_cyclic", "has full name", "std::rc::Rc::new_cyclic"],
        [
          "new_cyclic",
          "has description",
          "Constructs a new Rc<T> using a weak reference to itself. Attempting to upgrade the weak reference before this function returns will result in a None value."
        ],
        ["new_cyclic", "has stability", "Unstable (arc_new_cyclic #75861)"],
        ["Rc", "has method", "new_zeroed"],
        ["new_zeroed", "is a", "method"],
        ["new_zeroed", "has full name", "std::rc::Rc::new_zeroed"],
        [
          "new_zeroed",
          "has description",
          "Constructs a new Rc with uninitialized contents, with the memory being filled with 0 bytes."
        ],
        ["new_zeroed", "has stability", "Unstable (new_uninit #63291)"],
        ["Rc", "has method", "new_zeroed_slice"],
        ["new_zeroed_slice", "is a", "method"],
        ["new_zeroed_slice", "has full name", "std::rc::Rc::new_zeroed_slice"],
        [
          "new_zeroed_slice",
          "has description",
          "Constructs a new reference-counted slice with uninitialized contents, with the memory being filled with 0 bytes."
        ],
        ["new_zeroed_slice", "has stability", "Unstable (new_uninit #63291)"],
        ["Rc", "has method", "as_ptr"],
        ["as_ptr", "is a", "method"],
        ["as_ptr", "has full name", "std::rc::Rc::as_ptr"],
        ["as_ptr", "has return type", "*const T"],
        ["new_zeroed", "has return type", "Rc<MaybeUninit<T>>"],
        ["new_zeroed_slice", "has return type", "Rc<[MaybeUninit<T>]>"]
      ],
      "startIndex": 0,
      "endIndex": 39000
    },
    {
      "triples": [
        ["Display", "is a", "trait"],
        ["Rc", "implements", "Display"],
        ["std::fmt::Display::fmt", "is a", "method"],
        ["Rc", "has method", "std::fmt::Display::fmt"],
        ["std::fmt::Display::fmt", "has full name", "std::fmt::Display::fmt"],
        [
          "std::fmt::Display::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        [
          "std::fmt::Display::fmt",
          "has argument",
          "std::fmt::Display::fmt::self"
        ],
        ["std::fmt::Display::fmt::self", "has type", "&Rc<T>"],
        ["std::fmt::Display::fmt", "has argument", "std::fmt::Display::fmt::f"],
        ["std::fmt::Display::fmt::f", "has type", "&mut Formatter"],
        ["std::fmt::Display::fmt", "has return type", "Result<(), Error>"],
        ["Debug", "is a", "trait"],
        ["Rc", "implements", "Debug"],
        ["std::fmt::Debug::fmt", "is a", "method"],
        ["Rc", "has method", "std::fmt::Debug::fmt"],
        ["std::fmt::Debug::fmt", "has full name", "std::fmt::Debug::fmt"],
        [
          "std::fmt::Debug::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["std::fmt::Debug::fmt", "has argument", "std::fmt::Debug::fmt::self"],
        ["std::fmt::Debug::fmt::self", "has type", "&Rc<T>"],
        ["std::fmt::Debug::fmt", "has argument", "std::fmt::Debug::fmt::f"],
        ["std::fmt::Debug::fmt::f", "has type", "&mut Formatter"],
        ["std::fmt::Debug::fmt", "has return type", "Result<(), Error>"],
        ["Pointer", "is a", "trait"],
        ["Rc", "implements", "Pointer"],
        ["std::fmt::Pointer::fmt", "is a", "method"],
        ["Rc", "has method", "std::fmt::Pointer::fmt"],
        ["std::fmt::Pointer::fmt", "has full name", "std::fmt::Pointer::fmt"],
        [
          "std::fmt::Pointer::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        [
          "std::fmt::Pointer::fmt",
          "has argument",
          "std::fmt::Pointer::fmt::self"
        ],
        ["std::fmt::Pointer::fmt::self", "has type", "&Rc<T>"],
        ["std::fmt::Pointer::fmt", "has argument", "std::fmt::Pointer::fmt::f"],
        ["std::fmt::Pointer::fmt::f", "has type", "&mut Formatter"],
        ["std::fmt::Pointer::fmt", "has return type", "Result<(), Error>"],
        ["From", "is a", "trait"],
        ["Rc", "implements", "From"],
        ["from", "is a", "method"],
        ["Rc", "has method", "from"],
        ["from", "has full name", "std::convert::From::from"],
        ["from", "has description", "Performs the conversion."],
        ["from", "has argument", "from::t"],
        ["from::t", "has type", "T"],
        ["from", "has return type", "Rc<T>"],
        ["from", "stable since", "1.6.0"],
        ["Borrow", "is a", "trait"],
        ["Rc", "implements", "Borrow"],
        ["borrow", "is a", "method"],
        ["Rc", "has method", "borrow"],
        ["borrow", "has full name", "std::borrow::Borrow::borrow"],
        ["borrow", "has description", "Immutably borrows from an owned value."],
        ["borrow", "has argument", "borrow::self"],
        ["borrow::self", "has type", "&Rc<T>"],
        ["borrow", "has return type", "&T"],
        ["AsRef", "is a", "trait"],
        ["Rc", "implements", "AsRef"],
        ["as_ref", "is a", "method"],
        ["Rc", "has method", "as_ref"],
        ["as_ref", "has full name", "std::convert::AsRef::as_ref"],
        ["as_ref", "has description", "Performs the conversion."],
        ["as_ref", "has argument", "as_ref::self"],
        ["as_ref::self", "has type", "&Rc<T>"],
        ["as_ref", "has return type", "&T"],
        ["as_ref", "stable since", "1.5.0"],
        ["UnwindSafe", "is a", "trait"],
        ["Rc", "implements", "UnwindSafe"],
        ["Rc", "stable since", "1.9.0"],
        ["Rc<T>", "implements", "Display"],
        ["Rc<T>", "implements", "Debug"],
        ["Rc<T>", "implements", "Pointer"],
        ["Rc<T>", "implements", "From<T>"],
        ["Rc<T>", "implements", "Borrow<T>"],
        ["Rc<T>", "implements", "AsRef<T>"],
        ["Rc<T>", "implements", "UnwindSafe"],
        ["Rc<T>::Display::fmt", "is a", "function"],
        ["Rc<T>::Display::fmt", "has argument", "self"],
        ["self", "has type", "&Rc<T>"],
        ["Rc<T>::Display::fmt", "has argument", "f"],
        ["f", "has type", "&mut Formatter"],
        ["Rc<T>::Display::fmt", "has return type", "Result<(), Error>"],
        [
          "Rc<T>::Display::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Rc<T>::Debug::fmt", "is a", "function"],
        ["Rc<T>::Debug::fmt", "has argument", "self"],
        ["Rc<T>::Debug::fmt", "has argument", "f"],
        ["Rc<T>::Debug::fmt", "has return type", "Result<(), Error>"],
        [
          "Rc<T>::Debug::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Rc<T>::Pointer::fmt", "is a", "function"],
        ["Rc<T>::Pointer::fmt", "has argument", "self"],
        ["self", "has type", "Rc<T>"],
        ["Rc<T>::Pointer::fmt", "has argument", "f"],
        ["Rc<T>::Pointer::fmt", "has return type", "Result<(), Error>"],
        [
          "Rc<T>::Pointer::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Rc<T>::from", "is a", "function"],
        ["Rc<T>::from", "has argument", "t"],
        ["t", "has type", "T"],
        ["Rc<T>::from", "has return type", "Rc<T>"],
        ["Rc<T>::from", "has description", "Performs the conversion."],
        ["Rc<T>::from", "stable since", "1.6.0"],
        ["Rc<T>::borrow", "is a", "function"],
        ["Rc<T>::borrow", "has argument", "self"],
        ["Rc<T>::borrow", "has return type", "&T"],
        [
          "Rc<T>::borrow",
          "has description",
          "Immutably borrows from an owned value."
        ],
        ["Rc<T>::as_ref", "is a", "function"],
        ["Rc<T>::as_ref", "has argument", "self"],
        ["Rc<T>::as_ref", "has return type", "&T"],
        ["Rc<T>::as_ref", "has description", "Performs the conversion."],
        ["Rc<T>::as_ref", "stable since", "1.5.0"],
        ["Rc<T>", "stable since", "1.9.0"],
        ["Display", "has method", "fmt"],
        ["Display::fmt", "is a", "method"],
        [
          "Display::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Display::fmt", "has argument", "self"],
        ["Display::fmt::self", "has type", "&Rc<T>"],
        ["Display::fmt", "has argument", "f"],
        ["Display::fmt::f", "has type", "&mut Formatter"],
        ["Display::fmt", "has return type", "Result<(), Error>"],
        ["Debug", "has method", "fmt"],
        ["Debug::fmt", "is a", "method"],
        [
          "Debug::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Debug::fmt", "has argument", "self"],
        ["Debug::fmt::self", "has type", "&Rc<T>"],
        ["Debug::fmt", "has argument", "f"],
        ["Debug::fmt::f", "has type", "&mut Formatter"],
        ["Debug::fmt", "has return type", "Result<(), Error>"],
        ["Pointer", "has method", "fmt"],
        ["Pointer::fmt", "is a", "method"],
        [
          "Pointer::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Pointer::fmt", "has argument", "self"],
        ["Pointer::fmt::self", "has type", "&Rc<T>"],
        ["Pointer::fmt", "has argument", "f"],
        ["Pointer::fmt::f", "has type", "&mut Formatter"],
        ["Pointer::fmt", "has return type", "Result<(), Error>"],
        ["From", "has method", "from"],
        ["From::from", "is a", "method"],
        ["From::from", "has description", "Performs the conversion."],
        ["From::from", "has argument", "t"],
        ["From::from::t", "has type", "T"],
        ["From::from", "has return type", "Rc<T>"],
        ["From::from", "stable since", "1.6.0"],
        ["Borrow", "has method", "borrow"],
        ["Borrow::borrow", "is a", "method"],
        [
          "Borrow::borrow",
          "has description",
          "Immutably borrows from an owned value."
        ],
        ["Borrow::borrow", "has argument", "self"],
        ["Borrow::borrow::self", "has type", "&Rc<T>"],
        ["Borrow::borrow", "has return type", "&T"],
        ["AsRef", "has method", "as_ref"],
        ["AsRef::as_ref", "is a", "method"],
        ["AsRef::as_ref", "has description", "Performs the conversion."],
        ["AsRef::as_ref", "has argument", "self"],
        ["AsRef::as_ref::self", "has type", "&Rc<T>"],
        ["AsRef::as_ref", "has return type", "&T"],
        ["AsRef::as_ref", "stable since", "1.5.0"],
        ["Formatter", "is a", "struct"],
        ["Formatter", "has full name", "std::fmt::Formatter"],
        ["Error", "is a", "struct"],
        ["Error", "has full name", "std::fmt::Error"],
        ["Result", "is a", "enum"],
        ["Result", "has full name", "std::result::Result"],
        ["Rc<T>", "implements", "CoerceUnsized"],
        [
          "Rc<T>::hash",
          "has description",
          "Feeds this value into the given [Hasher]."
        ],
        [
          "Rc<T>::hash_slice",
          "has description",
          "Feeds a slice of this type into the given [Hasher]."
        ],
        ["max", "has stability", "Unstable (ord_max_min #25663)"],
        ["min", "has stability", "Unstable (ord_max_min #25663)"],
        [
          "clone",
          "has description",
          "Makes a clone of the Rc pointer. This creates another pointer to the same inner value, increasing the strong reference count."
        ],
        ["Rc", "implements", "CoerceUnsized"],
        ["Rc", "has method", "max"],
        ["max", "is a", "method"],
        ["Rc", "has method", "min"],
        ["min", "is a", "method"],
        [
          "Rc::drop",
          "has description",
          "Drops the Rc. This will decrement the strong reference count. If the strong reference count reaches zero then the only other references (if any) are Weak, so we drop the inner value."
        ],
        [
          "Rc::clone",
          "has description",
          "Makes a clone of the Rc pointer. This creates another pointer to the same inner value, increasing the strong reference count."
        ],
        [
          "Rc::hash",
          "has description",
          "Feeds this value into the given Hasher. Read more"
        ],
        ["Rc<T>", "implements", "Hash"],
        ["Rc<T>", "implements", "Ord"],
        ["Rc<T>", "implements", "Clone"],
        ["Rc<T>", "implements", "Deref"],
        ["Rc<T>", "implements", "Drop"],
        ["Rc<T>", "implements", "PartialEq<Rc<T>>"],
        ["Rc<T>", "excludes", "Sync"],
        ["Rc<T>", "excludes", "Send"],
        ["Rc<T>", "implements", "CoerceUnsized<Rc<U>>"],
        [
          "Rc<T>::hash",
          "has description",
          "Feeds this value into the given Hasher. Read more"
        ],
        [
          "Rc<T>::hash_slice",
          "has description",
          "Feeds a slice of this type into the given Hasher. Read more"
        ],
        ["Rc", "has method", "cmp"],
        ["Rc", "has method", "eq"],
        ["Rc", "has method", "ne"],
        ["Rc", "implements", "CoerceUnsized<Rc<U>>"],
        ["cmp", "is a", "method"],
        ["cmp", "has description", "Comparison for two Rcs."],
        ["cmp", "has argument", "self"],
        ["cmp", "has argument", "other"],
        ["cmp", "has return type", "Ordering"],
        ["eq", "is a", "method"],
        ["eq", "has description", "Equality for two Rcs."],
        ["eq", "has argument", "self"],
        ["eq", "has argument", "other"],
        ["eq", "has return type", "bool"],
        ["ne", "is a", "method"],
        ["ne", "has description", "Inequality for two Rcs."],
        ["ne", "has argument", "self"],
        ["ne", "has argument", "other"],
        ["ne", "has return type", "bool"],
        ["Rc<T>", "implements", "From<&str>"],
        ["Rc<str>", "has method", "from"],
        ["from", "has argument", "v"],
        ["from::v", "has type", "&str"],
        ["from", "has return type", "Rc<str>"],
        ["Rc<T>", "implements", "From<&[T]>"],
        ["Rc<[T]>", "has method", "from"],
        ["from::v", "has type", "&[T]"],
        ["from", "has return type", "Rc<[T]>"],
        ["Rc", "implements", "Ord"],
        ["Rc", "implements", "From<&str>"],
        [
          "max",
          "has description",
          "Compares and returns the maximum of two values."
        ],
        [
          "min",
          "has description",
          "Compares and returns the minimum of two values."
        ],
        ["Rc", "implements", "DispatchFromDyn"],
        [
          "cmp",
          "has description",
          "Comparison for two Rcs. The two are compared by calling cmp() on their inner values."
        ],
        [
          "eq",
          "has description",
          "Equality for two Rcs. Two Rcs are equal if their inner values are equal."
        ],
        [
          "ne",
          "has description",
          "Inequality for two Rcs. Two Rcs are unequal if their inner values are unequal."
        ],
        ["Rc", "implements", "From<Box<T>>"],
        ["Rc", "implements", "From<Vec<T>>"],
        ["as_ptr", "has description", "Provides a raw pointer to the data."],
        ["as_ptr", "stable since", "1.45.0"],
        [
          "Rc::from_raw",
          "has description",
          "Constructs an Rc<T> from a raw pointer."
        ],
        [
          "downgrade",
          "has description",
          "Creates a new Weak pointer to this allocation."
        ],
        [
          "Rc::downgrade",
          "has description",
          "Creates a new Weak pointer to this allocation."
        ],
        ["as_ptr", "is a", "method"],
        ["as_ptr", "has full name", "std::rc::Rc::as_ptr"],
        ["as_ptr", "has return type", "*const T"],
        ["as_ptr", "has argument", "this"],
        ["as_ptr::this", "has type", "&Rc<T>"],
        ["Rc", "has method", "as_ptr"]
      ],
      "startIndex": 39000,
      "endIndex": 78000
    },
    {
      "triples": [
        ["Rc::from", "has description", "Performs the conversion."],
        ["Rc::from", "stable since", "1.6.0"],
        ["Rc<Path>", "implements", "From<PathBuf>"],
        ["Rc<Path>", "implements", "From<&Path>"],
        ["From<PathBuf>::from", "is a", "method"],
        ["From<&Path>::from", "is a", "method"],
        ["From<PathBuf>::from", "has argument", "s"],
        ["s", "has type", "PathBuf"],
        ["From<PathBuf>::from", "has return type", "Rc<Path>"],
        ["From<&Path>::from", "has argument", "s"],
        ["s", "has type", "&Path"],
        ["From<&Path>::from", "has return type", "Rc<Path>"],
        ["Rc<T>", "implements", "PartialOrd"],
        ["Rc", "has method", "partial_cmp"],
        ["partial_cmp", "is a", "method"],
        [
          "partial_cmp",
          "has description",
          "Compares and returns the ordering between self and other."
        ],
        ["partial_cmp", "has argument", "self"],
        ["partial_cmp", "has argument", "other"],
        ["self", "has type", "&Rc<T>"],
        ["other", "has type", "&Rc<T>"],
        ["partial_cmp", "has return type", "Option<Ordering>"],
        ["Rc", "has method", "lt"],
        ["lt", "is a", "method"],
        ["lt", "has description", "Less-than comparison for two Rcs."],
        ["lt", "has argument", "self"],
        ["lt", "has argument", "other"],
        ["lt", "has return type", "bool"],
        ["Rc", "has method", "le"],
        ["le", "is a", "method"],
        [
          "le",
          "has description",
          "'Less than or equal to' comparison for two Rcs."
        ],
        ["le", "has argument", "self"],
        ["le", "has argument", "other"],
        ["le", "has return type", "bool"],
        ["Rc", "has method", "gt"],
        ["gt", "is a", "method"],
        ["gt", "has description", "Greater-than comparison for two Rcs."],
        ["gt", "has argument", "self"],
        ["gt", "has argument", "other"],
        ["gt", "has return type", "bool"],
        ["Rc", "has method", "ge"],
        ["ge", "is a", "method"],
        [
          "ge",
          "has description",
          "'Greater than or equal to' comparison for two Rcs."
        ],
        ["ge", "has argument", "self"],
        ["ge", "has argument", "other"],
        ["ge", "has return type", "bool"],
        ["Rc<T>", "implements", "Default"],
        ["Rc", "has method", "default"],
        ["default", "is a", "method"],
        [
          "default",
          "has description",
          "Creates a new Rc<T> with the Default value for T."
        ],
        ["default", "has return type", "Rc<T>"],
        ["Rc<OsStr>", "implements", "From<OsString>"],
        ["Rc<OsStr>", "has method", "from"],
        ["from", "has argument", "s"],
        ["s", "has type", "OsString"],
        ["from", "has return type", "Rc<OsStr>"],
        ["Rc", "implements", "PartialOrd"],
        ["partial_cmp", "has description", "Partial comparison for two Rcs."],
        [
          "le",
          "has description",
          "Less-than or equal to comparison for two Rcs."
        ],
        [
          "ge",
          "has description",
          "Greater-than or equal to comparison for two Rcs."
        ],
        ["Rc", "implements", "Default"],
        [
          "default",
          "has description",
          "Creates a new Rc<T>, with the Default value for T."
        ],
        ["Rc", "implements", "Unpin"],
        ["Rc", "implements", "FromIterator"],
        ["Rc", "has method", "from_iter"],
        ["from_iter", "is a", "method"],
        [
          "from_iter",
          "has description",
          "Takes each element in the Iterator and collects it into an Rc<[T]>."
        ],
        [
          "lt",
          "has description",
          "Less-than comparison for two Rcs. The two are compared by calling < on their inner values."
        ],
        [
          "le",
          "has description",
          "Less than or equal to comparison for two Rcs. The two are compared by calling <= on their inner values."
        ],
        [
          "gt",
          "has description",
          "Greater-than comparison for two Rcs. The two are compared by calling > on their inner values."
        ],
        [
          "ge",
          "has description",
          "Greater than or equal to comparison for two Rcs. The two are compared by calling >= on their inner values."
        ],
        [
          "partial_cmp",
          "has description",
          "Comparison for two Rcs. The two are compared by calling partial_cmp() on their inner values."
        ],
        ["partial_cmp::self", "has type", "&Rc<T>"],
        ["partial_cmp::other", "has type", "&Rc<T>"],
        ["Rc<T>", "implements", "Clone"],
        ["Rc<T>", "has method", "clone"],
        ["clone", "is a", "method"],
        [
          "clone",
          "has description",
          "Makes a clone of the Rc pointer. This creates another pointer to the same inner value, increasing the strong reference count."
        ],
        ["Rc<T>", "implements", "Drop"],
        ["Rc<T>", "has method", "drop"],
        ["drop", "is a", "method"],
        [
          "drop",
          "has description",
          "Drops the Rc. This will decrement the strong reference count. If the strong reference count reaches zero then the only other references (if any) are Weak, so we drop the inner value."
        ],
        ["Rc<T>", "implements", "Deref"],
        ["Rc<T>", "implements", "Borrow<T>"],
        ["Rc<T>", "implements", "AsRef<T>"],
        ["Rc<T>", "implements", "Debug"],
        ["Rc<T>", "implements", "Display"],
        ["Rc<T>", "implements", "Pointer"],
        ["Rc<T>", "implements", "CoerceUnsized<Rc<U>>"],
        ["Rc<T>", "implements", "DispatchFromDyn"],
        ["Rc<T>", "implements", "Eq"],
        ["Rc<CStr>", "implements", "From<&CStr>"],
        ["Rc<str>", "implements", "From<&str>"],
        ["Rc<CStr>", "implements", "From<CString>"],
        ["Rc<OsStr>", "implements", "From<&OsStr>"],
        ["Rc<str>", "implements", "From<String>"],
        ["Rc<T>", "implements", "From<T>"],
        ["Rc<[T]>", "implements", "From<Vec<T>>"],
        ["Rc<B>", "implements", "From<Cow<'a, B>>"],
        ["Rc<T>", "implements", "Hash"],
        ["Rc<T>", "implements", "Ord"],
        ["Rc<T>", "implements", "PartialEq<Rc<T>>"],
        ["Rc<T>", "implements", "PartialOrd<Rc<T>>"],
        ["Rc<T>", "has method", "cmp"],
        ["Rc<T>::cmp", "is a", "method"],
        ["Rc<T>::cmp", "has description", "Comparison for two Rcs."],
        ["Rc<T>", "has method", "lt"],
        ["Rc<T>::lt", "is a", "method"],
        ["Rc<T>::lt", "has description", "Less-than comparison for two Rcs."],
        ["Rc<T>", "has method", "le"],
        ["Rc<T>::le", "is a", "method"],
        [
          "Rc<T>::le",
          "has description",
          "'Less than or equal to' comparison for two Rcs."
        ],
        ["Rc<T>", "has method", "gt"],
        ["Rc<T>::gt", "is a", "method"],
        [
          "Rc<T>::gt",
          "has description",
          "Greater-than comparison for two Rcs."
        ],
        ["Rc<T>", "has method", "ge"],
        ["Rc<T>::ge", "is a", "method"],
        [
          "Rc<T>::ge",
          "has description",
          "'Greater than or equal to' comparison for two Rcs."
        ],
        ["Rc<T>", "has method", "partial_cmp"],
        ["Rc<T>::partial_cmp", "is a", "method"],
        [
          "Rc<T>::partial_cmp",
          "has description",
          "Partial comparison for two Rcs."
        ],
        ["Rc<T>", "has method", "fmt"],
        ["Rc<T>::fmt", "is a", "method"],
        [
          "Rc<T>::fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        ["Rc", "has method", "clone"],
        [
          "Rc::clone",
          "has description",
          "Makes a clone of the Rc pointer. This creates another pointer to the same inner value, increasing the strong reference count."
        ],
        ["Rc<T>", "excludes", "Sync"],
        ["Rc<T>", "excludes", "Send"],
        ["Rc<T>", "implements", "From<Box<T>>"],
        ["Rc<[T]>", "implements", "FromIterator<T>"],
        ["Rc<T>", "implements", "PartialEq"],
        ["Rc<T>", "implements", "Unpin"],
        ["Rc<T>", "implements", "UnwindSafe"],
        ["Rc<[T]>", "implements", "TryFrom<Rc<[T]>>"],
        ["cmp", "is a", "method"],
        ["cmp", "has full name", "std::rc::Rc::cmp"],
        ["cmp", "has return type", "Ordering"],
        ["cmp", "has description", "Comparison for two Rcs."],
        ["Rc<T>", "has method", "eq"],
        ["eq", "is a", "method"],
        ["eq", "has full name", "std::rc::Rc::eq"],
        ["eq", "has return type", "bool"],
        ["eq", "has description", "Equality for two Rcs."],
        ["partial_cmp", "has full name", "std::rc::Rc::partial_cmp"],
        ["lt", "has full name", "std::rc::Rc::lt"],
        ["le", "has full name", "std::rc::Rc::le"],
        ["gt", "has full name", "std::rc::Rc::gt"],
        ["ge", "has full name", "std::rc::Rc::ge"],
        ["Rc<T>", "has method", "hash"],
        ["hash", "is a", "method"],
        ["hash", "has full name", "std::rc::Rc::hash"],
        ["hash", "has argument", "state"],
        ["hash::state", "has type", "&mut H"],
        ["hash", "has description", "Feeds this value into the given Hasher."],
        ["fmt", "is a", "method"],
        ["fmt", "has full name", "std::rc::Rc::fmt"],
        ["fmt", "has argument", "f"],
        ["fmt::f", "has type", "&mut Formatter<'_>"],
        ["fmt", "has return type", "Result<(), Error>"],
        [
          "fmt",
          "has description",
          "Formats the value using the given formatter."
        ],
        [
          "clone",
          "has description",
          "Makes a clone of the Rc pointer. This creates another pointer to the same allocation, increasing the strong reference count."
        ],
        ["clone", "has full name", "std::rc::Rc::clone"],
        ["Rc<T>", "implements", "From<Box<T, Global>>"],
        ["Rc<[T]>", "implements", "From<Vec<T, Global>>"]
      ],
      "startIndex": 116739,
      "endIndex": 142663
    },
    {
      "triples": [
        [
          "from",
          "has description",
          "Converts a PathBuf into an Rc by moving the PathBuf data into a new Rc buffer."
        ],
        ["Rc<Path>", "has method", "from"],
        [
          "from",
          "has description",
          "Converts a Path into an Rc by copying the Path data into a new Rc buffer."
        ],
        ["Rc", "implements", "From<PathBuf>"],
        ["Rc", "implements", "From<&'_ OsStr>"],
        ["Rc", "implements", "From<&'_ Path>"],
        ["Rc<Path>", "implements", "From<PathBuf>"],
        [
          "Rc<Path>::from",
          "has description",
          "Converts a PathBuf into an Rc<Path> by moving the PathBuf data into a new Rc buffer."
        ],
        [
          "Rc<OsStr>::from",
          "has description",
          "Converts a OsString into an Rc<OsStr> without copying or allocating."
        ],
        ["Rc<Path>::from", "stable since", "1.24.0"],
        ["Rc<OsStr>::from", "stable since", "1.24.0"],
        [
          "Rc<Path>::from<PathBuf>",
          "has description",
          "Converts a PathBuf into an Rc by moving the PathBuf data into a new Rc buffer."
        ],
        [
          "Rc<Path>::from<&'_ Path>",
          "has description",
          "Converts a Path into an Rc by copying the Path data into a new Rc buffer."
        ],
        ["T", "implements", "From<!>"],
        ["T", "implements", "From<T>"],
        ["T", "implements", "Into<U>"],
        ["T", "implements", "TryFrom<U>"],
        ["T", "implements", "TryInto<U>"],
        ["from", "is a", "method"],
        ["from", "has description", "Performs the conversion."],
        ["T", "has method", "from"],
        ["into", "is a", "method"],
        ["into", "has description", "Performs the conversion."],
        ["T", "has method", "into"],
        ["try_from", "is a", "method"],
        ["try_from", "has description", "Performs the conversion."],
        ["T", "has method", "try_from"],
        ["try_into", "is a", "method"],
        ["try_into", "has description", "Performs the conversion."],
        ["T", "has method", "try_into"],
        ["From<!>", "has method", "from"],
        ["from", "has argument", "t"],
        ["t", "has type", "!"],
        ["from", "has return type", "T"],
        ["From<T>", "has method", "from"],
        ["Into<U>", "has method", "into"],
        ["into", "has return type", "U"],
        ["TryFrom<U>", "has associated type", "Error"],
        ["Error", "has type", "Infallible"],
        ["TryFrom<U>", "has method", "try_from"],
        ["try_from", "has argument", "value"],
        ["value", "has type", "U"],
        ["try_from", "has return type", "Result<T, Error>"],
        ["TryInto<U>", "has associated type", "Error"],
        ["TryInto<U>", "has method", "try_into"],
        ["try_into", "has return type", "Result<U, Error>"],
        ["T", "implements", "ToString"],
        ["ToString", "has method", "to_string"],
        ["to_string", "has return type", "String"],
        ["From<!>", "implements", "From"],
        ["From<T>", "implements", "From"],
        ["from<T>", "has description", "Performs the conversion."],
        ["Into<U>", "implements", "Into"],
        ["TryFrom<U>", "implements", "TryFrom"],
        ["TryFrom<U>::Error", "has type", "Infallible"],
        ["TryInto<U>", "implements", "TryInto"],
        ["TryInto<U>::Error", "has type", "<U as TryFrom<T>>::Error"],
        ["ToOwned", "has method", "to_owned"],
        [
          "to_owned",
          "has description",
          "Creates owned data from borrowed data, usually by cloning."
        ],
        ["ToOwned", "has method", "clone_into"],
        [
          "clone_into",
          "has description",
          "Uses borrowed data to replace owned data, usually by cloning."
        ],
        [
          "to_string",
          "has description",
          "Converts the given value to a String."
        ]
      ],
      "startIndex": 154474,
      "endIndex": 185808
    }
  ],
  "model": "deepseek-r1-250120"
}
