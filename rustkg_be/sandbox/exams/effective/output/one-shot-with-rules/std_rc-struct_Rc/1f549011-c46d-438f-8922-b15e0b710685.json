{"create_time":"2025-03-29T05:55:46.321Z","id":"1f549011-c46d-438f-8922-b15e0b710685","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.40-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Rc.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_rc-struct_Rc\\merged_3d6d5812-9420-4b1c-a763-024666cb963c.json","relations":["excludes","has argument","has description","has feature","has full name","has method","has return type","has stability","has type","implements","is a","stable since"],"delete_triples":[{"triples":[["downgrade","has description","Downgrades the Rc<T> to a Weak<T> reference."],["Rc::try_unwrap","has description","Unwraps the contained value if the Rc<T> has exactly one strong reference. Otherwise, an Err is returned with the same Rc<T>. This will succeed even if there are outstanding weak references."],["weak_count","has stability","Unstable (rc_counts #28356): not clearly useful"],["strong_count","has stability","Unstable (rc_counts #28356): not clearly useful"],["is_unique","has stability","Unstable (rc_counts #28356): uniqueness has unclear meaning"],["would_unwrap","has stability","Unstable (rc_would_unwrap #28356): just added for niche usecase"]],"startIndex":217,"endIndex":37439},{"triples":[["ptr_eq","has description","Returns true if the two Rcs point to the same value (not just values that compare as equal)."]],"startIndex":37434,"endIndex":76431},{"triples":[["Rc<T>","implements","Hash"],["Rc<T>","implements","Clone"],["Rc<T>","implements","Deref"],["Rc<T>","implements","Drop"],["Rc<T>","implements","PartialEq<Rc<T>>"],["Rc<T>","excludes","Sync"],["Rc<T>","excludes","Send"],["Rc<T>","implements","CoerceUnsized<Rc<U>>"],["Rc::hash","has description","Feeds this value into the given [Hasher]."],["Rc::hash_slice","has description","Feeds a slice of this type into the given [Hasher]."],["max","has stability","Unstable (ord_max_min #25663)"],["min","has stability","Unstable (ord_max_min #25663)"]],"startIndex":76436,"endIndex":115436},{"triples":[],"startIndex":115437,"endIndex":154437},{"triples":[],"startIndex":154474,"endIndex":185808}],"add_triples":[{"triples":[["Rc","has method","new_uninit"],["Rc","has method","pin"],["Rc","has method","assume_init"],["Rc","has method","get_mut_unchecked"],["Rc","has method","into_raw_non_null"],["Rc","has method","new_uninit_slice"],["downgrade","has description","Creates a new Weak pointer to this value."],["Rc::try_unwrap","has description","Returns the contained value if the Rc has exactly one strong reference. Otherwise, an Err is returned with the same Rc."],["Rc::from_raw","has feature","unsafe"],["new_uninit","has stability","Unstable (new_uninit #63291)"],["get_mut_unchecked","has stability","Unstable (get_mut_unchecked #63291)"]],"startIndex":217,"endIndex":37439},{"triples":[["get_mut_unchecked","has stability","Unstable (get_mut_unchecked #63292)"],["Rc::into_raw_non_null","has stability","Unstable (rc_into_raw_non_null #47336)"],["ptr_eq","has description","Returns true if the two Rcs point to the same allocation (in a vein similar to ptr::eq)."]],"startIndex":37434,"endIndex":76431},{"triples":[["Rc<T>","implements","Ord"],["Rc","has method","cmp"],["cmp","is a","method"],["cmp","has description","Comparison for two Rcs."],["cmp","has argument","self"],["cmp","has argument","other"],["cmp","has return type","Ordering"],["Rc","has method","eq"],["eq","is a","method"],["eq","has description","Equality for two Rcs."],["eq","has argument","self"],["eq","has argument","other"],["eq","has return type","bool"],["Rc","has method","ne"],["ne","is a","method"],["ne","has description","Inequality for two Rcs."],["ne","has argument","self"],["ne","has argument","other"],["ne","has return type","bool"],["Rc<T>","implements","From<&str>"],["Rc<str>","has method","from"],["from","is a","method"],["from","has description","Performs the conversion."],["from","has argument","v"],["from::v","has type","&str"],["from","has return type","Rc<str>"],["Rc<T>","implements","From<&[T]>"],["Rc<[T]>","has method","from"],["from::v","has type","&[T]"],["from","has return type","Rc<[T]>"]],"startIndex":76436,"endIndex":115436},{"triples":[["Rc<T>","implements","PartialOrd"],["Rc","has method","partial_cmp"],["partial_cmp","is a","method"],["partial_cmp","has description","Compares and returns the ordering between self and other."],["partial_cmp","has argument","self"],["partial_cmp","has argument","other"],["self","has type","&Rc<T>"],["other","has type","&Rc<T>"],["partial_cmp","has return type","Option<Ordering>"],["Rc","has method","lt"],["lt","is a","method"],["lt","has description","Less-than comparison for two Rcs."],["lt","has argument","self"],["lt","has argument","other"],["lt","has return type","bool"],["Rc","has method","le"],["le","is a","method"],["le","has description","'Less than or equal to' comparison for two Rcs."],["le","has argument","self"],["le","has argument","other"],["le","has return type","bool"],["Rc","has method","gt"],["gt","is a","method"],["gt","has description","Greater-than comparison for two Rcs."],["gt","has argument","self"],["gt","has argument","other"],["gt","has return type","bool"],["Rc","has method","ge"],["ge","is a","method"],["ge","has description","'Greater than or equal to' comparison for two Rcs."],["ge","has argument","self"],["ge","has argument","other"],["ge","has return type","bool"],["Rc<T>","implements","Default"],["Rc","has method","default"],["default","is a","method"],["default","has description","Creates a new Rc<T> with the Default value for T."],["default","has return type","Rc<T>"],["Rc<OsStr>","implements","From<OsString>"],["Rc<OsStr>","has method","from"],["from","has argument","s"],["s","has type","OsString"],["from","has return type","Rc<OsStr>"]],"startIndex":115437,"endIndex":154437},{"triples":[["from","has description","Converts a PathBuf into an Rc by moving the PathBuf data into a new Rc buffer."],["Rc<Path>","has method","from"],["from","has description","Converts a Path into an Rc by copying the Path data into a new Rc buffer."]],"startIndex":154474,"endIndex":185808}],"metrics":{"escapeCount":0,"costTime":993304,"totalUsage":{"prompt_tokens":138253,"completion_tokens":25969,"cached_tokens":0,"reasoning_tokens":23288},"chunkLength":5,"chunksInfo":[{"oldContextLength":227,"oldStrLength":16486,"newContextLength":227,"newStrLength":37243,"costTime":227013},{"oldContextLength":227,"oldStrLength":28061,"newContextLength":227,"newStrLength":39018,"costTime":273712},{"oldContextLength":227,"oldStrLength":34187,"newContextLength":227,"newStrLength":39021,"costTime":268637},{"oldContextLength":227,"oldStrLength":33450,"newContextLength":227,"newStrLength":39021,"costTime":175369},{"oldContextLength":227,"oldStrLength":30330,"newContextLength":227,"newStrLength":31355,"costTime":48573}]},"model":"deepseek-r1-250120","extraInfo":{}}