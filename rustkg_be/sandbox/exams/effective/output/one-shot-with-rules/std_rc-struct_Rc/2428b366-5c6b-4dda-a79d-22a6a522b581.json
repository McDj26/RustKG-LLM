{"create_time":"2025-03-29T07:00:40.317Z","id":"2428b366-5c6b-4dda-a79d-22a6a522b581","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Rc.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_rc-struct_Rc\\merged_1b9961e0-1799-4b5a-9697-05e1cb9bf664.json","relations":["contains","excludes","has argument","has associated type","has associated type Target","has description","has example","has feature","has full name","has generic parameter","has method","has return type","has stability","has type","implements","is a","stable since"],"delete_triples":[{"triples":[["Rc","has method","new_uninit_slice"],["Rc","has method","new_zeroed"],["Rc","has method","new_zeroed_slice"],["Rc::new_uninit_slice","has description","Constructs a new reference-counted slice with uninitialized contents."],["Rc::new_zeroed","has description","Constructs a new Rc with uninitialized contents, with the memory being filled with 0 bytes."]],"startIndex":15,"endIndex":39015},{"triples":[],"startIndex":39227,"endIndex":76637},{"triples":[["Rc::make_mut","has description","Makes a mutable reference into the given Rc. If there are other Rc pointers to the same allocation, then make_mut will clone the inner value to a new allocation to ensure unique ownership. This is also referred to as clone-on-write. If there are no other Rc pointers to this allocation, then Weak pointers to this allocation will be disassociated."]],"startIndex":76636,"endIndex":106160},{"triples":[],"startIndex":106176,"endIndex":145176},{"triples":[["Rc<T>","implements","PartialEq"],["Rc<T>","implements","PartialOrd"],["Rc<T>::cmp","is a","method"],["Rc<T>::cmp","has description","Comparison for two Rcs."],["Rc<T>::lt","is a","method"],["Rc<T>::lt","has description","Less-than comparison for two Rcs."],["Rc<T>::le","is a","method"],["Rc<T>::le","has description","'Less than or equal to' comparison for two Rcs."],["Rc<T>::gt","is a","method"],["Rc<T>::gt","has description","Greater-than comparison for two Rcs."],["Rc<T>::ge","is a","method"],["Rc<T>::ge","has description","'Greater than or equal to' comparison for two Rcs."],["Rc<T>::partial_cmp","is a","method"],["Rc<T>::partial_cmp","has description","Partial comparison for two Rcs."]],"startIndex":145379,"endIndex":180010},{"triples":[["from","has description","Performs the conversion."],["into","has description","Performs the conversion."],["T","has method","from"],["T","has method","into"]],"startIndex":180019,"endIndex":196018}],"add_triples":[{"triples":[["Rc","has method","decrement_strong_count"],["Rc","has method","increment_strong_count"],["Rc","has method","try_new"],["Rc","has method","try_new_uninit"],["Rc","has method","try_new_zeroed"],["Rc","has method","unwrap_or_clone"],["Rc::decrement_strong_count","is a","method"],["Rc::increment_strong_count","is a","method"],["Rc::try_new","is a","method"],["Rc::try_new_uninit","is a","method"],["Rc::try_new_zeroed","is a","method"],["Rc::unwrap_or_clone","is a","method"],["Rc::new_cyclic","has description","Constructs a new Rc<T> using a closure data_fn that has access to a weak reference to the constructing Rc<T>"],["Rc::try_unwrap","has description","Returns the inner value, if the Rc has exactly one strong reference"]],"startIndex":15,"endIndex":39015},{"triples":[],"startIndex":39227,"endIndex":76637},{"triples":[["Rc::make_mut","has description","Makes a mutable reference into the given Rc. If there are other Rc pointers to the same allocation, then make_mut will clone the inner value to a new allocation to ensure unique ownership. This is also referred to as clone-on-write. However, if there are no other Rc pointers to this allocation, but some Weak pointers, then the Weak pointers will be disassociated and the inner value will not be cloned."],["Rc::unwrap_or_clone","has description","If we have the only reference to T then unwrap it. Otherwise, clone T and return the clone."],["Rc::unwrap_or_clone","stable since","1.69.0"]],"startIndex":76636,"endIndex":106160},{"triples":[],"startIndex":106176,"endIndex":145176},{"triples":[["Rc<T>","implements","Ord"],["Rc<T>","implements","PartialEq<Rc<T>>"],["Rc<T>","implements","PartialOrd<Rc<T>>"],["Rc<T>","has method","cmp"],["cmp","is a","method"],["cmp","has description","Compares and returns the ordering between self and other."],["cmp","has argument","self"],["cmp","has argument","other"],["self","has type","&Rc<T>"],["other","has type","&Rc<T>"],["cmp","has return type","Ordering"],["Rc<T>","has method","lt"],["lt","is a","method"],["lt","has description","Less-than comparison for two Rcs. The two are compared by calling < on their inner values."],["lt","has argument","self"],["lt","has argument","other"],["lt","has return type","bool"],["Rc<T>","has method","le"],["le","is a","method"],["le","has description","'Less than or equal to' comparison for two Rcs. The two are compared by calling <= on their inner values."],["le","has argument","self"],["le","has argument","other"],["le","has return type","bool"],["Rc<T>","has method","gt"],["gt","is a","method"],["gt","has description","Greater-than comparison for two Rcs. The two are compared by calling > on their inner values."],["gt","has argument","self"],["gt","has argument","other"],["gt","has return type","bool"],["Rc<T>","has method","ge"],["ge","is a","method"],["ge","has description","'Greater than or equal to' comparison for two Rcs. The two are compared by calling >= on their inner values."],["ge","has argument","self"],["ge","has argument","other"],["ge","has return type","bool"],["Rc<T>","has method","partial_cmp"],["partial_cmp","is a","method"],["partial_cmp","has description","Partial comparison for two Rcs. The two are compared by calling partial_cmp() on their inner values."],["partial_cmp","has argument","self"],["partial_cmp","has argument","other"],["partial_cmp","has return type","Option<Ordering>"]],"startIndex":145379,"endIndex":180010},{"triples":[["from","has description","Calls U::from(self)."],["into","has description","Calls U::from(self)."],["From<!>","has method","from"],["From<T>","has method","from"],["Into<U>","has method","into"],["TryFrom<U>","has method","try_from"],["TryInto<U>","has method","try_into"],["T","implements","Borrow<T>"],["T","implements","BorrowMut<T>"],["Borrow<T>","has method","borrow"],["borrow","has return type","&T"],["BorrowMut<T>","has method","borrow_mut"],["borrow_mut","has return type","&mut T"]],"startIndex":180019,"endIndex":196018}],"metrics":{"escapeCount":2,"costTime":734541,"totalUsage":{"prompt_tokens":166144,"completion_tokens":19142,"cached_tokens":0,"reasoning_tokens":15783},"chunkLength":6,"chunksInfo":[{"oldContextLength":42,"oldStrLength":27703,"newContextLength":42,"newStrLength":39021,"costTime":43719},{"oldContextLength":227,"oldStrLength":38974,"newContextLength":227,"newStrLength":37431,"costTime":83936},{"oldContextLength":227,"oldStrLength":39021,"newContextLength":227,"newStrLength":29545,"costTime":61162},{"oldContextLength":227,"oldStrLength":31932,"newContextLength":227,"newStrLength":39021,"costTime":428025},{"oldContextLength":227,"oldStrLength":39021,"newContextLength":227,"newStrLength":34652,"costTime":71414},{"oldContextLength":227,"oldStrLength":17475,"newContextLength":227,"newStrLength":16020,"costTime":46285}]},"model":"deepseek-r1-250120","extraInfo":{}}