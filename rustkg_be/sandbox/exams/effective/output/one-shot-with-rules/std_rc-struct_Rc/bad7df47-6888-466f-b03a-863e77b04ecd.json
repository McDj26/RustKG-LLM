{"create_time":"2025-03-29T07:03:14.728Z","id":"bad7df47-6888-466f-b03a-863e77b04ecd","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Rc.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_rc-struct_Rc\\merged_1b9961e0-1799-4b5a-9697-05e1cb9bf664.json","relations":["contains","excludes","has argument","has associated type","has declaration","has description","has example","has feature","has full name","has generic parameter","has method","has return type","has stability","has version","implements","is a","stable since"],"delete_triples":[{"triples":[["Rc::downgrade","has description","Downgrades the Rc<T> to a Weak<T> reference."],["Rc::try_unwrap","has description","Unwraps the contained value if the Rc<T> has exactly one strong reference. Otherwise, an Err is returned with the same Rc<T>."]],"startIndex":15,"endIndex":39015},{"triples":[],"startIndex":39227,"endIndex":76637},{"triples":[["Rc::make_mut","has description","If there are other Rc pointers to the same allocation, then make_mut will clone the inner value to a new allocation to ensure unique ownership. This is also referred to as clone-on-write.\nIf there are no other Rc pointers to this allocation, then Weak pointers to this allocation will be disassociated."]],"startIndex":76636,"endIndex":106160},{"triples":[["Rc::from(&'_ [T])","has description","Performs the conversion."],["Rc::from(Box<T, Global>)","has description","Performs the conversion."],["Rc::from(CString)","has description","Performs the conversion."],["Rc::from(OsString)","has description","Performs the conversion."],["Rc::from(PathBuf)","has description","Performs the conversion."],["Rc::from(String)","has description","Performs the conversion."],["Rc::from(T)","has description","Performs the conversion."],["Rc::from(Vec<T, Global>)","has description","Performs the conversion."]],"startIndex":106176,"endIndex":145176},{"triples":[["Rc<T>","has method","hash_slice"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["eq","has description","Equality for two Rcs. Two Rcs are equal if their inner values are equal."]],"startIndex":145379,"endIndex":180010},{"triples":[],"startIndex":180019,"endIndex":196018}],"add_triples":[{"triples":[["Rc","has method","decrement_strong_count"],["Rc","has method","increment_strong_count"],["Rc","has method","try_new"],["Rc","has method","try_new_uninit"],["Rc","has method","try_new_zeroed"],["Rc","has method","unwrap_or_clone"],["Rc::downgrade","has description","Creates a new Weak pointer to this allocation"],["Rc::try_unwrap","has description","Returns the contained value if the Rc has exactly one strong reference"],["Rc::new_cyclic","has description","Constructs a new Rc<T> using a closure data_fn that has access to a weak reference to the constructing Rc<T>"],["Rc::try_new","has description","Constructs a new Rc<T>, returning an error if the allocation fails"],["Rc::try_new_uninit","has description","Constructs a new Rc with uninitialized contents, returning an error if the allocation fails"],["Rc::try_new_zeroed","has description","Constructs a new Rc with uninitialized contents filled with 0 bytes, returning an error if the allocation fails"],["Rc::unwrap_or_clone","has description","Unwraps the Rc or clones the content if there are multiple references"],["Rc::decrement_strong_count","has description","Decrements the strong reference count"],["Rc::increment_strong_count","has description","Increments the strong reference count"]],"startIndex":15,"endIndex":39015},{"triples":[["Rc::increment_strong_count","has description","Increments the strong reference count on the Rc<T> associated with the provided pointer by one."],["Rc::decrement_strong_count","has description","Decrements the strong reference count on the Rc<T> associated with the provided pointer by one."],["Rc::increment_strong_count","stable since","1.53.0"],["Rc::decrement_strong_count","stable since","1.53.0"]],"startIndex":39227,"endIndex":76637},{"triples":[["Rc::make_mut","has description","If there are other Rc pointers to the same allocation, then make_mut will clone the inner value to a new allocation to ensure unique ownership. This is also referred to as clone-on-write.\nHowever, if there are no other Rc pointers to this allocation, but some Weak pointers, then the Weak pointers will be disassociated and the inner value will not be cloned."],["Rc::unwrap_or_clone","stable since","nightly"],["Rc::unwrap_or_clone","has full name","std::rc::Rc::unwrap_or_clone"]],"startIndex":76636,"endIndex":106160},{"triples":[["Rc::from(&'_ [T])","has description","Allocate a reference-counted slice and fill it by cloning vâ€™s items."],["Rc::from(Box<T, Global>)","has description","Move a boxed object to a new, reference counted, allocation."],["Rc::from(CString)","has description","Converts a CString into an Rc<CStr> without copying or allocating."],["Rc::from(OsString)","has description","Converts an OsString into an Rc<OsStr> without copying or allocating."],["Rc::from(PathBuf)","has description","Converts a PathBuf into an Rc<Path> by moving the data into a new Rc buffer."],["Rc::from(PathBuf)","stable since","1.24.0"],["Rc::from(String)","has description","Allocate a reference-counted string slice and copy v into it."],["Rc::from(T)","has description","Converts a generic type T into an Rc<T>."],["Rc::from(Vec<T, Global>)","has description","Move a vector's items into a reference-counted slice."]],"startIndex":106176,"endIndex":145176},{"triples":[["Rc<T>","implements","Hash"],["Rc<T>","implements","Ord"],["Rc<T>","implements","PartialEq<Rc<T>>"],["Rc<T>","implements","PartialOrd<Rc<T>>"],["Rc<T>","has method","hash"],["hash","has description","Feeds this value into the given Hasher."],["Rc<T>","has method","cmp"],["cmp","has description","Comparison for two Rcs. The two are compared by calling cmp() on their inner values."],["Rc<T>","has method","max"],["max","has description","Compares and returns the maximum of two values."],["Rc<T>","has method","min"],["min","has description","Compares and returns the minimum of two values."],["Rc<T>","has method","clamp"],["clamp","has description","Restrict a value to a certain interval."],["Rc<T>","has method","eq"],["eq","has description","Equality for two Rcs. Two Rcs are equal if their inner values are equal, even if stored in different allocations."],["Rc<T>","has method","ne"],["ne","has description","Inequality for two Rcs. Two Rcs are unequal if their inner values are unequal."],["Rc<T>","has method","partial_cmp"],["partial_cmp","has description","Partial comparison for two Rcs. The two are compared by calling partial_cmp() on their inner values."],["Rc<T>","has method","lt"],["lt","has description","Less-than comparison for two Rcs. The two are compared by calling < on their inner values."],["Rc<T>","has method","le"],["le","has description","'Less than or equal to' comparison for two Rcs. The two are compared by calling <= on their inner values."],["Rc<T>","has method","gt"],["gt","has description","Greater-than comparison for two Rcs. The two are compared by calling > on their inner values."],["Rc<T>","has method","ge"],["ge","has description","'Greater than or equal to' comparison for two Rcs. The two are compared by calling >= on their inner values."]],"startIndex":145379,"endIndex":180010},{"triples":[["From<!>","has method","from"],["from","has description","Performs the conversion."],["From<T>","has method","from"],["from","has description","Returns the argument unchanged."],["Into<U>","has method","into"],["into","has description","Calls U::from(self)."],["ToOwned","has method","to_owned"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["ToOwned","has method","clone_into"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["ToString","has method","to_string"],["to_string","has description","Converts the given value to a String."],["TryFrom<U>","has method","try_from"],["try_from","has description","Performs the conversion."],["TryInto<U>","has method","try_into"],["try_into","has description","Performs the conversion."]],"startIndex":180019,"endIndex":196018}],"metrics":{"escapeCount":2,"costTime":737683,"totalUsage":{"prompt_tokens":167493,"completion_tokens":18557,"cached_tokens":0,"reasoning_tokens":14511},"chunkLength":6,"chunksInfo":[{"oldContextLength":42,"oldStrLength":27703,"newContextLength":42,"newStrLength":39021,"costTime":42525},{"oldContextLength":227,"oldStrLength":38974,"newContextLength":227,"newStrLength":37431,"costTime":115426},{"oldContextLength":227,"oldStrLength":39021,"newContextLength":227,"newStrLength":29545,"costTime":38531},{"oldContextLength":227,"oldStrLength":31932,"newContextLength":227,"newStrLength":39021,"costTime":423963},{"oldContextLength":227,"oldStrLength":39021,"newContextLength":227,"newStrLength":34652,"costTime":72640},{"oldContextLength":227,"oldStrLength":17475,"newContextLength":227,"newStrLength":16020,"costTime":44598}]},"model":"deepseek-r1-250120","extraInfo":{}}