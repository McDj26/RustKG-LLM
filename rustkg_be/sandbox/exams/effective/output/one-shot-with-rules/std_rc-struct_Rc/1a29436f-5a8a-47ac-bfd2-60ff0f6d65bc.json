{"create_time":"2025-03-29T06:59:55.303Z","id":"1a29436f-5a8a-47ac-bfd2-60ff0f6d65bc","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/rc/struct.Rc.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\std_rc-struct_Rc\\merged_1b9961e0-1799-4b5a-9697-05e1cb9bf664.json","relations":["contains","excludes","has argument","has associated type","has description","has feature","has full name","has generic parameter","has method","has return type","has stability","implements","is a","stable since"],"delete_triples":[{"triples":[],"startIndex":15,"endIndex":39015},{"triples":[["assume_init","has description","Converts to Rc<T>."],["assume_init","has stability","Unstable (new_uninit #63291)"]],"startIndex":39227,"endIndex":76637},{"triples":[["Rc::make_mut","has description","Makes a mutable reference into the given Rc. This will clone the inner value to a new allocation to ensure unique ownership. This is also referred to as clone-on-write. If there are no other Rc pointers to this allocation, then Weak pointers to this allocation will be disassociated."]],"startIndex":76636,"endIndex":106160},{"triples":[],"startIndex":106176,"endIndex":145176},{"triples":[["Rc::from","has description","Performs the conversion."],["Rc::from","stable since","1.6.0"],["Rc<Path>","implements","From<PathBuf>"],["Rc<Path>","implements","From<&Path>"],["From<PathBuf>::from","has argument","s"],["s","has type","PathBuf"],["From<PathBuf>::from","has return type","Rc<Path>"],["From<&Path>::from","has argument","s"],["s","has type","&Path"],["From<&Path>::from","has return type","Rc<Path>"]],"startIndex":145379,"endIndex":180010},{"triples":[["From<T>::from","has description","Performs the conversion."],["Into<U>::into","has description","Performs the conversion."]],"startIndex":180019,"endIndex":196018}],"add_triples":[{"triples":[["Rc","has method","decrement_strong_count"],["Rc","has method","increment_strong_count"],["Rc","has method","try_new"],["Rc","has method","try_new_uninit"],["Rc","has method","try_new_zeroed"],["Rc","has method","unwrap_or_clone"],["Rc","implements","RefUnwindSafe"],["try_new","is a","method"],["try_new_uninit","is a","method"],["try_new_zeroed","is a","method"],["Rc::try_new","has description","Constructs a new Rc<T>, returning an error if the allocation fails"],["Rc::try_new_uninit","has description","Constructs a new Rc with uninitialized contents, returning an error if the allocation fails"],["Rc::try_new_zeroed","has description","Constructs a new Rc with uninitialized contents filled with 0 bytes, returning an error if allocation fails"],["Rc::decrement_strong_count","has description","Decrements the strong reference count"],["Rc::increment_strong_count","has description","Increments the strong reference count"],["Rc::unwrap_or_clone","has description","Unwraps the value or clones the contained value if there are multiple references"],["Rc","implements","UnwindSafe"],["Rc::try_new","stable since","nightly"],["Rc::try_new_uninit","stable since","nightly"],["Rc::try_new_zeroed","stable since","nightly"]],"startIndex":15,"endIndex":39015},{"triples":[["assume_init","has description","Converts to Rc<T> without checking"],["assume_init","has stability","Stable (since 1.60.0)"]],"startIndex":39227,"endIndex":76637},{"triples":[["Rc::make_mut","has description","Makes a mutable reference into the given Rc. If there are other Rc pointers to the same allocation, make_mut will clone the inner value to a new allocation to ensure unique ownership (clone-on-write). Weak pointers will be disassociated without cloning if there are no other Rc pointers."],["Rc::unwrap_or_clone","is a","method"],["Rc::unwrap_or_clone","has description","Unwraps the value or clones the contained value if there are multiple references."],["Rc::unwrap_or_clone","stable since","nightly"]],"startIndex":76636,"endIndex":106160},{"triples":[],"startIndex":106176,"endIndex":145176},{"triples":[["Rc<T>","implements","RefUnwindSafe"],["Rc<T>","has method","decrement_strong_count"],["Rc<T>","has method","increment_strong_count"],["Rc<T>","has method","try_new"],["Rc<T>","has method","try_new_uninit"],["Rc<T>","has method","try_new_zeroed"],["Rc<T>","has method","unwrap_or_clone"]],"startIndex":145379,"endIndex":180010},{"triples":[["From<!>::from","has description","Performs the conversion."],["From<T>::from","has description","Returns the argument unchanged."],["Into<U>::into","has description","Calls U::from(self). That is, this conversion is whatever the implementation of From<T> for U chooses to do."],["Borrow<T>::borrow","has feature","const unstable"],["BorrowMut<T>::borrow_mut","has feature","const unstable"],["From<!>::from","has feature","const unstable"],["From<T>::from","has feature","const unstable"],["Into<U>::into","has feature","const unstable"]],"startIndex":180019,"endIndex":196018}],"metrics":{"escapeCount":2,"costTime":700695,"totalUsage":{"prompt_tokens":165858,"completion_tokens":17864,"cached_tokens":0,"reasoning_tokens":15008},"chunkLength":6,"chunksInfo":[{"oldContextLength":42,"oldStrLength":27703,"newContextLength":42,"newStrLength":39021,"costTime":61073},{"oldContextLength":227,"oldStrLength":38974,"newContextLength":227,"newStrLength":37431,"costTime":88740},{"oldContextLength":227,"oldStrLength":39021,"newContextLength":227,"newStrLength":29545,"costTime":70461},{"oldContextLength":227,"oldStrLength":31932,"newContextLength":227,"newStrLength":39021,"costTime":222561},{"oldContextLength":227,"oldStrLength":39021,"newContextLength":227,"newStrLength":34652,"costTime":197919},{"oldContextLength":227,"oldStrLength":17475,"newContextLength":227,"newStrLength":16020,"costTime":59941}]},"model":"deepseek-r1-250120","extraInfo":{}}