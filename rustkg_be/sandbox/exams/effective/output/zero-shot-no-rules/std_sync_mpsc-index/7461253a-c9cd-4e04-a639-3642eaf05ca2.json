{"create_time":"2025-04-05T07:13:53.133Z","id":"7461253a-c9cd-4e04-a639-3642eaf05ca2","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.70-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\zero-shot-no-rules\\std_sync_mpsc-index\\merged_3f45b3fc-049f-483a-9911-590a1d8e5b61.json","relations":[],"delete_triples":[{"triples":[["std::sync::mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives."],["Receiver","description","The receiving-half of Rust's channel type. This half can only be owned by one thread"]],"startIndex":21210,"endIndex":61519},{"triples":[],"startIndex":22484,"endIndex":24478}],"add_triples":[{"triples":[["std::sync::mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives. This module provides both asynchronous and synchronous channels."],["Receiver","description","The receiving-half of Rust's channel type. This half can only be owned by one thread, created by Receiver::into_iter, iter, and try_iter methods."]],"startIndex":21210,"endIndex":61519},{"triples":[["Receiver","has_method","recv"]],"startIndex":22484,"endIndex":24478}],"metrics":{"escapeCount":0,"costTime":82233,"totalUsage":{"prompt_tokens":19302,"completion_tokens":2191,"cached_tokens":0,"reasoning_tokens":1981},"chunkLength":2,"chunksInfo":[{"chunkIndex":0,"strLength":40309,"costTime":53415},{"chunkIndex":1,"strLength":1994,"costTime":28818}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["std::sync::mpsc","adds feature","asynchronous and synchronous channels"],["Receiver","adds method","recv"]]}