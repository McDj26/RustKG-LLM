{"create_time":"2025-04-05T09:05:03.275Z","id":"merged_3243d33e-1cfd-4d5a-a0f9-9d68e3be1be4","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.50-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/index.html","merged_triples":[{"triples":[["mpsc","has_struct","Sender"],["mpsc","has_struct","SyncSender"],["mpsc","has_struct","Receiver"],["mpsc","has_struct","IntoIter"],["mpsc","has_struct","Iter"],["mpsc","has_struct","RecvError"],["mpsc","has_struct","SendError"],["mpsc","has_struct","Handle"],["mpsc","has_struct","Select"],["mpsc","has_enum","TryRecvError"],["mpsc","has_enum","TrySendError"],["mpsc","has_function","channel"],["mpsc","has_function","sync_channel"],["Sender","used_to_send_data_to","Receiver"],["SyncSender","used_to_send_data_to","Receiver"],["channel","returns","Sender"],["channel","returns","Receiver"],["sync_channel","returns","SyncSender"],["sync_channel","returns","Receiver"],["Sender.send","method_returns_error","SendError"],["Receiver.recv","method_returns_error","RecvError"],["Receiver.try_recv","method_returns_error","TryRecvError"],["SyncSender.try_send","method_returns_error","TrySendError"],["std::sync","contains","mpsc"],["std::sync::mpsc","contains","Sender"],["std::sync::mpsc","contains","SyncSender"],["std::sync::mpsc","contains","Receiver"],["std::sync::mpsc","contains","RecvError"],["std::sync::mpsc","contains","SendError"],["std::sync::mpsc","contains","IntoIter"],["std::sync::mpsc","contains","Iter"],["std::sync::mpsc","contains","Handle"],["std::sync::mpsc","contains","Select"],["std::sync::mpsc","contains","TryRecvError"],["std::sync::mpsc","contains","TrySendError"],["std::sync::mpsc","contains","channel"],["std::sync::mpsc","contains","sync_channel"],["Sender","paired_with","Receiver"],["SyncSender","paired_with","Receiver"],["IntoIter","iterates","Receiver"],["Iter","iterates","Receiver"],["std::sync::mpsc","parent_module","std::sync"],["std::sync","parent_module","std"],["Receiver","belongs_to_module","std::sync::mpsc"],["Sender","belongs_to_module","std::sync::mpsc"],["SyncSender","belongs_to_module","std::sync::mpsc"],["RecvError","belongs_to_module","std::sync::mpsc"],["SendError","belongs_to_module","std::sync::mpsc"],["IntoIter","belongs_to_module","std::sync::mpsc"],["Iter","belongs_to_module","std::sync::mpsc"],["Handle","belongs_to_module","std::sync::mpsc"],["Select","belongs_to_module","std::sync::mpsc"],["TryRecvError","belongs_to_module","std::sync::mpsc"],["TrySendError","belongs_to_module","std::sync::mpsc"],["channel","belongs_to_module","std::sync::mpsc"],["sync_channel","belongs_to_module","std::sync::mpsc"],["Receiver","type","结构体"],["Sender","type","结构体"],["SyncSender","type","结构体"],["RecvError","type","结构体"],["SendError","type","结构体"],["IntoIter","type","结构体"],["Iter","type","结构体"],["Handle","type","结构体"],["Select","type","结构体"],["TryRecvError","type","枚举"],["TrySendError","type","枚举"],["channel","type","函数"],["sync_channel","type","函数"],["std::sync::mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives."],["Receiver","description","The receiving-half of Rust's channel type. This half can only be owned by one thread"],["Sender","description","The sending-half of Rust's asynchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads."],["SyncSender","description","The sending-half of Rust's synchronous channel type. This half can only be owned by one thread, but it can be cloned to send to other threads."],["RecvError","description","An error returned from the recv function on a Receiver."],["SendError","description","An error returned from the send function on channels."],["IntoIter","description","An owning iterator over messages on a receiver, this iterator will block whenever next is called, waiting for a new message, and None will be returned when the corresponding channel has hung up."],["Iter","description","An iterator over messages on a receiver, this iterator will block whenever next is called, waiting for a new message, and None will be returned when the corresponding channel has hung up."],["Handle","description","A handle to a receiver which is currently a member of a Select set of receivers. This handle is used to keep the receiver in the set as well as interact with the underlying receiver."],["Select","description","The \"receiver set\" of the select interface. This structure is used to manage a set of receivers which are being selected over."],["TryRecvError","description","This enumeration is the list of the possible reasons that try_recv could not return data when called."],["TrySendError","description","This enumeration is the list of the possible error outcomes for the SyncSender::try_send method."],["channel","description","Creates a new asynchronous channel, returning the sender/receiver halves."],["sync_channel","description","Creates a new synchronous, bounded channel."],["WaitTimeoutResult","type","结构体"],["Weak","type","结构体"],["TryLockError","type","枚举"],["std::sync::mpsc","contains","TryLockError"],["mpsc","has_struct","TryIter"],["std::sync::mpsc","contains","TryIter"],["TryIter","belongs_to_module","std::sync::mpsc"],["std::sync::mpsc","contains","WaitTimeoutResult"],["std::sync::mpsc","contains","Weak"],["TryIter","type","结构体"],["std::sync::mpsc","contains","RecvTimeoutError"],["RecvTimeoutError","type","枚举"],["Receiver","has_method","try_iter"],["Receiver","has_method","into_iter"],["Receiver","has_method","iter"],["try_iter","returns","TryIter"],["into_iter","returns","IntoIter"],["iter","returns","Iter"],["Receiver","description","The receiving-half of Rust's channel type. This half can only be owned by one thread, created by Receiver::into_iter, iter, and try_iter methods."],["mpsc","has_enum","RecvTimeoutError"],["mpsc","has_struct","WaitTimeoutResult"],["mpsc","has_struct","Weak"],["TryIter","description","An iterator that attempts to yield all pending values for a Receiver, created by try_iter."],["RecvTimeoutError","description","This enumeration is the list of possible errors that made recv_timeout unable to return data."],["Weak","description","A version of Arc that holds a non-owning reference to the managed value."],["Weak","description","A version of Arc that holds a non-owning reference to the managed allocation."],["Weak","description","A version of Arc that holds a non-owning reference to the managed allocation. The allocation is accessed by calling upgrade on the Weak pointer, which returns an Option<Arc<T>>."]],"startIndex":0,"endIndex":39000}],"changes_info_triples":[["Receiver","description updated","The receiving-half of Rust's channel type. This half can only be owned by one thread, created by Receiver::into_iter, iter, and try_iter methods."]],"model":"deepseek-r1-250120"}