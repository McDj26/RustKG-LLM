{"create_time":"2025-04-05T07:05:34.413Z","id":"d1fa805a-7553-49bc-846a-1cf1102d9b3a","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.50-x86_64-pc-windows-msvc/share/doc/rust/html/core/ffi/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\zero-shot-no-rules\\core_ffi-index\\merged_26779ff3-822e-43e2-a4b1-4e553584aae6.json","relations":["contains","description","equivalent_to","is_a","part_of"],"delete_triples":[{"triples":[["core::ffi","description","Utilities related to FFI bindings."],["core::include_str","description","Includes a utf8-encoded file as a string."],["core::unimplemented","description","A standardized placeholder for marking unfinished code."]],"startIndex":16701,"endIndex":30231}],"add_triples":[{"triples":[["core::ffi","description","Utilities related to foreign function interface (FFI) bindings."],["core::lazy","description","Lazy values and one-time initialization of static data."],["core::lazy","is_a","module"],["core::lazy","part_of","core"],["core::cfg_accessible","description","Keeps the item it's applied to if the passed path is accessible, and removes it otherwise."],["core::cfg_accessible","is_a","macro"],["core::cfg_accessible","part_of","core"],["core::llvm_asm","description","LLVM-style inline assembly."],["core::llvm_asm","is_a","macro"],["core::llvm_asm","part_of","core"],["core::raw_const","description","Create a `const` raw pointer to a place, without creating an intermediate reference."],["core::raw_const","is_a","macro"],["core::raw_const","part_of","core"],["core::raw_mut","description","Create a `mut` raw pointer to a place, without creating an intermediate reference."],["core::raw_mut","is_a","macro"],["core::raw_mut","part_of","core"],["core::ready","description","Extracts the successful type of a `Poll<T>`."],["core::ready","is_a","macro"],["core::ready","part_of","core"],["core::include_str","description","Includes a UTF-8 encoded file as a string."],["core::unimplemented","description","Indicates unimplemented code by panicking with a message of \"not implemented\"."],["core::ffi::VaList","description","A wrapper for a va_list"],["core::ffi::VaListImpl","description","Basic implementation of a va_list."]],"startIndex":16701,"endIndex":30231}],"metrics":{"escapeCount":0,"costTime":117865,"totalUsage":{"prompt_tokens":10425,"completion_tokens":3101,"cached_tokens":0,"reasoning_tokens":2533},"chunkLength":1,"chunksInfo":[{"chunkIndex":0,"strLength":13530,"costTime":117865}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["core::ffi","description updated","Utilities related to foreign function interface (FFI) bindings."],["core::include_str","description updated","Includes a UTF-8 encoded file as a string."],["core::unimplemented","description updated","Indicates unimplemented code by panicking with a message of \"not implemented\"."],["core","adds module","lazy"],["core","adds macro","cfg_accessible"],["core","adds macro","llvm_asm"],["core","adds macro","raw_const"],["core","adds macro","raw_mut"],["core","adds macro","ready"],["core::ffi","adds type","VaList"],["core::ffi","adds type","VaListImpl"]]}