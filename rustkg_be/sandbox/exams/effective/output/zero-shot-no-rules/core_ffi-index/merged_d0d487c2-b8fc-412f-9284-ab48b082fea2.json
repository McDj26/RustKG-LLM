{"create_time":"2025-04-05T09:05:03.447Z","id":"merged_d0d487c2-b8fc-412f-9284-ab48b082fea2","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/core/ffi/index.html","merged_triples":[{"triples":[["core::ffi","description","Utilities related to FFI bindings."],["core::ffi","part_of","core"],["core::alloc","description","Memory allocation APIs"],["core::alloc","part_of","core"],["core::any","description","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["core::any","part_of","core"],["core::arch","description","Platform dependent vendor intrinsics."],["core::arch","part_of","core"],["core::array","description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["core::array","part_of","core"],["core::ascii","description","Operations on ASCII strings and characters."],["core::ascii","part_of","core"],["core::borrow","description","A module for working with borrowed data."],["core::borrow","part_of","core"],["core::cell","description","Shareable mutable containers."],["core::cell","part_of","core"],["core::char","description","A character type."],["core::char","part_of","core"],["core::clone","description","The `Clone` trait for types that cannot be 'implicitly copied'."],["core::clone","part_of","core"],["core::cmp","description","Functionality for ordering and comparison."],["core::cmp","part_of","core"],["core::convert","description","Traits for conversions between types."],["core::convert","part_of","core"],["core::default","description","The `Default` trait for types which may have meaningful default values."],["core::default","part_of","core"],["core::f32","description","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["core::f32","part_of","core"],["core::f64","description","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["core::f64","part_of","core"],["core::fmt","description","Utilities for formatting and printing strings."],["core::fmt","part_of","core"],["core::future","description","Asynchronous values."],["core::future","part_of","core"],["core::hash","description","Generic hashing support."],["core::hash","part_of","core"],["core::hint","description","Hints to compiler that affects how code should be emitted or optimized."],["core::hint","part_of","core"],["core::i128","description","The 128-bit signed integer type."],["core::i128","part_of","core"],["core::i16","description","The 16-bit signed integer type."],["core::i16","part_of","core"],["core::i32","description","The 32-bit signed integer type."],["core::i32","part_of","core"],["core::i64","description","The 64-bit signed integer type."],["core::i64","part_of","core"],["core::i8","description","The 8-bit signed integer type."],["core::i8","part_of","core"],["core::intrinsics","description","rustc compiler intrinsics."],["core::intrinsics","part_of","core"],["core::isize","description","The pointer-sized signed integer type."],["core::isize","part_of","core"],["core::iter","description","Composable external iteration."],["core::iter","part_of","core"],["core::marker","description","Primitive traits and types representing basic properties of types."],["core::marker","part_of","core"],["core::mem","description","Basic functions for dealing with memory."],["core::mem","part_of","core"],["core::num","description","Numeric traits and functions for the built-in numeric types."],["core::num","part_of","core"],["core::ops","description","Overloadable operators."],["core::ops","part_of","core"],["core::option","description","Optional values."],["core::option","part_of","core"],["core::panic","description","Panic support in the standard library."],["core::panic","part_of","core"],["core::panicking","description","Panic support for libcore"],["core::panicking","part_of","core"],["core::pin","description","Types which pin data to its location in memory"],["core::pin","part_of","core"],["core::prelude","description","The libcore prelude"],["core::prelude","part_of","core"],["core::ptr","description","Raw, unsafe pointers, `*const T`, and `*mut T`."],["core::ptr","part_of","core"],["core::raw","description","Contains struct definitions for the layout of compiler built-in types."],["core::raw","part_of","core"],["core::result","description","Error handling with the `Result` type."],["core::result","part_of","core"],["core::slice","description","Slice management and manipulation"],["core::slice","part_of","core"],["core::str","description","String manipulation"],["core::str","part_of","core"],["core::sync","description","Synchronization primitives"],["core::sync","part_of","core"],["core::task","description","Types and Traits for working with asynchronous tasks."],["core::task","part_of","core"],["core::time","description","Temporal quantification."],["core::time","part_of","core"],["core::u128","description","The 128-bit unsigned integer type."],["core::u128","part_of","core"],["core::u16","description","The 16-bit unsigned integer type."],["core::u16","part_of","core"],["core::u32","description","The 32-bit unsigned integer type."],["core::u32","part_of","core"],["core::u64","description","The 64-bit unsigned integer type."],["core::u64","part_of","core"],["core::u8","description","The 8-bit unsigned integer type."],["core::u8","part_of","core"],["core::unicode","description",""],["core::unicode","part_of","core"],["core::usize","description","The pointer-sized unsigned integer type."],["core::usize","part_of","core"],["core::ffi::c_void","description","Equivalent to C's void type when used as a pointer."],["core::ffi::c_void","is_a","enum"],["core::ffi::c_void","part_of","core::ffi"],["core::assert","description","Ensure that a boolean expression is `true` at runtime."],["core::assert","is_a","macro"],["core::assert","part_of","core"],["core::assert_eq","description","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["core::assert_eq","is_a","macro"],["core::assert_eq","part_of","core"],["core::assert_ne","description","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["core::assert_ne","is_a","macro"],["core::assert_ne","part_of","core"],["core::cfg","description","Boolean evaluation of configuration flags, at compile-time."],["core::cfg","is_a","macro"],["core::cfg","part_of","core"],["core::column","description","A macro which expands to the column number on which it was invoked."],["core::column","is_a","macro"],["core::column","part_of","core"],["core::compile_error","description","Unconditionally causes compilation to fail with the given error message when encountered."],["core::compile_error","is_a","macro"],["core::compile_error","part_of","core"],["core::concat","description","Concatenates literals into a static string slice."],["core::concat","is_a","macro"],["core::concat","part_of","core"],["core::concat_idents","description","Concatenate identifiers into one identifier."],["core::concat_idents","is_a","macro"],["core::concat_idents","part_of","core"],["core::debug_assert","description","Ensure that a boolean expression is `true` at runtime."],["core::debug_assert","is_a","macro"],["core::debug_assert","part_of","core"],["core::debug_assert_eq","description","Asserts that two expressions are equal to each other."],["core::debug_assert_eq","is_a","macro"],["core::debug_assert_eq","part_of","core"],["core::debug_assert_ne","description","Asserts that two expressions are not equal to each other."],["core::debug_assert_ne","is_a","macro"],["core::debug_assert_ne","part_of","core"],["core::env","description","Inspect an environment variable at compile time."],["core::env","is_a","macro"],["core::env","part_of","core"],["core::file","description","A macro which expands to the file name from which it was invoked."],["core::file","is_a","macro"],["core::file","part_of","core"],["core::format_args","description","The core macro for formatted string creation & output."],["core::format_args","is_a","macro"],["core::format_args","part_of","core"],["core::include","description","Parse a file as an expression or an item according to the context."],["core::include","is_a","macro"],["core::include","part_of","core"],["core::include_bytes","description","Includes a file as a reference to a byte array."],["core::include_bytes","is_a","macro"],["core::include_bytes","part_of","core"],["core::include_str","description","Includes a utf8-encoded file as a string."],["core::include_str","is_a","macro"],["core::include_str","part_of","core"],["core::line","description","A macro which expands to the line number on which it was invoked."],["core::line","is_a","macro"],["core::line","part_of","core"],["core::module_path","description","Expands to a string that represents the current module path."],["core::module_path","is_a","macro"],["core::module_path","part_of","core"],["core::option_env","description","Optionally inspect an environment variable at compile time."],["core::option_env","is_a","macro"],["core::option_env","part_of","core"],["core::panic","description","Entry point of thread panic, for details, see std::macros"],["core::panic","is_a","macro"],["core::stringify","description","A macro which stringifies its arguments."],["core::stringify","is_a","macro"],["core::stringify","part_of","core"],["core::try","description","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["core::try","is_a","macro"],["core::try","part_of","core"],["core::unimplemented","description","A standardized placeholder for marking unfinished code."],["core::unimplemented","is_a","macro"],["core::unimplemented","part_of","core"],["core::unreachable","description","A utility macro for indicating unreachable code."],["core::unreachable","is_a","macro"],["core::unreachable","part_of","core"],["core::write","description","Write formatted data into a buffer."],["core::write","is_a","macro"],["core::write","part_of","core"],["core::writeln","description","Write formatted data into a buffer, with a newline appended."],["core::writeln","is_a","macro"],["core::writeln","part_of","core"],["alloc","has_description","Memory allocation APIs"],["alloc","is_a","module"],["alloc","is_part_of","core"],["any","has_description","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["any","is_a","module"],["any","is_part_of","core"],["arch","has_description","Platform dependent vendor intrinsics."],["arch","is_a","module"],["arch","is_part_of","core"],["array","has_description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["array","is_a","module"],["array","is_part_of","core"],["ascii","has_description","Operations on ASCII strings and characters."],["ascii","is_a","module"],["ascii","is_part_of","core"],["borrow","has_description","A module for working with borrowed data."],["borrow","is_a","module"],["borrow","is_part_of","core"],["cell","has_description","Shareable mutable containers."],["cell","is_a","module"],["cell","is_part_of","core"],["char","has_description","A character type."],["char","is_a","module"],["char","is_part_of","core"],["clone","has_description","The `Clone` trait for types that cannot be 'implicitly copied'."],["clone","is_a","module"],["clone","is_part_of","core"],["cmp","has_description","Functionality for ordering and comparison."],["cmp","is_a","module"],["cmp","is_part_of","core"],["convert","has_description","Traits for conversions between types."],["convert","is_a","module"],["convert","is_part_of","core"],["default","has_description","The `Default` trait for types which may have meaningful default values."],["default","is_a","module"],["default","is_part_of","core"],["f32","has_description","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f32","is_a","module"],["f32","is_part_of","core"],["f64","has_description","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["f64","is_a","module"],["f64","is_part_of","core"],["ffi","has_description","Utilities related to FFI bindings."],["ffi","is_a","module"],["ffi","is_part_of","core"],["fmt","has_description","Utilities for formatting and printing strings."],["fmt","is_a","module"],["fmt","is_part_of","core"],["future","has_description","Asynchronous values."],["future","is_a","module"],["future","is_part_of","core"],["hash","has_description","Generic hashing support."],["hash","is_a","module"],["hash","is_part_of","core"],["hint","has_description","Hints to compiler that affects how code should be emitted or optimized."],["hint","is_a","module"],["hint","is_part_of","core"],["i128","has_description","The 128-bit signed integer type."],["i128","is_a","module"],["i128","is_part_of","core"],["i16","has_description","The 16-bit signed integer type."],["i16","is_a","module"],["i16","is_part_of","core"],["i32","has_description","The 32-bit signed integer type."],["i32","is_a","module"],["i32","is_part_of","core"],["i64","has_description","The 64-bit signed integer type."],["i64","is_a","module"],["i64","is_part_of","core"],["i8","has_description","The 8-bit signed integer type."],["i8","is_a","module"],["i8","is_part_of","core"],["intrinsics","has_description","rustc compiler intrinsics."],["intrinsics","is_a","module"],["intrinsics","is_part_of","core"],["isize","has_description","The pointer-sized signed integer type."],["isize","is_a","module"],["isize","is_part_of","core"],["iter","has_description","Composable external iteration."],["iter","is_a","module"],["iter","is_part_of","core"],["marker","has_description","Primitive traits and types representing basic properties of types."],["marker","is_a","module"],["marker","is_part_of","core"],["mem","has_description","Basic functions for dealing with memory."],["mem","is_a","module"],["mem","is_part_of","core"],["num","has_description","Numeric traits and functions for the built-in numeric types."],["num","is_a","module"],["num","is_part_of","core"],["ops","has_description","Overloadable operators."],["ops","is_a","module"],["ops","is_part_of","core"],["option","has_description","Optional values."],["option","is_a","module"],["option","is_part_of","core"],["panic","has_description","Panic support in the standard library."],["panic","is_a","module"],["panic","is_part_of","core"],["panicking","has_description","Panic support for libcore"],["panicking","is_a","module"],["panicking","is_part_of","core"],["pin","has_description","Types which pin data to its location in memory"],["pin","is_a","module"],["pin","is_part_of","core"],["prelude","has_description","The libcore prelude"],["prelude","is_a","module"],["prelude","is_part_of","core"],["ptr","has_description","Raw, unsafe pointers, `*const T`, and `*mut T`."],["ptr","is_a","module"],["ptr","is_part_of","core"],["raw","has_description","Contains struct definitions for the layout of compiler built-in types."],["raw","is_a","module"],["raw","is_part_of","core"],["result","has_description","Error handling with the `Result` type."],["result","is_a","module"],["result","is_part_of","core"],["slice","has_description","Slice management and manipulation"],["slice","is_a","module"],["slice","is_part_of","core"],["str","has_description","String manipulation"],["str","is_a","module"],["str","is_part_of","core"],["sync","has_description","Synchronization primitives"],["sync","is_a","module"],["sync","is_part_of","core"],["task","has_description","Types and Traits for working with asynchronous tasks."],["task","is_a","module"],["task","is_part_of","core"],["time","has_description","Temporal quantification."],["time","is_a","module"],["time","is_part_of","core"],["u128","has_description","The 128-bit unsigned integer type."],["u128","is_a","module"],["u128","is_part_of","core"],["u16","has_description","The 16-bit unsigned integer type."],["u16","is_a","module"],["u16","is_part_of","core"],["u32","has_description","The 32-bit unsigned integer type."],["u32","is_a","module"],["u32","is_part_of","core"],["u64","has_description","The 64-bit unsigned integer type."],["u64","is_a","module"],["u64","is_part_of","core"],["u8","has_description","The 8-bit unsigned integer type."],["u8","is_a","module"],["u8","is_part_of","core"],["unicode","has_description",""],["unicode","is_a","module"],["unicode","is_part_of","core"],["usize","has_description","The pointer-sized unsigned integer type."],["usize","is_a","module"],["usize","is_part_of","core"],["assert","has_description","Ensure that a boolean expression is `true` at runtime."],["assert","is_a","macro"],["assert","is_part_of","core"],["assert_eq","has_description","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["assert_eq","is_a","macro"],["assert_eq","is_part_of","core"],["assert_ne","has_description","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["assert_ne","is_a","macro"],["assert_ne","is_part_of","core"],["cfg","has_description","Boolean evaluation of configuration flags, at compile-time."],["cfg","is_a","macro"],["cfg","is_part_of","core"],["column","has_description","A macro which expands to the column number on which it was invoked."],["column","is_a","macro"],["column","is_part_of","core"],["compile_error","has_description","Unconditionally causes compilation to fail with the given error message when encountered."],["compile_error","is_a","macro"],["compile_error","is_part_of","core"],["concat","has_description","Concatenates literals into a static string slice."],["concat","is_a","macro"],["concat","is_part_of","core"],["concat_idents","has_description","Concatenate identifiers into one identifier."],["concat_idents","is_a","macro"],["concat_idents","is_part_of","core"],["debug_assert","has_description","Ensure that a boolean expression is `true` at runtime."],["debug_assert","is_a","macro"],["debug_assert","is_part_of","core"],["debug_assert_eq","has_description","Asserts that two expressions are equal to each other."],["debug_assert_eq","is_a","macro"],["debug_assert_eq","is_part_of","core"],["debug_assert_ne","has_description","Asserts that two expressions are not equal to each other."],["debug_assert_ne","is_a","macro"],["debug_assert_ne","is_part_of","core"],["env","has_description","Inspect an environment variable at compile time."],["env","is_a","macro"],["env","is_part_of","core"],["file","has_description","A macro which expands to the file name from which it was invoked."],["file","is_a","macro"],["file","is_part_of","core"],["format_args","has_description","The core macro for formatted string creation & output."],["format_args","is_a","macro"],["format_args","is_part_of","core"],["include","has_description","Parse a file as an expression or an item according to the context."],["include","is_a","macro"],["include","is_part_of","core"],["include_bytes","has_description","Includes a file as a reference to a byte array."],["include_bytes","is_a","macro"],["include_bytes","is_part_of","core"],["include_str","has_description","Includes a utf8-encoded file as a string."],["include_str","is_a","macro"],["include_str","is_part_of","core"],["line","has_description","A macro which expands to the line number on which it was invoked."],["line","is_a","macro"],["line","is_part_of","core"],["module_path","has_description","Expands to a string that represents the current module path."],["module_path","is_a","macro"],["module_path","is_part_of","core"],["option_env","has_description","Optionally inspect an environment variable at compile time."],["option_env","is_a","macro"],["option_env","is_part_of","core"],["panic","has_description","Entry point of thread panic, for details, see std::macros"],["panic","is_a","macro"],["stringify","has_description","A macro which stringifies its arguments."],["stringify","is_a","macro"],["stringify","is_part_of","core"],["try","has_description","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["try","is_a","macro"],["try","is_part_of","core"],["unimplemented","has_description","A standardized placeholder for marking unfinished code."],["unimplemented","is_a","macro"],["unimplemented","is_part_of","core"],["unreachable","has_description","A utility macro for indicating unreachable code."],["unreachable","is_a","macro"],["unreachable","is_part_of","core"],["write","has_description","Write formatted data into a buffer."],["write","is_a","macro"],["write","is_part_of","core"],["writeln","has_description","Write formatted data into a buffer, with a newline appended."],["writeln","is_a","macro"],["writeln","is_part_of","core"],["c_void","has_description","Equivalent to C's void type when used as a pointer."],["c_void","is_a","enum"],["c_void","is_part_of","ffi"],["core::ffi","has_description","Utilities related to FFI bindings."],["core::ffi","contains","c_void"],["c_void","equivalent_to","C's void type when used as a pointer"]],"startIndex":0,"endIndex":39000}],"changes_info_triples":[],"model":"deepseek-r1-250120"}