{"create_time":"2025-04-05T09:05:02.938Z","id":"merged_138706e4-262a-41f1-8f5a-3d6e5172c8d9","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.70-x86_64-pc-windows-msvc/share/doc/rust/html/std/io/enum.ErrorKind.html","merged_triples":[{"triples":[["std::io::ErrorKind","is_part_of","std::io"],["std::io::ErrorKind","description","A list specifying general categories of I/O error."],["std::io::ErrorKind::NotFound","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::NotFound","description","An entity was not found, often a file."],["std::io::ErrorKind::PermissionDenied","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::PermissionDenied","description","The operation lacked the necessary privileges to complete."],["std::io::ErrorKind::ConnectionRefused","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::ConnectionRefused","description","The connection was refused by the remote server."],["std::io::ErrorKind::ConnectionReset","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::ConnectionReset","description","The connection was reset by the remote server."],["std::io::ErrorKind::ConnectionAborted","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::ConnectionAborted","description","The connection was aborted (terminated) by the remote server."],["std::io::ErrorKind::NotConnected","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::NotConnected","description","The network operation failed because it was not connected yet."],["std::io::ErrorKind::AddrInUse","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::AddrInUse","description","A socket address could not be bound because the address is already in use elsewhere."],["std::io::ErrorKind::AddrNotAvailable","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::AddrNotAvailable","description","A nonexistent interface was requested or the requested address was not local."],["std::io::ErrorKind::BrokenPipe","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::BrokenPipe","description","The operation failed because a pipe was closed."],["std::io::ErrorKind::AlreadyExists","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::AlreadyExists","description","An entity already exists, often a file."],["std::io::ErrorKind::WouldBlock","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::WouldBlock","description","The operation needs to block to complete, but the blocking operation was requested to not occur."],["std::io::ErrorKind::InvalidInput","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::InvalidInput","description","A parameter was incorrect."],["std::io::ErrorKind::InvalidData","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::InvalidData","description","Data not valid for the operation were encountered. Unlike InvalidInput, this typically means that the operation parameters were valid, however the error was caused by malformed input data. For example, a function that reads a file into a string will error with InvalidData if the file's contents are not valid UTF-8."],["std::io::ErrorKind::TimedOut","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::TimedOut","description","The I/O operation's timeout expired, causing it to be canceled."],["std::io::ErrorKind::WriteZero","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::WriteZero","description","An error returned when an operation could not be completed because a call to write returned Ok(0). This typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written."],["std::io::ErrorKind::Interrupted","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::Interrupted","description","This operation was interrupted. Interrupted operations can typically be retried."],["std::io::ErrorKind::Other","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::Other","description","Any I/O error not part of this list."],["std::io::ErrorKind::UnexpectedEof","is_variant_of","std::io::ErrorKind"],["std::io::ErrorKind::UnexpectedEof","description","An error returned when an operation could not be completed because an end of file was reached prematurely. This typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read."],["std::io::ErrorKind","implements","std::fmt::Debug"],["std::io::ErrorKind","implements","std::clone::Clone"],["std::io::ErrorKind","implements","std::cmp::Eq"],["std::io::ErrorKind","implements","std::cmp::PartialEq"],["std::io::ErrorKind","implements","std::marker::Copy"],["std::io","contains","ErrorKind"],["ErrorKind","description","A list specifying general categories of I/O error."],["ErrorKind","since_version","1.0.0"],["ErrorKind","has_variant","NotFound"],["NotFound","description","An entity was not found, often a file."],["ErrorKind","has_variant","PermissionDenied"],["PermissionDenied","description","The operation lacked the necessary privileges to complete."],["ErrorKind","has_variant","ConnectionRefused"],["ConnectionRefused","description","The connection was refused by the remote server."],["ErrorKind","has_variant","ConnectionReset"],["ConnectionReset","description","The connection was reset by the remote server."],["ErrorKind","has_variant","ConnectionAborted"],["ConnectionAborted","description","The connection was aborted (terminated) by the remote server."],["ErrorKind","has_variant","NotConnected"],["NotConnected","description","The network operation failed because it was not connected yet."],["ErrorKind","has_variant","AddrInUse"],["AddrInUse","description","A socket address could not be bound because the address is already in use elsewhere."],["ErrorKind","has_variant","AddrNotAvailable"],["AddrNotAvailable","description","A nonexistent interface was requested or the requested address was not local."],["ErrorKind","has_variant","BrokenPipe"],["BrokenPipe","description","The operation failed because a pipe was closed."],["ErrorKind","has_variant","AlreadyExists"],["AlreadyExists","description","An entity already exists, often a file."],["ErrorKind","has_variant","WouldBlock"],["WouldBlock","description","The operation needs to block to complete, but the blocking operation was requested to not occur."],["ErrorKind","has_variant","InvalidInput"],["InvalidInput","description","A parameter was incorrect."],["ErrorKind","has_variant","InvalidData"],["InvalidData","description","Data not valid for the operation were encountered. Unlike InvalidInput, this typically means that the operation parameters were valid, however the error was caused by malformed input data. For example, a function that reads a file into a string will error with InvalidData if the file's contents are not valid UTF-8."],["InvalidData","since_version","1.2.0"],["ErrorKind","has_variant","TimedOut"],["TimedOut","description","The I/O operation's timeout expired, causing it to be canceled."],["ErrorKind","has_variant","WriteZero"],["WriteZero","description","An error returned when an operation could not be completed because a call to write returned Ok(0). This typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written."],["ErrorKind","has_variant","Interrupted"],["Interrupted","description","This operation was interrupted. Interrupted operations can typically be retried."],["ErrorKind","has_variant","Other"],["Other","description","Any I/O error not part of this list."],["ErrorKind","has_variant","UnexpectedEof"],["UnexpectedEof","description","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely. This typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read."],["UnexpectedEof","since_version","1.6.0"],["ErrorKind","implements","std::fmt::Debug"],["ErrorKind","implements","std::clone::Clone"],["ErrorKind","implements","std::cmp::Eq"],["ErrorKind","implements","std::cmp::PartialEq"],["ErrorKind","implements","std::marker::Copy"],["std::io::ErrorKind","belongs_to_module","std::io"],["std::io::ErrorKind","has_description","A list specifying general categories of I/O error. This list is intended to grow over time and it is not recommended to exhaustively match against it."],["std::io::ErrorKind","since_version","1.0.0"],["std::io::ErrorKind","implements","Debug"],["std::io::ErrorKind","implements","Clone"],["std::io::ErrorKind","implements","Eq"],["std::io::ErrorKind","implements","PartialEq"],["std::io::ErrorKind","implements","Copy"],["std::io::ErrorKind","has_variant","NotFound"],["NotFound","has_description","An entity was not found, often a file."],["std::io::ErrorKind","has_variant","PermissionDenied"],["PermissionDenied","has_description","The operation lacked the necessary privileges to complete."],["std::io::ErrorKind","has_variant","ConnectionRefused"],["ConnectionRefused","has_description","The connection was refused by the remote server."],["std::io::ErrorKind","has_variant","ConnectionReset"],["ConnectionReset","has_description","The connection was reset by the remote server."],["std::io::ErrorKind","has_variant","ConnectionAborted"],["ConnectionAborted","has_description","The connection was aborted (terminated) by the remote server."],["std::io::ErrorKind","has_variant","NotConnected"],["NotConnected","has_description","The network operation failed because it was not connected yet."],["std::io::ErrorKind","has_variant","AddrInUse"],["AddrInUse","has_description","A socket address could not be bound because the address is already in use elsewhere."],["std::io::ErrorKind","has_variant","AddrNotAvailable"],["AddrNotAvailable","has_description","A nonexistent interface was requested or the requested address was not local."],["std::io::ErrorKind","has_variant","BrokenPipe"],["BrokenPipe","has_description","The operation failed because a pipe was closed."],["std::io::ErrorKind","has_variant","AlreadyExists"],["AlreadyExists","has_description","An entity already exists, often a file."],["std::io::ErrorKind","has_variant","WouldBlock"],["WouldBlock","has_description","The operation needs to block to complete, but the blocking operation was requested to not occur."],["std::io::ErrorKind","has_variant","InvalidInput"],["InvalidInput","has_description","A parameter was incorrect."],["std::io::ErrorKind","has_variant","InvalidData"],["InvalidData","has_description","Data not valid for the operation were encountered. Unlike InvalidInput, this typically means that the operation parameters were valid, however the error was caused by malformed input data. For example, a function that reads a file into a string will error with InvalidData if the file's contents are not valid UTF-8."],["std::io::ErrorKind","has_variant","TimedOut"],["TimedOut","has_description","The I/O operation's timeout expired, causing it to be canceled."],["std::io::ErrorKind","has_variant","WriteZero"],["WriteZero","has_description","An error returned when an operation could not be completed because a call to write returned Ok(0). This typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written."],["std::io::ErrorKind","has_variant","Interrupted"],["Interrupted","has_description","This operation was interrupted. Interrupted operations can typically be retried."],["std::io::ErrorKind","has_variant","Other"],["Other","has_description","Any I/O error not part of this list."],["std::io::ErrorKind","has_variant","UnexpectedEof"],["UnexpectedEof","has_description","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely. This typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read."],["std::io::ErrorKind","implements","std::cmp::PartialOrd"],["std::io::ErrorKind","implements","std::hash::Hash"],["std::io","contains","Initializer"],["std::io::ErrorKind","used_with","std::io::Error"],["std::io","has_type_definition","Result"],["ErrorKind","implements","std::cmp::PartialOrd"],["std::io::ErrorKind","implements","std::cmp::Ord"],["std::io::ErrorKind","converts_to","std::io::Error"],["std::io::ErrorKind","implements","std::marker::Send"],["std::io::ErrorKind","implements","std::marker::Sync"],["std::io::ErrorKind","implements","std::convert::From"],["std::io::ErrorKind","implements","std::panic::RefUnwindSafe"],["std::io::ErrorKind","implements","std::marker::Unpin"],["std::io::ErrorKind","implements","std::panic::UnwindSafe"],["std::io::ErrorKind","implements","std::any::Any"],["std::io::ErrorKind","implements","std::borrow::Borrow"],["std::io::ErrorKind","implements","std::convert::TryFrom"],["std::io","contains","IoSlice"],["std::io","contains","IoSliceMut"],["std::io::ErrorKind","implements","StructuralEq"],["std::io::ErrorKind","implements","StructuralPartialEq"],["std::io::ErrorKind","implements","RefUnwindSafe"],["std::io::ErrorKind","implements","Unpin"],["std::io::ErrorKind","implements","UnwindSafe"],["std::io::Error","implements","std::convert::From"],["std::io::ErrorKind","implements","std::convert::From<ErrorKind>"],["std::io::ErrorKind","implements","std::cmp::PartialEq<ErrorKind>"],["std::io::ErrorKind","implements","std::marker::StructuralEq"],["std::io::ErrorKind","implements","std::marker::StructuralPartialEq"],["IsADirectory","description","The filesystem object is, unexpectedly, a directory."],["DirectoryNotEmpty","description","A non-empty directory was specified where an empty directory was expected."],["ReadOnlyFilesystem","description","The filesystem or storage medium is read-only, but a write operation was attempted."],["FilesystemLoop","description","Loop in the filesystem or IO subsystem; too many levels of symbolic links."],["StaleNetworkFileHandle","description","Stale network file handle. With some network filesystems, notably NFS, an open file can be invalidated by problems with the network or server."],["WriteZero","description","An error returned when an operation could not be completed because a call to write returned Ok(0)."],["ResourceBusy","description","Resource is busy."],["Deadlock","description","Deadlock (avoided). A file locking operation would result in deadlock."],["std::io::ErrorKind","implements","std::fmt::Display"],["std::io::ErrorKind","implements","std::fmt::Write"],["ErrorKind","has_variant","HostUnreachable"],["ErrorKind","has_variant","NetworkUnreachable"],["ErrorKind","has_variant","NetworkDown"],["ErrorKind","has_variant","NotADirectory"],["ErrorKind","has_variant","IsADirectory"],["ErrorKind","has_variant","DirectoryNotEmpty"],["ErrorKind","has_variant","ReadOnlyFilesystem"],["ErrorKind","has_variant","FilesystemLoop"],["ErrorKind","has_variant","StaleNetworkFileHandle"],["ErrorKind","has_variant","StorageFull"],["ErrorKind","has_variant","NotSeekable"],["ErrorKind","has_variant","FilesystemQuotaExceeded"],["ErrorKind","has_variant","FileTooLarge"],["ErrorKind","has_variant","ResourceBusy"],["ErrorKind","has_variant","ExecutableFileBusy"],["ErrorKind","has_variant","Deadlock"],["ErrorKind","has_variant","CrossesDevices"],["ErrorKind","has_variant","TooManyLinks"],["ErrorKind","has_variant","InvalidFilename"],["ErrorKind","has_variant","ArgumentListTooLong"],["ErrorKind","has_variant","Unsupported"],["ErrorKind","has_variant","OutOfMemory"],["std::io","has_struct","WriterPanicked"],["std::io","has_function","read_to_string"],["std::io","has_function","stderr_locked"],["std::io","has_function","stdin_locked"],["std::io","has_function","stdout_locked"],["ErrorKind","implements_trait","Clone"],["ErrorKind","implements_trait","Copy"],["ErrorKind","implements_trait","Debug"],["ErrorKind","implements_trait","Display"],["ErrorKind","implements_trait","Eq"],["ErrorKind","implements_trait","From<ErrorKind>"],["ErrorKind","implements_trait","Hash"],["ErrorKind","implements_trait","Ord"],["ErrorKind","implements_trait","PartialEq<ErrorKind>"],["ErrorKind","implements_trait","PartialOrd<ErrorKind>"],["ErrorKind","implements_trait","StructuralEq"],["ErrorKind","implements_trait","StructuralPartialEq"],["std::io","contains","BorrowedBuf"],["std::io","contains","BorrowedCursor"],["std::io::ErrorKind","implements","std::borrow::BorrowMut"],["std::io::ErrorKind","implements","std::convert::Into"],["std::io::ErrorKind","implements","std::borrow::ToOwned"],["std::io::ErrorKind","implements","std::string::ToString"],["std::io::ErrorKind","implements","std::convert::TryInto"],["ErrorKind","implements_trait","Any"],["ErrorKind","implements_trait","Borrow<T>"],["ErrorKind","implements_trait","BorrowMut<T>"],["ErrorKind","implements_trait","From<T>"],["ErrorKind","implements_trait","Into<U>"],["ErrorKind","implements_trait","ToOwned"],["ErrorKind","implements_trait","ToString"],["ErrorKind","implements_trait","TryFrom<U>"],["ErrorKind","implements_trait","TryInto<U>"]],"startIndex":0,"endIndex":39000},{"triples":[["std::io::ErrorKind","implements","std::marker::StructuralEq"],["std::io::ErrorKind","implements","std::clone::Clone"],["std::io::ErrorKind","implements","std::marker::Send"],["std::io::ErrorKind","implements","std::marker::Sync"],["&'_ mut F","implements","std::future::Future"],["&'_ mut R","implements","std::io::Read"],["&'_ mut W","implements","std::io::Write"],["std::io::ErrorKind","implements","std::hash::Hash"],["std::io::ErrorKind","implements","std::cmp::Ord"],["std::io::ErrorKind","implements","std::cmp::PartialEq<ErrorKind>"],["std::io::ErrorKind","implements","std::cmp::PartialOrd"],["std::io::ErrorKind","implements","std::panic::UnwindSafe"],["&'_ mut I","implements","std::iter::Iterator"],["std::io::ErrorKind","implements","std::cmp::PartialEq"],["T","converts_to","U"],["T","implements","std::borrow::ToOwned"],["T","implements","std::convert::TryFrom<U>"],["T","implements","std::convert::From<T>"],["T","implements","std::convert::Into<U>"],["std::borrow::Borrow<T>","implements","std::clone::Clone"],["T","implements","std::string::ToString"],["T","implements","From<T>"],["T","implements","Into<U>"],["T","implements","BorrowMut<T>"],["T","implements","ToOwned"],["std::io::ErrorKind","has_variant","UnexpectedEof"],["std::io::ErrorKind","has_variant","Other"],["std::io::ErrorKind","implements","std::marker::Copy"],["std::io::ErrorKind","implements","std::cmp::Eq"],["std::io::ErrorKind","implements","std::marker::StructuralPartialEq"],["std::io::ErrorKind","implements","std::marker::Unpin"],["ErrorKind","has_variant","UnexpectedEof"],["ErrorKind","has_variant","Other"],["UnexpectedEof","description","An error returned when an operation could not be completed because an “end of file” was reached prematurely."],["Other","description","A custom error that does not fall under any other I/O error kind."],["std::io::ErrorKind","implements","std::panic::RefUnwindSafe"]],"startIndex":44551,"endIndex":85029}],"changes_info_triples":[["std::io","adds component","BorrowedBuf"],["std::io","adds component","BorrowedCursor"],["std::io::ErrorKind","adds variant","UnexpectedEof"],["std::io::ErrorKind","adds variant","Other"],["std::io::ErrorKind","adds feature","std::marker::Copy"],["std::io::ErrorKind","adds feature","std::cmp::Eq"],["std::io::ErrorKind","adds feature","std::marker::StructuralEq"],["std::io::ErrorKind","adds feature","std::marker::StructuralPartialEq"],["std::io::ErrorKind","adds feature","std::marker::Send"],["std::io::ErrorKind","adds feature","std::marker::Sync"],["std::io::ErrorKind","adds feature","std::marker::Unpin"],["std::io::ErrorKind","adds feature","std::panic::UnwindSafe"],["std::io","adds struct","BorrowedBuf"],["std::io","adds struct","BorrowedCursor"],["std::io::ErrorKind","adds feature","std::borrow::Borrow"],["std::io::ErrorKind","adds feature","std::borrow::BorrowMut"],["std::io::ErrorKind","adds feature","std::convert::Into"],["std::io::ErrorKind","adds feature","std::borrow::ToOwned"],["std::io::ErrorKind","adds feature","std::string::ToString"],["std::io::ErrorKind","adds feature","std::convert::TryInto"],["std::io::ErrorKind","adds feature","std::panic::RefUnwindSafe"],["ErrorKind","adds variant","UnexpectedEof"],["ErrorKind","adds variant","Other"],["ErrorKind","adds feature","Any"],["ErrorKind","adds feature","Borrow<T>"],["ErrorKind","adds feature","BorrowMut<T>"],["ErrorKind","adds feature","From<T>"],["ErrorKind","adds feature","Into<U>"],["ErrorKind","adds feature","ToOwned"],["ErrorKind","adds feature","ToString"],["ErrorKind","adds feature","TryFrom<U>"],["ErrorKind","adds feature","TryInto<U>"]],"model":"deepseek-r1-250120"}