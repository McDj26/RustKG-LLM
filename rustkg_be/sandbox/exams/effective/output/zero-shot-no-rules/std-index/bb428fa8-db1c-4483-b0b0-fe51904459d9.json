{"create_time":"2025-04-05T07:02:36.544Z","id":"bb428fa8-db1c-4483-b0b0-fe51904459d9","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.10-x86_64-pc-windows-msvc/share/doc/rust/html/std/index.html","relations":["defines","has_description","is_macro_of","is_module_of","stable_since_version"],"add_triples":[{"triples":[["std","stable_since_version","1.0.0"],["std","has_description","The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem."],["array","has_description","A fixed-size array, denoted [T; N], for the element type, T, and the non-negative compile time constant size, N."],["bool","has_description","The boolean type."],["char","has_description","A character type."],["f32","has_description","The 32-bit floating point type."],["f64","has_description","The 64-bit floating point type."],["i16","has_description","The 16-bit signed integer type."],["i32","has_description","The 32-bit signed integer type."],["i64","has_description","The 64-bit signed integer type."],["i8","has_description","The 8-bit signed integer type."],["isize","has_description","The pointer-sized signed integer type."],["pointer","has_description","Raw, unsafe pointers, *const T, and *mut T."],["slice","has_description","A dynamically-sized view into a contiguous sequence, [T]."],["str","has_description","String slices."],["tuple","has_description","A finite heterogeneous sequence, (T, U, ..)."],["u16","has_description","The 16-bit unsigned integer type."],["u32","has_description","The 32-bit unsigned integer type."],["u64","has_description","The 64-bit unsigned integer type."],["u8","has_description","The 8-bit unsigned integer type."],["usize","has_description","The pointer-sized unsigned integer type."],["std::any","has_description","This module implements the Any trait, which enables dynamic typing of any 'static type through runtime reflection."],["std::ascii","has_description","Operations on ASCII strings and characters."],["std::borrow","has_description","A module for working with borrowed data."],["std::boxed","has_description","A pointer type for heap allocation."],["std::cell","has_description","Shareable mutable containers."],["std::char","has_description","A character type."],["std::clone","has_description","The Clone trait for types that cannot be 'implicitly copied'."],["std::cmp","has_description","Functionality for ordering and comparison."],["std::collections","has_description","Collection types."],["std::convert","has_description","Traits for conversions between types."],["std::default","has_description","The Default trait for types which may have meaningful default values."],["std::env","has_description","Inspection and manipulation of the process's environment."],["std::error","has_description","Traits for working with Errors."],["std::f32","has_description","The 32-bit floating point type."],["std::f64","has_description","The 64-bit floating point type."],["std::ffi","has_description","Utilities related to FFI bindings."],["std::fmt","has_description","Utilities for formatting and printing strings"],["std::fs","has_description","Filesystem manipulation operations."],["std::hash","has_description","Generic hashing support."],["std::i16","has_description","The 16-bit signed integer type."],["std::i32","has_description","The 32-bit signed integer type."],["std::i64","has_description","The 64-bit signed integer type."],["std::i8","has_description","The 8-bit signed integer type."],["std::io","has_description","Traits, helpers, and type definitions for core I/O functionality."],["std::isize","has_description","The pointer-sized signed integer type."],["std::iter","has_description","Composable external iteration."],["std::marker","has_description","Primitive traits and marker types representing basic 'kinds' of types."],["std::mem","has_description","Basic functions for dealing with memory."],["std::net","has_description","Networking primitives for TCP/UDP communication."],["std::num","has_description","Additional functionality for numerics."],["std::ops","has_description","Overloadable operators."],["std::option","has_description","Optional values."],["std::os","has_description","OS-specific functionality."],["std::panic","has_description","Panic support in the standard library"],["std::path","has_description","Cross-platform path manipulation."],["std::prelude","has_description","The Rust Prelude."],["std::process","has_description","Working with processes."],["std::ptr","has_description","Raw, unsafe pointers, *const T, and *mut T."],["std::rc","has_description","Thread-local reference-counted boxes (the Rc<T> type)."],["std::result","has_description","Error handling with the Result type."],["std::slice","has_description","A dynamically-sized view into a contiguous sequence, [T]."],["std::str","has_description","Unicode string slices."],["std::string","has_description","A UTF-8 encoded, growable string."],["std::sync","has_description","Useful synchronization primitives."],["std::thread","has_description","Native threads."],["std::time","has_description","Temporal quantification."],["std::u16","has_description","The 16-bit unsigned integer type."],["std::u32","has_description","The 32-bit unsigned integer type."],["std::u64","has_description","The 64-bit unsigned integer type."],["std::u8","has_description","The 8-bit unsigned integer type."],["std::usize","has_description","The pointer-sized unsigned integer type."],["std::vec","has_description","A contiguous growable array type with heap-allocated contents, written Vec<T> but pronounced 'vector.'"],["assert!","has_description","Ensure that a boolean expression is true at runtime."],["assert_eq!","has_description","Asserts that two expressions are equal to each other."],["cfg!","has_description","Boolean evaluation of configuration flags."],["column!","has_description","A macro which expands to the column number on which it was invoked."],["concat!","has_description","Concatenates literals into a static string slice."],["concat_idents!","has_description","Concatenate identifiers into one identifier."],["debug_assert!","has_description","Ensure that a boolean expression is true at runtime."],["debug_assert_eq!","has_description","Asserts that two expressions are equal to each other."],["env!","has_description","Inspect an environment variable at compile time."],["file!","has_description","A macro which expands to the file name from which it was invoked."],["format!","has_description","Use the syntax described in std::fmt to create a value of type String. See std::fmt for more information."],["format_args!","has_description","The core macro for formatted string creation & output."],["include!","has_description","Parse the current given file as an expression."],["include_bytes!","has_description","Includes a file as a reference to a byte array."],["include_str!","has_description","Includes a utf8-encoded file as a string."],["line!","has_description","A macro which expands to the line number on which it was invoked."],["module_path!","has_description","Expands to a string that represents the current module path."],["option_env!","has_description","Optionally inspect an environment variable at compile time."],["panic!","has_description","The entry point for panic of Rust threads."],["print!","has_description","Macro for printing to the standard output."],["println!","has_description","Macro for printing to the standard output, with a newline."],["stringify!","has_description","A macro which stringifies its argument."],["thread_local!","has_description","Declare a new thread local storage key of type std::thread::LocalKey."],["try!","has_description","Helper macro for unwrapping Result values while returning early with an error if the value of the expression is Err. Can only be used in functions that return Result because of the early return of Err that it provides."],["unimplemented!","has_description","A standardized placeholder for marking unfinished code. It panics with the message \"not yet implemented\" when executed."],["unreachable!","has_description","A utility macro for indicating unreachable code."],["vec!","has_description","Creates a Vec containing the arguments."],["write!","has_description","Use the format! syntax to write data into a buffer."],["writeln!","has_description","Use the format! syntax to write data into a buffer, appending a newline."],["std::collections","defines","HashMap<K, V>"],["std::vec","defines","Vec<T>"]],"startIndex":0,"endIndex":39000}],"metrics":{"escapeCount":0,"costTime":283892,"totalUsage":{"prompt_tokens":10821,"completion_tokens":8620,"cached_tokens":0,"reasoning_tokens":6365},"chunkLength":1,"chunksInfo":[{"contextLength":0,"contentLength":34691,"costTime":283892}]},"model":"deepseek-r1-250120","extraInfo":{}}