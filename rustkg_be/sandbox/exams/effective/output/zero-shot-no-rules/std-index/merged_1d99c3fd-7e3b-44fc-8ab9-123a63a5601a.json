{"create_time":"2025-04-05T09:05:02.840Z","id":"merged_1d99c3fd-7e3b-44fc-8ab9-123a63a5601a","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.80-x86_64-pc-windows-msvc/share/doc/rust/html/std/index.html","merged_triples":[{"triples":[["std","stable_since_version","1.0.0"],["std","has_description","The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem."],["array","has_description","A fixed-size array, denoted [T; N], for the element type, T, and the non-negative compile time constant size, N."],["bool","has_description","The boolean type."],["char","has_description","A character type."],["f32","has_description","The 32-bit floating point type."],["f64","has_description","The 64-bit floating point type."],["i16","has_description","The 16-bit signed integer type."],["i32","has_description","The 32-bit signed integer type."],["i64","has_description","The 64-bit signed integer type."],["i8","has_description","The 8-bit signed integer type."],["isize","has_description","The pointer-sized signed integer type."],["pointer","has_description","Raw, unsafe pointers, *const T, and *mut T."],["slice","has_description","A dynamically-sized view into a contiguous sequence, [T]."],["str","has_description","String slices."],["tuple","has_description","A finite heterogeneous sequence, (T, U, ..)."],["u16","has_description","The 16-bit unsigned integer type."],["u32","has_description","The 32-bit unsigned integer type."],["u64","has_description","The 64-bit unsigned integer type."],["u8","has_description","The 8-bit unsigned integer type."],["usize","has_description","The pointer-sized unsigned integer type."],["std::any","has_description","This module implements the Any trait, which enables dynamic typing of any 'static type through runtime reflection."],["std::ascii","has_description","Operations on ASCII strings and characters."],["std::borrow","has_description","A module for working with borrowed data."],["std::boxed","has_description","A pointer type for heap allocation."],["std::cell","has_description","Shareable mutable containers."],["std::char","has_description","A character type."],["std::clone","has_description","The Clone trait for types that cannot be 'implicitly copied'."],["std::cmp","has_description","Functionality for ordering and comparison."],["std::collections","has_description","Collection types."],["std::convert","has_description","Traits for conversions between types."],["std::default","has_description","The Default trait for types which may have meaningful default values."],["std::env","has_description","Inspection and manipulation of the process's environment."],["std::error","has_description","Traits for working with Errors."],["std::f32","has_description","The 32-bit floating point type."],["std::f64","has_description","The 64-bit floating point type."],["std::ffi","has_description","Utilities related to FFI bindings."],["std::fmt","has_description","Utilities for formatting and printing strings"],["std::fs","has_description","Filesystem manipulation operations."],["std::hash","has_description","Generic hashing support."],["std::i16","has_description","The 16-bit signed integer type."],["std::i32","has_description","The 32-bit signed integer type."],["std::i64","has_description","The 64-bit signed integer type."],["std::i8","has_description","The 8-bit signed integer type."],["std::io","has_description","Traits, helpers, and type definitions for core I/O functionality."],["std::isize","has_description","The pointer-sized signed integer type."],["std::iter","has_description","Composable external iteration."],["std::marker","has_description","Primitive traits and marker types representing basic 'kinds' of types."],["std::mem","has_description","Basic functions for dealing with memory."],["std::net","has_description","Networking primitives for TCP/UDP communication."],["std::num","has_description","Additional functionality for numerics."],["std::ops","has_description","Overloadable operators."],["std::option","has_description","Optional values."],["std::os","has_description","OS-specific functionality."],["std::panic","has_description","Panic support in the standard library"],["std::path","has_description","Cross-platform path manipulation."],["std::prelude","has_description","The Rust Prelude."],["std::process","has_description","Working with processes."],["std::ptr","has_description","Raw, unsafe pointers, *const T, and *mut T."],["std::rc","has_description","Thread-local reference-counted boxes (the Rc<T> type)."],["std::result","has_description","Error handling with the Result type."],["std::slice","has_description","A dynamically-sized view into a contiguous sequence, [T]."],["std::str","has_description","Unicode string slices."],["std::string","has_description","A UTF-8 encoded, growable string."],["std::sync","has_description","Useful synchronization primitives."],["std::thread","has_description","Native threads."],["std::time","has_description","Temporal quantification."],["std::u16","has_description","The 16-bit unsigned integer type."],["std::u32","has_description","The 32-bit unsigned integer type."],["std::u64","has_description","The 64-bit unsigned integer type."],["std::u8","has_description","The 8-bit unsigned integer type."],["std::usize","has_description","The pointer-sized unsigned integer type."],["std::vec","has_description","A contiguous growable array type with heap-allocated contents, written Vec<T> but pronounced 'vector.'"],["assert!","has_description","Ensure that a boolean expression is true at runtime."],["assert_eq!","has_description","Asserts that two expressions are equal to each other."],["cfg!","has_description","Boolean evaluation of configuration flags."],["column!","has_description","A macro which expands to the column number on which it was invoked."],["concat!","has_description","Concatenates literals into a static string slice."],["concat_idents!","has_description","Concatenate identifiers into one identifier."],["debug_assert!","has_description","Ensure that a boolean expression is true at runtime."],["debug_assert_eq!","has_description","Asserts that two expressions are equal to each other."],["env!","has_description","Inspect an environment variable at compile time."],["file!","has_description","A macro which expands to the file name from which it was invoked."],["format!","has_description","Use the syntax described in std::fmt to create a value of type String. See std::fmt for more information."],["format_args!","has_description","The core macro for formatted string creation & output."],["include!","has_description","Parse the current given file as an expression."],["include_bytes!","has_description","Includes a file as a reference to a byte array."],["include_str!","has_description","Includes a utf8-encoded file as a string."],["line!","has_description","A macro which expands to the line number on which it was invoked."],["module_path!","has_description","Expands to a string that represents the current module path."],["option_env!","has_description","Optionally inspect an environment variable at compile time."],["panic!","has_description","The entry point for panic of Rust threads."],["print!","has_description","Macro for printing to the standard output."],["println!","has_description","Macro for printing to the standard output, with a newline."],["stringify!","has_description","A macro which stringifies its argument."],["thread_local!","has_description","Declare a new thread local storage key of type std::thread::LocalKey."],["try!","has_description","Helper macro for unwrapping Result values while returning early with an error if the value of the expression is Err. Can only be used in functions that return Result because of the early return of Err that it provides."],["unimplemented!","has_description","A standardized placeholder for marking unfinished code. It panics with the message \"not yet implemented\" when executed."],["unreachable!","has_description","A utility macro for indicating unreachable code."],["vec!","has_description","Creates a Vec containing the arguments."],["write!","has_description","Use the format! syntax to write data into a buffer."],["writeln!","has_description","Use the format! syntax to write data into a buffer, appending a newline."],["std::collections","defines","HashMap<K, V>"],["std::vec","defines","Vec<T>"],["std","属于","Rust Standard Library"],["Rust Standard Library","是基础","portable Rust software"],["std","包含模块","alloc"],["std","包含模块","collections"],["std","包含模块","core"],["std","包含模块","libc"],["std","包含模块","rustc_unicode"],["std","提供","Vec<T>"],["std","提供","Option<T>"],["array","是原始类型","Rust"],["bool","是原始类型","Rust"],["char","是原始类型","Rust"],["f32","是原始类型","Rust"],["f64","是原始类型","Rust"],["i16","是原始类型","Rust"],["i32","是原始类型","Rust"],["i64","是原始类型","Rust"],["i8","是原始类型","Rust"],["isize","是原始类型","Rust"],["pointer","是原始类型","Rust"],["slice","是原始类型","Rust"],["str","是原始类型","Rust"],["tuple","是原始类型","Rust"],["u16","是原始类型","Rust"],["u32","是原始类型","Rust"],["u64","是原始类型","Rust"],["u8","是原始类型","Rust"],["usize","是原始类型","Rust"],["assert!","是宏","标准库"],["format!","是宏","标准库"],["vec!","是宏","标准库"],["collections模块","定义","HashMap<K, V>"],["sync模块","包含","Mutex"],["io模块","提供","I/O功能"],["vec模块","定义","Vec<T>"],["any模块","实现","Any trait"],["collections模块","定义","集合类型"],["thread模块","提供","多线程支持"],["alloc","属于","Rust Standard Library"],["collections","属于","Rust Standard Library"],["core","属于","Rust Standard Library"],["libc","属于","Rust Standard Library"],["rustc_unicode","属于","Rust Standard Library"],["std","包含模块","any"],["any","描述","This module implements the Any trait, which enables dynamic typing of any 'static type through runtime reflection."],["std","包含模块","ascii"],["ascii","描述","Operations on ASCII strings and characters."],["std","包含模块","borrow"],["borrow","描述","A module for working with borrowed data."],["std","包含模块","boxed"],["boxed","描述","A pointer type for heap allocation."],["std","包含原始类型","array"],["array","描述","A fixed-size array, denoted [T; N], for the element type, T, and the non-negative compile time constant size, N."],["std","包含原始类型","bool"],["bool","描述","The boolean type."],["std","包含原始类型","char"],["char","描述","A character type."],["std","包含宏","assert!"],["assert!","描述","Ensure that a boolean expression is true at runtime."],["std","包含宏","format!"],["format!","描述","Use the syntax described in std::fmt to create a value of type String. See std::fmt for more information."],["Vec<T>","属于模块","vec"],["Option<T>","属于模块","option"],["Result<T, E>","属于模块","result"],["Iterator","定义于","iter"],["std","包含模块","proc_macro"],["std","包含模块","std_unicode"],["i128","是原始类型","Rust"],["u128","是原始类型","Rust"],["eprint!","是宏","标准库"],["eprintln!","是宏","标准库"],["std::rc","has_description","Single-threaded reference-counting pointers."],["concat_idents!","是宏","标准库"],["try!","has_description","Helper macro for reducing boilerplate for matching Result together with converting downstream errors."],["println!","has_description","Macro for printing to the standard output, with a newline. On all platforms, the newline is the LINE FEED character (\\n/U+000A) alone (no additional CARRIAGE RETURN (\\r/U+000D))."],["write!","has_description","Write formatted data into a buffer."],["writeln!","has_description","Write formatted data into a buffer, with a newline appended."],["select!","是宏","标准库"],["select!","has_description","A macro to select an event from a number of receivers."],["proc_macro","属于","Rust Standard Library"],["std_unicode","属于","Rust Standard Library"],["assert_ne!","是宏","标准库"],["debug_assert_ne!","是宏","标准库"],["std::rc","has_description","Single-threaded reference-counting pointers. Rc stands for 'Reference Counted'"],["std::f32","has_description","This module provides constants which are specific to the implementation of the f32 floating point data type. Mathematically significant numbers are provided in the consts sub-module."],["std::f64","has_description","This module provides constants which are specific to the implementation of the f64 floating point data type. Mathematically significant numbers are provided in the consts sub-module."],["std::marker","has_description","Primitive traits and types representing basic properties of types."],["assert_ne!","has_description","Asserts that two expressions are not equal to each other (using PartialEq)."],["eprint!","has_description","Macro for printing to the standard error."],["eprintln!","has_description","Macro for printing to the standard error, with a newline."],["include!","has_description","Parse a file as an expression or an item according to the context."],["println!","has_description","Macro for printing to the standard output, with a newline. On all platforms, the newline is the LINE FEED character (\\n) alone (no additional CARRIAGE RETURN (\\r))."],["std::rc","has_description","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["std","stable_since_version","1.40.0"],["slice","has_description","A dynamically-sized view into a contiguous sequence, [T]. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors."],["std::future","has_description","Asynchronous values."],["std::pin","has_description","Types that pin data to its location in memory."],["std::task","has_description","Types and Traits for working with asynchronous tasks."],["std","包含模块","future"],["std","包含模块","pin"],["std","包含模块","task"],["std::ptr","has_description","Manually manage memory through raw pointers."],["future","has_description","Asynchronous values."],["task","has_description","Types and Traits for working with asynchronous tasks."],["pin","has_description","Types that pin data to its location in memory."],["std::array","has_description","Implementations of things like Eq for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["debug_assert_ne!","has_description","Asserts that two expressions are not equal to each other (using PartialEq)."],["std","stable_since_version","1.50.0"],["f32","has_description","A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008)."],["f64","has_description","A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008)."],["format_args_nl!","是宏","标准库"],["std","包含模块","backtrace"],["std","包含模块","intrinsics"],["std","包含模块","lazy"],["std","包含模块","raw"],["global_asm!","是宏","标准库"],["is_aarch64_feature_detected!","是宏","标准库"],["is_arm_feature_detected!","是宏","标准库"],["std","包含模块","arch"],["std::arch","has_description","SIMD and vendor intrinsics module."],["concat_bytes!","是宏","标准库"],["const_format_args!","是宏","标准库"],["std::hint","has_description","Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime."],["concat_idents!","has_description","Concatenates literals into a static string slice."],["std::f32","has_description","Constants specific to the f32 single-precision floating point type."],["std::f64","has_description","Constants specific to the f64 double-precision floating point type."],["i8","has_description","Constants for the 8-bit signed integer type."],["i16","has_description","Constants for the 16-bit signed integer type."],["i32","has_description","Constants for the 32-bit signed integer type."],["i64","has_description","Constants for the 64-bit signed integer type."],["i128","has_description","Constants for the 128-bit signed integer type."],["u8","has_description","Constants for the 8-bit unsigned integer type."],["u16","has_description","Constants for the 16-bit unsigned integer type."],["u32","has_description","Constants for the 32-bit unsigned integer type."],["u64","has_description","Constants for the 64-bit unsigned integer type."],["u128","has_description","Constants for the 128-bit unsigned integer type."],["isize","has_description","Constants for the pointer-sized signed integer type."],["usize","has_description","Constants for the pointer-sized unsigned integer type."],["concat_bytes","是宏","标准库"],["concat_bytes","has_description","Concatenates literals into a byte slice."],["concat_idents","是宏","标准库"],["concat_idents","has_description","Concatenates identifiers into one identifier."],["std","has_version","1.70.0"],["std","contains_module","intrinsics"],["intrinsics","has_description","Compiler intrinsics."],["std","contains_module","simd"],["simd","has_description","Portable SIMD module"],["std","contains_module","alloc"],["alloc","has_description","Memory allocation APIs."],["std","version","1.70.0"],["std","commit_hash","90c541806"],["std","release_date","2023-05-31"],["std","has_module","intrinsics"],["std","has_module","simd"],["std","has_module","alloc"],["std","has_module","any"],["std","has_module","arch"],["std","has_module","array"],["std","has_module","ascii"],["std","has_module","backtrace"],["std","版本","1.70.0"],["simd","类型","模块"],["simd","描述","Portable SIMD module"],["any","类型","模块"],["any","描述","Utilities for dynamic typing or type reflection"]],"startIndex":0,"endIndex":39000},{"triples":[["test","属于","Rust Standard Library"],["test","has_description","Support code for rustc's built in unit-test and micro-benchmarking framework."],["arch","包含模块","std"],["arch","has_description","SIMD and vendor intrinsics module."],["hint","包含模块","std"],["hint","has_description","Hints to compiler that affects how code should be emitted or optimized."],["fn","是原始类型","Rust"],["i128","是原始类型","Rust"],["u128","是原始类型","Rust"],["unit","是原始类型","Rust"],["never","是原始类型","Rust"],["eprint!","是宏","标准库"],["eprintln!","是宏","标准库"],["is_x86_feature_detected!","是宏","标准库"],["std::rc","has_description","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["std","包含模块","arch"],["reference","是原始类型","Rust"],["select!","是宏","标准库"],["select!","has_description","A macro to select an event from a number of receivers."],["future","包含模块","std"],["intrinsics","包含模块","std"],["pin","包含模块","std"],["task","包含模块","std"],["await!","是宏","标准库"],["dbg!","是宏","标准库"],["dbg!","has_description","Prints and returns the value of a given expression for quick and dirty debugging."],["todo!","是宏","标准库"],["log_syntax!","是宏","标准库"],["log_syntax!","has_description","Prints passed tokens into the standard output."],["std","包含模块","backtrace"],["std","包含模块","intrinsics"],["std::backtrace","has_description","Support for capturing a stack backtrace of an OS thread."],["std::intrinsics","has_description","Compiler intrinsics."],["asm!","是宏","标准库"],["asm!","has_description","Inline assembly."],["global_asm!","是宏","标准库"],["global_asm!","has_description","Module-level inline assembly."],["trait","has_description","A common interface for a class of types."],["true","has_description","A value of type bool representing logical true."],["type","has_description","Define an alias for an existing type."],["union","has_description","The Rust equivalent of a C-style union."],["unsafe","has_description","Code or interfaces whose memory safety cannot be verified by the type system."],["use","has_description","Import or rename items from other crates or modules."],["where","has_description","Add constraints that must be upheld to use an item."],["while","has_description","Loop while a condition is upheld."],["backtrace","has_description","Support for capturing stack backtraces of an OS thread."],["intrinsics","has_description","Compiler intrinsics."],["todo!","has_description","Indicates unfinished code."],["assert!","has_description","Asserts that a boolean expression is true at runtime."],["super","has_description","The parent of the current module."],["bool","是原始类型","Rust"],["cfg!","has_description","Evaluates boolean combinations of configuration flags at compile-time."],["column!","has_description","Expands to the column number at which it was invoked."],["eprint!","has_description","Prints to the standard error."],["assert!","是宏","标准库"],["assert_eq!","是宏","标准库"],["assert_eq!","has_description","Asserts that two expressions are equal to each other."],["assert_ne!","是宏","标准库"],["assert_ne!","has_description","Asserts that two expressions are not equal to each other (using PartialEq)."],["debug_assert!","是宏","标准库"],["debug_assert!","has_description","Asserts that a boolean expression is true at runtime in debug builds."],["assert!","has_description","Asserts that a boolean expression is true at runtime"],["assert_eq!","has_description","Asserts that two expressions are equal to each other"],["assert_ne!","has_description","Asserts that two expressions are not equal to each other"],["debug_assert!","has_description","Asserts that a boolean expression is true at runtime"],["debug_assert_eq!","是宏","标准库"],["debug_assert_eq!","has_description","Asserts that two expressions are equal to each other"],["debug_assert_ne!","是宏","标准库"],["debug_assert_ne!","has_description","Asserts that two expressions are not equal to each other"],["trace_macros!","是宏","标准库"],["trace_macros!","has_description","Enables or disables tracing functionality used for debugging macros"],["trace_macros!","has_description","Enables or disables tracing functionality used for debugging other macros."],["mut","has_description","A mutable variable, reference, or pointer."],["pub","has_description","Make an item visible to others."],["ref","has_description","Bind by reference during pattern matching."],["return","has_description","Return a value from a function."],["self","has_description","The receiver of a method, or the current module."],["static","has_description","A static item is a value which is valid for the entire duration of your program (a 'static' lifetime)."],["struct","has_description","A type that is composed of other types."],["trait","has_description","A common interface for a group of types."],["format_args!","是宏","标准库"],["format_args_nl!","是宏","标准库"],["SelfTy","has_description","The implementing type within a trait or impl block, or the current type within a type definition."],["const","has_description","Compile-time constants, compile-time evaluable functions, and raw pointers."],["format_args_nl!","has_description","Same as format_args, but adds a newline in the end."],["assert!","has_description","Asserts that a boolean expression is <code>true</code> at runtime."],["static","has_description","A static item is a value which is valid for the entire duration of your program (a 'static lifetime)."],["std::future","has_description","Asynchronous basic functionality."],["slice","has_description","Utilities for the slice primitive type."],["std::char","has_description","Utilities for the char primitive type."],["std::cmp","has_description","Utilities for comparing and ordering values."],["std::str","has_description","Utilities for the str primitive type."],["i8","has_description","Redundant constants module for the i8 primitive type."],["i16","has_description","Redundant constants module for the i16 primitive type."],["i32","has_description","Redundant constants module for the i32 primitive type."],["i64","has_description","Redundant constants module for the i64 primitive type."],["i128","has_description","Redundant constants module for the i128 primitive type."],["isize","has_description","Redundant constants module for the isize primitive type."],["u8","has_description","Redundant constants module for the u8 primitive type."],["u16","has_description","Redundant constants module for the u16 primitive type."],["u32","has_description","Redundant constants module for the u32 primitive type."],["u64","has_description","Redundant constants module for the u64 primitive type."],["u128","has_description","Redundant constants module for the u128 primitive type."],["usize","has_description","Redundant constants module for the usize primitive type."],["cfg!","是宏","标准库"],["column!","是宏","标准库"],["compile_error!","是宏","标准库"],["compile_error!","has_description","Causes compilation to fail with the given error message when encountered."],["concat!","是宏","标准库"],["concat!","has_description","Concatenates literals into a static string slice."],["debug_assert!","has_description","Asserts that a boolean expression is <code>true</code> at runtime."],["debug_assert_eq!","has_description","Asserts that two expressions are equal to each other."],["debug_assert_ne!","has_description","Asserts that two expressions are not equal to each other."],["env!","是宏","标准库"],["env!","has_description","Inspects an environment variable at compile time."],["eprintln!","has_description","Prints to the standard error, with a newline."],["file!","是宏","标准库"],["file!","has_description","Expands to the file name in which it was invoked."],["format!","是宏","标准库"],["format!","has_description","Creates a <code>String</code> using interpolation of runtime expressions."],["format_args!","has_description","Constructs parameters for the other string-formatting macros."],["include!","是宏","标准库"],["include!","has_description","Parses a file as an expression or an item according to the context."],["include_bytes!","是宏","标准库"],["include_bytes!","has_description","Includes a file as a reference to a byte array."],["include_str!","是宏","标准库"],["include_str!","has_description","Includes a UTF-8 encoded file as a string."],["is_x86_feature_detected!","has_description","A macro to test at <em>runtime</em> whether a CPU feature is available on x86/x86-64 platforms."],["line!","是宏","标准库"],["line!","has_description","Expands to the line number on which it was invoked."],["matches!","是宏","标准库"],["matches!","has_description","Returns whether the given expression matches any of the given patterns."],["module_path!","是宏","标准库"],["module_path!","has_description","Expands to a string that represents the current module path."],["option_env!","是宏","标准库"],["option_env!","has_description","Optionally inspects an environment variable at compile time."],["panic!","是宏","标准库"],["panic!","has_description","Panics the current thread."],["print!","是宏","标准库"],["print!","has_description","Prints to the standard output."],["println!","是宏","标准库"],["println!","has_description","Prints to the standard output, with a newline."],["stringify!","是宏","标准库"],["stringify!","has_description","Stringifies its arguments."],["thread_local!","是宏","标准库"],["thread_local!","has_description","Declare a new thread local storage key of type <code>std::thread::LocalKey</code>."],["try!","是宏","标准库"],["try!","has_description","Unwraps a result or propagates its error."],["unimplemented!","是宏","标准库"],["unimplemented!","has_description","Indicates unimplemented code by panicking with a message of “not implemented”."],["unreachable!","是宏","标准库"],["unreachable!","has_description","Indicates unreachable code."],["vec!","是宏","标准库"],["vec!","has_description","Creates a <code>Vec</code> containing the arguments."],["write!","是宏","标准库"],["write!","has_description","Writes formatted data into a buffer."],["writeln!","是宏","标准库"],["writeln!","has_description","Write formatted data into a buffer, with a newline appended."],["as","has_description","Cast between types, or rename an import."],["async","has_description","Return a Future instead of blocking the current thread."],["await","has_description","Suspend execution until the result of a Future is ready."],["break","has_description","Exit early from a loop."],["continue","has_description","Skip to the next iteration of a loop."],["crate","has_description","A Rust binary or library."],["dyn","has_description","dyn is a prefix of a trait object’s type."],["else","has_description","What expression to evaluate when an if condition evaluates to false."],["enum","has_description","A type that can be any one of several variants."],["extern","has_description","Link to or import external code."],["false","has_description","A value of type bool representing logical false."],["fn","has_description","A function or function pointer."],["for","has_description","Iteration with in, trait implementation with impl, or higher-ranked trait bounds."],["if","has_description","Evaluate a block if a condition holds."],["impl","has_description","Implement some functionality for a type."],["in","has_description","Iterate over a series of values with for."],["let","has_description","Bind a value to a variable."],["loop","has_description","Loop indefinitely."],["match","has_description","Control flow based on pattern matching."],["mod","has_description","Organize code into modules."],["move","has_description","Capture a closure’s environment by value."],["std::cmp","has_description","Utilities for comparing and ordering values"],["std::error","has_description","Interfaces for working with Errors."],["std::slice","has_description","Utilities for the slice primitive type."],["async","has_description","Return a <code>Future</code> instead of blocking the current thread."],["await","has_description","Suspend execution until the result of a <code>Future</code> is ready."],["dyn","has_description","<code>dyn</code> is a prefix of a trait object’s type."],["else","has_description","What expression to evaluate when an <code>if</code> condition evaluates to <code>false</code>."],["false","has_description","A value of type <code>bool</code> representing logical <strong>false</strong>."],["for","has_description","Iteration with <code>in</code>, trait implementation with <code>impl</code>, or higher-ranked trait bounds (<code>for&lt;'a&gt;</code>)."],["in","has_description","Iterate over a series of values with <code>for</code>."],["static","has_description","A static item is a value which is valid for the entire duration of your program (a <code>'static</code> lifetime)."],["true","has_description","A value of type <code>bool</code> representing logical <strong>true</strong>."],["format!","has_description","Creates a String using interpolation of runtime expressions."],["is_x86_feature_detected!","has_description","A macro to test at runtime whether a CPU feature is available on x86/x86-64 platforms."],["thread_local!","has_description","Declare a new thread local storage key of type std::thread::LocalKey."],["vec!","has_description","Creates a Vec containing the arguments."],["as","类型","关键字"],["async","类型","关键字"],["await","类型","关键字"],["break","类型","关键字"],["const","类型","关键字"],["continue","类型","关键字"],["crate","类型","关键字"],["dyn","类型","关键字"],["else","类型","关键字"],["enum","类型","关键字"],["extern","类型","关键字"],["false","类型","关键字"],["fn","类型","关键字"],["for","类型","关键字"],["for","has_description","Iteration with in, trait implementation with impl, or higher-ranked trait bounds (for<'a>)."],["if","类型","关键字"],["impl","类型","关键字"],["in","类型","关键字"],["let","类型","关键字"],["loop","类型","关键字"],["match","类型","关键字"],["mod","类型","关键字"],["move","类型","关键字"],["std","version","1.80.1"],["std","commit_hash","3f5fd8dd4"],["std","release_date","2024-08-06"],["f16","has_description","A 16-bit floating point type (specifically, the 'binary16' type defined in IEEE 754-2008)."],["f128","has_description","A 128-bit floating point type (specifically, the 'binary128' type defined in IEEE 754-2008)."],["cfg_match!","是宏","标准库"],["cfg_match!","has_description","A macro for defining #[cfg] match-like statements."],["break","has_description","Exit early from a loop or labelled block."],["std","包含模块","simd"],["simd","描述","Portable SIMD module"],["f16","类型","模块"],["f16","描述","A 16-bit floating point type (specifically, the \"binary16\" type defined in IEEE 754-2008)"],["f128","类型","模块"],["f128","描述","A 128-bit floating point type (specifically, the \"binary128\" type defined in IEEE 754-2008)"],["cfg_match!","has_description","A macro for defining #[cfg] match-like statements"],["break","has_description","Exit early from a loop or labelled block"]],"startIndex":39035,"endIndex":78987}],"changes_info_triples":[["std","version updated to","1.80.1"],["std","commit_hash updated to","3f5fd8dd4"],["std","release_date updated to","2024-08-06"],["break","description updated to","Exit early from a loop or labelled block."],["std","version changed to","1.80.1"],["std","commit_hash changed to","3f5fd8dd4"],["std","release_date changed to","2024-08-06"],["std","adds macro","cfg_match!"],["std","adds module","simd"],["std","updates version to","1.80.1"],["std","adds commit_hash","3f5fd8dd4"],["std","adds release_date","2024-08-06"],["std","adds module","f16"],["std","adds module","f128"],["标准库","adds macro","cfg_match!"],["f16","adds description","A 16-bit floating point type (specifically, the \"binary16\" type defined in IEEE 754-2008)"],["f128","adds description","A 128-bit floating point type (specifically, the \"binary128\" type defined in IEEE 754-2008)"],["cfg_match!","adds description","A macro for defining #[cfg] match-like statements"],["break","updates description","Exit early from a loop or labelled block"],["matches!","removes description","Returns whether the given expression matches any of the given patterns"]],"model":"deepseek-r1-250120"}