{"create_time":"2025-04-05T07:34:53.702Z","id":"bfe2f0bf-beed-4526-b200-f89126605812","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.80-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\zero-shot-no-rules\\std_sync-index\\merged_6fef1cc5-7c13-4228-9792-e24a8c545fd0.json","relations":["Experimental","包含结构体","描述","状态"],"delete_triples":[{"triples":[],"startIndex":18821,"endIndex":52782}],"add_triples":[{"triples":[["std::sync","包含结构体","Exclusive"],["std::sync::Exclusive","描述","Exclusive provides only mutable access, also referred to as exclusive access to the underlying value. It provides no immutable, or shared access to the underlying value."],["std::sync::Exclusive","状态","Experimental"],["std::sync","包含结构体","LazyLock"],["std::sync::LazyLock","描述","A value which is initialized on the first access."],["std::sync::LazyLock","状态","Experimental"],["std::sync","包含结构体","OnceLock"],["std::sync::OnceLock","描述","A synchronization primitive which can be written to only once."],["std::sync","包含结构体","MappedMutexGuard"],["std::sync::MappedMutexGuard","描述","An RAII mutex guard returned by MutexGuard::map, which can point to a subfield of the protected data. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync::MappedMutexGuard","状态","Experimental"],["std::sync","包含结构体","MappedRwLockReadGuard"],["std::sync::MappedRwLockReadGuard","描述","RAII structure used to release the shared read access of a lock when dropped, which can point to a subfield of the protected data."],["std::sync::MappedRwLockReadGuard","状态","Experimental"],["std::sync","包含结构体","MappedRwLockWriteGuard"],["std::sync::MappedRwLockWriteGuard","描述","RAII structure used to release the exclusive write access of a lock when dropped, which can point to a subfield of the protected data."],["std::sync::MappedRwLockWriteGuard","状态","Experimental"],["std::sync","包含结构体","ReentrantLock"],["std::sync::ReentrantLock","描述","A re-entrant mutual exclusion lock"],["std::sync::ReentrantLock","状态","Experimental"],["std::sync","包含结构体","ReentrantLockGuard"],["std::sync::ReentrantLockGuard","描述","An RAII implementation of a scoped lock of a re-entrant lock. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync::ReentrantLockGuard","状态","Experimental"]],"startIndex":18821,"endIndex":52782}],"metrics":{"escapeCount":0,"costTime":78879,"totalUsage":{"prompt_tokens":15056,"completion_tokens":2070,"cached_tokens":0,"reasoning_tokens":1442},"chunkLength":1,"chunksInfo":[{"chunkIndex":0,"strLength":33961,"costTime":78879}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["std::sync","adds feature","Exclusive"],["std::sync","adds feature","LazyLock"],["std::sync","adds feature","OnceLock"],["std::sync","adds feature","MappedMutexGuard"],["std::sync","adds feature","MappedRwLockReadGuard"],["std::sync","adds feature","MappedRwLockWriteGuard"],["std::sync","adds feature","ReentrantLock"],["std::sync","adds feature","ReentrantLockGuard"]]}