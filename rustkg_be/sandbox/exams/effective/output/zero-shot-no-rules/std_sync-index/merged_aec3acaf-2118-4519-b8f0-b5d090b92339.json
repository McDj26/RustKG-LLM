{"create_time":"2025-04-05T09:05:03.364Z","id":"merged_aec3acaf-2118-4519-b8f0-b5d090b92339","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.50-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","merged_triples":[{"triples":[["std::sync","包含子模块","atomic"],["atomic","描述","Atomic types"],["std::sync","包含子模块","mpsc"],["mpsc","描述","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync","包含结构体","Arc"],["Arc","描述","An atomically reference counted wrapper for shared state."],["std::sync","包含结构体","Barrier"],["Barrier","描述","A barrier enables multiple threads to synchronize the beginning of some computation."],["std::sync","包含结构体","BarrierWaitResult"],["BarrierWaitResult","描述","A result returned from wait."],["std::sync","包含结构体","Condvar"],["Condvar","描述","A Condition Variable"],["std::sync","包含结构体","Mutex"],["Mutex","描述","A mutual exclusion primitive useful for protecting shared data"],["std::sync","包含结构体","MutexGuard"],["MutexGuard","描述","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync","包含结构体","Once"],["Once","描述","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the `ONCE_INIT` value."],["std::sync","包含结构体","PoisonError"],["PoisonError","描述","A type of error which can be returned whenever a lock is acquired."],["std::sync","包含结构体","RwLock"],["RwLock","描述","A reader-writer lock"],["std::sync","包含结构体","RwLockReadGuard"],["RwLockReadGuard","描述","RAII structure used to release the shared read access of a lock when dropped."],["std::sync","包含结构体","RwLockWriteGuard"],["RwLockWriteGuard","描述","RAII structure used to release the exclusive write access of a lock when dropped."],["std::sync","包含结构体","WaitTimeoutResult"],["WaitTimeoutResult","描述","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["std::sync","包含结构体","Weak"],["Weak","描述","A weak pointer to an `Arc`."],["std::sync","包含结构体","OnceState"],["OnceState","描述","State yielded to the `call_once_force` method which can be used to query whether the `Once` was previously poisoned or not."],["OnceState","状态","Unstable"],["std::sync","包含结构体","StaticCondvar"],["StaticCondvar","描述","Statically allocated condition variables."],["StaticCondvar","状态","Deprecated"],["StaticCondvar","状态","Unstable"],["std::sync","包含结构体","StaticMutex"],["StaticMutex","描述","The static mutex type is provided to allow for static allocation of mutexes."],["StaticMutex","状态","Deprecated"],["StaticMutex","状态","Unstable"],["std::sync","包含结构体","StaticRwLock"],["StaticRwLock","描述","Structure representing a statically allocated RwLock."],["StaticRwLock","状态","Deprecated"],["StaticRwLock","状态","Unstable"],["std::sync","包含枚举","TryLockError"],["TryLockError","描述","An enumeration of possible errors which can occur while calling the `try_lock` method."],["std::sync","包含常量","ONCE_INIT"],["ONCE_INIT","描述","Initialization value for static `Once` values."],["std::sync","包含常量","CONDVAR_INIT"],["CONDVAR_INIT","描述","Constant initializer for a statically allocated condition variable."],["CONDVAR_INIT","状态","Deprecated"],["CONDVAR_INIT","状态","Unstable"],["std::sync","包含常量","MUTEX_INIT"],["MUTEX_INIT","描述","Static initialization of a mutex. This constant can be used to initialize other mutex constants."],["MUTEX_INIT","状态","Deprecated"],["MUTEX_INIT","状态","Unstable"],["std::sync","包含常量","RW_LOCK_INIT"],["RW_LOCK_INIT","描述","Constant initialization for a statically-initialized rwlock."],["RW_LOCK_INIT","状态","Deprecated"],["RW_LOCK_INIT","状态","Unstable"],["std::sync","包含类型定义","LockResult"],["LockResult","描述","A type alias for the result of a lock method which can be poisoned."],["std::sync","包含类型定义","TryLockResult"],["TryLockResult","描述","A type alias for the result of a nonblocking locking method."],["std::sync","has submodule","std::sync::atomic"],["std::sync","has submodule","std::sync::mpsc"],["std::sync","has struct","std::sync::Arc"],["std::sync","has struct","std::sync::Barrier"],["std::sync","has struct","std::sync::BarrierWaitResult"],["std::sync","has struct","std::sync::Condvar"],["std::sync","has struct","std::sync::Mutex"],["std::sync","has struct","std::sync::MutexGuard"],["std::sync","has struct","std::sync::Once"],["std::sync","has struct","std::sync::PoisonError"],["std::sync","has struct","std::sync::RwLock"],["std::sync","has struct","std::sync::RwLockReadGuard"],["std::sync","has struct","std::sync::RwLockWriteGuard"],["std::sync","has struct","std::sync::WaitTimeoutResult"],["std::sync","has struct","std::sync::Weak"],["std::sync","has struct","std::sync::OnceState"],["std::sync","has struct","std::sync::StaticCondvar"],["std::sync","has struct","std::sync::StaticMutex"],["std::sync","has struct","std::sync::StaticRwLock"],["std::sync","has enum","std::sync::TryLockError"],["std::sync","has constant","std::sync::ONCE_INIT"],["std::sync","has constant","std::sync::CONDVAR_INIT"],["std::sync","has constant","std::sync::MUTEX_INIT"],["std::sync","has constant","std::sync::RW_LOCK_INIT"],["std::sync","has type definition","std::sync::LockResult"],["std::sync","has type definition","std::sync::TryLockResult"],["std::sync","contains","atomic"],["std::sync","contains","mpsc"],["std::sync","has_struct","Arc"],["std::sync","has_struct","Barrier"],["std::sync","has_struct","BarrierWaitResult"],["std::sync","has_struct","Condvar"],["std::sync","has_struct","Mutex"],["std::sync","has_struct","MutexGuard"],["std::sync","has_struct","Once"],["std::sync","has_struct","PoisonError"],["std::sync","has_struct","RwLock"],["std::sync","has_struct","RwLockReadGuard"],["std::sync","has_struct","RwLockWriteGuard"],["std::sync","has_struct","WaitTimeoutResult"],["std::sync","has_struct","Weak"],["std::sync","has_enum","TryLockError"],["std::sync","has_constant","ONCE_INIT"],["std::sync","has_type_definition","LockResult"],["std::sync","has_type_definition","TryLockResult"],["std::sync","description","Useful synchronization primitives."],["f32","描述","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["f64","描述","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["marker","描述","Primitive traits and types representing basic properties of types."],["process","描述","A module for working with processes."],["rc","描述","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["vec","描述","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."],["Arc","描述","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["BarrierWaitResult","描述","A BarrierWaitResult is returned by wait when all threads in the Barrier have rendezvoused."],["std","has_macro","assert_ne"],["std","has_macro","debug_assert_ne"],["std::sync::Arc","描述","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["BarrierWaitResult","描述","A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused."],["std::marker","描述","Primitive traits and properties of types."],["std::rc","描述","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["std::process","描述","A module for working with processes."],["fmt","描述","Utilities for formatting and printing `String`s"],["std::sync::Weak","描述","A version of `Arc` that holds a non-owning reference to the managed value."],["Weak","描述","A version of Arc that holds a non-owning reference to the managed value."],["OnceState","描述","State yielded to call_once_force which can query if Once was previously poisoned."],["std","contains","hint"],["hint","描述","Hints to compiler that affects how code should be emitted or optimized."],["std","has_macro","is_aarch64_feature_detected"],["std","has_macro","is_arm_feature_detected"],["std","has_macro","is_mips64_feature_detected"],["std","has_macro","is_mips_feature_detected"],["std","has_macro","is_powerpc64_feature_detected"],["std","has_macro","is_powerpc_feature_detected"],["std","has_macro","await"],["std","contains","alloc"],["alloc","描述","Memory allocation APIs"],["std","contains","arch"],["arch","描述","SIMD and vendor intrinsics module."],["std","contains","future"],["future","描述","Asynchronous values."],["std","contains","task"],["task","描述","Types and Traits for working with asynchronous tasks."],["std","contains","pin"],["pin","描述","Types which pin data to its location in memory"],["fmt","描述","Utilities for formatting and printing `String`s."],["f32","描述","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f64","描述","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["Once","描述","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can be constructed with the `ONCE_INIT` value or the `Once::new` constructor."],["std","包含子模块","alloc"],["std","包含子模块","arch"],["std","包含子模块","future"],["std","包含子模块","hint"],["std","包含子模块","task"],["std","包含子模块","pin"],["std","包含原始类型","never"],["std","包含原始类型","unit"],["std","包含关键词","fn"],["std","包含关键词","let"],["std","包含关键词","struct"],["format","描述","Creates a `String` using interpolation of runtime expressions."],["std","包含模块","alloc"],["std","包含模块","arch"],["std","包含模块","future"],["std","包含模块","pin"],["std","包含模块","task"],["std","包含模块","hint"],["std","has_keyword","fn"],["std","has_keyword","let"],["std","has_keyword","struct"],["Once","描述","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the `ONCE_INIT` value or the equivalent `Once::new` constructor."],["OnceState","描述","State yielded to call_once_force’s closure parameter. The state can be used to query the poison status of the Once."],["std","包含子模块","array"],["array","描述","Implementations of things like Eq for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["ptr","描述","Manually manage memory through raw pointers"],["std","has_macro","asm"],["std","has_macro","global_asm"],["Weak","描述","A version of Arc that holds a non-owning reference to the managed allocation."],["array","描述","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["std","has_keyword","as"],["std","has_keyword","async"],["std","has_keyword","Self"],["slice","描述","A contiguous growable array type with heap-allocated contents, written `Vec<T>`. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors."],["ptr","描述","Manually manage memory through raw pointers."],["std::sync::Weak","描述","A version of `Arc` that holds a non-owning reference to the managed allocation."],["std","包含子模块","backtrace"],["backtrace","描述","Support for capturing a stack backtrace of an OS thread"],["std","has_keyword","await"],["std","has_keyword","type"],["slice","描述","A dynamically-sized view into a contiguous sequence, [T]. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors."],["std","has_macro","stringify"],["std","has_macro","dbg"],["std","has_macro","trace_macros"],["std::sync::Weak","描述","A version of Arc that holds a non-owning reference to the managed allocation."],["ONCE_INIT","状态","Deprecated"]],"startIndex":0,"endIndex":39000},{"triples":[["OnceState","part of","sync"],["lazy","module","std"],["primitive","module","std"],["llvm_asm","macro","std"],["f32","conforms to","IEEE 754-2008 binary32"],["f64","conforms to","IEEE 754-2008 binary64"],["std::sync","has_struct","OnceState"],["std","has_module","lazy"],["std","has_module","primitive"],["include_str","encoding","UTF-8"],["unit","alternative_name","unit"],["std","has_macro","llvm_asm"],["f32","description","A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008)"],["f64","description","A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008)"],["unit","description","also called \"unit\""],["static","description","static item is a value which is valid for the entire duration of your program (a 'static lifetime)"],["dyn","description","prefix of a trait object's type"]],"startIndex":40723,"endIndex":69139}],"changes_info_triples":[["sync","adds feature","OnceState"],["std","adds feature","lazy"],["std","adds feature","primitive"],["std","adds feature","llvm_asm"],["f32","adds feature","IEEE 754-2008 binary32"],["f64","adds feature","IEEE 754-2008 binary64"],["unit","removes alias","nil"],["std::sync","adds struct","OnceState"],["std","adds module","lazy"],["std","adds module","primitive"],["include_str","changed encoding","UTF-8"],["utf8","renamed to","UTF-8"],["unit","changed alternative_name","unit"],["nil","renamed to","unit"],["std","adds macro","llvm_asm"],["f32","adds description","A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008)"],["f64","adds description","A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008)"],["unit","adds description","also called \"unit\""],["static","adds description","static item is a value which is valid for the entire duration of your program (a 'static lifetime)"],["dyn","adds description","prefix of a trait object's type"]],"model":"deepseek-r1-250120"}