{"create_time":"2025-04-05T09:05:03.331Z","id":"merged_12763f36-eb23-4a97-a036-14c007630cfc","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.20-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","merged_triples":[{"triples":[["std::sync","包含子模块","atomic"],["atomic","描述","Atomic types"],["std::sync","包含子模块","mpsc"],["mpsc","描述","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync","包含结构体","Arc"],["Arc","描述","An atomically reference counted wrapper for shared state."],["std::sync","包含结构体","Barrier"],["Barrier","描述","A barrier enables multiple threads to synchronize the beginning of some computation."],["std::sync","包含结构体","BarrierWaitResult"],["BarrierWaitResult","描述","A result returned from wait."],["std::sync","包含结构体","Condvar"],["Condvar","描述","A Condition Variable"],["std::sync","包含结构体","Mutex"],["Mutex","描述","A mutual exclusion primitive useful for protecting shared data"],["std::sync","包含结构体","MutexGuard"],["MutexGuard","描述","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync","包含结构体","Once"],["Once","描述","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the `ONCE_INIT` value."],["std::sync","包含结构体","PoisonError"],["PoisonError","描述","A type of error which can be returned whenever a lock is acquired."],["std::sync","包含结构体","RwLock"],["RwLock","描述","A reader-writer lock"],["std::sync","包含结构体","RwLockReadGuard"],["RwLockReadGuard","描述","RAII structure used to release the shared read access of a lock when dropped."],["std::sync","包含结构体","RwLockWriteGuard"],["RwLockWriteGuard","描述","RAII structure used to release the exclusive write access of a lock when dropped."],["std::sync","包含结构体","WaitTimeoutResult"],["WaitTimeoutResult","描述","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["std::sync","包含结构体","Weak"],["Weak","描述","A weak pointer to an `Arc`."],["std::sync","包含结构体","OnceState"],["OnceState","描述","State yielded to the `call_once_force` method which can be used to query whether the `Once` was previously poisoned or not."],["OnceState","状态","Unstable"],["std::sync","包含结构体","StaticCondvar"],["StaticCondvar","描述","Statically allocated condition variables."],["StaticCondvar","状态","Deprecated"],["StaticCondvar","状态","Unstable"],["std::sync","包含结构体","StaticMutex"],["StaticMutex","描述","The static mutex type is provided to allow for static allocation of mutexes."],["StaticMutex","状态","Deprecated"],["StaticMutex","状态","Unstable"],["std::sync","包含结构体","StaticRwLock"],["StaticRwLock","描述","Structure representing a statically allocated RwLock."],["StaticRwLock","状态","Deprecated"],["StaticRwLock","状态","Unstable"],["std::sync","包含枚举","TryLockError"],["TryLockError","描述","An enumeration of possible errors which can occur while calling the `try_lock` method."],["std::sync","包含常量","ONCE_INIT"],["ONCE_INIT","描述","Initialization value for static `Once` values."],["std::sync","包含常量","CONDVAR_INIT"],["CONDVAR_INIT","描述","Constant initializer for a statically allocated condition variable."],["CONDVAR_INIT","状态","Deprecated"],["CONDVAR_INIT","状态","Unstable"],["std::sync","包含常量","MUTEX_INIT"],["MUTEX_INIT","描述","Static initialization of a mutex. This constant can be used to initialize other mutex constants."],["MUTEX_INIT","状态","Deprecated"],["MUTEX_INIT","状态","Unstable"],["std::sync","包含常量","RW_LOCK_INIT"],["RW_LOCK_INIT","描述","Constant initialization for a statically-initialized rwlock."],["RW_LOCK_INIT","状态","Deprecated"],["RW_LOCK_INIT","状态","Unstable"],["std::sync","包含类型定义","LockResult"],["LockResult","描述","A type alias for the result of a lock method which can be poisoned."],["std::sync","包含类型定义","TryLockResult"],["TryLockResult","描述","A type alias for the result of a nonblocking locking method."],["std::sync","has submodule","std::sync::atomic"],["std::sync","has submodule","std::sync::mpsc"],["std::sync","has struct","std::sync::Arc"],["std::sync","has struct","std::sync::Barrier"],["std::sync","has struct","std::sync::BarrierWaitResult"],["std::sync","has struct","std::sync::Condvar"],["std::sync","has struct","std::sync::Mutex"],["std::sync","has struct","std::sync::MutexGuard"],["std::sync","has struct","std::sync::Once"],["std::sync","has struct","std::sync::PoisonError"],["std::sync","has struct","std::sync::RwLock"],["std::sync","has struct","std::sync::RwLockReadGuard"],["std::sync","has struct","std::sync::RwLockWriteGuard"],["std::sync","has struct","std::sync::WaitTimeoutResult"],["std::sync","has struct","std::sync::Weak"],["std::sync","has struct","std::sync::OnceState"],["std::sync","has struct","std::sync::StaticCondvar"],["std::sync","has struct","std::sync::StaticMutex"],["std::sync","has struct","std::sync::StaticRwLock"],["std::sync","has enum","std::sync::TryLockError"],["std::sync","has constant","std::sync::ONCE_INIT"],["std::sync","has constant","std::sync::CONDVAR_INIT"],["std::sync","has constant","std::sync::MUTEX_INIT"],["std::sync","has constant","std::sync::RW_LOCK_INIT"],["std::sync","has type definition","std::sync::LockResult"],["std::sync","has type definition","std::sync::TryLockResult"],["std::sync","contains","atomic"],["std::sync","contains","mpsc"],["std::sync","has_struct","Arc"],["std::sync","has_struct","Barrier"],["std::sync","has_struct","BarrierWaitResult"],["std::sync","has_struct","Condvar"],["std::sync","has_struct","Mutex"],["std::sync","has_struct","MutexGuard"],["std::sync","has_struct","Once"],["std::sync","has_struct","PoisonError"],["std::sync","has_struct","RwLock"],["std::sync","has_struct","RwLockReadGuard"],["std::sync","has_struct","RwLockWriteGuard"],["std::sync","has_struct","WaitTimeoutResult"],["std::sync","has_struct","Weak"],["std::sync","has_enum","TryLockError"],["std::sync","has_constant","ONCE_INIT"],["std::sync","has_type_definition","LockResult"],["std::sync","has_type_definition","TryLockResult"],["std::sync","description","Useful synchronization primitives."],["f32","描述","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["f64","描述","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["marker","描述","Primitive traits and types representing basic properties of types."],["process","描述","A module for working with processes."],["rc","描述","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["vec","描述","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."],["Arc","描述","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["BarrierWaitResult","描述","A BarrierWaitResult is returned by wait when all threads in the Barrier have rendezvoused."],["std","has_macro","assert_ne"],["std","has_macro","debug_assert_ne"],["std::sync::Arc","描述","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["BarrierWaitResult","描述","A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused."],["std::marker","描述","Primitive traits and properties of types."],["std::rc","描述","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["std::process","描述","A module for working with processes."],["fmt","描述","Utilities for formatting and printing `String`s"],["std::sync::Weak","描述","A version of `Arc` that holds a non-owning reference to the managed value."],["Weak","描述","A version of Arc that holds a non-owning reference to the managed value."],["OnceState","描述","State yielded to call_once_force which can query if Once was previously poisoned."]],"startIndex":0,"endIndex":39000}],"changes_info_triples":[["f32","更新描述","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["f64","更新描述","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["marker","更新描述","Primitive traits and types representing basic properties of types."],["process","更新描述","A module for working with processes."],["rc","更新描述","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["vec","更新描述","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."],["Arc","更新描述","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["BarrierWaitResult","更新描述","A BarrierWaitResult is returned by wait when all threads in the Barrier have rendezvoused."],["std","添加宏","assert_ne"],["std","添加宏","debug_assert_ne"],["f32","updates description","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["f64","updates description","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["std::sync::Arc","updates description","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["BarrierWaitResult","updates description","A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused."],["std::marker","updates description","Primitive traits and properties of types."],["std::rc","updates description","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["std::process","updates description","A module for working with processes."],["fmt","updates description","Utilities for formatting and printing `String`s"],["std::sync::Weak","updates description","A version of `Arc` that holds a non-owning reference to the managed value."],["Weak","更新描述","A version of Arc that holds a non-owning reference to the managed value."],["OnceState","更新描述","State yielded to call_once_force which can query if Once was previously poisoned."],["std::sync","添加描述","Useful synchronization primitives."],["std::sync","添加结构体","std::sync::Weak"]],"model":"deepseek-r1-250120"}