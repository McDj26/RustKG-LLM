{"create_time":"2025-04-05T09:15:33.765Z","id":"0f8f6ccc-8755-4c36-ad9f-001a322789d7","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.10-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","relations":["contains","description","has attribute"],"add_triples":[{"triples":[["std","contains","any"],["std::any","description","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["std","contains","ascii"],["std::ascii","description","Operations on ASCII strings and characters."],["std","contains","borrow"],["std::borrow","description","A module for working with borrowed data."],["std","contains","boxed"],["std::boxed","description","A pointer type for heap allocation."],["std","contains","cell"],["std::cell","description","Shareable mutable containers."],["std","contains","char"],["std::char","description","A character type."],["std","contains","clone"],["std::clone","description","The `Clone` trait for types that cannot be 'implicitly copied'."],["std","contains","cmp"],["std::cmp","description","Functionality for ordering and comparison."],["std","contains","collections"],["std::collections","description","Collection types."],["std","contains","convert"],["std::convert","description","Traits for conversions between types."],["std","contains","default"],["std::default","description","The `Default` trait for types which may have meaningful default values."],["std","contains","env"],["std::env","description","Inspection and manipulation of the process's environment."],["std","contains","error"],["std::error","description","Traits for working with Errors."],["std","contains","f32"],["std::f32","description","The 32-bit floating point type."],["std","contains","f64"],["std::f64","description","The 64-bit floating point type."],["std","contains","ffi"],["std::ffi","description","Utilities related to FFI bindings."],["std","contains","fmt"],["std::fmt","description","Utilities for formatting and printing strings"],["std","contains","fs"],["std::fs","description","Filesystem manipulation operations."],["std","contains","hash"],["std::hash","description","Generic hashing support."],["std","contains","i16"],["std::i16","description","The 16-bit signed integer type."],["std","contains","i32"],["std::i32","description","The 32-bit signed integer type."],["std","contains","i64"],["std::i64","description","The 64-bit signed integer type."],["std","contains","i8"],["std::i8","description","The 8-bit signed integer type."],["std","contains","intrinsics"],["std::intrinsics","description","rustc compiler intrinsics."],["std","contains","io"],["std::io","description","Traits, helpers, and type definitions for core I/O functionality."],["std","contains","isize"],["std::isize","description","The pointer-sized signed integer type."],["std","contains","iter"],["std::iter","description","Composable external iteration."],["std","contains","marker"],["std::marker","description","Primitive traits and marker types representing basic 'kinds' of types."],["std","contains","mem"],["std::mem","description","Basic functions for dealing with memory."],["std","contains","net"],["std::net","description","Networking primitives for TCP/UDP communication."],["std","contains","num"],["std::num","description","Additional functionality for numerics."],["std","contains","ops"],["std::ops","description","Overloadable operators."],["std","contains","option"],["std::option","description","Optional values."],["std","contains","os"],["std::os","description","OS-specific functionality."],["std","contains","panic"],["std::panic","description","Panic support in the standard library"],["std","contains","path"],["std::path","description","Cross-platform path manipulation."],["std","contains","prelude"],["std::prelude","description","The Rust Prelude."],["std","contains","process"],["std::process","description","Working with processes."],["std","contains","ptr"],["std::ptr","description","Raw, unsafe pointers, `*const T`, and `*mut T`."],["std","contains","raw"],["std::raw","description","Contains struct definitions for the layout of compiler built-in types."],["std","contains","rc"],["std::rc","description","Thread-local reference-counted boxes (the `Rc<T>` type)."],["std","contains","result"],["std::result","description","Error handling with the `Result` type."],["std","contains","slice"],["std::slice","description","A dynamically-sized view into a contiguous sequence, `[T]`."],["std","contains","str"],["std::str","description","Unicode string slices."],["std","contains","string"],["std::string","description","A UTF-8 encoded, growable string."],["std","contains","sync"],["std::sync","description","Useful synchronization primitives."],["std","contains","thread"],["std::thread","description","Native threads."],["std","contains","time"],["std::time","description","Temporal quantification."],["std","contains","u16"],["std::u16","description","The 16-bit unsigned integer type."],["std","contains","u32"],["std::u32","description","The 32-bit unsigned integer type."],["std","contains","u64"],["std::u64","description","The 64-bit unsigned integer type."],["std","contains","u8"],["std::u8","description","The 8-bit unsigned integer type."],["std","contains","usize"],["std::usize","description","The pointer-sized unsigned integer type."],["std","contains","vec"],["std::vec","description","A contiguous growable array type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],["std","contains","assert!"],["std::assert!","description","Ensure that a boolean expression is `true` at runtime."],["std","contains","assert_eq!"],["std::assert_eq!","description","Asserts that two expressions are equal to each other."],["std","contains","cfg!"],["std::cfg!","description","Boolean evaluation of configuration flags."],["std","contains","column!"],["std::column!","description","A macro which expands to the column number on which it was invoked."],["std","contains","concat!"],["std::concat!","description","Concatenates literals into a static string slice."],["std","contains","concat_idents!"],["std::concat_idents!","description","Concatenate identifiers into one identifier."],["std","contains","debug_assert!"],["std::debug_assert!","description","Ensure that a boolean expression is `true` at runtime."],["std","contains","debug_assert_eq!"],["std::debug_assert_eq!","description","Asserts that two expressions are equal to each other."],["std","contains","env!"],["std::env!","description","Inspect an environment variable at compile time."],["std","contains","file!"],["std::file!","description","A macro which expands to the file name from which it was invoked."],["std","contains","format!"],["std::format!","description","Use the syntax described in `std::fmt` to create a value of type `String`. See `std::fmt` for more information."],["std","contains","format_args!"],["std::format_args!","description","The core macro for formatted string creation & output."],["std","contains","include!"],["std::include!","description","Parse the current given file as an expression."],["std","contains","include_bytes!"],["std::include_bytes!","description","Includes a file as a reference to a byte array."],["std","contains","include_str!"],["std::include_str!","description","Includes a utf8-encoded file as a string."],["std","contains","line!"],["std::line!","description","A macro which expands to the line number on which it was invoked."],["std","contains","module_path!"],["std::module_path!","description","Expands to a string that represents the current module path."],["std","contains","option_env!"],["std::option_env!","description","Optionally inspect an environment variable at compile time."],["std","contains","panic!"],["std::panic!","description","The entry point for panic of Rust threads."],["std","contains","print!"],["std::print!","description","Macro for printing to the standard output."],["std","contains","println!"],["std::println!","description","Macro for printing to the standard output, with a newline."],["std","contains","scoped_thread_local!"],["std::scoped_thread_local!","description","Declare a new scoped thread local storage key."],["std","contains","select!"],["std::select!","description","A macro to select an event from a number of receivers."],["std","contains","stringify!"],["std::stringify!","description","A macro which stringifies its argument."],["std","contains","thread_local!"],["std::thread_local!","description","Declare a new thread local storage key of type `std::thread::LocalKey`."],["std","contains","try!"],["std::try!","description","Helper macro for unwrapping `Result` values while returning early with an error if the value of the expression is `Err`. Can only be used in functions that return `Result` because of the early return of `Err` that it provides."],["std","contains","unimplemented!"],["std::unimplemented!","description","A standardized placeholder for marking unfinished code. It panics with the message `\"not yet implemented\"` when executed."],["std","contains","unreachable!"],["std::unreachable!","description","A utility macro for indicating unreachable code."],["std","contains","vec!"],["std::vec!","description","Creates a `Vec` containing the arguments."],["std","contains","write!"],["std::write!","description","Use the `format!` syntax to write data into a buffer."],["std","contains","writeln!"],["std::writeln!","description","Use the `format!` syntax to write data into a buffer, appending a newline."],["std::sync","contains","atomic"],["std::sync::atomic","description","Atomic types"],["std::sync","contains","mpsc"],["std::sync::mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync","contains","Arc"],["std::sync::Arc","description","An atomically reference counted wrapper for shared state."],["std::sync","contains","Barrier"],["std::sync::Barrier","description","A barrier enables multiple threads to synchronize the beginning of some computation."],["std::sync","contains","BarrierWaitResult"],["std::sync::BarrierWaitResult","description","A result returned from wait."],["std::sync","contains","Condvar"],["std::sync::Condvar","description","A Condition Variable"],["std::sync","contains","Mutex"],["std::sync::Mutex","description","A mutual exclusion primitive useful for protecting shared data"],["std::sync","contains","MutexGuard"],["std::sync::MutexGuard","description","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync","contains","Once"],["std::sync::Once","description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the `ONCE_INIT` value."],["std::sync","contains","PoisonError"],["std::sync::PoisonError","description","A type of error which can be returned whenever a lock is acquired."],["std::sync","contains","RwLock"],["std::sync::RwLock","description","A reader-writer lock"],["std::sync","contains","RwLockReadGuard"],["std::sync::RwLockReadGuard","description","RAII structure used to release the shared read access of a lock when dropped."],["std::sync","contains","RwLockWriteGuard"],["std::sync::RwLockWriteGuard","description","RAII structure used to release the exclusive write access of a lock when dropped."],["std::sync","contains","WaitTimeoutResult"],["std::sync::WaitTimeoutResult","description","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["std::sync","contains","Weak"],["std::sync::Weak","description","A weak pointer to an `Arc`."],["std::sync::OnceState","has attribute","Unstable"],["std::sync::StaticCondvar","has attribute","Deprecated"],["std::sync::StaticCondvar","has attribute","Unstable"],["std::sync::StaticMutex","has attribute","Deprecated"],["std::sync::StaticMutex","has attribute","Unstable"],["std::sync::StaticRwLock","has attribute","Deprecated"],["std::sync::StaticRwLock","has attribute","Unstable"],["std::sync","contains","TryLockError"],["std::sync::TryLockError","description","An enumeration of possible errors which can occur while calling the `try_lock` method."],["std::sync","contains","ONCE_INIT"],["std::sync::ONCE_INIT","description","Initialization value for static `Once` values."],["std::sync","contains","CONDVAR_INIT"],["std::sync::CONDVAR_INIT","has attribute","Deprecated"],["std::sync::CONDVAR_INIT","has attribute","Unstable"],["std::sync","contains","MUTEX_INIT"],["std::sync::MUTEX_INIT","has attribute","Deprecated"],["std::sync::MUTEX_INIT","has attribute","Unstable"],["std::sync","contains","RW_LOCK_INIT"],["std::sync::RW_LOCK_INIT","has attribute","Deprecated"],["std::sync::RW_LOCK_INIT","has attribute","Unstable"],["std::sync","contains","LockResult"],["std::sync::LockResult","description","A type alias for the result of a lock method which can be poisoned."],["std::sync","contains","TryLockResult"],["std::sync::TryLockResult","description","A type alias for the result of a nonblocking locking method."]],"startIndex":0,"endIndex":39000}],"metrics":{"escapeCount":0,"costTime":380433,"totalUsage":{"prompt_tokens":6486,"completion_tokens":10297,"cached_tokens":0,"reasoning_tokens":6381},"chunkLength":1,"chunksInfo":[{"contextLength":0,"contentLength":20539,"costTime":380433}]},"model":"deepseek-r1-250120","extraInfo":{}}