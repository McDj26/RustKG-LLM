{"create_time":"2025-04-05T12:02:16.654Z","id":"merged_0084102f-c41f-48ed-9e54-bc5981c46536","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.80-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","merged_triples":[{"triples":[["std","contains","any"],["std::any","description","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["std","contains","ascii"],["std::ascii","description","Operations on ASCII strings and characters."],["std","contains","borrow"],["std::borrow","description","A module for working with borrowed data."],["std","contains","boxed"],["std::boxed","description","A pointer type for heap allocation."],["std","contains","cell"],["std::cell","description","Shareable mutable containers."],["std","contains","char"],["std::char","description","A character type."],["std","contains","clone"],["std::clone","description","The `Clone` trait for types that cannot be 'implicitly copied'."],["std","contains","cmp"],["std::cmp","description","Functionality for ordering and comparison."],["std","contains","collections"],["std::collections","description","Collection types."],["std","contains","convert"],["std::convert","description","Traits for conversions between types."],["std","contains","default"],["std::default","description","The `Default` trait for types which may have meaningful default values."],["std","contains","env"],["std::env","description","Inspection and manipulation of the process's environment."],["std","contains","error"],["std::error","description","Traits for working with Errors."],["std","contains","f32"],["std::f32","description","The 32-bit floating point type."],["std","contains","f64"],["std::f64","description","The 64-bit floating point type."],["std","contains","ffi"],["std::ffi","description","Utilities related to FFI bindings."],["std","contains","fmt"],["std::fmt","description","Utilities for formatting and printing strings"],["std","contains","fs"],["std::fs","description","Filesystem manipulation operations."],["std","contains","hash"],["std::hash","description","Generic hashing support."],["std","contains","i16"],["std::i16","description","The 16-bit signed integer type."],["std","contains","i32"],["std::i32","description","The 32-bit signed integer type."],["std","contains","i64"],["std::i64","description","The 64-bit signed integer type."],["std","contains","i8"],["std::i8","description","The 8-bit signed integer type."],["std","contains","intrinsics"],["std::intrinsics","description","rustc compiler intrinsics."],["std","contains","io"],["std::io","description","Traits, helpers, and type definitions for core I/O functionality."],["std","contains","isize"],["std::isize","description","The pointer-sized signed integer type."],["std","contains","iter"],["std::iter","description","Composable external iteration."],["std","contains","marker"],["std::marker","description","Primitive traits and marker types representing basic 'kinds' of types."],["std","contains","mem"],["std::mem","description","Basic functions for dealing with memory."],["std","contains","net"],["std::net","description","Networking primitives for TCP/UDP communication."],["std","contains","num"],["std::num","description","Additional functionality for numerics."],["std","contains","ops"],["std::ops","description","Overloadable operators."],["std","contains","option"],["std::option","description","Optional values."],["std","contains","os"],["std::os","description","OS-specific functionality."],["std","contains","panic"],["std::panic","description","Panic support in the standard library"],["std","contains","path"],["std::path","description","Cross-platform path manipulation."],["std","contains","prelude"],["std::prelude","description","The Rust Prelude."],["std","contains","process"],["std::process","description","Working with processes."],["std","contains","ptr"],["std::ptr","description","Raw, unsafe pointers, `*const T`, and `*mut T`."],["std","contains","raw"],["std::raw","description","Contains struct definitions for the layout of compiler built-in types."],["std","contains","rc"],["std::rc","description","Thread-local reference-counted boxes (the `Rc<T>` type)."],["std","contains","result"],["std::result","description","Error handling with the `Result` type."],["std","contains","slice"],["std::slice","description","A dynamically-sized view into a contiguous sequence, `[T]`."],["std","contains","str"],["std::str","description","Unicode string slices."],["std","contains","string"],["std::string","description","A UTF-8 encoded, growable string."],["std","contains","sync"],["std::sync","description","Useful synchronization primitives."],["std","contains","thread"],["std::thread","description","Native threads."],["std","contains","time"],["std::time","description","Temporal quantification."],["std","contains","u16"],["std::u16","description","The 16-bit unsigned integer type."],["std","contains","u32"],["std::u32","description","The 32-bit unsigned integer type."],["std","contains","u64"],["std::u64","description","The 64-bit unsigned integer type."],["std","contains","u8"],["std::u8","description","The 8-bit unsigned integer type."],["std","contains","usize"],["std::usize","description","The pointer-sized unsigned integer type."],["std","contains","vec"],["std::vec","description","A contiguous growable array type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],["std","contains","assert!"],["std::assert!","description","Ensure that a boolean expression is `true` at runtime."],["std","contains","assert_eq!"],["std::assert_eq!","description","Asserts that two expressions are equal to each other."],["std","contains","cfg!"],["std::cfg!","description","Boolean evaluation of configuration flags."],["std","contains","column!"],["std::column!","description","A macro which expands to the column number on which it was invoked."],["std","contains","concat!"],["std::concat!","description","Concatenates literals into a static string slice."],["std","contains","concat_idents!"],["std::concat_idents!","description","Concatenate identifiers into one identifier."],["std","contains","debug_assert!"],["std::debug_assert!","description","Ensure that a boolean expression is `true` at runtime."],["std","contains","debug_assert_eq!"],["std::debug_assert_eq!","description","Asserts that two expressions are equal to each other."],["std","contains","env!"],["std::env!","description","Inspect an environment variable at compile time."],["std","contains","file!"],["std::file!","description","A macro which expands to the file name from which it was invoked."],["std","contains","format!"],["std::format!","description","Use the syntax described in `std::fmt` to create a value of type `String`. See `std::fmt` for more information."],["std","contains","format_args!"],["std::format_args!","description","The core macro for formatted string creation & output."],["std","contains","include!"],["std::include!","description","Parse the current given file as an expression."],["std","contains","include_bytes!"],["std::include_bytes!","description","Includes a file as a reference to a byte array."],["std","contains","include_str!"],["std::include_str!","description","Includes a utf8-encoded file as a string."],["std","contains","line!"],["std::line!","description","A macro which expands to the line number on which it was invoked."],["std","contains","module_path!"],["std::module_path!","description","Expands to a string that represents the current module path."],["std","contains","option_env!"],["std::option_env!","description","Optionally inspect an environment variable at compile time."],["std","contains","panic!"],["std::panic!","description","The entry point for panic of Rust threads."],["std","contains","print!"],["std::print!","description","Macro for printing to the standard output."],["std","contains","println!"],["std::println!","description","Macro for printing to the standard output, with a newline."],["std","contains","scoped_thread_local!"],["std::scoped_thread_local!","description","Declare a new scoped thread local storage key."],["std","contains","select!"],["std::select!","description","A macro to select an event from a number of receivers."],["std","contains","stringify!"],["std::stringify!","description","A macro which stringifies its argument."],["std","contains","thread_local!"],["std::thread_local!","description","Declare a new thread local storage key of type `std::thread::LocalKey`."],["std","contains","try!"],["std::try!","description","Helper macro for unwrapping `Result` values while returning early with an error if the value of the expression is `Err`. Can only be used in functions that return `Result` because of the early return of `Err` that it provides."],["std","contains","unimplemented!"],["std::unimplemented!","description","A standardized placeholder for marking unfinished code. It panics with the message `\"not yet implemented\"` when executed."],["std","contains","unreachable!"],["std::unreachable!","description","A utility macro for indicating unreachable code."],["std","contains","vec!"],["std::vec!","description","Creates a `Vec` containing the arguments."],["std","contains","write!"],["std::write!","description","Use the `format!` syntax to write data into a buffer."],["std","contains","writeln!"],["std::writeln!","description","Use the `format!` syntax to write data into a buffer, appending a newline."],["std::sync","contains","atomic"],["std::sync::atomic","description","Atomic types"],["std::sync","contains","mpsc"],["std::sync::mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync","contains","Arc"],["std::sync::Arc","description","An atomically reference counted wrapper for shared state."],["std::sync","contains","Barrier"],["std::sync::Barrier","description","A barrier enables multiple threads to synchronize the beginning of some computation."],["std::sync","contains","BarrierWaitResult"],["std::sync::BarrierWaitResult","description","A result returned from wait."],["std::sync","contains","Condvar"],["std::sync::Condvar","description","A Condition Variable"],["std::sync","contains","Mutex"],["std::sync::Mutex","description","A mutual exclusion primitive useful for protecting shared data"],["std::sync","contains","MutexGuard"],["std::sync::MutexGuard","description","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["std::sync","contains","Once"],["std::sync::Once","description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the `ONCE_INIT` value."],["std::sync","contains","PoisonError"],["std::sync::PoisonError","description","A type of error which can be returned whenever a lock is acquired."],["std::sync","contains","RwLock"],["std::sync::RwLock","description","A reader-writer lock"],["std::sync","contains","RwLockReadGuard"],["std::sync::RwLockReadGuard","description","RAII structure used to release the shared read access of a lock when dropped."],["std::sync","contains","RwLockWriteGuard"],["std::sync::RwLockWriteGuard","description","RAII structure used to release the exclusive write access of a lock when dropped."],["std::sync","contains","WaitTimeoutResult"],["std::sync::WaitTimeoutResult","description","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["std::sync","contains","Weak"],["std::sync::Weak","description","A weak pointer to an `Arc`."],["std::sync::OnceState","has attribute","Unstable"],["std::sync::StaticCondvar","has attribute","Deprecated"],["std::sync::StaticCondvar","has attribute","Unstable"],["std::sync::StaticMutex","has attribute","Deprecated"],["std::sync::StaticMutex","has attribute","Unstable"],["std::sync::StaticRwLock","has attribute","Deprecated"],["std::sync::StaticRwLock","has attribute","Unstable"],["std::sync","contains","TryLockError"],["std::sync::TryLockError","description","An enumeration of possible errors which can occur while calling the `try_lock` method."],["std::sync","contains","ONCE_INIT"],["std::sync::ONCE_INIT","description","Initialization value for static `Once` values."],["std::sync","contains","CONDVAR_INIT"],["std::sync::CONDVAR_INIT","has attribute","Deprecated"],["std::sync::CONDVAR_INIT","has attribute","Unstable"],["std::sync","contains","MUTEX_INIT"],["std::sync::MUTEX_INIT","has attribute","Deprecated"],["std::sync::MUTEX_INIT","has attribute","Unstable"],["std::sync","contains","RW_LOCK_INIT"],["std::sync::RW_LOCK_INIT","has attribute","Deprecated"],["std::sync::RW_LOCK_INIT","has attribute","Unstable"],["std::sync","contains","LockResult"],["std::sync::LockResult","description","A type alias for the result of a lock method which can be poisoned."],["std::sync","contains","TryLockResult"],["std::sync::TryLockResult","description","A type alias for the result of a nonblocking locking method."],["sync","contains","atomic"],["atomic","has description","Atomic types"],["sync","contains","mpsc"],["mpsc","has description","Multi-producer, single-consumer FIFO queue communication primitives."],["sync","contains","Arc"],["Arc","has description","An atomically reference counted wrapper for shared state."],["sync","contains","Barrier"],["Barrier","has description","A barrier enables multiple threads to synchronize the beginning of some computation."],["sync","contains","BarrierWaitResult"],["BarrierWaitResult","has description","A result returned from wait."],["sync","contains","Condvar"],["Condvar","has description","A Condition Variable"],["sync","contains","Mutex"],["Mutex","has description","A mutual exclusion primitive useful for protecting shared data"],["sync","contains","MutexGuard"],["MutexGuard","has description","An RAII implementation of a 'scoped lock' of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["sync","contains","Once"],["Once","has description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the ONCE_INIT value."],["sync","contains","PoisonError"],["PoisonError","has description","A type of error which can be returned whenever a lock is acquired."],["sync","contains","RwLock"],["RwLock","has description","A reader-writer lock"],["sync","contains","RwLockReadGuard"],["RwLockReadGuard","has description","RAII structure used to release the shared read access of a lock when dropped."],["sync","contains","RwLockWriteGuard"],["RwLockWriteGuard","has description","RAII structure used to release the exclusive write access of a lock when dropped."],["sync","contains","WaitTimeoutResult"],["WaitTimeoutResult","has description","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["sync","contains","Weak"],["Weak","has description","A weak pointer to an Arc."],["sync","contains","OnceState"],["OnceState","has attribute","Unstable"],["OnceState","has description","State yielded to the call_once_force method which can be used to query whether the Once was previously poisoned or not."],["sync","contains","StaticCondvar"],["StaticCondvar","has attribute","Deprecated"],["StaticCondvar","has attribute","Unstable"],["StaticCondvar","has description","Statically allocated condition variables."],["sync","contains","StaticMutex"],["StaticMutex","has attribute","Deprecated"],["StaticMutex","has attribute","Unstable"],["StaticMutex","has description","The static mutex type is provided to allow for static allocation of mutexes."],["sync","contains","StaticRwLock"],["StaticRwLock","has attribute","Deprecated"],["StaticRwLock","has attribute","Unstable"],["StaticRwLock","has description","Structure representing a statically allocated RwLock."],["sync","contains","TryLockError"],["TryLockError","has description","An enumeration of possible errors which can occur while calling the try_lock method."],["sync","contains","ONCE_INIT"],["ONCE_INIT","has description","Initialization value for static Once values."],["sync","contains","CONDVAR_INIT"],["CONDVAR_INIT","has attribute","Deprecated"],["CONDVAR_INIT","has attribute","Unstable"],["CONDVAR_INIT","has description","Constant initializer for a statically allocated condition variable."],["sync","contains","MUTEX_INIT"],["MUTEX_INIT","has attribute","Deprecated"],["MUTEX_INIT","has attribute","Unstable"],["MUTEX_INIT","has description","Static initialization of a mutex. This constant can be used to initialize other mutex constants."],["sync","contains","RW_LOCK_INIT"],["RW_LOCK_INIT","has attribute","Deprecated"],["RW_LOCK_INIT","has attribute","Unstable"],["RW_LOCK_INIT","has description","Constant initialization for a statically-initialized rwlock."],["sync","contains","LockResult"],["LockResult","has description","A type alias for the result of a lock method which can be poisoned."],["sync","contains","TryLockResult"],["TryLockResult","has description","A type alias for the result of a nonblocking locking method."],["atomic","description","Atomic types"],["mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives."],["sync","description","Useful synchronization primitives."],["Arc","description","An atomically reference counted wrapper for shared state."],["Barrier","description","A barrier enables multiple threads to synchronize the beginning of some computation."],["BarrierWaitResult","description","A result returned from wait."],["Condvar","description","A Condition Variable"],["Mutex","description","A mutual exclusion primitive useful for protecting shared data"],["MutexGuard","description","An RAII implementation of a 'scoped lock' of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["Once","description","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the ONCE_INIT value."],["PoisonError","description","A type of error which can be returned whenever a lock is acquired."],["RwLock","description","A reader-writer lock"],["RwLockReadGuard","description","RAII structure used to release the shared read access of a lock when dropped."],["RwLockWriteGuard","description","RAII structure used to release the exclusive write access of a lock when dropped."],["WaitTimeoutResult","description","A type indicating whether a timed wait on a condition variable returned due to a time out or not."],["Weak","description","A weak pointer to an Arc."],["OnceState","description","State yielded to the call_once_force method which can be used to query whether the Once was previously poisoned or not."],["OnceState","has attribute","unstable"],["StaticCondvar","description","Statically allocated condition variables."],["StaticCondvar","has attribute","deprecated"],["StaticCondvar","has attribute","unstable"],["StaticMutex","description","The static mutex type is provided to allow for static allocation of mutexes."],["StaticMutex","has attribute","deprecated"],["StaticMutex","has attribute","unstable"],["StaticRwLock","description","Structure representing a statically allocated RwLock."],["StaticRwLock","has attribute","deprecated"],["StaticRwLock","has attribute","unstable"],["TryLockError","description","An enumeration of possible errors which can occur while calling the try_lock method."],["ONCE_INIT","description","Initialization value for static Once values."],["CONDVAR_INIT","description","Constant initializer for a statically allocated condition variable."],["CONDVAR_INIT","has attribute","deprecated"],["CONDVAR_INIT","has attribute","unstable"],["MUTEX_INIT","description","Static initialization of a mutex. This constant can be used to initialize other mutex constants."],["MUTEX_INIT","has attribute","deprecated"],["MUTEX_INIT","has attribute","unstable"],["RW_LOCK_INIT","description","Constant initialization for a statically-initialized rwlock."],["RW_LOCK_INIT","has attribute","deprecated"],["RW_LOCK_INIT","has attribute","unstable"],["LockResult","description","A type alias for the result of a lock method which can be poisoned."],["TryLockResult","description","A type alias for the result of a nonblocking locking method."],["std::f32","description","This module provides constants which are specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["std::f64","description","This module provides constants which are specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["std::rc","description","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["std::assert_eq!","description","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["std","contains","assert_ne!"],["std::assert_ne!","description","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["std","contains","debug_assert_ne!"],["std::debug_assert_ne!","description","Asserts that two expressions are not equal to each other."],["std","contains","eprint!"],["std::eprint!","description","Macro for printing to the standard error."],["std","contains","eprintln!"],["std::eprintln!","description","Macro for printing to the standard error, with a newline."],["std::sync::Arc","description","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["std","contains","heap"],["std::heap","description","dox"],["std::fmt","description","Utilities for formatting and printing `String`s"],["std::marker","description","Primitive traits and types representing basic properties of types."],["std::process","description","A module for working with processes."],["std::sync::BarrierWaitResult","description","A `BarrierWaitResult` is returned by `wait` when all threads in the `Barrier` have rendezvoused."],["std","contains","i128"],["std::i128","description","The 128-bit signed integer type."],["std","contains","u128"],["std::u128","description","The 128-bit unsigned integer type."],["std::f32","description","This module provides constants specific to the implementation of the `f32` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["std::f64","description","This module provides constants specific to the implementation of the `f64` floating point data type. Mathematically significant numbers are provided in the `consts` sub-module."],["std::sync::OnceState","description","State yielded to the call_once_force method which can be used to query whether the Once was previously poisoned or not."],["std","contains","hint"],["std::hint","description","Hints to compiler that affects how code should be emitted or optimized."],["std","contains","future"],["std::future","description","Asynchronous values."],["std","contains","pin"],["std::pin","description","Types which pin data to its location in memory"],["std","contains","task"],["std::task","description","Types and Traits for working with asynchronous tasks."],["std","contains","await!"],["std::format!","description","Creates a String using interpolation of runtime expressions."],["std","contains","is_aarch64_feature_detected!"],["std","contains","is_arm_feature_detected!"],["std","contains","is_mips64_feature_detected!"],["std","contains","is_mips_feature_detected!"],["std","contains","is_powerpc64_feature_detected!"],["std","contains","is_powerpc_feature_detected!"],["std","contains","is_x86_feature_detected!"],["std::is_x86_feature_detected!","description","A macro to test at runtime whether a CPU feature is available on x86/x86-64 platforms."],["std::format!","description","Creates a `String` using interpolation of runtime expressions."],["std::stringify!","description","A macro which stringifies its arguments."],["std","contains","never"],["std::never","description","The `!` type, also called 'never'."],["std","contains","unit"],["std::unit","description","The `()` type, sometimes called 'unit' or 'nil'."],["std","contains","array"],["std::array","description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["std","contains","asm!"],["std::asm!","description","Inline assembly."],["std","contains","dbg!"],["std::dbg!","description","Prints and returns the value of a given expression for quick and dirty debugging."],["std::slice","description","A dynamically-sized view into a contiguous sequence, `[T]`. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors."],["std::ptr","description","Manually manage memory through raw pointers."],["std::array","description","Implementations of things like Eq for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["std","contains","backtrace"],["std::backtrace","description","Support for capturing a stack backtrace of an OS thread"],["std::slice","description","A dynamically-sized view into a contiguous sequence, [T]. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors."],["std::format_args!","description","Constructs parameters for the other string-formatting macros."],["std::sync::OnceState","has attribute","Experimental"],["std::sync::Weak","description","A weak pointer to an Arc that holds a non-owning reference to the managed allocation."],["std::backtrace","description","Support for capturing a stack backtrace of an OS thread."],["std::sync::ONCE_INIT","has attribute","Deprecated"],["std::sync::Weak","description","Weak is a version of Arc that holds a non-owning reference to the managed allocation. The allocation is accessed by calling upgrade on the Weak pointer, which returns an Option<Arc<T>>."],["std::sync","contains","Exclusive"],["std::sync::Exclusive","description","Exclusive provides only mutable access, also referred to as exclusive access to the underlying value. It provides no immutable, or shared access to the underlying value."],["std::sync::Exclusive","has attribute","Experimental"],["std::sync","contains","LazyLock"],["std::sync::LazyLock","description","A value which is initialized on the first access."],["std::sync::LazyLock","has attribute","Experimental"],["std::sync","contains","OnceLock"],["std::sync::OnceLock","description","A synchronization primitive which can be written to only once."],["std::sync::BarrierWaitResult","description","A BarrierWaitResult is returned by Barrier::wait() when all threads in the Barrier have rendezvoused."],["std","contains","assert_matches"],["std","contains","async_iter"],["std","contains","simd"],["std","contains","pat"],["std::sync::OnceLock","description","A synchronization primitive which can nominally be written to only once."],["std::sync","contains","MappedMutexGuard"],["std::sync::MappedMutexGuard","has attribute","Experimental"],["std::sync","contains","MappedRwLockReadGuard"],["std::sync::MappedRwLockReadGuard","has attribute","Experimental"],["std::sync","contains","MappedRwLockWriteGuard"],["std::sync::MappedRwLockWriteGuard","has attribute","Experimental"],["std::sync","contains","ReentrantLock"],["std::sync::ReentrantLock","has attribute","Experimental"],["std::sync","contains","ReentrantLockGuard"],["std::sync::ReentrantLockGuard","has attribute","Experimental"],["std","contains","cfg_match!"],["std","contains","concat_bytes!"],["std","contains","format_args_nl!"],["std","contains","log_syntax!"],["std","contains","todo!"],["std","contains","trace_macros!"],["std::sync::sync","contains","MappedMutexGuard"],["std::sync::sync","contains","MappedRwLockReadGuard"],["std::sync::sync","contains","MappedRwLockWriteGuard"],["std::sync::sync","contains","ReentrantLock"],["std::sync::sync","contains","ReentrantLockGuard"]],"startIndex":0,"endIndex":39000},{"triples":[["std","contains","lazy"],["std","contains","primitive"],["sync","contains","OnceState"],["std","contains","llvm_asm"],["f32","defined in","IEEE 754-2008"],["f64","defined in","IEEE 754-2008"],["dyn","is prefix for","trait object"],["Once","has method","call_once_force"],["OnceState","used in","Once::call_once_force"],["include_str","has encoding","UTF-8"],["dyn","is prefix of","trait object's type"],["static","is","static item"],["lazy","description","Lazy values and one-time initialization of static data."],["primitive","description","This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types."],["f32","is","binary32 type"],["f64","is","binary64 type"],["llvm_asm","is a","macro"],["call_once_force","uses","OnceState"],["unimplemented","description","Indicates unimplemented code by panicking with a message of \"not implemented\""],["static","has lifetime","'static"],["include_str","encodes","UTF-8"],["OnceState","status","Experimental"],["ONCE_INIT","status","deprecated"],["hint","can be","compile time"],["hint","can be","runtime"],["std::sync","contains","atomic"],["std::sync","contains","mpsc"],["std::sync","contains","Arc"],["std::sync","contains","Barrier"],["std::sync","contains","Condvar"],["std::sync","contains","Mutex"],["std::sync","contains","Once"],["std::sync","contains","RwLock"],["atomic","description","Atomic types"],["mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives"],["Arc","description","thread-safe reference-counting pointer"],["Arc","stands for","Atomically Reference Counted"],["Barrier","description","enables multiple threads to synchronize the beginning of some computation"],["Condvar","description","Condition Variable"],["Mutex","description","mutual exclusion primitive useful for protecting shared data"],["Once","description","one-time initialization of a global variable"],["RwLock","description","reader-writer lock"],["RwLock","has method","try_read"],["RwLock","has method","try_write"],["mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives."],["Arc","description","A thread-safe reference-counting pointer"],["Barrier","description","Ensures multiple threads will wait for each other to reach a point in the program, before continuing execution all together."],["Condvar","description","A Condition Variable"],["Mutex","description","A mutual exclusion primitive useful for protecting shared data"],["Once","description","A synchronization primitive which can be used to run a one-time global initialization."],["RwLock","description","A reader-writer lock"],["std::sync","contains","TryLockError"],["TryLockError","description","An enumeration of possible errors associated with a TryLockResult"],["std::sync","contains","ONCE_INIT"],["ONCE_INIT","description","Initialization value for static Once values."],["std::sync","contains","LockResult"],["LockResult","description","A type alias for the result of a lock method which can be poisoned."],["std::sync","contains","TryLockResult"],["TryLockResult","description","A type alias for the result of a nonblocking locking method."]],"startIndex":40723,"endIndex":69139}],"changes_info_triples":[["std","adds feature","assert_matches"],["std","adds feature","async_iter"],["std","adds feature","backtrace"],["std","adds feature","future"],["std","adds feature","hint"],["std","adds feature","pin"],["std","adds feature","task"],["std","adds feature","simd"],["std","adds feature","pat"],["std::sync","adds feature","Exclusive"],["std::sync","adds feature","LazyLock"],["std::sync","adds feature","OnceLock"],["std::sync","adds feature","MappedMutexGuard"],["std::sync","adds feature","MappedRwLockReadGuard"],["std::sync","adds feature","MappedRwLockWriteGuard"],["std::sync","adds feature","ReentrantLock"],["std::sync","adds feature","ReentrantLockGuard"],["std","adds feature","cfg_match!"],["std","adds feature","concat_bytes!"],["std","adds feature","dbg!"],["std","adds feature","format_args_nl!"],["std","adds feature","is_x86_feature_detected!"],["std","adds feature","log_syntax!"],["std","adds feature","todo!"],["std","adds feature","trace_macros!"],["std::sync::sync","adds feature","MappedMutexGuard"],["std::sync::sync","adds feature","MappedRwLockReadGuard"],["std::sync::sync","adds feature","MappedRwLockWriteGuard"],["std::sync::sync","adds feature","ReentrantLock"],["std::sync::sync","adds feature","ReentrantLockGuard"]],"model":"deepseek-r1-250120"}