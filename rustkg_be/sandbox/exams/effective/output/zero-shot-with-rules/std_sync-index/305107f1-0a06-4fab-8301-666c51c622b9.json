{"create_time":"2025-04-05T09:42:02.173Z","id":"305107f1-0a06-4fab-8301-666c51c622b9","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.60-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\zero-shot-with-rules\\std_sync-index\\merged_1e738af2-6df3-452e-b5ce-835c71df214f.json","relations":["contains","description","stands for"],"delete_triples":[{"triples":[],"startIndex":28567,"endIndex":68299},{"triples":[],"startIndex":40596,"endIndex":63008}],"add_triples":[{"triples":[],"startIndex":28567,"endIndex":68299},{"triples":[["std::sync","contains","atomic"],["atomic","description","Atomic types"],["std::sync","contains","mpsc"],["mpsc","description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync","contains","Arc"],["Arc","description","A thread-safe reference-counting pointer"],["Arc","stands for","Atomically Reference Counted"],["std::sync","contains","Barrier"],["Barrier","description","Ensures multiple threads will wait for each other to reach a point in the program, before continuing execution all together."],["std::sync","contains","Condvar"],["Condvar","description","A Condition Variable"],["std::sync","contains","Mutex"],["Mutex","description","A mutual exclusion primitive useful for protecting shared data"],["std::sync","contains","Once"],["Once","description","A synchronization primitive which can be used to run a one-time global initialization."],["std::sync","contains","RwLock"],["RwLock","description","A reader-writer lock"],["std::sync","contains","TryLockError"],["TryLockError","description","An enumeration of possible errors associated with a TryLockResult"],["std::sync","contains","ONCE_INIT"],["ONCE_INIT","description","Initialization value for static Once values."],["std::sync","contains","LockResult"],["LockResult","description","A type alias for the result of a lock method which can be poisoned."],["std::sync","contains","TryLockResult"],["TryLockResult","description","A type alias for the result of a nonblocking locking method."]],"startIndex":40596,"endIndex":63008}],"metrics":{"escapeCount":0,"costTime":195884,"totalUsage":{"prompt_tokens":28253,"completion_tokens":5288,"cached_tokens":0,"reasoning_tokens":4798},"chunkLength":2,"chunksInfo":[{"chunkIndex":0,"strLength":39732,"costTime":55911},{"chunkIndex":1,"strLength":22412,"costTime":139973}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["std::sync","adds","atomic"],["atomic","adds description","Atomic types"],["std::sync","adds","mpsc"],["mpsc","adds description","Multi-producer, single-consumer FIFO queue communication primitives."],["std::sync","adds","Arc"],["Arc","adds description","A thread-safe reference-counting pointer"],["Arc","adds stands for","Atomically Reference Counted"],["std::sync","adds","Barrier"],["Barrier","adds description","Ensures multiple threads will wait for each other to reach a point in the program, before continuing execution all together."],["std::sync","adds","Condvar"],["Condvar","adds description","A Condition Variable"],["std::sync","adds","Mutex"],["Mutex","adds description","A mutual exclusion primitive useful for protecting shared data"],["std::sync","adds","Once"],["Once","adds description","A synchronization primitive which can be used to run a one-time global initialization."],["std::sync","adds","RwLock"],["RwLock","adds description","A reader-writer lock"],["std::sync","adds","TryLockError"],["TryLockError","adds description","An enumeration of possible errors associated with a TryLockResult"],["std::sync","adds","ONCE_INIT"],["ONCE_INIT","adds description","Initialization value for static Once values."],["std::sync","adds","LockResult"],["LockResult","adds description","A type alias for the result of a lock method which can be poisoned."],["std::sync","adds","TryLockResult"],["TryLockResult","adds description","A type alias for the result of a nonblocking locking method."]]}