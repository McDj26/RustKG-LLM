{"create_time":"2025-04-05T12:02:16.730Z","id":"merged_04d51d2e-ead1-4f74-ad4e-056edb629778","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.80-x86_64-pc-windows-msvc/share/doc/rust/html/core/ffi/index.html","merged_triples":[{"triples":[["core","contains","alloc"],["alloc","is a","module"],["alloc","has description","Memory allocation APIs"],["core","contains","any"],["any","is a","module"],["any","has description","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["core","contains","arch"],["arch","is a","module"],["arch","has description","Platform dependent vendor intrinsics."],["core","contains","array"],["array","is a","module"],["array","has description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["core","contains","ascii"],["ascii","is a","module"],["ascii","has description","Operations on ASCII strings and characters."],["core","contains","borrow"],["borrow","is a","module"],["borrow","has description","A module for working with borrowed data."],["core","contains","cell"],["cell","is a","module"],["cell","has description","Shareable mutable containers."],["core","contains","char"],["char","is a","module"],["char","has description","A character type."],["core","contains","clone"],["clone","is a","module"],["clone","has description","The `Clone` trait for types that cannot be 'implicitly copied'."],["core","contains","cmp"],["cmp","is a","module"],["cmp","has description","Functionality for ordering and comparison."],["core","contains","convert"],["convert","is a","module"],["convert","has description","Traits for conversions between types."],["core","contains","default"],["default","is a","module"],["default","has description","The `Default` trait for types which may have meaningful default values."],["core","contains","f32"],["f32","is a","module"],["f32","has description","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["core","contains","f64"],["f64","is a","module"],["f64","has description","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["core","contains","ffi"],["ffi","is a","module"],["ffi","has description","Utilities related to FFI bindings."],["core","contains","fmt"],["fmt","is a","module"],["fmt","has description","Utilities for formatting and printing strings."],["core","contains","future"],["future","is a","module"],["future","has description","Asynchronous values."],["core","contains","hash"],["hash","is a","module"],["hash","has description","Generic hashing support."],["core","contains","hint"],["hint","is a","module"],["hint","has description","Hints to compiler that affects how code should be emitted or optimized."],["core","contains","i128"],["i128","is a","module"],["i128","has description","The 128-bit signed integer type."],["core","contains","i16"],["i16","is a","module"],["i16","has description","The 16-bit signed integer type."],["core","contains","i32"],["i32","is a","module"],["i32","has description","The 32-bit signed integer type."],["core","contains","i64"],["i64","is a","module"],["i64","has description","The 64-bit signed integer type."],["core","contains","i8"],["i8","is a","module"],["i8","has description","The 8-bit signed integer type."],["core","contains","intrinsics"],["intrinsics","is a","module"],["intrinsics","has description","rustc compiler intrinsics."],["core","contains","isize"],["isize","is a","module"],["isize","has description","The pointer-sized signed integer type."],["core","contains","iter"],["iter","is a","module"],["iter","has description","Composable external iteration."],["core","contains","marker"],["marker","is a","module"],["marker","has description","Primitive traits and types representing basic properties of types."],["core","contains","mem"],["mem","is a","module"],["mem","has description","Basic functions for dealing with memory."],["core","contains","num"],["num","is a","module"],["num","has description","Numeric traits and functions for the built-in numeric types."],["core","contains","ops"],["ops","is a","module"],["ops","has description","Overloadable operators."],["core","contains","option"],["option","is a","module"],["option","has description","Optional values."],["core","contains","panic"],["panic","is a","module"],["panic","has description","Panic support in the standard library."],["core","contains","panicking"],["panicking","is a","module"],["panicking","has description","Panic support for libcore"],["core","contains","pin"],["pin","is a","module"],["pin","has description","Types which pin data to its location in memory"],["core","contains","prelude"],["prelude","is a","module"],["prelude","has description","The libcore prelude"],["core","contains","ptr"],["ptr","is a","module"],["ptr","has description","Raw, unsafe pointers, `*const T`, and `*mut T`."],["core","contains","raw"],["raw","is a","module"],["raw","has description","Contains struct definitions for the layout of compiler built-in types."],["core","contains","result"],["result","is a","module"],["result","has description","Error handling with the `Result` type."],["core","contains","slice"],["slice","is a","module"],["slice","has description","Slice management and manipulation"],["core","contains","str"],["str","is a","module"],["str","has description","String manipulation"],["core","contains","sync"],["sync","is a","module"],["sync","has description","Synchronization primitives"],["core","contains","task"],["task","is a","module"],["task","has description","Types and Traits for working with asynchronous tasks."],["core","contains","time"],["time","is a","module"],["time","has description","Temporal quantification."],["core","contains","u128"],["u128","is a","module"],["u128","has description","The 128-bit unsigned integer type."],["core","contains","u16"],["u16","is a","module"],["u16","has description","The 16-bit unsigned integer type."],["core","contains","u32"],["u32","is a","module"],["u32","has description","The 32-bit unsigned integer type."],["core","contains","u64"],["u64","is a","module"],["u64","has description","The 64-bit unsigned integer type."],["core","contains","u8"],["u8","is a","module"],["u8","has description","The 8-bit unsigned integer type."],["core","contains","unicode"],["unicode","is a","module"],["unicode","has description",""],["core","contains","usize"],["usize","is a","module"],["usize","has description","The pointer-sized unsigned integer type."],["ffi","contains","c_void"],["c_void","is a","enum"],["c_void","has description","Equivalent to C's void type when used as a pointer."],["core","contains","assert"],["assert","is a","macro"],["assert","has description","Ensure that a boolean expression is `true` at runtime."],["core","contains","assert_eq"],["assert_eq","is a","macro"],["assert_eq","has description","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["core","contains","assert_ne"],["assert_ne","is a","macro"],["assert_ne","has description","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["core","contains","cfg"],["cfg","is a","macro"],["cfg","has description","Boolean evaluation of configuration flags, at compile-time."],["core","contains","column"],["column","is a","macro"],["column","has description","A macro which expands to the column number on which it was invoked."],["core","contains","compile_error"],["compile_error","is a","macro"],["compile_error","has description","Unconditionally causes compilation to fail with the given error message when encountered."],["core","contains","concat"],["concat","is a","macro"],["concat","has description","Concatenates literals into a static string slice."],["core","contains","concat_idents"],["concat_idents","is a","macro"],["concat_idents","has description","Concatenate identifiers into one identifier."],["core","contains","debug_assert"],["debug_assert","is a","macro"],["debug_assert","has description","Ensure that a boolean expression is `true` at runtime."],["core","contains","debug_assert_eq"],["debug_assert_eq","is a","macro"],["debug_assert_eq","has description","Asserts that two expressions are equal to each other."],["core","contains","debug_assert_ne"],["debug_assert_ne","is a","macro"],["debug_assert_ne","has description","Asserts that two expressions are not equal to each other."],["core","contains","env"],["env","is a","macro"],["env","has description","Inspect an environment variable at compile time."],["core","contains","file"],["file","is a","macro"],["file","has description","A macro which expands to the file name from which it was invoked."],["core","contains","format_args"],["format_args","is a","macro"],["format_args","has description","The core macro for formatted string creation & output."],["core","contains","include"],["include","is a","macro"],["include","has description","Parse a file as an expression or an item according to the context."],["core","contains","include_bytes"],["include_bytes","is a","macro"],["include_bytes","has description","Includes a file as a reference to a byte array."],["core","contains","include_str"],["include_str","is a","macro"],["include_str","has description","Includes a utf8-encoded file as a string."],["core","contains","line"],["line","is a","macro"],["line","has description","A macro which expands to the line number on which it was invoked."],["core","contains","module_path"],["module_path","is a","macro"],["module_path","has description","Expands to a string that represents the current module path."],["core","contains","option_env"],["option_env","is a","macro"],["option_env","has description","Optionally inspect an environment variable at compile time."],["panic","is a","macro"],["panic","has description","Entry point of thread panic, for details, see std::macros"],["core","contains","stringify"],["stringify","is a","macro"],["stringify","has description","A macro which stringifies its arguments."],["core","contains","try"],["try","is a","macro"],["try","has description","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["core","contains","unimplemented"],["unimplemented","is a","macro"],["unimplemented","has description","A standardized placeholder for marking unfinished code."],["core","contains","unreachable"],["unreachable","is a","macro"],["unreachable","has description","A utility macro for indicating unreachable code."],["core","contains","write"],["write","is a","macro"],["write","has description","Write formatted data into a buffer."],["core","contains","writeln"],["writeln","is a","macro"],["writeln","has description","Write formatted data into a buffer, with a newline appended."],["alloc","has title","Memory allocation APIs"],["any","has title","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["arch","has title","Platform dependent vendor intrinsics."],["array","has title","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["ascii","has title","Operations on ASCII strings and characters."],["borrow","has title","A module for working with borrowed data."],["cell","has title","Shareable mutable containers."],["char","has title","A character type."],["clone","has title","The `Clone` trait for types that cannot be 'implicitly copied'."],["cmp","has title","Functionality for ordering and comparison."],["convert","has title","Traits for conversions between types."],["default","has title","The `Default` trait for types which may have meaningful default values."],["f32","has title","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f64","has title","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["ffi","has title","Utilities related to FFI bindings."],["fmt","has title","Utilities for formatting and printing strings."],["future","has title","Asynchronous values."],["hash","has title","Generic hashing support."],["hint","has title","Hints to compiler that affects how code should be emitted or optimized."],["i128","has title","The 128-bit signed integer type."],["i16","has title","The 16-bit signed integer type."],["i32","has title","The 32-bit signed integer type."],["i64","has title","The 64-bit signed integer type."],["i8","has title","The 8-bit signed integer type."],["intrinsics","has title","rustc compiler intrinsics."],["isize","has title","The pointer-sized signed integer type."],["iter","has title","Composable external iteration."],["marker","has title","Primitive traits and types representing basic properties of types."],["mem","has title","Basic functions for dealing with memory."],["num","has title","Numeric traits and functions for the built-in numeric types."],["ops","has title","Overloadable operators."],["option","has title","Optional values."],["panic","has title","Panic support in the standard library."],["panicking","has title","Panic support for libcore"],["pin","has title","Types which pin data to its location in memory"],["prelude","has title","The libcore prelude"],["ptr","has title","Raw, unsafe pointers, `*const T`, and `*mut T`."],["raw","has title","Contains struct definitions for the layout of compiler built-in types."],["result","has title","Error handling with the `Result` type."],["slice","has title","Slice management and manipulation"],["str","has title","String manipulation"],["sync","has title","Synchronization primitives"],["task","has title","Types and Traits for working with asynchronous tasks."],["time","has title","Temporal quantification."],["u128","has title","The 128-bit unsigned integer type."],["u16","has title","The 16-bit unsigned integer type."],["u32","has title","The 32-bit unsigned integer type."],["u64","has title","The 64-bit unsigned integer type."],["u8","has title","The 8-bit unsigned integer type."],["usize","has title","The pointer-sized unsigned integer type."],["assert","has title","Ensure that a boolean expression is `true` at runtime."],["assert_eq","has title","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["assert_ne","has title","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["cfg","has title","Boolean evaluation of configuration flags, at compile-time."],["column","has title","A macro which expands to the column number on which it was invoked."],["compile_error","has title","Unconditionally causes compilation to fail with the given error message when encountered."],["concat","has title","Concatenates literals into a static string slice."],["concat_idents","has title","Concatenate identifiers into one identifier."],["debug_assert","has title","Ensure that a boolean expression is `true` at runtime."],["debug_assert_eq","has title","Asserts that two expressions are equal to each other."],["debug_assert_ne","has title","Asserts that two expressions are not equal to each other."],["env","has title","Inspect an environment variable at compile time."],["file","has title","A macro which expands to the file name from which it was invoked."],["format_args","has title","The core macro for formatted string creation & output."],["include","has title","Parse a file as an expression or an item according to the context."],["include_bytes","has title","Includes a file as a reference to a byte array."],["include_str","has title","Includes a utf8-encoded file as a string."],["line","has title","A macro which expands to the line number on which it was invoked."],["module_path","has title","Expands to a string that represents the current module path."],["option_env","has title","Optionally inspect an environment variable at compile time."],["panic","has title","Entry point of thread panic, for details, see std::macros"],["stringify","has title","A macro which stringifies its arguments."],["try","has title","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["unimplemented","has title","A standardized placeholder for marking unfinished code."],["unreachable","has title","A utility macro for indicating unreachable code."],["write","has title","Write formatted data into a buffer."],["writeln","has title","Write formatted data into a buffer, with a newline appended."],["core","contains","core::alloc"],["core::alloc","description","Memory allocation APIs"],["core","contains","core::any"],["core::any","description","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["core","contains","core::arch"],["core::arch","description","Platform dependent vendor intrinsics."],["core","contains","core::array"],["core::array","description","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["core","contains","core::ascii"],["core::ascii","description","Operations on ASCII strings and characters."],["core","contains","core::borrow"],["core::borrow","description","A module for working with borrowed data."],["core","contains","core::cell"],["core::cell","description","Shareable mutable containers."],["core","contains","core::char"],["core::char","description","A character type."],["core","contains","core::clone"],["core::clone","description","The `Clone` trait for types that cannot be 'implicitly copied'."],["core","contains","core::cmp"],["core::cmp","description","Functionality for ordering and comparison."],["core","contains","core::convert"],["core::convert","description","Traits for conversions between types."],["core","contains","core::default"],["core::default","description","The `Default` trait for types which may have meaningful default values."],["core","contains","core::f32"],["core::f32","description","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["core","contains","core::f64"],["core::f64","description","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["core","contains","core::ffi"],["core::ffi","description","Utilities related to FFI bindings."],["core","contains","core::fmt"],["core::fmt","description","Utilities for formatting and printing strings."],["core","contains","core::future"],["core::future","description","Asynchronous values."],["core","contains","core::hash"],["core::hash","description","Generic hashing support."],["core","contains","core::hint"],["core::hint","description","Hints to compiler that affects how code should be emitted or optimized."],["core","contains","core::i128"],["core::i128","description","The 128-bit signed integer type."],["core","contains","core::i16"],["core::i16","description","The 16-bit signed integer type."],["core","contains","core::i32"],["core::i32","description","The 32-bit signed integer type."],["core","contains","core::i64"],["core::i64","description","The 64-bit signed integer type."],["core","contains","core::i8"],["core::i8","description","The 8-bit signed integer type."],["core","contains","core::intrinsics"],["core::intrinsics","description","rustc compiler intrinsics."],["core","contains","core::isize"],["core::isize","description","The pointer-sized signed integer type."],["core","contains","core::iter"],["core::iter","description","Composable external iteration."],["core","contains","core::marker"],["core::marker","description","Primitive traits and types representing basic properties of types."],["core","contains","core::mem"],["core::mem","description","Basic functions for dealing with memory."],["core","contains","core::num"],["core::num","description","Numeric traits and functions for the built-in numeric types."],["core","contains","core::ops"],["core::ops","description","Overloadable operators."],["core","contains","core::option"],["core::option","description","Optional values."],["core","contains","core::panic"],["core::panic","description","Panic support in the standard library."],["core","contains","core::panicking"],["core::panicking","description","Panic support for libcore"],["core","contains","core::pin"],["core::pin","description","Types which pin data to its location in memory"],["core","contains","core::prelude"],["core::prelude","description","The libcore prelude"],["core","contains","core::ptr"],["core::ptr","description","Raw, unsafe pointers, `*const T`, and `*mut T`."],["core","contains","core::raw"],["core::raw","description","Contains struct definitions for the layout of compiler built-in types."],["core","contains","core::result"],["core::result","description","Error handling with the `Result` type."],["core","contains","core::slice"],["core::slice","description","Slice management and manipulation"],["core","contains","core::str"],["core::str","description","String manipulation"],["core","contains","core::sync"],["core::sync","description","Synchronization primitives"],["core","contains","core::task"],["core::task","description","Types and Traits for working with asynchronous tasks."],["core","contains","core::time"],["core::time","description","Temporal quantification."],["core","contains","core::u128"],["core::u128","description","The 128-bit unsigned integer type."],["core","contains","core::u16"],["core::u16","description","The 16-bit unsigned integer type."],["core","contains","core::u32"],["core::u32","description","The 32-bit unsigned integer type."],["core","contains","core::u64"],["core::u64","description","The 64-bit unsigned integer type."],["core","contains","core::u8"],["core::u8","description","The 8-bit unsigned integer type."],["core","contains","core::unicode"],["core::unicode","description",""],["core","contains","core::usize"],["core::usize","description","The pointer-sized unsigned integer type."],["core","contains","core::assert"],["core::assert","description","Ensure that a boolean expression is `true` at runtime."],["core","contains","core::assert_eq"],["core::assert_eq","description","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["core","contains","core::assert_ne"],["core::assert_ne","description","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["core","contains","core::cfg"],["core::cfg","description","Boolean evaluation of configuration flags, at compile-time."],["core","contains","core::column"],["core::column","description","A macro which expands to the column number on which it was invoked."],["core","contains","core::compile_error"],["core::compile_error","description","Unconditionally causes compilation to fail with the given error message when encountered."],["core","contains","core::concat"],["core::concat","description","Concatenates literals into a static string slice."],["core","contains","core::concat_idents"],["core::concat_idents","description","Concatenate identifiers into one identifier."],["core","contains","core::debug_assert"],["core::debug_assert","description","Ensure that a boolean expression is `true` at runtime."],["core","contains","core::debug_assert_eq"],["core::debug_assert_eq","description","Asserts that two expressions are equal to each other."],["core","contains","core::debug_assert_ne"],["core::debug_assert_ne","description","Asserts that two expressions are not equal to each other."],["core","contains","core::env"],["core::env","description","Inspect an environment variable at compile time."],["core","contains","core::file"],["core::file","description","A macro which expands to the file name from which it was invoked."],["core","contains","core::format_args"],["core::format_args","description","The core macro for formatted string creation & output."],["core","contains","core::include"],["core::include","description","Parse a file as an expression or an item according to the context."],["core","contains","core::include_bytes"],["core::include_bytes","description","Includes a file as a reference to a byte array."],["core","contains","core::include_str"],["core::include_str","description","Includes a utf8-encoded file as a string."],["core","contains","core::line"],["core::line","description","A macro which expands to the line number on which it was invoked."],["core","contains","core::module_path"],["core::module_path","description","Expands to a string that represents the current module path."],["core","contains","core::option_env"],["core::option_env","description","Optionally inspect an environment variable at compile time."],["core::panic","description","Entry point of thread panic, for details, see std::macros"],["core","contains","core::stringify"],["core::stringify","description","A macro which stringifies its arguments."],["core","contains","core::try"],["core::try","description","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["core","contains","core::unimplemented"],["core::unimplemented","description","A standardized placeholder for marking unfinished code."],["core","contains","core::unreachable"],["core::unreachable","description","A utility macro for indicating unreachable code."],["core","contains","core::write"],["core::write","description","Write formatted data into a buffer."],["core","contains","core::writeln"],["core::writeln","description","Write formatted data into a buffer, with a newline appended."],["core::ffi","contains","core::ffi::c_void"],["core::ffi::c_void","description","Equivalent to C's void type when used as a pointer."],["arch","has title","SIMD and vendor intrinsics module"],["ptr","has title","Manually manage memory through raw pointers"],["slice","has title","Slice management and manipulation."],["str","has title","String manipulation."],["assert","has title","Asserts that a boolean expression is `true` at runtime"],["cfg","has title","Evaluates boolean combinations of configuration flags at compile-time"],["column","has title","Expands to the column number at which it was invoked"],["compile_error","has title","Causes compilation to fail with the given error message"],["concat_idents","has title","Concatenates identifiers into one identifier"],["debug_assert","has title","Asserts that a boolean expression is `true` at runtime"],["env","has title","Inspects an environment variable at compile time"],["file","has title","Expands to the file name in which it was invoked"],["format_args","has title","Constructs parameters for the other string-formatting macros"],["include","has title","Parses a file as an expression or item"],["line","has title","Expands to the line number on which it was invoked"],["panic","has title","Panics the current thread"],["pin","has title","Types that pin data to its location in memory."],["arch","has description","SIMD and vendor intrinsics module."],["pin","has description","Types that pin data to its location in memory."],["ptr","has description","Manually manage memory through raw pointers."],["slice","has description","Slice management and manipulation."],["str","has description","String manipulation."],["cfg","has description","Evaluates boolean combinations of configuration flags at compile-time."],["column","has description","Expands to the column number at which it was invoked."],["concat_idents","has description","Concatenates identifiers into one identifier."],["env","has description","Inspects an environment variable at compile time."],["file","has description","Expands to the file name in which it was invoked."],["format_args","has description","Constructs parameters for the other string-formatting macros."],["include","has description","Parses a file as an expression or item according to context."],["line","has description","Expands to the line number on which it was invoked."],["panic","has description","Panics the current thread."],["core","contains","Clone"],["Clone","is a","macro"],["Clone","has description","Derive macro generating an impl of the trait Clone"],["arch","has title","SIMD and vendor intrinsics module."],["ptr","has title","Manually manage memory through raw pointers."],["assert","has title","Asserts that a boolean expression is `true` at runtime."],["cfg","has title","Evaluates boolean combinations of configuration flags at compile-time."],["column","has title","Expands to the column number at which it was invoked."],["concat_idents","has title","Concatenates identifiers into one identifier."],["debug_assert","has title","Asserts that a boolean expression is `true` at runtime."],["env","has title","Inspects an environment variable at compile time."],["file","has title","Expands to the file name in which it was invoked."],["format_args","has title","Constructs parameters for the other string-formatting macros."],["include","has title","Parses a file as an expression or an item according to the context."],["line","has title","Expands to the line number on which it was invoked."],["option_env","has title","Optionally inspects an environment variable at compile time."],["panic","has title","Panics the current thread."],["stringify","has title","Stringifies its arguments."],["write","has title","Writes formatted data into a buffer."],["core","contains","Copy"],["core","contains","Debug"],["core","contains","Default"],["core","contains","Eq"],["core","contains","Hash"],["core","contains","Ord"],["core","contains","PartialEq"],["core","contains","PartialOrd"],["core","contains","RustcDecodable"],["core","contains","RustcEncodable"],["core","contains","bench"],["core","contains","global_allocator"],["core","contains","global_asm"],["core","contains","log_syntax"],["core","contains","matches"],["core","contains","test"],["core","contains","test_case"],["core","contains","todo"],["core","contains","trace_macros"],["ffi","has title","Utilities related to foreign function interface (FFI) bindings."],["array","has title","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually, we should be able to generalize to all lengths."],["include_str","has description","Includes a UTF-8 encoded file as a string."],["unimplemented","has description","Indicates unimplemented code by panicking with a message of \"not implemented\"."],["core","contains","lazy"],["lazy","is a","module"],["lazy","has title","Lazy values and one-time initialization of static data."],["core","contains","primitive"],["primitive","is a","module"],["primitive","has title","This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types."],["core","contains","cfg_accessible"],["cfg_accessible","is a","macro"],["cfg_accessible","has title","Keeps the item it's applied to if the passed path is accessible, and removes it otherwise."],["core","contains","llvm_asm"],["llvm_asm","is a","macro"],["llvm_asm","has title","LLVM-style inline assembly."],["core","contains","raw_const"],["raw_const","is a","macro"],["raw_const","has title","Create a `const` raw pointer to a place, without creating an intermediate reference."],["core","contains","raw_mut"],["raw_mut","is a","macro"],["raw_mut","has title","Create a `mut` raw pointer to a place, without creating an intermediate reference."],["core","contains","ready"],["ready","is a","macro"],["ready","has title","Extracts the successful type of a `Poll<T>."],["hint","has description","Hints to compiler that affects how code should be emitted or optimized. Hints may be compile time or runtime."],["unreachable","has description","Indicates unimplemented code by panicking with a message of \"not implemented\"."],["lazy","has description","Lazy values and one-time initialization of static data."],["ffi","has description","Utilities related to foreign function interface (FFI) bindings."],["cfg_accessible","has description","Keeps the item it's applied to if the passed path is accessible, and removes it otherwise."],["primitive","has description","This module reexports the primitive types to allow usage that is not possibly shadowed by other declared types."],["unimplemented","has description","Indicates unimplemented code by panicking with a message of 'not implemented'."],["ffi","contains","VaList"],["VaList","is a","struct"],["VaList","has description","A wrapper for a va_list"],["ffi","contains","VaListImpl"],["VaListImpl","is a","struct"],["VaListImpl","has description","Basic implementation of a va_list"],["ffi","contains","CStr"],["CStr","is a","struct"],["CStr","has description","Representation of a borrowed C string"],["ffi","contains","FromBytesUntilNulError"],["FromBytesUntilNulError","is a","struct"],["FromBytesUntilNulError","has description","An error indicating that no nul byte was present"],["ffi","contains","FromBytesWithNulError"],["FromBytesWithNulError","is a","struct"],["FromBytesWithNulError","has description","An error indicating that a nul byte was not in the expected position"],["ffi","contains","NonZero_c_char"],["NonZero_c_char","is a","type alias"],["NonZero_c_char","has description","Type alias for NonZero version of c_char"],["ffi","contains","c_ptrdiff_t"],["c_ptrdiff_t","is a","type alias"],["c_ptrdiff_t","has description","Equivalent to C's ptrdiff_t type from stddef.h"],["ffi","contains","c_size_t"],["c_size_t","is a","type alias"],["c_size_t","has description","Equivalent to C's size_t type from stddef.h"],["ffi","contains","c_ssize_t"],["c_ssize_t","is a","type alias"],["c_ssize_t","has description","Equivalent to C's ssize_t (POSIX) or SSIZE_T (Windows)"],["core::ffi","contains","VaList"],["core::ffi::VaList","is a","struct"],["core::ffi::VaList","has description","A wrapper for a va_list"],["core::ffi","contains","VaListImpl"],["core::ffi::VaListImpl","is a","struct"],["core::ffi::VaListImpl","has description","Basic implementation of a va_list"],["core::ffi","contains","CStr"],["core::ffi::CStr","is a","struct"],["core::ffi::CStr","has description","Representation of a borrowed C string."],["core::ffi","contains","FromBytesUntilNulError"],["core::ffi::FromBytesUntilNulError","is a","struct"],["core::ffi::FromBytesUntilNulError","has description","An error indicating that no nul byte was present."],["core::ffi","contains","FromBytesWithNulError"],["core::ffi::FromBytesWithNulError","is a","struct"],["core::ffi::FromBytesWithNulError","has description","An error indicating that a nul byte was not in the expected position."],["core::ffi","contains","NonZero_c_char"],["core::ffi::NonZero_c_char","is a","type alias"],["core::ffi::NonZero_c_char","has description","Type alias for NonZero version of c_char"],["core::ffi","contains","NonZero_c_int"],["core::ffi::NonZero_c_int","is a","type alias"],["core::ffi::NonZero_c_int","has description","Type alias for NonZero version of c_int"],["core::ffi","contains","NonZero_c_long"],["core::ffi::NonZero_c_long","is a","type alias"],["core::ffi::NonZero_c_long","has description","Type alias for NonZero version of c_long"],["core::ffi","contains","NonZero_c_longlong"],["core::ffi::NonZero_c_longlong","is a","type alias"],["core::ffi::NonZero_c_longlong","has description","Type alias for NonZero version of c_longlong"],["core::ffi","contains","NonZero_c_schar"],["core::ffi::NonZero_c_schar","is a","type alias"],["core::ffi::NonZero_c_schar","has description","Type alias for NonZero version of c_schar"],["core::ffi","contains","NonZero_c_short"],["core::ffi::NonZero_c_short","is a","type alias"],["core::ffi::NonZero_c_short","has description","Type alias for NonZero version of c_short"],["core::ffi","contains","NonZero_c_uchar"],["core::ffi::NonZero_c_uchar","is a","type alias"],["core::ffi::NonZero_c_uchar","has description","Type alias for NonZero version of c_uchar"],["core::ffi","contains","NonZero_c_uint"],["core::ffi::NonZero_c_uint","is a","type alias"],["core::ffi::NonZero_c_uint","has description","Type alias for NonZero version of c_uint"],["core::ffi","contains","NonZero_c_ulong"],["core::ffi::NonZero_c_ulong","is a","type alias"],["core::ffi::NonZero_c_ulong","has description","Type alias for NonZero version of c_ulong"],["core::ffi","contains","NonZero_c_ulonglong"],["core::ffi::NonZero_c_ulonglong","is a","type alias"],["core::ffi::NonZero_c_ulonglong","has description","Type alias for NonZero version of c_ulonglong"],["core::ffi","contains","NonZero_c_ushort"],["core::ffi::NonZero_c_ushort","is a","type alias"],["core::ffi::NonZero_c_ushort","has description","Type alias for NonZero version of c_ushort"],["core::ffi","contains","c_ptrdiff_t"],["core::ffi::c_ptrdiff_t","is a","type alias"],["core::ffi::c_ptrdiff_t","has description","Equivalent to C’s ptrdiff_t type"],["core::ffi","contains","c_size_t"],["core::ffi::c_size_t","is a","type alias"],["core::ffi::c_size_t","has description","Equivalent to C’s size_t type"],["core::ffi","contains","c_ssize_t"],["core::ffi::c_ssize_t","is a","type alias"],["core::ffi::c_ssize_t","has description","Equivalent to C’s ssize_t type"],["core::ffi::VaList","has feature","Experimental"],["core::ffi::VaListImpl","has feature","Experimental"],["core::ffi::NonZero_c_char","is a","type"],["core::ffi::NonZero_c_char","has feature","Experimental"],["ffi","has title","Utilities related to foreign function interface (FFI) bindings"],["core::ffi","contains","core::ffi::VaList"],["core::ffi","contains","core::ffi::VaListImpl"],["core::ffi","contains","core::ffi::NonZero_c_int"],["core::ffi","contains","core::ffi::CStr"]],"startIndex":0,"endIndex":39000}],"changes_info_triples":[["core::ffi::NonZero_c_ulong","removed",""],["core::ffi::NonZero_c_ulonglong","removed",""],["core::ffi","adds struct","VaList"],["core::ffi","adds struct","VaListImpl"],["core::ffi::VaList","adds feature","Experimental"],["core::ffi::VaListImpl","adds feature","Experimental"],["ffi","updates title","Utilities related to foreign function interface (FFI) bindings."],["core::ffi::NonZero_c_ulong","replaced by","core::ffi::NonZero_c_int"],["arch","updates title","SIMD and vendor intrinsics module."],["arch","updates description","SIMD and vendor intrinsics module."],["ptr","updates title","Manually manage memory through raw pointers."],["ptr","updates description","Manually manage memory through raw pointers."],["core","adds module","lazy"],["core::ffi","adds struct","CStr"],["core::ffi","removes type alias","NonZero_c_ulong"],["core::ffi","removes type alias","NonZero_c_ulonglong"],["core::ffi","removes type alias","NonZero_c_ushort"]],"model":"deepseek-r1-250120"}