{"create_time":"2025-04-05T09:47:49.816Z","id":"4c8917fd-4268-4014-b146-f39a80bbb582","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.70-x86_64-pc-windows-msvc/share/doc/rust/html/std/sync/mpsc/index.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\effective\\output\\zero-shot-with-rules\\std_sync_mpsc-index\\merged_34dd9312-4f91-474e-a148-772320be81f3.json","relations":["has_method"],"delete_triples":[{"triples":[["Sender","is_a","struct"],["Receiver","is_a","struct"],["SyncSender","is_a","struct"],["RecvError","is_a","struct"],["SendError","is_a","struct"],["TryIter","is_a","struct"],["TryRecvError","is_a","enum"],["TrySendError","is_a","enum"],["channel","is_a","function"],["sync_channel","is_a","function"],["RecvTimeoutError","is_a","enum"],["std::sync::mpsc::sync_channel","has_description","Creates a new synchronous, bounded channel."]],"startIndex":21210,"endIndex":61519},{"triples":[["sync_channel","returns","SyncSender"],["sync_channel","returns","Receiver"],["channel","returns","Sender"],["channel","returns","Receiver"]],"startIndex":22484,"endIndex":24478}],"add_triples":[{"triples":[["std::sync::mpsc::sync_channel","has_description","Creates a new synchronous, bounded channel. All data sent on the SyncSender will become available on the Receiver in the same order as it was sent. Like asynchronous channels, the Receiver will block until a message becomes available. sync_channel differs greatly in the semantics of the sender, however."]],"startIndex":21210,"endIndex":61519},{"triples":[["std::sync::mpsc::Receiver","has_method","recv"]],"startIndex":22484,"endIndex":24478}],"metrics":{"escapeCount":0,"costTime":632215,"totalUsage":{"prompt_tokens":23286,"completion_tokens":17371,"cached_tokens":0,"reasoning_tokens":16862},"chunkLength":2,"chunksInfo":[{"chunkIndex":0,"strLength":40309,"costTime":239930},{"chunkIndex":1,"strLength":1994,"costTime":392285}]},"model":"deepseek-r1-250120","extraInfo":{},"changes_info_triples":[["Sender","moved to","std::sync::mpsc::Sender"],["Receiver","moved to","std::sync::mpsc::Receiver"],["SyncSender","moved to","std::sync::mpsc::SyncSender"],["RecvError","moved to","std::sync::mpsc::RecvError"],["SendError","moved to","std::sync::mpsc::SendError"],["TryIter","moved to","std::sync::mpsc::TryIter"],["TryRecvError","moved to","std::sync::mpsc::TryRecvError"],["TrySendError","moved to","std::sync::mpsc::TrySendError"],["channel","moved to","std::sync::mpsc::channel"],["sync_channel","moved to","std::sync::mpsc::sync_channel"],["RecvTimeoutError","moved to","std::sync::mpsc::RecvTimeoutError"],["std::sync::mpsc::sync_channel","updates description","Creates a new synchronous, bounded channel. All data sent on the SyncSender will become available on the Receiver in the same order as it was sent. Like asynchronous channels, the Receiver will block until a message becomes available. sync_channel differs greatly in the semantics of the sender, however."],["std::sync::mpsc::Receiver","adds method","recv"]]}