{"create_time":"2025-03-23T10:15:50.137Z","id":"72091657-41fd-4e2a-a359-72673e8a8a6b","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/primitive.slice.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\split\\output-primitives\\0d6461a4-e124-4575-9e32-2185b3e54aa1.json","relations":["deprecated","has argument","has associated type","has declaration","has description","has example","has full name","has method","has parameter","has return type","has source code","has stability","has type","implements","is a","related to module","returns","stable since"],"delete_triples":[["ptr","has description","Raw, unsafe pointers, *const T, and *mut T"]],"add_triples":[["prelude","has description","The Rust Prelude."],["prelude","is a","module"],["process","has description","A module for working with processes."],["process","is a","module"],["ptr","has description","Manually manage memory through raw pointers"],["ptr","is a","module"],["slice","has method","chunks"],["slice","has method","chunks_exact"],["slice","has method","chunks_exact_mut"],["slice","has method","chunks_mut"],["slice","has method","copy_within"],["slice","has method","partition_dedup"],["slice","has method","partition_dedup_by"],["slice","has method","partition_dedup_by_key"],["slice","has method","rchunks"],["slice","has method","rchunks_exact"],["slice","has method","rchunks_exact_mut"],["slice","has method","rchunks_mut"],["slice::as_mut_ptr","has source code","../src/core/slice/mod.rs.html"],["slice::as_ptr","has source code","../src/core/slice/mod.rs.html"],["slice::chunks","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the beginning of the slice."],["slice::chunks","has parameter","chunk_size: usize"],["slice::chunks","has return type","Chunks<T>"],["slice::chunks","has source code","../src/core/slice/mod.rs.html"],["slice::chunks_exact","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the beginning of the slice."],["slice::chunks_exact","has parameter","chunk_size: usize"],["slice::chunks_exact","has return type","ChunksExact<T>"],["slice::chunks_exact","has source code","../src/core/slice/mod.rs.html"],["slice::chunks_exact","stable since","1.31.0"],["slice::chunks_exact_mut","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the beginning of the slice."],["slice::chunks_exact_mut","has parameter","chunk_size: usize"],["slice::chunks_exact_mut","has return type","ChunksExactMut<T>"],["slice::chunks_exact_mut","has source code","../src/core/slice/mod.rs.html"],["slice::chunks_exact_mut","stable since","1.31.0"],["slice::chunks_mut","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the beginning of the slice."],["slice::chunks_mut","has parameter","chunk_size: usize"],["slice::chunks_mut","has return type","ChunksMut<T>"],["slice::chunks_mut","has source code","../src/core/slice/mod.rs.html"],["slice::copy_within","has description","Copies elements from one part of the slice to another part of itself using memmove"],["slice::copy_within","has parameter","dest: usize"],["slice::copy_within","has parameter","src: R"],["slice::get","has source code","../src/core/slice/mod.rs.html"],["slice::get_mut","has source code","../src/core/slice/mod.rs.html"],["slice::get_unchecked","has source code","../src/core/slice/mod.rs.html"],["slice::get_unchecked_mut","has source code","../src/core/slice/mod.rs.html"],["slice::iter","has source code","../src/core/slice/mod.rs.html"],["slice::iter_mut","has source code","../src/core/slice/mod.rs.html"],["slice::last","has source code","../src/core/slice/mod.rs.html"],["slice::last_mut","has source code","../src/core/slice/mod.rs.html"],["slice::partition_dedup","has description","Moves all consecutive repeated elements to the end of the slice according to the PartialEq trait implementation"],["slice::partition_dedup","has return type","(&mut [T], &mut [T])"],["slice::partition_dedup","has source code","../src/core/slice/mod.rs.html"],["slice::partition_dedup_by","has description","Moves all but the first of consecutive elements to the end of the slice satisfying a given equality relation"],["slice::partition_dedup_by","has parameter","same_bucket: F"],["slice::partition_dedup_by","has return type","(&mut [T], &mut [T])"],["slice::partition_dedup_by","has source code","../src/core/slice/mod.rs.html"],["slice::partition_dedup_by_key","has description","Moves all but the first of consecutive elements to the end of the slice that resolve to the same key"],["slice::partition_dedup_by_key","has return type","(&mut [T], &mut [T])"],["slice::partition_dedup_by_key","has source code","../src/core/slice/mod.rs.html"],["slice::rchunks","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the end of the slice."],["slice::rchunks","has parameter","chunk_size: usize"],["slice::rchunks","has return type","RChunks<T>"],["slice::rchunks","has source code","../src/core/slice/mod.rs.html"],["slice::rchunks_exact","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the beginning of the slice."],["slice::rchunks_exact","has parameter","chunk_size: usize"],["slice::rchunks_exact","has return type","RChunksExact<T>"],["slice::rchunks_exact","has source code","../src/core/slice/mod.rs.html"],["slice::rchunks_exact_mut","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the end of the slice."],["slice::rchunks_exact_mut","has parameter","chunk_size: usize"],["slice::rchunks_exact_mut","has return type","RChunksExactMut<T>"],["slice::rchunks_exact_mut","has source code","../src/core/slice/mod.rs.html"],["slice::rchunks_mut","has description","Returns an iterator over chunk_size elements of the slice at a time, starting at the end of the slice."],["slice::rchunks_mut","has parameter","chunk_size: usize"],["slice::rchunks_mut","has return type","RChunksMut<T>"],["slice::rchunks_mut","has source code","../src/core/slice/mod.rs.html"],["slice::reverse","has source code","../src/core/slice/mod.rs.html"],["slice::split_last","has source code","../src/core/slice/mod.rs.html"],["slice::split_last","stable since","1.5.0"],["slice::split_last_mut","has source code","../src/core/slice/mod.rs.html"],["slice::split_last_mut","stable since","1.5.0"],["slice::swap","has source code","../src/core/slice/mod.rs.html"],["slice::windows","has source code","../src/core/slice/mod.rs.html"],["std","contains","prelude"],["std","contains","process"],["std","contains","ptr"]],"delete_links":[],"add_links":["../src/core/slice/mod.rs.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20slice%20%3D%20%5B'l'%2C%20'o'%2C%20'r'%2C%20'e'%2C%20'm'%5D%3B%0Alet%20mut%20iter%20%3D%20slice.chunks_exact(2)%3B%0Aassert_eq!(iter.next().unwrap()%2C%20%26%5B'l'%2C%20'o'%5D)%3B%0Aassert_eq!(iter.next().unwrap()%2C%20%26%5B'r'%2C%20'e'%5D)%3B%0Aassert!(iter.next().is_none())%3B%0Aassert_eq!(iter.remainder()%2C%20%26%5B'm'%5D)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20slice%20%3D%20%5B'l'%2C%20'o'%2C%20'r'%2C%20'e'%2C%20'm'%5D%3B%0Alet%20mut%20iter%20%3D%20slice.rchunks_exact(2)%3B%0Aassert_eq!(iter.next().unwrap()%2C%20%26%5B'e'%2C%20'm'%5D)%3B%0Aassert_eq!(iter.next().unwrap()%2C%20%26%5B'o'%2C%20'r'%5D)%3B%0Aassert!(iter.next().is_none())%3B%0Aassert_eq!(iter.remainder()%2C%20%26%5B'l'%5D)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20v%20%3D%20%26mut%20%5B0%2C%200%2C%200%2C%200%2C%200%5D%3B%0Alet%20mut%20count%20%3D%201%3B%0A%0Afor%20chunk%20in%20v.chunks_exact_mut(2)%20%7B%0A%20%20%20%20for%20elem%20in%20chunk.iter_mut()%20%7B%0A%20%20%20%20%20%20%20%20*elem%20%2B%3D%20count%3B%0A%20%20%20%20%7D%0A%20%20%20%20count%20%2B%3D%201%3B%0A%7D%0Aassert_eq!(v%2C%20%26%5B1%2C%201%2C%202%2C%202%2C%200%5D)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20v%20%3D%20%26mut%20%5B0%2C%200%2C%200%2C%200%2C%200%5D%3B%0Alet%20mut%20count%20%3D%201%3B%0A%0Afor%20chunk%20in%20v.rchunks_exact_mut(2)%20%7B%0A%20%20%20%20for%20elem%20in%20ch chunk.iter_mut()%20%7B%0A%20%20%20%20%20%20%20%20*elem%20%2B%3D%20count%3B%0A%20%20%20%20%7D%0A%20%20%20%20count%20%2B%3D%201%3B%0A%7D%0Aassert_eq!(v%2C%20%26%5B0%2C%202%2C%202%2C%201%2C%201%5D)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20v%20%3D%20%26mut%20%5B0%2C%200%2C%200%2C%200%2C%200%5D%3B%0Alet%20mut%20count%20%3D%201%3B%0A%0Afor%20chunk%20in%20v.rchunks_exact_mut(2)%20%7B%0A%20%20%20%20for%20elem%20in%20ch%20chunk.iter_mut()%20%7B%0A%20%20%20%20%20%20%20%20*elem%20%2B%3D%20count%3B%0A%","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20v%20%3D%20%26mut%20%5B0%2C%200%2C%200%2C%200%2C%200%5D%3B%0Alet%20mut%20count%20%3D%201%3B%0A%0Afor%20chunk%20in%20v.rchunks_exact_mut(2)%20%7B%0A%20%20%20%20for%20elem%20in%20ch%20chunk.iter_mut()%20%7B%0A%20%20%20%20%20%20%20%20*elem%20%2B%3D%20count%3B%0A%20%20%20%20%7D%0A%20%20%20%20count%20%2B%3D%201%3B%0A%7D%0Aassert_eq!(v%2C%20%26%5B0%2C%202%2C%202%2C%201%2C%201%5D)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20v%20%3D%20%26mut%20%5B0%2C%200%2C%200%2C%200%2C%200%5D%3B%0Alet%20mut%20count%20%3D%201%3B%0A%0Afor%20chunk%20in%20v.rchunks_exact_mut(2)%20%7B%0A%20%20%20%20for%20elem%20in%20chunk.iter_mut()%20%7B%0A%20%20%20%20%20%20%20%20*elem%20%2B%3D%20count%3B%0A%20%20%20%20%7D%0A%20%20%20%20count%20%2B%3D%201%3B%0A%7D%0Aassert_eq!(v%2C%20%26%5B0%2C%202%2C%202%2C%201%2C%201%5D)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20v%20%3D%20%5B10%2C%2040%2C%2030%5D%3B%0Aassert_eq!(Some(%2630)%2C%20v.last())%3B%0A%0Alet%20w%3A%20%26%5Bi32%5D%20%3D%20%26%5B%5D%3B%0Aassert_eq!(None%2C%20w.last())%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20%26%5B0%2C%201%2C%202%5D%3B%0A%0Aif%20let%20Some((last%2C%20elements))%20%3D%20x.split_last()%20%7B%0A%20%20%20%20assert_eq!(last%2C%20%262)%3B%0A%20%20%20%20assert_eq!(elements%2C%20%26%5B0%2C%201%5D)%3B%0A%7D%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20%26mut%20%5B0%2C%201%2C%202%5D%3B%0A%0Aif%20let%20Some((last%2C%20elements))%20%3D%20x.split_last_mut()%20%7B%0A%20%20%20%20*last%20%3D%203%3B%0A%20%20%20%20elements%5B0%5D%20%3D%204%3B%0A%20%20%20%20elements%5B1%5D%20%3D%205%3B%0A%7D%0Aassert_eq!(x%2C%20%26%5B4%2C%205%2C%203%5D)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20%26mut%20%5B0%2C%201%2C%202%5D%3B%0A%0Aif%20let%20Some(last)%20%3D%20x.last_mut()%20%7B%0A%20%20%20%20*last%20%3D%2010%3B%0A%7D%0Aassert_eq!(x%2C%20%26%5B0%2C%201%2C%2010%5D)%3B%0A%7D","prelude/index.html","process/index.html","ptr/index.html"],"metrics":{"escapeCount":1,"costTime":3613230,"totalUsage":{"prompt_tokens":553757,"completion_tokens":99091,"cached_tokens":0,"reasoning_tokens":43353},"chunkLength":18,"chunksInfo":[{"oldContextLength":527,"oldStrLength":36428,"newContextLength":527,"newStrLength":37959,"costTime":54776},{"oldContextLength":527,"oldStrLength":36537,"newContextLength":527,"newStrLength":36531,"costTime":169031},{"oldContextLength":527,"oldStrLength":18147,"newContextLength":527,"newStrLength":37345,"costTime":273486},{"oldContextLength":527,"oldStrLength":38359,"newContextLength":527,"newStrLength":38372,"costTime":316720},{"oldContextLength":527,"oldStrLength":37722,"newContextLength":527,"newStrLength":38440,"costTime":152161},{"oldContextLength":527,"oldStrLength":21126,"newContextLength":527,"newStrLength":35586,"costTime":40923},{"oldContextLength":527,"oldStrLength":39000,"newContextLength":527,"newStrLength":39000,"costTime":162781},{"oldContextLength":527,"oldStrLength":23922,"newContextLength":527,"newStrLength":39000,"costTime":226301},{"oldContextLength":527,"oldStrLength":39000,"newContextLength":527,"newStrLength":38945,"costTime":189896},{"oldContextLength":527,"oldStrLength":38951,"newContextLength":527,"newStrLength":39000,"costTime":270143},{"oldContextLength":527,"oldStrLength":39000,"newContextLength":527,"newStrLength":38994,"costTime":150621},{"oldContextLength":527,"oldStrLength":38854,"newContextLength":527,"newStrLength":38898,"costTime":146143},{"oldContextLength":527,"oldStrLength":39000,"newContextLength":527,"newStrLength":38948,"costTime":158290},{"oldContextLength":527,"oldStrLength":39000,"newContextLength":527,"newStrLength":38965,"costTime":192315},{"oldContextLength":527,"oldStrLength":38829,"newContextLength":527,"newStrLength":39000,"costTime":349164},{"oldContextLength":527,"oldStrLength":39000,"newContextLength":527,"newStrLength":28264,"costTime":281089},{"oldContextLength":527,"oldStrLength":38999,"newContextLength":527,"newStrLength":33840,"costTime":245061},{"oldContextLength":527,"oldStrLength":12951,"newContextLength":527,"newStrLength":13652,"costTime":234329}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-23T09:04:17.019Z","examGroup":"diff","examParams":{"windowLength":39000},"sourceId":"0d6461a4-e124-4575-9e32-2185b3e54aa1"}}