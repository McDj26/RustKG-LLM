{
  "create_time": "2025-03-22T18:22:41.414Z",
  "id": "f1a80dff-adf3-44db-ba4b-ae92e5879a04",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html",
  "previous_url": "D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\split\\output\\deepseek-r1-250120\\3f0f1c81-3846-4b68-93ec-513b95a22e61.json",
  "relations": [
    "contains",
    "has argument",
    "has associated type",
    "has declaration",
    "has description",
    "has example",
    "has full name",
    "has method",
    "has return type",
    "has stability",
    "has type",
    "has variant",
    "implements",
    "is a",
    "is a enum",
    "is a primitive type",
    "is a struct",
    "is a trait",
    "requires trait",
    "stable since"
  ],
  "delete_triples": [
    [
      "replace",
      "has stability",
      "nightly-only experimental (option_replace #51998)"
    ]
  ],
  "add_triples": [
    ["Borrow", "has method", "borrow"],
    ["Borrow", "is a trait", "trait"],
    ["BorrowMut", "has method", "borrow_mut"],
    ["BorrowMut", "is a trait", "trait"],
    ["Into", "has method", "into"],
    ["Into", "is a trait", "trait"],
    ["IntoIter", "is a struct", "struct"],
    ["Iter", "is a struct", "struct"],
    ["IterMut", "is a struct", "struct"],
    ["NoneError", "is a struct", "struct"],
    ["Option", "has variant", "None"],
    ["Option", "has variant", "Some"],
    ["Option", "stable since", "1.0.0"],
    ["Option<T>", "has method", "and"],
    ["Option<T>", "has method", "and_then"],
    ["Option<T>", "has method", "as_mut"],
    ["Option<T>", "has method", "as_pin_mut"],
    ["Option<T>", "has method", "as_pin_ref"],
    ["Option<T>", "has method", "as_ref"],
    ["Option<T>", "has method", "expect"],
    ["Option<T>", "has method", "filter"],
    ["Option<T>", "has method", "get_or_insert"],
    ["Option<T>", "has method", "get_or_insert_with"],
    ["Option<T>", "has method", "is_none"],
    ["Option<T>", "has method", "is_some"],
    ["Option<T>", "has method", "iter"],
    ["Option<T>", "has method", "iter_mut"],
    ["Option<T>", "has method", "map"],
    ["Option<T>", "has method", "map_or"],
    ["Option<T>", "has method", "map_or_else"],
    ["Option<T>", "has method", "ok_or"],
    ["Option<T>", "has method", "ok_or_else"],
    ["Option<T>", "has method", "or"],
    ["Option<T>", "has method", "or_else"],
    ["Option<T>", "has method", "replace"],
    ["Option<T>", "has method", "take"],
    ["Option<T>", "has method", "unwrap"],
    ["Option<T>", "has method", "unwrap_or"],
    ["Option<T>", "has method", "unwrap_or_else"],
    ["Option<T>", "has method", "xor"],
    ["Option<T>", "implements", "Clone"],
    ["Option<T>", "implements", "Copy"],
    ["Option<T>", "implements", "Debug"],
    ["Option<T>", "implements", "Default"],
    ["Option<T>", "implements", "Eq"],
    ["Option<T>", "implements", "From<&'a Option<T>>"],
    ["Option<T>", "implements", "From<&'a mut Option<T>>"],
    ["Option<T>", "implements", "From<T>"],
    ["Option<T>", "implements", "FromIterator<Option<A>>"],
    ["Option<T>", "implements", "Hash"],
    ["Option<T>", "implements", "IntoIterator"],
    ["Option<T>", "implements", "Ord"],
    ["Option<T>", "implements", "PartialEq<Option<T>>"],
    ["Option<T>", "implements", "PartialOrd<Option<T>>"],
    ["Option<T>", "implements", "Try"],
    ["TryInto", "has associated type", "Error"],
    ["TryInto", "has method", "try_into"],
    ["TryInto", "is a trait", "trait"],
    [
      "TryInto::try_into",
      "has stability",
      "nightly-only experimental (try_from #33417)"
    ],
    ["as_pin_mut", "has stability", "nightly-only experimental (pin #49150)"],
    ["as_pin_ref", "has stability", "nightly-only experimental (pin #49150)"],
    ["cloned", "has stability", "1.26.0"],
    ["option", "contains", "IntoIter"],
    ["option", "contains", "Iter"],
    ["option", "contains", "IterMut"],
    ["option", "contains", "NoneError"],
    ["option", "contains", "Option"],
    ["replace", "has stability", "1.31.0"],
    ["std", "contains", "option"]
  ],
  "delete_links": [],
  "add_links": [
    "../../src/core/borrow.rs.html",
    "../../src/core/convert.rs.html",
    "../../src/core/iter/traits.rs.html",
    "../../std/borrow/trait.Borrow.html",
    "../../std/borrow/trait.BorrowMut.html",
    "../../std/convert/trait.From.html",
    "../../std/convert/trait.Into.html",
    "../../std/convert/trait.TryFrom.html",
    "../../std/io/trait.Read.html",
    "../../std/io/trait.Write.html",
    "../../std/iter/trait.IntoIterator.html",
    "../../std/iter/trait.Iterator.html",
    "../../std/marker/trait.Sized.html",
    "../../std/result/enum.Result.html",
    "enum.Option.html",
    "struct.IntoIter.html",
    "struct.Iter.html",
    "struct.IterMut.html",
    "struct.NoneError.html",
    "struct.Option.html"
  ],
  "metrics": {
    "escapeCount": 0,
    "costTime": 918039,
    "totalUsage": {
      "prompt_tokens": 121736,
      "completion_tokens": 22777,
      "cached_tokens": 0,
      "reasoning_tokens": 18042
    },
    "chunkLength": 5,
    "chunksInfo": [
      {
        "oldContextLength": 527,
        "oldStrLength": 37489,
        "newContextLength": 527,
        "newStrLength": 39000,
        "costTime": 260358
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 37752,
        "newContextLength": 527,
        "newStrLength": 37752,
        "costTime": 67972
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 31206,
        "newContextLength": 527,
        "newStrLength": 37621,
        "costTime": 235924
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 38635,
        "newContextLength": 527,
        "newStrLength": 34249,
        "costTime": 69894
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 12087,
        "newContextLength": 527,
        "newStrLength": 9725,
        "costTime": 283891
      }
    ]
  },
  "model": "deepseek-r1-250120",
  "extraInfo": {
    "startTime": "2025-03-22T18:05:04.068Z",
    "examGroup": "diff",
    "examParams": { "windowLength": 39000 },
    "sourceId": "3f0f1c81-3846-4b68-93ec-513b95a22e61"
  }
}
