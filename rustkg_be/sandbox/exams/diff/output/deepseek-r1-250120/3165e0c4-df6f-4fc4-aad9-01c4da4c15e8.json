{
  "create_time": "2025-03-22T18:32:21.083Z",
  "id": "3165e0c4-df6f-4fc4-aad9-01c4da4c15e8",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html",
  "previous_url": "D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\split\\output\\deepseek-r1-250120\\3f0f1c81-3846-4b68-93ec-513b95a22e61.json",
  "relations": [
    "contains",
    "has argument",
    "has associated type",
    "has declaration",
    "has description",
    "has example",
    "has full name",
    "has method",
    "has return type",
    "has stability",
    "has type",
    "has variant",
    "implements",
    "is a",
    "is a enum",
    "is a primitive type",
    "is a struct",
    "is a trait",
    "requires trait",
    "stable since"
  ],
  "delete_triples": [["std::option::Option", "has stability", "unstable"]],
  "add_triples": [
    ["std::option", "contains", "IntoIter"],
    ["std::option", "contains", "Iter"],
    ["std::option", "contains", "IterMut"],
    ["std::option", "contains", "NoneError"],
    [
      "std::option::Option",
      "has description",
      "The Option type. See the module level documentation for more."
    ],
    ["std::option::Option", "has method", "and"],
    ["std::option::Option", "has method", "and_then"],
    ["std::option::Option", "has method", "as_mut"],
    ["std::option::Option", "has method", "as_pin_mut"],
    ["std::option::Option", "has method", "as_pin_ref"],
    ["std::option::Option", "has method", "as_ref"],
    ["std::option::Option", "has method", "expect"],
    ["std::option::Option", "has method", "filter"],
    ["std::option::Option", "has method", "get_or_insert"],
    ["std::option::Option", "has method", "get_or_insert_with"],
    ["std::option::Option", "has method", "is_none"],
    ["std::option::Option", "has method", "is_some"],
    ["std::option::Option", "has method", "iter"],
    ["std::option::Option", "has method", "iter_mut"],
    ["std::option::Option", "has method", "map"],
    ["std::option::Option", "has method", "map_or"],
    ["std::option::Option", "has method", "map_or_else"],
    ["std::option::Option", "has method", "ok_or"],
    ["std::option::Option", "has method", "ok_or_else"],
    ["std::option::Option", "has method", "or"],
    ["std::option::Option", "has method", "or_else"],
    ["std::option::Option", "has method", "replace"],
    ["std::option::Option", "has method", "take"],
    ["std::option::Option", "has method", "unwrap"],
    ["std::option::Option", "has method", "unwrap_or"],
    ["std::option::Option", "has method", "unwrap_or_else"],
    ["std::option::Option", "has method", "xor"],
    ["std::option::Option", "implements", "Clone"],
    ["std::option::Option", "implements", "Copy"],
    ["std::option::Option", "implements", "Debug"],
    ["std::option::Option", "implements", "Default"],
    ["std::option::Option", "implements", "Eq"],
    ["std::option::Option", "implements", "From<&'a Option<T>>"],
    ["std::option::Option", "implements", "From<&'a mut Option<T>>"],
    ["std::option::Option", "implements", "From<T>"],
    ["std::option::Option", "implements", "FromIterator<Option<A>>"],
    ["std::option::Option", "implements", "Hash"],
    ["std::option::Option", "implements", "IntoIterator"],
    ["std::option::Option", "implements", "Ord"],
    ["std::option::Option", "implements", "PartialEq<Option<T>>"],
    ["std::option::Option", "implements", "PartialOrd<Option<T>>"],
    ["std::option::Option", "implements", "Send"],
    ["std::option::Option", "implements", "Sync"],
    ["std::option::Option", "implements", "Try"],
    ["std::option::Option", "is a enum", "enum"],
    ["std::option::Option", "stable since", "1.0.0"],
    ["std::option::Option", "stable since", "1.31.0"]
  ],
  "delete_links": [],
  "add_links": [
    "enum.Option.html",
    "impl-Any.html",
    "impl-Borrow.html",
    "impl-BorrowMut.html",
    "impl-Clone.html",
    "impl-Copy.html",
    "impl-Debug.html",
    "impl-Default.html",
    "impl-Eq.html",
    "impl-From.html",
    "impl-Hash.html",
    "impl-Into.html",
    "impl-IntoIterator.html",
    "impl-Ord.html",
    "impl-PartialEq.html",
    "impl-PartialOrd.html",
    "impl-Send.html",
    "impl-Sync.html",
    "impl-ToOwned.html",
    "impl-Try.html",
    "impl-TryFrom.html",
    "impl-TryInto.html",
    "struct.IntoIter.html",
    "struct.Iter.html",
    "struct.IterMut.html",
    "struct.NoneError.html"
  ],
  "metrics": {
    "escapeCount": 2,
    "costTime": 702466,
    "totalUsage": {
      "prompt_tokens": 122287,
      "completion_tokens": 19909,
      "cached_tokens": 0,
      "reasoning_tokens": 15180
    },
    "chunkLength": 5,
    "chunksInfo": [
      {
        "oldContextLength": 527,
        "oldStrLength": 37489,
        "newContextLength": 527,
        "newStrLength": 39000,
        "costTime": 85711
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 37752,
        "newContextLength": 527,
        "newStrLength": 37752,
        "costTime": 258230
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 31206,
        "newContextLength": 527,
        "newStrLength": 37621,
        "costTime": 59053
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 38635,
        "newContextLength": 527,
        "newStrLength": 34249,
        "costTime": 92790
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 12087,
        "newContextLength": 527,
        "newStrLength": 9725,
        "costTime": 206682
      }
    ]
  },
  "model": "deepseek-r1-250120",
  "extraInfo": {
    "startTime": "2025-03-22T18:20:01.974Z",
    "examGroup": "diff",
    "examParams": { "windowLength": 39000 },
    "sourceId": "3f0f1c81-3846-4b68-93ec-513b95a22e61"
  }
}
