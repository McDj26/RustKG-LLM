{
  "create_time": "2025-03-22T18:18:39.000Z",
  "id": "c6f95bb1-3886-417a-af15-1e8aa3762989",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html",
  "previous_url": "D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\split\\output\\deepseek-r1-250120\\3f0f1c81-3846-4b68-93ec-513b95a22e61.json",
  "relations": [
    "contains",
    "has argument",
    "has associated type",
    "has declaration",
    "has description",
    "has example",
    "has full name",
    "has method",
    "has return type",
    "has stability",
    "has type",
    "has variant",
    "implements",
    "is a",
    "is a enum",
    "is a primitive type",
    "is a struct",
    "is a trait",
    "requires trait",
    "stable since"
  ],
  "delete_triples": [],
  "add_triples": [
    ["&Option<T>", "has associated type", "IntoIter = Iter<T>"],
    ["&Option<T>", "has associated type", "Item = &'a T"],
    ["&mut Option<T>", "has associated type", "IntoIter = IterMut<T>"],
    ["&mut Option<T>", "has associated type", "Item = &'a mut T"],
    ["None", "has description", "No value"],
    [
      "Option",
      "has description",
      "The `Option` type. See the module level documentation for more."
    ],
    ["Option", "has method", "and"],
    ["Option", "has method", "and_then"],
    ["Option", "has method", "as_mut"],
    ["Option", "has method", "as_pin_mut"],
    ["Option", "has method", "as_pin_ref"],
    ["Option", "has method", "as_ref"],
    ["Option", "has method", "deref"],
    ["Option", "has method", "expect"],
    ["Option", "has method", "filter"],
    ["Option", "has method", "get_or_insert"],
    ["Option", "has method", "get_or_insert_with"],
    ["Option", "has method", "into_iter"],
    ["Option", "has method", "is_none"],
    ["Option", "has method", "is_some"],
    ["Option", "has method", "iter"],
    ["Option", "has method", "iter_mut"],
    ["Option", "has method", "map"],
    ["Option", "has method", "map_or"],
    ["Option", "has method", "map_or_else"],
    ["Option", "has method", "ok_or"],
    ["Option", "has method", "ok_or_else"],
    ["Option", "has method", "or"],
    ["Option", "has method", "or_else"],
    ["Option", "has method", "replace"],
    ["Option", "has method", "take"],
    ["Option", "has method", "transpose"],
    ["Option", "has method", "unwrap"],
    ["Option", "has method", "unwrap_or"],
    ["Option", "has method", "unwrap_or_else"],
    ["Option", "has method", "xor"],
    ["Option", "has variant", "None"],
    ["Option", "has variant", "Some"],
    ["Option", "implements", "From<&'a Option<T>>"],
    ["Option", "implements", "From<&'a mut Option<T>>"],
    ["Option", "implements", "From<T>"],
    ["Option", "implements", "FromIterator<Option<A>>"],
    ["Option", "implements", "IntoIterator"],
    ["Option", "implements", "Try"],
    ["Option", "is a enum", "enum"],
    ["Option<T>", "has associated type", "IntoIter = IntoIter<T>"],
    ["Option<T>", "has associated type", "Item = T"],
    ["Some", "has description", "Some value `T`"],
    ["and", "has return type", "Option<U>"],
    ["and_then", "has return type", "Option<U>"],
    ["as_mut", "has return type", "Option<&mut T>"],
    ["as_pin_mut", "has return type", "Option<Pin<&'a mut T>>"],
    ["as_pin_ref", "has return type", "Option<Pin<&'a T>>"],
    ["as_ref", "has return type", "Option<&T>"],
    ["deref", "has return type", "Option<&<T as Deref>::Target>"],
    ["expect", "has argument", "msg: &str"],
    ["filter", "has return type", "Option<T>"],
    ["get_or_insert", "has return type", "&mut T"],
    ["get_or_insert_with", "has return type", "&mut T"],
    ["into_iter (mut)", "has return type", "IterMut<T>"],
    ["into_iter (owned)", "has return type", "IntoIter<T>"],
    ["into_iter (ref)", "has return type", "Iter<T>"],
    ["is_none", "has return type", "bool"],
    ["is_some", "has return type", "bool"],
    ["iter", "has return type", "Iter<T>"],
    ["iter_mut", "has return type", "IterMut<T>"],
    ["map", "has return type", "Option<U>"],
    ["map_or", "has argument", "default: U"],
    ["map_or_else", "has argument", "default: D"],
    ["ok_or", "has return type", "Result<T, E>"],
    ["ok_or_else", "has return type", "Result<T, E>"],
    ["or", "has return type", "Option<T>"],
    ["or_else", "has return type", "Option<T>"],
    ["replace", "stable since", "1.31.0"],
    ["take", "has return type", "Option<T>"],
    ["transpose", "has stability", "nightly"],
    ["transpose", "stable since", "None"],
    ["unwrap", "has return type", "T"],
    ["unwrap_or", "has argument", "def: T"],
    ["unwrap_or_else", "has argument", "f: F"],
    ["xor", "has return type", "Option<T>"],
    ["xor", "has stability", "nightly"],
    ["xor", "stable since", "None"]
  ],
  "delete_links": [],
  "add_links": [
    "enum.Option.html",
    "method.and",
    "method.and_then",
    "method.as_mut",
    "method.as_pin_mut",
    "method.as_pin_ref",
    "method.as_ref",
    "method.deref",
    "method.expect",
    "method.filter",
    "method.get_or_insert",
    "method.get_or_insert_with",
    "method.is_none",
    "method.is_some",
    "method.iter",
    "method.iter_mut",
    "method.map",
    "method.map_or",
    "method.map_or_else",
    "method.ok_or",
    "method.ok_or_else",
    "method.or",
    "method.or_else",
    "method.replace",
    "method.take",
    "method.transpose",
    "method.unwrap",
    "method.unwrap_or",
    "method.unwrap_or_else",
    "method.xor",
    "src/core/option.rs.html",
    "struct.IntoIter.html",
    "struct.Iter.html",
    "struct.IterMut.html",
    "struct.NoneError.html"
  ],
  "metrics": {
    "escapeCount": 1,
    "costTime": 677389,
    "totalUsage": {
      "prompt_tokens": 122545,
      "completion_tokens": 16333,
      "cached_tokens": 0,
      "reasoning_tokens": 12869
    },
    "chunkLength": 5,
    "chunksInfo": [
      {
        "oldContextLength": 527,
        "oldStrLength": 37489,
        "newContextLength": 527,
        "newStrLength": 39000,
        "costTime": 93064
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 37752,
        "newContextLength": 527,
        "newStrLength": 37752,
        "costTime": 166072
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 31206,
        "newContextLength": 527,
        "newStrLength": 37621,
        "costTime": 83761
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 38635,
        "newContextLength": 527,
        "newStrLength": 34249,
        "costTime": 123507
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 12087,
        "newContextLength": 527,
        "newStrLength": 9725,
        "costTime": 210985
      }
    ]
  },
  "model": "deepseek-r1-250120",
  "extraInfo": {
    "startTime": "2025-03-22T18:05:02.829Z",
    "examGroup": "diff",
    "examParams": { "windowLength": 39000 },
    "sourceId": "3f0f1c81-3846-4b68-93ec-513b95a22e61"
  }
}
