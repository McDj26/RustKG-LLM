{"create_time":"2025-03-15T12:05:52.953Z","id":"21095366-39ae-411e-a3f8-b0413d9b6e15","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/proc_macro/enum.TokenTree.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\output\\deepseek-r1-250120\\03c49e5d-7c42-4c3e-b008-7996972de0a4.json","relations":["converts to","defined in","has argument","has declaration","has description","has full name","has method","has return type","has stability","has trait implementation","has variant","implements","is a","is predecessor of","is successor of","stable since"],"delete_triples":[["TokenTree","has description","Returns the span of this tree, delegating to the span method of the contained token or a delimited stream."]],"add_triples":[["BorrowMut","has method","borrow_mut"],["From","has method","from"],["Group","converts to","TokenTree"],["Ident","converts to","TokenTree"],["Into","has method","into"],["Literal","converts to","TokenTree"],["Punct","converts to","TokenTree"],["T","implements","Any"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","Into"],["T","implements","TryInto"],["TokenStream","implements","FromIterator<TokenTree>"],["TokenTree","has description","Prints the token tree as a string that is supposed to be losslessly convertible back into the same token tree (modulo spans), except for possibly TokenTree::Groups with Delimiter::None delimiters and negative numeric literals."],["TokenTree","implements","!Send"],["TokenTree","implements","!Sync"],["TokenTree","implements","Extend<TokenTree>"],["TokenTree","implements","FromIterator<TokenTree>"],["TryInto","has method","try_into"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has return type","T"],["into","has description","Performs the conversion."],["into","has return type","U"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, Error>"]],"delete_links":[],"add_links":["../alloc/string/struct.String.html","../core/any/trait.Any.html","../core/borrow/trait.BorrowMut.html","../core/convert/trait.From.html","../core/convert/trait.Into.html","../core/convert/trait.TryFrom.html","../core/convert/trait.TryInto.html","../core/fmt/trait.Debug.html","../core/iter/traits/trait.FromIterator.html","../core/marker/trait.Sized.html","../core/marker/trait.Sync.html","../src/core/convert.rs.html","../src/proc_macro/lib.rs.html","trait.MultiSpan.html"],"metrics":{"escapeCount":0,"costTime":1756352,"totalUsage":{"prompt_tokens":49388,"completion_tokens":45994,"cached_tokens":0,"reasoning_tokens":42579},"chunkLength":8,"chunksInfo":[{"oldContextLength":527,"oldStrLength":6505,"newContextLength":527,"newStrLength":6726,"costTime":120387},{"oldContextLength":527,"oldStrLength":7000,"newContextLength":527,"newStrLength":5724,"costTime":108668},{"oldContextLength":527,"oldStrLength":7000,"newContextLength":527,"newStrLength":4866,"costTime":243079},{"oldContextLength":527,"oldStrLength":7000,"newContextLength":527,"newStrLength":6643,"costTime":79354},{"oldContextLength":527,"oldStrLength":3553,"newContextLength":527,"newStrLength":4807,"costTime":178229},{"oldContextLength":527,"oldStrLength":2209,"newContextLength":527,"newStrLength":4722,"costTime":430358},{"oldContextLength":527,"oldStrLength":7000,"newContextLength":527,"newStrLength":7000,"costTime":153728},{"oldContextLength":527,"oldStrLength":507,"newContextLength":527,"newStrLength":507,"costTime":442549}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-15T11:36:31.373Z","examGroup":"diff","examParams":{"windowLength":7000},"sourceId":"03c49e5d-7c42-4c3e-b008-7996972de0a4"}}