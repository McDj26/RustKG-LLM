{
  "create_time": "2025-03-22T19:18:20.995Z",
  "id": "f3c562b7-1f25-4567-a440-672e8e4cec8d",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html",
  "previous_url": "D:\\Lessons\\projects\\rustKG\\rustkg_be\\sandbox\\exams\\split\\output\\deepseek-r1-250120\\3f0f1c81-3846-4b68-93ec-513b95a22e61.json",
  "relations": [
    "contains",
    "has argument",
    "has associated type",
    "has declaration",
    "has description",
    "has example",
    "has full name",
    "has method",
    "has return type",
    "has stability",
    "has type",
    "has variant",
    "implements",
    "is a",
    "is a enum",
    "is a primitive type",
    "is a struct",
    "is a trait",
    "requires trait",
    "stable since"
  ],
  "delete_triples": [],
  "add_triples": [
    ["&'a Option<T>", "has associated type", "IntoIter = Iter<'a, T>"],
    ["&'a Option<T>", "has associated type", "Item = &'a T"],
    ["&'a Option<T>", "has method", "into_iter"],
    ["&'a Option<T>", "implements", "IntoIterator"],
    ["&'a Option<T>", "stable since", "1.4.0"],
    ["&'a Option<T>::into_iter", "has return type", "Iter<'a, T>"],
    ["&'a mut Option<T>", "has associated type", "IntoIter = IterMut<'a, T>"],
    ["&'a mut Option<T>", "has associated type", "Item = &'a mut T"],
    ["&'a mut Option<T>", "has method", "into_iter"],
    ["&'a mut Option<T>", "implements", "IntoIterator"],
    ["&'a mut Option<T>", "stable since", "1.4.0"],
    ["&'a mut Option<T>::into_iter", "has return type", "IterMut<'a, T>"],
    [
      "IntoIter",
      "has description",
      "An iterator over the value in Some variant of an Option."
    ],
    [
      "Iter",
      "has description",
      "An iterator over a reference to the Some variant of an Option."
    ],
    ["Iter<'a, T>", "is a", "struct"],
    [
      "IterMut",
      "has description",
      "An iterator over a mutable reference to the Some variant of an Option."
    ],
    ["IterMut<'a, T>", "is a", "struct"],
    [
      "NoneError",
      "has description",
      "The error type that results from applying the try operator (?) to a None value."
    ],
    ["Option", "has associated type", "IntoIter = IntoIter<T>"],
    ["Option", "has associated type", "Item = T"],
    ["Option", "has method", "and"],
    ["Option", "has method", "and_then"],
    ["Option", "has method", "as_mut"],
    ["Option", "has method", "as_pin_mut"],
    ["Option", "has method", "as_pin_ref"],
    ["Option", "has method", "as_ref"],
    ["Option", "has method", "cloned"],
    ["Option", "has method", "cmp"],
    ["Option", "has method", "deref"],
    ["Option", "has method", "eq"],
    ["Option", "has method", "expect"],
    ["Option", "has method", "filter"],
    ["Option", "has method", "fmt"],
    ["Option", "has method", "get_or_insert"],
    ["Option", "has method", "get_or_insert_with"],
    ["Option", "has method", "is_none"],
    ["Option", "has method", "is_some"],
    ["Option", "has method", "iter"],
    ["Option", "has method", "iter_mut"],
    ["Option", "has method", "map"],
    ["Option", "has method", "map_or"],
    ["Option", "has method", "map_or_else"],
    ["Option", "has method", "ne"],
    ["Option", "has method", "ok_or"],
    ["Option", "has method", "ok_or_else"],
    ["Option", "has method", "or"],
    ["Option", "has method", "or_else"],
    ["Option", "has method", "replace"],
    ["Option", "has method", "take"],
    ["Option", "has method", "transpose"],
    ["Option", "has method", "unwrap"],
    ["Option", "has method", "unwrap_or"],
    ["Option", "has method", "unwrap_or_default"],
    ["Option", "has method", "unwrap_or_else"],
    ["Option", "has method", "xor"],
    ["Option", "has variant", "None"],
    ["Option", "has variant", "Some"],
    ["Option", "implements", "Clone"],
    ["Option", "implements", "Copy"],
    ["Option", "implements", "Debug"],
    ["Option", "implements", "Default"],
    ["Option", "implements", "Eq"],
    ["Option", "implements", "From<&'a Option<T>>"],
    ["Option", "implements", "From<&'a mut Option<T>>"],
    ["Option", "implements", "From<T>"],
    ["Option", "implements", "FromIterator<Option<A>>"],
    ["Option", "implements", "Hash"],
    ["Option", "implements", "IntoIterator"],
    ["Option", "implements", "Ord"],
    ["Option", "implements", "PartialEq<Option<T>>"],
    ["Option", "implements", "PartialOrd<Option<T>>"],
    ["Option", "implements", "Send"],
    ["Option", "implements", "Sync"],
    ["Option", "implements", "Try"],
    ["Option", "stable since", "1.0.0"],
    ["Option::as_pin_mut", "has return type", "Option<Pin<&mut T>>"],
    [
      "Option::as_pin_mut",
      "has stability",
      "nightly-only experimental API (pin #49150)"
    ],
    ["Option::as_pin_ref", "has return type", "Option<Pin<&T>>"],
    [
      "Option::as_pin_ref",
      "has stability",
      "nightly-only experimental API (pin #49150)"
    ],
    ["Option::clone_from", "has argument", "source: &Self"],
    [
      "Option::clone_from",
      "has description",
      "Performs copy-assignment from source."
    ],
    ["Option::clone_from", "has stability", "1.31.0"],
    ["Option::cloned", "has return type", "Option<T>"],
    ["Option::cloned", "stable since", "1.26.0"],
    ["Option::cmp", "has argument", "other: &Option<T>"],
    ["Option::cmp", "has return type", "Ordering"],
    ["Option::eq", "has argument", "other: &Option<T>"],
    ["Option::eq", "has return type", "bool"],
    ["Option::expect", "has argument", "msg: &str"],
    ["Option::expect", "has return type", "T"],
    ["Option::filter", "has argument", "predicate: P"],
    ["Option::filter", "has return type", "Option<T>"],
    ["Option::filter", "stable since", "1.27.0"],
    ["Option::fmt", "has argument", "f: &mut Formatter"],
    ["Option::fmt", "has return type", "Result<(), Error>"],
    ["Option::into_iter", "has return type", "IntoIter<T>"],
    ["Option::map", "has argument", "f: F"],
    ["Option::map", "has return type", "Option<U>"],
    ["Option::map_or", "has argument", "default: U"],
    ["Option::map_or", "has argument", "f: F"],
    ["Option::map_or", "has return type", "U"],
    ["Option::ne", "has argument", "other: &Option<T>"],
    ["Option::ne", "has return type", "bool"],
    ["Option::or", "has argument", "optb: Option<T>"],
    ["Option::or", "has return type", "Option<T>"],
    ["Option::replace", "has argument", "value: T"],
    ["Option::replace", "has return type", "Option<T>"],
    ["Option::replace", "has stability", "1.31.0"],
    ["Option::unwrap", "has return type", "T"],
    ["Option::unwrap_or", "has argument", "def: T"],
    ["Option::unwrap_or", "has return type", "T"],
    ["Option::unwrap_or_else", "has argument", "f: F"],
    ["Option::unwrap_or_else", "has return type", "T"],
    ["Option::xor", "has argument", "optb: Option<T>"],
    ["Option::xor", "has return type", "Option<T>"],
    [
      "Option::xor",
      "has stability",
      "nightly-only experimental API (option_xor #50512)"
    ],
    ["T", "implements", "TryInto<U>"],
    ["U", "implements", "TryFrom<T>"],
    ["option", "contains", "IntoIter"],
    ["option", "contains", "Iter"],
    ["option", "contains", "IterMut"],
    ["option", "contains", "NoneError"]
  ],
  "delete_links": [],
  "add_links": [
    "../../src/core/convert.rs.html",
    "../../src/core/option.rs.html",
    "../../std/cmp/trait.Ord.html",
    "../../std/cmp/trait.PartialEq.html",
    "../../std/convert/trait.TryFrom.html",
    "../../std/convert/trait.TryInto.html",
    "../../std/fmt/trait.Debug.html",
    "enum.Option.html",
    "https://github.com/rust-lang/rust/issues/50512",
    "impl-Clone",
    "impl-Copy",
    "impl-Debug",
    "impl-Default",
    "impl-Eq",
    "impl-From<&'a Option<T>>",
    "impl-From<&'a mut Option<T>>",
    "impl-From<T>",
    "impl-FromIterator<Option<A>>",
    "impl-Hash",
    "impl-IntoIterator",
    "impl-IntoIterator.html",
    "impl-Ord",
    "impl-PartialEq%3COption%3CT%3E%3E",
    "impl-PartialEq<Option<T>>",
    "impl-PartialOrd<Option<T>>",
    "impl-Send",
    "impl-Sync",
    "impl-Try",
    "struct.IntoIter.html",
    "struct.Iter.html",
    "struct.IterMut.html",
    "struct.NoneError.html",
    "struct.Pin.html"
  ],
  "metrics": {
    "escapeCount": 1,
    "costTime": 3625316,
    "totalUsage": {
      "prompt_tokens": 159258,
      "completion_tokens": 115929,
      "cached_tokens": 0,
      "reasoning_tokens": 90100
    },
    "chunkLength": 22,
    "chunksInfo": [
      {
        "oldContextLength": 527,
        "oldStrLength": 6938,
        "newContextLength": 527,
        "newStrLength": 7000,
        "costTime": 268678
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 4568,
        "newContextLength": 527,
        "newStrLength": 6017,
        "costTime": 287367
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 7000,
        "newContextLength": 527,
        "newStrLength": 7000,
        "costTime": 210167
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 6025,
        "newContextLength": 527,
        "newStrLength": 6025,
        "costTime": 201585
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 6137,
        "newContextLength": 527,
        "newStrLength": 6137,
        "costTime": 74747
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 7000,
        "newContextLength": 527,
        "newStrLength": 7000,
        "costTime": 256198
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 3440,
        "newContextLength": 527,
        "newStrLength": 3440,
        "costTime": 112912
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 5292,
        "newContextLength": 527,
        "newStrLength": 5292,
        "costTime": 134225
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 6251,
        "newContextLength": 527,
        "newStrLength": 5975,
        "costTime": 189986
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 7000,
        "newContextLength": 527,
        "newStrLength": 6941,
        "costTime": 145996
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 6523,
        "newContextLength": 527,
        "newStrLength": 6525,
        "costTime": 81229
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 2707,
        "newContextLength": 527,
        "newStrLength": 7000,
        "costTime": 108630
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 5012,
        "newContextLength": 527,
        "newStrLength": 7000,
        "costTime": 109307
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 4689,
        "newContextLength": 527,
        "newStrLength": 5156,
        "costTime": 65375
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 5759,
        "newContextLength": 527,
        "newStrLength": 7000,
        "costTime": 195794
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 5764,
        "newContextLength": 527,
        "newStrLength": 6953,
        "costTime": 57232
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 6547,
        "newContextLength": 527,
        "newStrLength": 6993,
        "costTime": 45890
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 7000,
        "newContextLength": 527,
        "newStrLength": 6851,
        "costTime": 187417
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 6822,
        "newContextLength": 527,
        "newStrLength": 2612,
        "costTime": 210902
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 6625,
        "newContextLength": 527,
        "newStrLength": 3722,
        "costTime": 255691
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 2862,
        "newContextLength": 527,
        "newStrLength": 500,
        "costTime": 110013
      },
      {
        "oldContextLength": 527,
        "oldStrLength": 4601,
        "newContextLength": 527,
        "newStrLength": 4601,
        "costTime": 315975
      }
    ]
  },
  "model": "deepseek-r1-250120",
  "extraInfo": {
    "startTime": "2025-03-22T18:17:16.941Z",
    "examGroup": "diff",
    "examParams": { "windowLength": 7000 },
    "sourceId": "3f0f1c81-3846-4b68-93ec-513b95a22e61"
  }
}
