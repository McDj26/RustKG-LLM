{"create_time":"2025-03-11T18:40:49.494Z","id":"06a226a1-26cc-40da-8bea-64687cdae21f","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/num/struct.NonZeroU64.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\output\\deepseek-r1-250120\\7c6faca8-74a2-4d34-a56e-3ac3bfeb2137.json","relations":["has argument","has attribute","has declaration","has description","has full name","has return type","has type","implements","is a","is predecessor of","is successor of","stable since"],"delete_triples":[],"add_triples":[["NonZeroU64","implements","From<NonZeroU64>"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an `Ordering` between `self` and `other`."],["cmp","has full name","std::num::NonZeroU64::cmp"],["cmp","has return type","Ordering"],["cmp","is a","function"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for `self` and `other` values to be equal, and is used by `==`."],["eq","has full name","std::num::NonZeroU64::eq"],["eq","has return type","bool"],["eq","is a","function"],["f","has type","&mut std::fmt::Formatter"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has full name","std::num::NonZeroU64::fmt"],["fmt","has return type","std::result::Result<(), std::fmt::Error>"],["fmt","is a","function"],["ge","has full name","std::num::NonZeroU64::ge"],["ge","is a","function"],["gt","has argument","other"],["gt","has argument","self"],["gt","has description","This method tests greater than (for `self` and `other`) and is used by the `>` operator. Read more"],["gt","has full name","std::num::NonZeroU64::gt"],["gt","has return type","bool"],["gt","is a","function"],["le","has argument","other"],["le","has argument","self"],["le","has description","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. Read more"],["le","has full name","std::num::NonZeroU64::le"],["le","has return type","bool"],["le","is a","function"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for `self` and `other`) and is used by the `<` operator. Read more"],["lt","has full name","std::num::NonZeroU64::lt"],["lt","has return type","bool"],["lt","is a","function"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","has full name","std::num::NonZeroU64::max"],["max","has return type","NonZeroU64"],["max","is a","function"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","has full name","std::num::NonZeroU64::min"],["min","has return type","NonZeroU64"],["min","is a","function"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for `self` and `other` values to be not equal, and is used by `!=`."],["ne","has full name","std::num::NonZeroU64::ne"],["ne","has return type","bool"],["ne","is a","function"],["new","has description","Create a non - zero if the given value is not zero."],["new_unchecked","has description","Create a non - zero without checking the value. The value must not be zero."],["other","has type","&NonZeroU64"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between `self` and `other` values if one exists. Read more"],["partial_cmp","has full name","std::num::NonZeroU64::partial_cmp"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","function"],["self","has type","&NonZeroU64"]],"delete_links":["../../src/core/num/mod.rs.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.PartialOrd.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Binary.html","../../std/fmt/trait.Debug.html","../../std/result/enum.Result.html","../primitive.unit.html"],"add_links":["../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/num/mod.rs.html","../../std/any/struct.TypeId.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.LowerHex.html","../../std/fmt/trait.Octal.html","../../std/fmt/trait.UpperHex.html","../../std/hash/trait.Hash.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/num/struct.NonZeroU64.html","../../std/option/enum.Option.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.reference.html","../primitive.u64.html","enum.FpCategory.html"],"metrics":{"escapeCount":0,"costTime":602857,"totalUsage":{"prompt_tokens":99680,"completion_tokens":32936,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":21,"chunksInfo":[{"oldContextLength":527,"oldStrLength":474,"newContextLength":527,"newStrLength":537,"costTime":14046},{"oldContextLength":0,"oldStrLength":0,"newContextLength":527,"newStrLength":19,"costTime":13470},{"oldContextLength":527,"oldStrLength":1667,"newContextLength":527,"newStrLength":1999,"costTime":16891},{"oldContextLength":527,"oldStrLength":1671,"newContextLength":527,"newStrLength":1939,"costTime":16222},{"oldContextLength":527,"oldStrLength":1938,"newContextLength":527,"newStrLength":1833,"costTime":20755},{"oldContextLength":527,"oldStrLength":1996,"newContextLength":527,"newStrLength":1731,"costTime":22867},{"oldContextLength":527,"oldStrLength":1977,"newContextLength":527,"newStrLength":1867,"costTime":24192},{"oldContextLength":527,"oldStrLength":1954,"newContextLength":527,"newStrLength":1978,"costTime":22980},{"oldContextLength":527,"oldStrLength":1999,"newContextLength":527,"newStrLength":1988,"costTime":25959},{"oldContextLength":527,"oldStrLength":1618,"newContextLength":527,"newStrLength":1917,"costTime":22799},{"oldContextLength":527,"oldStrLength":1663,"newContextLength":527,"newStrLength":1995,"costTime":40191},{"oldContextLength":527,"oldStrLength":1125,"newContextLength":527,"newStrLength":2000,"costTime":32121},{"oldContextLength":527,"oldStrLength":1701,"newContextLength":527,"newStrLength":1933,"costTime":32132},{"oldContextLength":527,"oldStrLength":1810,"newContextLength":527,"newStrLength":1929,"costTime":36662},{"oldContextLength":527,"oldStrLength":1765,"newContextLength":527,"newStrLength":1761,"costTime":35098},{"oldContextLength":527,"oldStrLength":1983,"newContextLength":527,"newStrLength":1904,"costTime":34663},{"oldContextLength":527,"oldStrLength":1911,"newContextLength":527,"newStrLength":1981,"costTime":41655},{"oldContextLength":527,"oldStrLength":710,"newContextLength":527,"newStrLength":426,"costTime":38295},{"oldContextLength":527,"oldStrLength":33,"newContextLength":527,"newStrLength":37,"costTime":36002},{"oldContextLength":527,"oldStrLength":418,"newContextLength":527,"newStrLength":418,"costTime":37228},{"oldContextLength":527,"oldStrLength":418,"newContextLength":527,"newStrLength":418,"costTime":38629}]},"model":"doubao-1-5-pro-32k-250115","extraInfo":{"startTime":"2025-03-11T18:30:42.999Z","examGroup":"diff","sourceId":"7c6faca8-74a2-4d34-a56e-3ac3bfeb2137"}}