{"create_time":"2025-03-11T17:30:37.752Z","id":"47e91c29-e0d4-4713-a477-c6c15b097eaf","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/num/struct.NonZeroU64.html","previous_url":"D:\\Lessons\\projects\\rustKG\\rustkg_be\\output\\deepseek-r1-250120\\7c6faca8-74a2-4d34-a56e-3ac3bfeb2137.json","relations":["has argument","has attribute","has declaration","has description","has full name","has return type","has type","implements","is a","is predecessor of","is successor of","stable since","stable since implementation of From<NonZeroU64>"],"delete_triples":[["NonZeroU64::clone","has description","Returns a copy of the value."],["NonZeroU64::clone","has full name","std::num::NonZeroU64::clone"],["NonZeroU64::clone","has return type","NonZeroU64"],["NonZeroU64::clone","is a","function"],["NonZeroU64::clone_from","has argument","source"],["NonZeroU64::clone_from","has description","Performs copy - assignment from source."],["NonZeroU64::clone_from","has full name","std::num::NonZeroU64::clone_from"],["NonZeroU64::clone_from","is a","function"],["NonZeroU64::clone_from","stable since","1.0.0"],["source","has type","&NonZeroU64"]],"add_triples":[["FpCategory","has description","A classification of floating point numbers."],["FpCategory","is a","Enum"],["NonZeroU64","implements","From<NonZeroU64>"],["NonZeroU64","implements","u64"],["NonZeroU64","stable since implementation of From<NonZeroU64>","1.31.0"],["NonZeroU64::cmp","has argument","other"],["NonZeroU64::cmp","has description","This method returns an `Ordering` between `self` and `other`."],["NonZeroU64::cmp","has full name","std::num::NonZeroU64::cmp"],["NonZeroU64::cmp","has return type","Ordering"],["NonZeroU64::cmp","is a","function"],["NonZeroU64::fmt","has argument","f"],["NonZeroU64::fmt","has description","Formats the value using the given formatter."],["NonZeroU64::fmt","has full name","std::num::NonZeroU64::fmt"],["NonZeroU64::fmt","has return type","std::result::Result<(), std::fmt::Error>"],["NonZeroU64::fmt","is a","function"],["NonZeroU64::ge","has argument","other"],["NonZeroU64::ge","has description","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator."],["NonZeroU64::ge","has full name","std::num::NonZeroU64::ge"],["NonZeroU64::ge","has return type","bool"],["NonZeroU64::ge","is a","function"],["NonZeroU64::gt","has argument","other"],["NonZeroU64::gt","has description","This method tests greater than (for `self` and `other`) and is used by the `>` operator."],["NonZeroU64::gt","has full name","std::num::NonZeroU64::gt"],["NonZeroU64::gt","has return type","bool"],["NonZeroU64::gt","is a","function"],["NonZeroU64::le","has argument","other"],["NonZeroU64::le","has description","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator."],["NonZeroU64::le","has full name","std::num::NonZeroU64::le"],["NonZeroU64::le","has return type","bool"],["NonZeroU64::le","is a","function"],["NonZeroU64::lt","has argument","other"],["NonZeroU64::lt","has description","This method tests less than (for `self` and `other`) and is used by the `<` operator."],["NonZeroU64::lt","has full name","std::num::NonZeroU64::lt"],["NonZeroU64::lt","has return type","bool"],["NonZeroU64::lt","is a","function"],["NonZeroU64::max","has argument","other"],["NonZeroU64::max","has description","Compares and returns the maximum of two values."],["NonZeroU64::max","has full name","std::num::NonZeroU64::max"],["NonZeroU64::max","has return type","NonZeroU64"],["NonZeroU64::max","is a","function"],["NonZeroU64::max","stable since","1.21.0"],["NonZeroU64::min","has argument","other"],["NonZeroU64::min","has description","Compares and returns the minimum of two values."],["NonZeroU64::min","has full name","std::num::NonZeroU64::min"],["NonZeroU64::min","has return type","NonZeroU64"],["NonZeroU64::min","is a","function"],["NonZeroU64::min","stable since","1.21.0"],["NonZeroU64::partial_cmp","has argument","other"],["NonZeroU64::partial_cmp","has description","This method returns an ordering between `self` and `other` values if one exists."],["NonZeroU64::partial_cmp","has full name","std::num::NonZeroU64::partial_cmp"],["NonZeroU64::partial_cmp","has return type","Option<Ordering>"],["NonZeroU64::partial_cmp","is a","function"],["f","has type","&mut std::fmt::Formatter"],["new","has description","Create a non - zero if the given value is not zero."],["new_unchecked","has description","Create a non - zero without checking the value. The value must not be zero."],["other","has type","&NonZeroU64"],["other","has type","NonZeroU64"]],"delete_links":["../../src/core/clone.rs.html","../../std/clone/trait.Clone.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Binary.html","../../std/fmt/trait.Debug.html","../../std/result/enum.Result.html"],"add_links":["../../src/core/cmp.rs.html","../../src/core/num/mod.rs.html","../../std/any/struct.TypeId.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.LowerHex.html","../../std/fmt/trait.Octal.html","../../std/fmt/trait.UpperHex.html","../../std/marker/trait.Copy.html","../../std/option/enum.Option.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../primitive.u64.html","enum.FpCategory.html"],"metrics":{"escapeCount":0,"costTime":676419,"totalUsage":{"prompt_tokens":104541,"completion_tokens":38966,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":21,"chunksInfo":[{"oldContextLength":527,"oldStrLength":474,"newContextLength":527,"newStrLength":537,"costTime":14419},{"oldContextLength":0,"oldStrLength":0,"newContextLength":527,"newStrLength":19,"costTime":14099},{"oldContextLength":527,"oldStrLength":1667,"newContextLength":527,"newStrLength":1999,"costTime":16826},{"oldContextLength":527,"oldStrLength":1671,"newContextLength":527,"newStrLength":1939,"costTime":17603},{"oldContextLength":527,"oldStrLength":1938,"newContextLength":527,"newStrLength":1833,"costTime":29923},{"oldContextLength":527,"oldStrLength":1996,"newContextLength":527,"newStrLength":1731,"costTime":29182},{"oldContextLength":527,"oldStrLength":1977,"newContextLength":527,"newStrLength":1867,"costTime":28625},{"oldContextLength":527,"oldStrLength":1954,"newContextLength":527,"newStrLength":1978,"costTime":27421},{"oldContextLength":527,"oldStrLength":1999,"newContextLength":527,"newStrLength":1988,"costTime":28436},{"oldContextLength":527,"oldStrLength":1618,"newContextLength":527,"newStrLength":1917,"costTime":26952},{"oldContextLength":527,"oldStrLength":1663,"newContextLength":527,"newStrLength":1995,"costTime":31662},{"oldContextLength":527,"oldStrLength":1125,"newContextLength":527,"newStrLength":2000,"costTime":36277},{"oldContextLength":527,"oldStrLength":1701,"newContextLength":527,"newStrLength":1933,"costTime":34934},{"oldContextLength":527,"oldStrLength":1810,"newContextLength":527,"newStrLength":1929,"costTime":41736},{"oldContextLength":527,"oldStrLength":1765,"newContextLength":527,"newStrLength":1761,"costTime":42166},{"oldContextLength":527,"oldStrLength":1983,"newContextLength":527,"newStrLength":1904,"costTime":41423},{"oldContextLength":527,"oldStrLength":1911,"newContextLength":527,"newStrLength":1981,"costTime":40546},{"oldContextLength":527,"oldStrLength":710,"newContextLength":527,"newStrLength":426,"costTime":42619},{"oldContextLength":527,"oldStrLength":33,"newContextLength":527,"newStrLength":37,"costTime":41160},{"oldContextLength":527,"oldStrLength":418,"newContextLength":527,"newStrLength":418,"costTime":45312},{"oldContextLength":527,"oldStrLength":418,"newContextLength":527,"newStrLength":418,"costTime":45098}]},"model":"doubao-1-5-pro-32k-250115","extraInfo":{"startTime":"2025-03-11T17:19:17.597Z","examGroup":"diff","sourceId":"7c6faca8-74a2-4d34-a56e-3ac3bfeb2137"}}