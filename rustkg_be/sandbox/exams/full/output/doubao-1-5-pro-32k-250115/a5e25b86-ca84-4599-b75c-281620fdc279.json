{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has method","has argument","has return type","has description","implements","has type","has stability"],"relation_triples":[["AtomicIsize","is a","Struct"],["AtomicIsize","has full name","core::sync::atomic::AtomicIsize"],["AtomicIsize","stable since","1.0.0"],["AtomicIsize","has description","An integer type which can be safely shared between threads."],["new","is a","function"],["AtomicIsize","has method","new"],["new","has argument","v"],["v","has type","isize"],["new","has return type","AtomicIsize"],["new","has description","Creates a new atomic integer."],["get_mut","is a","function"],["AtomicIsize","has method","get_mut"],["get_mut","has return type","&mut isize"],["get_mut","stable since","1.15.0"],["get_mut","has description","Returns a mutable reference to the underlying integer."],["into_inner","is a","function"],["AtomicIsize","has method","into_inner"],["into_inner","has return type","isize"],["into_inner","stable since","1.15.0"],["into_inner","has description","Consumes the atomic and returns the contained value."],["load","is a","function"],["AtomicIsize","has method","load"],["load","has argument","order"],["order","has type","Ordering"],["load","has return type","isize"],["load","has description","Loads a value from the atomic integer."],["store","is a","function"],["AtomicIsize","has method","store"],["store","has argument","val"],["val","has type","isize"],["store","has argument","order"],["store","has description","Stores a value into the atomic integer."],["swap","is a","function"],["AtomicIsize","has method","swap"],["swap","has argument","val"],["swap","has argument","order"],["swap","has return type","isize"],["swap","has description","Stores a value into the atomic integer, returning the previous value."],["compare_and_swap","is a","function"],["AtomicIsize","has method","compare_and_swap"],["compare_and_swap","has argument","current"],["current","has type","isize"],["compare_and_swap","has argument","new"],["new","has type","isize"],["compare_and_swap","has argument","order"],["compare_and_swap","has return type","isize"],["compare_and_swap","has description","Stores a value into the atomic integer if the current value is the same as the current value."],["compare_exchange","is a","function"],["AtomicIsize","has method","compare_exchange"],["compare_exchange","has argument","current"],["compare_exchange","has argument","new"],["compare_exchange","has argument","success"],["success","has type","Ordering"],["compare_exchange","has argument","failure"],["failure","has type","Ordering"],["compare_exchange","has return type","Result<isize, isize>"],["compare_exchange","stable since","1.10.0"],["compare_exchange","has description","Stores a value into the atomic integer if the current value is the same as the current value."],["compare_exchange_weak","is a","function"],["AtomicIsize","has method","compare_exchange_weak"],["compare_exchange_weak","has argument","current"],["compare_exchange_weak","has argument","new"],["compare_exchange_weak","has argument","success"],["compare_exchange_weak","has argument","failure"],["compare_exchange_weak","has return type","Result<isize, isize>"],["compare_exchange_weak","stable since","1.10.0"],["compare_exchange_weak","has description","Stores a value into the atomic integer if the current value is the same as the current value, allowing spurious failures."],["fetch_add","is a","function"],["AtomicIsize","has method","fetch_add"],["fetch_add","has argument","val"],["val","has type","isize"],["fetch_add","has argument","order"],["fetch_add","has return type","isize"],["fetch_add","has description","Adds to the current value, returning the previous value."],["fetch_sub","is a","function"],["AtomicIsize","has method","fetch_sub"],["fetch_sub","has argument","val"],["fetch_sub","has argument","order"],["fetch_sub","has return type","isize"],["fetch_sub","has description","Subtracts from the current value, returning the previous value."],["fetch_and","is a","function"],["AtomicIsize","has method","fetch_and"],["fetch_and","has argument","val"],["fetch_and","has argument","order"],["fetch_and","has return type","isize"],["fetch_and","has description","Bitwise \"and\" with the current value."],["fetch_nand","is a","function"],["AtomicIsize","has method","fetch_nand"],["fetch_nand","has argument","val"],["fetch_nand","has argument","order"],["fetch_nand","has return type","isize"],["fetch_nand","stable since","1.27.0"],["fetch_nand","has description","Bitwise \"nand\" with the current value."],["fetch_or","is a","function"],["AtomicIsize","has method","fetch_or"],["fetch_or","has argument","val"],["fetch_or","has argument","order"],["fetch_or","has return type","isize"],["fetch_or","has description","Bitwise \"or\" with the current value."],["fetch_xor","is a","function"],["AtomicIsize","has method","fetch_xor"],["fetch_xor","has argument","val"],["fetch_xor","has argument","order"],["fetch_xor","has return type","isize"],["fetch_xor","has description","Bitwise \"xor\" with the current value."],["fetch_update","is a","function"],["AtomicIsize","has method","fetch_update"],["fetch_update","has argument","f"],["f","has type","FnMut(isize) -> Option<isize>"],["fetch_update","has argument","fetch_order"],["fetch_order","has type","Ordering"],["fetch_update","has argument","set_order"],["set_order","has type","Ordering"],["fetch_update","has return type","Result<isize, isize>"],["fetch_update","has stability","This is a nightly-only experimental API."],["fetch_max","is a","function"],["AtomicIsize","has method","fetch_max"],["fetch_max","has argument","val"],["fetch_max","has argument","order"],["fetch_max","has return type","isize"],["fetch_max","has stability","This is a nightly-only experimental API."],["fetch_max","has description","Maximum with the current value."],["fetch_min","is a","function"],["AtomicIsize","has method","fetch_min"],["fetch_min","has argument","val"],["fetch_min","has argument","order"],["fetch_min","has return type","isize"],["fetch_min","has stability","This is a nightly-only experimental API."],["fetch_min","has description","Minimum with the current value."],["AtomicIsize","implements","Sync"],["AtomicIsize","implements","Default"],["AtomicIsize","implements","From<isize>"],["AtomicIsize","implements","Debug"],["AtomicIsize","implements","Send"]],"links":["struct.AtomicBool.html","struct.AtomicI16.html","struct.AtomicI32.html","struct.AtomicI64.html","struct.AtomicI8.html","struct.AtomicIsize.html","struct.AtomicPtr.html","struct.AtomicU16.html","struct.AtomicU32.html","struct.AtomicU64.html","struct.AtomicU8.html","struct.AtomicUsize.html","enum.Ordering.html","constant.ATOMIC_BOOL_INIT.html","constant.ATOMIC_I16_INIT.html","constant.ATOMIC_I32_INIT.html","constant.ATOMIC_I64_INIT.html","constant.ATOMIC_I8_INIT.html","constant.ATOMIC_ISIZE_INIT.html","constant.ATOMIC_U16_INIT.html","constant.ATOMIC_U32_INIT.html","constant.ATOMIC_U64_INIT.html","constant.ATOMIC_U8_INIT.html","constant.ATOMIC_USIZE_INIT.html","fn.compiler_fence.html","fn.fence.html","fn.spin_loop_hint.html","../../../core/convert/trait.From.html","../../../core/fmt/trait.Debug.html","../../../core/marker/trait.Sync.html","../../../core/default/trait.Default.html","../../../core/marker/trait.Send.html","../../../core/convert/trait.Into.html","../../../core/convert/trait.TryFrom.html","../../../core/convert/trait.TryInto.html","../../../core/borrow/trait.Borrow.html","../../../core/borrow/trait.BorrowMut.html","../../../core/any/trait.Any.html"],"create_time":"2025-03-12T15:18:15.157Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/core/sync/atomic/struct.AtomicIsize.html","id":"a5e25b86-ca84-4599-b75c-281620fdc279","model":"doubao-1-5-pro-32k-250115","metrics":{"escapeCount":0,"costTime":180294,"totalUsage":{"prompt_tokens":21737,"completion_tokens":5807,"cached_tokens":0,"reasoning_tokens":3293},"length":61697},"extraInfo":{"startTime":"2025-03-12T15:15:09.303Z","examGroup":"full","sourceId":"0e3252a6-fe43-43bd-ad68-ee4ab128985d"}}