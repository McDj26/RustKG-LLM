{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has description","requires method","has argument","has return type","implements","has type"],"relation_triples":[["IndexMut","is a","Trait"],["IndexMut","has full name","std::ops::IndexMut"],["IndexMut","stable since","1.0.0"],["IndexMut","has declaration","pub trait IndexMut<Idx>: Index<Idx> where Idx: ?Sized { fn index_mut(&mut self, index: Idx) -> &mut Self::Output; }"],["IndexMut","has description","Used for indexing operations (`container[index]`) in mutable contexts. `container[index]` is actually syntactic sugar for `*container.index_mut(index)`, but only when used as a mutable value. If an immutable value is requested, the Index trait is used instead. This allows nice things such as `v[index] = value`."],["IndexMut","requires method","index_mut"],["index_mut","is a","function"],["index_mut","has argument","self"],["index_mut","has argument","index"],["index_mut","has return type","&mut Self::Output"],["index_mut","has description","Performs the mutable indexing (`container[index]`) operation."],["index","has type","Idx"],["str","implements","IndexMut"],["String","implements","IndexMut"],["VecDeque<A>","implements","IndexMut"],["String","is a","struct"],["String","has full name","std::string::String"],["Range","is a","struct"],["Range","has description","A (half-open) range bounded inclusively below and exclusively above (`start..end`)."],["RangeFrom","is a","struct"],["RangeFrom","has description","A range only bounded inclusively below (`start..`)."],["RangeFull","is a","struct"],["RangeFull","has description","An unbounded range (`..`)."],["RangeInclusive","is a","struct"],["RangeInclusive","has description","A range bounded inclusively below and above (`start..=end`)."],["RangeTo","is a","struct"],["RangeTo","has description","A range only bounded exclusively above (`..end`)."],["RangeToInclusive","is a","struct"],["RangeToInclusive","has description","A range only bounded inclusively above (`..=end`)."],["Bound","is a","enum"],["Bound","has description","An endpoint of a range of keys."],["GeneratorState","is a","enum"],["GeneratorState","has description","The result of a generator resumption."]],"links":["../../std/index.html","struct.Range.html","struct.RangeFrom.html","struct.RangeFull.html","struct.RangeInclusive.html","struct.RangeTo.html","struct.RangeToInclusive.html","enum.Bound.html","enum.GeneratorState.html","trait.Add.html","trait.AddAssign.html","trait.BitAnd.html","trait.BitAndAssign.html","trait.BitOr.html","trait.BitOrAssign.html","trait.BitXor.html","trait.BitXorAssign.html","trait.CoerceUnsized.html","trait.Deref.html","trait.DerefMut.html","trait.Div.html","trait.DivAssign.html","trait.Drop.html","trait.Fn.html","trait.FnMut.html","trait.FnOnce.html","trait.Generator.html","trait.Index.html","trait.IndexMut.html","trait.Mul.html","trait.MulAssign.html","trait.Neg.html","trait.Not.html","trait.RangeBounds.html","trait.Rem.html","trait.RemAssign.html","trait.Shl.html","trait.ShlAssign.html","trait.Shr.html","trait.ShrAssign.html","trait.Sub.html","trait.SubAssign.html","trait.Try.html","../../src/core/ops/index.rs.html","../../src/core/str/mod.rs.html","../../src/alloc/string.rs.html","../../src/alloc/collections/vec_deque.rs.html","../../../primitive.usize.html","../../../../std/process/struct.Command.html"],"create_time":"2025-03-12T15:26:43.300Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/ops/trait.IndexMut.html","id":"7865aa57-0a84-42ab-8536-023013a8e058","model":"doubao-1-5-pro-32k-250115","metrics":{"escapeCount":0,"costTime":151588,"totalUsage":{"prompt_tokens":16709,"completion_tokens":5079,"cached_tokens":0,"reasoning_tokens":3943},"length":43039},"extraInfo":{"startTime":"2025-03-12T15:24:11.513Z","examGroup":"full","sourceId":"1f8962b2-201e-4b73-9e69-a70ef742f0d5"}}