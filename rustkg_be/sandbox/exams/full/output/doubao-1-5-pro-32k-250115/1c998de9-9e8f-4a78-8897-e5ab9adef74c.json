{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has attribute","requires method","provides method","has argument","has return type","has description","has stability","implements","has method"],"relation_triples":[["Alloc","is a","Trait"],["Alloc","has full name","alloc::alloc::Alloc"],["Alloc","has attribute","unsafe"],["Alloc","has description","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`."],["alloc","is a","required method"],["alloc","has argument","layout: Layout"],["alloc","has return type","Result<NonNull<u8>, AllocErr>"],["alloc","has description","Returns a pointer meeting the size and alignment guarantees of `layout`."],["alloc","has stability","nightly-only experimental API (allocator_api #32838)"],["dealloc","is a","required method"],["dealloc","has argument","ptr: NonNull<u8>"],["dealloc","has argument","layout: Layout"],["dealloc","has description","Deallocate the memory referenced by `ptr`."],["dealloc","has stability","nightly-only experimental API (allocator_api #32838)"],["usable_size","is a","provided method"],["usable_size","has argument","layout: &Layout"],["usable_size","has return type","(usize, usize)"],["usable_size","has description","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`."],["realloc","is a","provided method"],["realloc","has argument","ptr: NonNull<u8>"],["realloc","has argument","layout: Layout"],["realloc","has argument","new_size: usize"],["realloc","has return type","Result<NonNull<u8>, AllocErr>"],["realloc","has description","Returns a pointer suitable for holding data described by a new layout with `layout`â€™s alignment and a size given by `new_size`."],["realloc","has stability","nightly-only experimental API (allocator_api #32838)"],["AllocErr","is a","struct"],["AllocErr","has description","The `AllocErr` error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator."],["CannotReallocInPlace","is a","struct"],["CannotReallocInPlace","has description","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout."],["Excess","is a","struct"],["Excess","has description","Represents the combination of a starting address and a total capacity of the returned block."],["Global","is a","struct"],["Global","has description","The global memory allocator."],["Global","implements","Alloc"],["Layout","is a","struct"],["Layout","has description","Layout of a block of memory."],["LayoutErr","is a","struct"],["LayoutErr","has description","The parameters given to `Layout::from_size_align` or some other `Layout` constructor do not satisfy its documented constraints."]],"links":["struct.AllocErr.html","struct.CannotReallocInPlace.html","struct.Excess.html","struct.Global.html","struct.Layout.html","struct.LayoutErr.html","trait.Alloc.html","trait.GlobalAlloc.html","fn.alloc.html","fn.alloc_zeroed.html","fn.dealloc.html","fn.handle_alloc_error.html","fn.realloc.html","../../src/core/alloc.rs.html","../../src/alloc/alloc.rs.html"],"create_time":"2025-03-12T15:25:53.091Z","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/alloc/trait.Alloc.html","id":"1c998de9-9e8f-4a78-8897-e5ab9adef74c","model":"doubao-1-5-pro-32k-250115","metrics":{"escapeCount":0,"costTime":94748,"totalUsage":{"prompt_tokens":22012,"completion_tokens":2866,"cached_tokens":0,"reasoning_tokens":1732},"length":63632},"extraInfo":{"startTime":"2025-03-12T15:24:18.127Z","examGroup":"full","sourceId":"05aff626-3bac-49b0-89ac-cbf16fee709d"}}