{"relations":["is a","has full name","stable since","is successor of","is predecessor of","implements","has method","based on","has attribute","has description","has argument","has return type","has stability"],"relation_triples":[["System","is a","struct"],["System","has full name","std::alloc::System"],["System","stable since","1.28.0"],["System","has description","The default memory allocator provided by the operating system."],["System","based on","malloc"],["System","based on","HeapAlloc"],["System","implements","GlobalAlloc"],["System","implements","Alloc"],["System","implements","Send"],["System","implements","Sync"],["GlobalAlloc","has method","alloc"],["GlobalAlloc","has method","alloc_zeroed"],["GlobalAlloc","has method","dealloc"],["GlobalAlloc","has method","realloc"],["alloc","is a","function"],["alloc","has attribute","unsafe"],["alloc","has argument","layout: Layout"],["alloc","has return type","*mut u8"],["alloc","has description","Allocate memory as described by the given layout."],["Alloc","has method","alloc"],["Alloc","has method","alloc_zeroed"],["Alloc","has method","dealloc"],["Alloc","has method","realloc"],["Alloc","has method","usable_size"],["Alloc","has method","alloc_excess"],["Alloc","has method","realloc_excess"],["Alloc","has method","grow_in_place"],["Alloc","has method","shrink_in_place"],["Alloc","has method","alloc_one"],["Alloc","has method","dealloc_one"],["Alloc","has method","alloc_array"],["Alloc","has method","realloc_array"],["Alloc","has method","dealloc_array"],["alloc_zeroed","has description","Behaves like alloc, but also ensures that the contents are set to zero before being returned."],["dealloc","has description","Deallocate the block of memory at the given ptr pointer with the given layout."],["realloc","has description","Shink or grow a block of memory to the given new_size."],["System","has stability","This is supported on Windows only."],["AllocErr","is a","struct"],["AllocErr","has description","The `AllocErr` error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator."],["CannotReallocInPlace","is a","struct"],["CannotReallocInPlace","has description","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout."],["Excess","is a","struct"],["Excess","has description","Represents the combination of a starting address and a total capacity of the returned block."],["Global","is a","struct"],["Global","has description","The global memory allocator."],["Layout","is a","struct"],["Layout","has description","Layout of a block of memory."],["LayoutErr","is a","struct"],["LayoutErr","has description","The parameters given to `Layout::from_size_align` or some other `Layout` constructor do not satisfy its documented constraints."],["Alloc","is a","trait"],["Alloc","has description","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`."],["GlobalAlloc","is a","trait"],["GlobalAlloc","has description","A memory allocator that can be registered as the standard libraryâ€™s default though the `#[global_allocator]` attributes."],["alloc","has description","Allocate memory with the global allocator."],["alloc_zeroed","has description","Allocate zero-initialized memory with the global allocator."],["dealloc","has description","Deallocate memory with the global allocator."],["handle_alloc_error","has description","Abort on memory allocation error or failure."],["realloc","has description","Reallocate memory with the global allocator."],["set_alloc_error_hook","has description","Registers a custom allocation error hook, replacing any that was previously registered."],["take_alloc_error_hook","has description","Unregisters the current allocation error hook, returning it."]],"links":["struct.AllocErr.html","struct.CannotReallocInPlace.html","struct.Excess.html","struct.Global.html","struct.Layout.html","struct.LayoutErr.html","trait.Alloc.html","trait.GlobalAlloc.html","fn.alloc.html","fn.alloc_zeroed.html","fn.dealloc.html","fn.handle_alloc_error.html","fn.realloc.html","fn.set_alloc_error_hook.html","fn.take_alloc_error_hook.html","../../std/alloc/trait.GlobalAlloc.html","../../std/alloc/struct.Layout.html","../../std/ptr/struct.NonNull.html","../../std/result/enum.Result.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.From.html","../../std/convert/trait.TryInto.html","../../std/convert/trait.Into.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/any/trait.Any.html"],"create_time":"2025-03-15T04:47:59.574Z","id":"7109070b-34ce-4256-8f0e-cec2898c9c9f","model":"deepseek-r1-250120","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/alloc/struct.System.html","metrics":{"escapeCount":0,"costTime":149346,"totalUsage":{"prompt_tokens":19957,"completion_tokens":4288,"cached_tokens":0,"reasoning_tokens":2825},"length":54226},"extraInfo":{"startTime":"2025-03-15T04:45:26.852Z","examGroup":"full","sourceId":"d4a6aaf1-8956-4941-8772-6eadfb6040e8"}}