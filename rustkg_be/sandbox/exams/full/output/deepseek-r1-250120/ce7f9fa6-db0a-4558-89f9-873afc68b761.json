{"relations":["is a","has full name","stable since","has variant","has method","has return type","has argument","has description","implements","has declaration","has type","has implementation"],"relation_triples":[["TokenTree","is a","Enum"],["TokenTree","has full name","proc_macro::TokenTree"],["TokenTree","stable since","1.29.0"],["TokenTree","has declaration","pub enum TokenTree { Group(Group), Ident(Ident), Punct(Punct), Literal(Literal) }"],["TokenTree","has description","A single token or a delimited sequence of token trees (e.g. [1, (), ..])."],["TokenTree","has variant","Group"],["TokenTree","has variant","Ident"],["TokenTree","has variant","Punct"],["TokenTree","has variant","Literal"],["Group","is a","struct"],["Group","has description","A token stream surrounded by bracket delimiters."],["Ident","is a","struct"],["Ident","has description","An identifier (`ident`)."],["Punct","is a","struct"],["Punct","has description","A single punctuation character (`+`, `-`, `$`, etc.)."],["Literal","is a","struct"],["Literal","has description","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc."],["TokenTree","has method","span"],["span","has return type","Span"],["span","has description","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream."],["TokenTree","has method","set_span"],["set_span","has argument","span"],["set_span","has description","Configures the span for _only this token_. Note that if this token is a `Group` then this method will not configure the span of each of the internal tokens."],["TokenTree","implements","!Sync"],["TokenTree","implements","!Send"],["TokenTree","implements","Clone"],["TokenTree","implements","Display"],["TokenTree","implements","Debug"],["TokenStream","implements","Extend<TokenTree>"],["TokenStream","implements","From<TokenTree>"],["TokenTree","has implementation","From<Group>"],["TokenTree","has implementation","From<Ident>"],["TokenTree","has implementation","From<Punct>"],["TokenTree","has implementation","From<Literal>"],["TokenStream","implements","FromIterator<TokenTree>"]],"links":["../proc_macro/index.html","struct.Group.html","struct.Ident.html","struct.Punct.html","struct.Literal.html","struct.Span.html","fn.quote.html","fn.quote_span.html","../src/proc_macro/lib.rs.html","../core/marker/trait.Sync.html","../core/iter/traits/trait.Extend.html","../core/convert/trait.From.html","../core/clone/trait.Clone.html","../core/fmt/trait.Display.html","../core/fmt/trait.Debug.html","../core/iter/traits/trait.FromIterator.html","../alloc/index.html","../core/index.html","../std/index.html","../test/index.html","token_stream/index.html","macro.quote.html","enum.Delimiter.html","enum.Level.html","enum.Spacing.html","trait.MultiSpan.html"],"create_time":"2025-03-14T19:12:41.375Z","id":"ce7f9fa6-db0a-4558-89f9-873afc68b761","model":"deepseek-r1-250120","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/proc_macro/enum.TokenTree.html","metrics":{"escapeCount":0,"costTime":101552,"totalUsage":{"prompt_tokens":20768,"completion_tokens":2887,"cached_tokens":0,"reasoning_tokens":1986},"length":56940},"extraInfo":{"startTime":"2025-03-14T19:10:54.331Z","examGroup":"full","sourceId":"03c49e5d-7c42-4c3e-b008-7996972de0a4"}}