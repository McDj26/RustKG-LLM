{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has description","has stability","contains","is a version of","has method"],"relation_triples":[["boxed","is a","module"],["boxed","has full name","alloc::boxed"],["boxed","stable since","1.0.0"],["boxed","has description","A pointer type for heap allocation."],["boxed","has description","Box<T>, casually referred to as a 'box', provides the simplest form of heap allocation in Rust."],["boxed","has description","Boxes provide ownership for this allocation, and drop their contents when they go out of scope."],["alloc","contains","boxed"],["Box","is a","struct"],["Box","has full name","alloc::boxed::Box"],["Box","has description","A pointer type for heap allocation."],["Box","has method","new"],["FnBox","is a","trait"],["FnBox","has full name","alloc::boxed::FnBox"],["FnBox","has stability","Experimental"],["FnBox","has description","FnBox is a version of the FnOnce intended for use with boxed closure objects."],["FnBox","has description","The idea is that where one would normally store a Box<FnOnce()> in a data structure, you should use Box<FnBox()>."],["FnBox","has description","FnBox may be deprecated in the future if Box<FnOnce()> closures become directly usable."],["FnBox","is a version of","FnOnce"]],"links":["struct.Box.html","trait.FnBox.html","../index.html","../../alloc/index.html","macro.format.html","macro.vec.html","../../src/alloc/boxed.rs.html","../../std/ops/trait.Deref.html"],"create_time":"2025-03-13T18:40:32.998Z","id":"47be14c5-228a-49f9-ba7d-89cf99693b70","model":"deepseek-v3-241226","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/boxed/index.html","metrics":{"escapeCount":0,"costTime":118424,"totalUsage":{"prompt_tokens":5753,"completion_tokens":3837,"cached_tokens":0,"reasoning_tokens":3349},"length":9758},"extraInfo":{"startTime":"2025-03-13T18:38:29.720Z","examGroup":"full","sourceId":"4b7525ab-ff22-413a-b712-459b6a3d36cd"}}