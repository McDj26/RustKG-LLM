{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","requires method","has description","has argument","has type","has return type","implements","has attribute"],"relation_triples":[["Alloc","is a","Trait"],["Alloc","has full name","alloc::alloc::Alloc"],["Alloc","has declaration","pub unsafe trait Alloc { unsafe fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr>; unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout); fn usable_size(&self, layout: &Layout) -> (usize, usize) { ... } unsafe fn realloc(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<NonNull<u8>, AllocErr> { ... } unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> { ... } unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> { ... } unsafe fn realloc_excess(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<Excess, AllocErr> { ... } unsafe fn grow_in_place(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<(), CannotReallocInPlace> { ... } unsafe fn shrink_in_place(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<(), CannotReallocInPlace> { ... } fn alloc_one<T>(&mut self) -> Result<NonNull<T>, AllocErr> { ... } unsafe fn dealloc_one<T>(&mut self, ptr: NonNull<T>) { ... } fn alloc_array<T>(&mut self, n: usize) -> Result<NonNull<T>, AllocErr> { ... } unsafe fn realloc_array<T>(&mut self, ptr: NonNull<T>, n_old: usize, n_new: usize) -> Result<NonNull<T>, AllocErr> { ... } unsafe fn dealloc_array<T>(&mut self, ptr: NonNull<T>, n: usize) -> Result<(), AllocErr> { ... } }"],["Alloc","has stability","This is a nightly-only experimental API. (allocator_api #32838)"],["Alloc","has description","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`."],["alloc","has argument","alloc::self"],["alloc","has argument","alloc::layout"],["alloc","has return type","Result<NonNull<u8>, AllocErr>"],["alloc","has description","Returns a pointer meeting the size and alignment guarantees of `layout`."],["dealloc","has argument","dealloc::self"],["dealloc","has argument","dealloc::ptr"],["dealloc","has argument","dealloc::layout"],["dealloc","has description","Deallocate the memory referenced by `ptr`."],["usable_size","has argument","usable_size::self"],["usable_size","has argument","usable_size::layout"],["usable_size","has return type","(usize, usize)"],["usable_size","has description","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`."],["realloc","has argument","realloc::self"],["realloc","has argument","realloc::ptr"],["realloc","has argument","realloc::layout"],["realloc","has argument","realloc::new_size"],["realloc","has return type","Result<NonNull<u8>, AllocErr>"],["realloc","has description","Returns a pointer suitable for holding data described by a new layout with `layout`â€™s alignment and a size given by `new_size`."],["alloc_zeroed","has argument","alloc_zeroed::self"],["alloc_zeroed","has argument","alloc_zeroed::layout"],["alloc_zeroed","has return type","Result<NonNull<u8>, AllocErr>"],["alloc_zeroed","has description","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned."],["alloc_excess","has argument","alloc_excess::self"],["alloc_excess","has argument","alloc_excess::layout"],["alloc_excess","has return type","Result<Excess, AllocErr>"],["alloc_excess","has description","Behaves like `alloc`, but also returns the whole size of the returned block."],["realloc_excess","has argument","realloc_excess::self"],["realloc_excess","has argument","realloc_excess::ptr"],["realloc_excess","has argument","realloc_excess::layout"],["realloc_excess","has argument","realloc_excess::new_size"],["realloc_excess","has return type","Result<Excess, AllocErr>"],["realloc_excess","has description","Behaves like `realloc`, but also returns the whole size of the returned block."],["grow_in_place","has argument","grow_in_place::self"],["grow_in_place","has argument","grow_in_place::ptr"],["grow_in_place","has argument","grow_in_place::layout"],["grow_in_place","has argument","grow_in_place::new_size"],["grow_in_place","has return type","Result<(), CannotReallocInPlace>"],["grow_in_place","has description","Attempts to extend the allocation referenced by `ptr` to fit `new_size`."],["shrink_in_place","has argument","shrink_in_place::self"],["shrink_in_place","has argument","shrink_in_place::ptr"],["shrink_in_ place","has argument","shrink_in_place::layout"],["shrink_in_place","has argument","shrink_in_place::new_size"],["shrink_in_place","has return type","Result<(), CannotReallocInPlace>"],["shrink_in_place","has description","Attempts to shrink the allocation referenced by `ptr` to fit `new_size`."],["alloc_one","has argument","alloc_one::self"],["alloc_one","has return type","Result<NonNull<T>, AllocErr>"],["alloc_one","has description","Allocates a block suitable for holding an instance of `T`."],["dealloc_one","has argument","dealloc_one::self"],["dealloc_one","has argument","dealloc_one::ptr"],["dealloc_one","has description","Deallocates a block suitable for holding an instance of `T`."],["alloc_array","has argument","alloc_array::self"],["alloc_array","has argument","alloc_array::n"],["alloc_array","has return type","Result<NonNull<T>, AllocErr>"],["alloc_array","has description","Allocates a block suitable for holding `n` instances of `T`."],["realloc_array","has argument","realloc_array::self"],["realloc_array","has argument","realloc_array::ptr"],["realloc_array","has argument","realloc_array::n_old"],["realloc_array","has argument","realloc_array::n_new"],["realloc_array","has return type","Result<NonNull<T>, AllocErr>"],["realloc_array","has description","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`."],["dealloc_array","has argument","dealloc_array::self"],["dealloc_array","has argument","dealloc_array::ptr"],["dealloc_array","has argument","dealloc_array::n"],["dealloc_array","has return type","Result<(), AllocErr>"],["dealloc_array","has description","Deallocates a block suitable for holding `n` instances of `T`."],["Global","implements","Alloc"]],"links":["../../alloc/index.html","../index.html","index.html","../../alloc/alloc/struct.Layout.html","../../core/result/enum.Result.html","../../core/ptr/struct.NonNull.html","../../alloc/alloc/struct.AllocErr.html","../../alloc/alloc/struct.Excess.html","../../alloc/alloc/struct.CannotReallocInPlace.html","../../src/core/alloc.rs.html","../../src/alloc/alloc.rs.html"],"create_time":"2025-03-14T17:00:08.054Z","id":"a5e51796-8428-4e99-91e1-027778f6b956","model":"deepseek-v3-241226","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/alloc/trait.Alloc.html","metrics":{"escapeCount":0,"costTime":62658,"totalUsage":{"prompt_tokens":23862,"completion_tokens":2107,"cached_tokens":0,"reasoning_tokens":0},"length":69595},"extraInfo":{"startTime":"2025-03-14T16:59:05.179Z","examGroup":"full","sourceId":"05aff626-3bac-49b0-89ac-cbf16fee709d"}}