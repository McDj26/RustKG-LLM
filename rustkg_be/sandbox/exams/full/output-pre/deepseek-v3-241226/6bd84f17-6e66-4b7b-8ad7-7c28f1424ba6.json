{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has declaration","has stability","requires method","has description","has argument","has type","has return type","implements","has attribute","has method","has implementor"],"relation_triples":[["Alloc","is a","Trait"],["Alloc","has full name","alloc::alloc::Alloc"],["Alloc","has declaration","pub unsafe trait Alloc { unsafe fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr>; unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout); fn usable_size(&self, layout: &Layout) -> (usize, usize) { ... } unsafe fn realloc(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<NonNull<u8>, AllocErr> { ... } unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> { ... } unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> { ... } unsafe fn realloc_excess(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<Excess, AllocErr> { ... } unsafe fn grow_in_place(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<(), CannotReallocInPlace> { ... } unsafe fn shrink_in_place(&mut self, ptr: NonNull<u8>, layout: Layout, new_size: usize) -> Result<(), CannotReallocInPlace> { ... } fn alloc_one<T>(&mut self) -> Result<NonNull<T>, AllocErr> { ... } unsafe fn dealloc_one<T>(&mut self, ptr: NonNull<T>) { ... } fn alloc_array<T>(&mut self, n: usize) -> Result<NonNull<T>, AllocErr> { ... } unsafe fn realloc_array<T>(&mut self, ptr: NonNull<T>, n_old: usize, n_new: usize) -> Result<NonNull<T>, AllocErr> { ... } unsafe fn dealloc_array<T>(&mut self, ptr: NonNull<T>, n: usize) -> Result<(), AllocErr> { ... } }"],["Alloc","has stability","This is a nightly-only experimental API. (allocator_api #32838)"],["Alloc","has description","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`."],["Alloc","requires method","alloc"],["Alloc","requires method","dealloc"],["alloc","is a","function"],["alloc","has full name","alloc::alloc::Alloc::alloc"],["alloc","has argument","alloc::self"],["alloc","has argument","alloc::layout"],["alloc","has return type","Result<NonNull<u8>, AllocErr>"],["alloc","has description","Returns a pointer meeting the size and alignment guarantees of `layout`."],["alloc","has stability","This is a nightly-only experimental API. (allocator_api #32838)"],["dealloc","is a","function"],["dealloc","has full name","alloc::alloc::Alloc::dealloc"],["dealloc","has argument","dealloc::self"],["dealloc","has argument","dealloc::ptr"],["dealloc","has argument","dealloc::layout"],["dealloc","has description","Deallocate the memory referenced by `ptr`."],["dealloc","has stability","This is a nightly-only experimental API. (allocator_api #32838)"],["Global","is a","struct"],["Global","has full name","alloc::alloc::Global"],["Global","implements","Alloc"],["Global","has method","alloc"],["Global","has method","dealloc"],["Global","has method","realloc"],["Global","has method","alloc_zeroed"],["Global","has method","usable_size"],["Global","has method","alloc_excess"],["Global","has method","realloc_excess"],["Global","has method","grow_in_place"],["Global","has method","shrink_in_place"],["Global","has method","alloc_one"],["Global","has method","dealloc_one"],["Global","has method","alloc_array"],["Global","has method","realloc_array"],["Global","has method","dealloc_array"],["AllocErr","is a","struct"],["AllocErr","has full name","alloc::alloc::AllocErr"],["AllocErr","has description","The `AllocErr` error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator."],["CannotReallocInPlace","is a","struct"],["CannotReallocInPlace","has full name","alloc::alloc::CannotReallocInPlace"],["CannotReallocInPlace","has description","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout."],["Excess","is a","struct"],["Excess","has full name","alloc::alloc::Excess"],["Excess","has description","Represents the combination of a starting address and a total capacity of the returned block."],["Layout","is a","struct"],["Layout","has full name","alloc::alloc::Layout"],["Layout","has description","Layout of a block of memory."],["LayoutErr","is a","struct"],["LayoutErr","has full name","alloc::alloc::LayoutErr"],["LayoutErr","has description","The parameters given to `Layout::from_size_align` or some other `Layout` constructor do not satisfy its documented constraints."],["GlobalAlloc","is a","trait"],["GlobalAlloc","has full name","alloc::alloc::GlobalAlloc"],["GlobalAlloc","has description","A memory allocator that can be registered as the standard libraryâ€™s default though the `#[global_allocator]` attributes."]],"links":["../../alloc/index.html","../index.html","index.html","struct.AllocErr.html","struct.CannotReallocInPlace.html","struct.Excess.html","struct.Global.html","struct.Layout.html","struct.LayoutErr.html","trait.Alloc.html","trait.GlobalAlloc.html","fn.alloc.html","fn.alloc_zeroed.html","fn.dealloc.html","fn.handle_alloc_error.html","fn.realloc.html"],"create_time":"2025-03-14T16:58:02.464Z","id":"6bd84f17-6e66-4b7b-8ad7-7c28f1424ba6","model":"deepseek-v3-241226","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/alloc/trait.Alloc.html","metrics":{"escapeCount":0,"costTime":49108,"totalUsage":{"prompt_tokens":23862,"completion_tokens":1677,"cached_tokens":0,"reasoning_tokens":0},"length":69595},"extraInfo":{"startTime":"2025-03-14T16:57:13.139Z","examGroup":"full","sourceId":"05aff626-3bac-49b0-89ac-cbf16fee709d"}}