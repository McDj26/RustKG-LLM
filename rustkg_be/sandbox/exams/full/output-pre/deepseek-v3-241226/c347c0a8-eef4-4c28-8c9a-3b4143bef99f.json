{"relations":["is a","has full name","stable since","is successor of","is predecessor of","implements","has declaration","has description","has method","has return type","has argument","has type","has trait"],"relation_triples":[["ChunksMut","is a","struct"],["ChunksMut","has full name","std::slice::ChunksMut"],["ChunksMut","stable since","1.0.0"],["ChunksMut","has declaration","pub struct ChunksMut<'a, T> where T: 'a + 'a, { /* fields omitted */ }"],["ChunksMut","has description","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the beginning of the slice."],["ChunksMut","implements","ExactSizeIterator"],["ChunksMut","implements","FusedIterator"],["ChunksMut","implements","DoubleEndedIterator"],["ChunksMut","implements","Iterator"],["ChunksMut","implements","TrustedLen"],["ChunksMut","implements","Debug"],["ChunksMut","implements","Send"],["ChunksMut","implements","Sync"],["ExactSizeIterator","is a","trait"],["FusedIterator","is a","trait"],["DoubleEndedIterator","is a","trait"],["Iterator","is a","trait"],["TrustedLen","is a","trait"],["Debug","is a","trait"],["Send","is a","trait"],["Sync","is a","trait"],["len","is a","method"],["len","has return type","usize"],["is_empty","is a","method"],["is_empty","has return type","bool"],["next_back","is a","method"],["next_back","has return type","Option<&'a mut [T]>"],["try_rfold","is a","method"],["try_rfold","has return type","R"],["rfold","is a","method"],["rfold","has return type","B"],["rfind","is a","method"],["rfind","has return type","Option<Self::Item>"],["next","is a","method"],["next","has return type","Option<&'a mut [T]>"],["size_hint","is a","method"],["size_hint","has return type","(usize, Option<usize>)"],["count","is a","method"],["count","has return type","usize"],["nth","is a","method"],["nth","has return type","Option<&'a mut [T]>"],["last","is a","method"],["last","has return type","Option<<ChunksMut<'a, T> as Iterator>::Item>"],["step_by","is a","method"],["step_by","has return type","StepBy<Self>"],["chain","is a","method"],["chain","has return type","Chain<Self, <U as IntoIterator>::IntoIter>"],["zip","is a","method"],["zip","has return type","Zip<Self, <U as IntoIterator>::IntoIter>"],["map","is a","method"],["map","has return type","Map<Self, F>"],["for_each","is a","method"],["for_each","has return type","()"],["filter","is a","method"],["filter","has return type","Filter<Self, P>"],["filter_map","is a","method"],["filter_map","has return type","FilterMap<Self, F>"],["enumerate","is a","method"],["enumerate","has return type","Enumerate<Self>"],["peekable","is a","method"],["peekable","has return type","Peekable<Self>"],["skip_while","is a","method"],["skip_while","has return type","SkipWhile<Self, P>"],["take_while","is a","method"],["take_while","has return type","TakeWhile<Self, P>"],["skip","is a","method"],["skip","has return type","Skip<Self>"],["take","is a","method"],["take","has return type","Take<Self>"],["scan","is a","method"],["scan","has return type","Scan<Self, St, F>"],["flat_map","is a","method"],["flat_map","has return type","FlatMap<Self, U, F>"],["flatten","is a","method"],["flatten","has return type","Flatten<Self>"],["fuse","is a","method"],["fuse","has return type","Fuse<Self>"],["inspect","is a","method"],["inspect","has return type","Inspect<Self, F>"],["by_ref","is a","method"],["by_ref","has return type","&mut Self"],["collect","is a","method"],["collect","has return type","B"],["partition","is a","method"],["partition","has return type","(B, B)"],["try_fold","is a","method"],["try_fold","has return type","R"],["try_for_each","is a","method"],["try_for_each","has return type","R"],["fold","is a","method"],["fold","has return type","B"],["all","is a","method"],["all","has return type","bool"],["any","is a","method"],["any","has return type","bool"],["find","is a","method"],["find","has return type","Option<Self::Item>"],["find_map","is a","method"],["find_map","has return type","Option<B>"],["position","is a","method"],["position","has return type","Option<usize>"],["rposition","is a","method"],["rposition","has return type","Option<usize>"],["max","is a","method"],["max","has return type","Option<Self::Item>"],["min","is a","method"],["min","has return type","Option<Self::Item>"],["max_by_key","is a","method"],["max_by_key","has return type","Option<Self::Item>"],["max_by","is a","method"],["max_by","has return type","Option<Self::Item>"],["min_by_key","极 a","method"],["min_by_key","has return type","Option<Self::Item>"],["min_by","is a","method"],["min_by","has return type","Option<Self::Item>"],["rev","is a","method"],["rev","has return type","Rev<Self>"],["unzip","is a","method"],["unzip","has return type","(FromA, FromB)"],["cloned","is a","method"],["cloned","极 return type","Cloned<Self>"],["cycle","is a","method"],["cycle","has return type","Cycle<Self>"],["sum","is a","method"],["sum","has return type","S"],["product","is a","method"],["product","has return type","P"],["cmp","is a","method"],["cmp","has return type","Ordering"],["partial_cmp","is a","method"],["partial_cmp","has return type","Option<Ordering>"],["eq","is a","method"],["eq","has return type","bool"],["ne","is a","method"],["ne","has return type","bool"],["lt","is a","method"],["lt","has return type","bool"],["le","is a","method"],["le","has return type","bool"],["gt","is a","method"],["gt","has return type","bool"],["ge","is a","method"],["ge","has return type","bool"],["fmt","is a","method"],["fmt","has return type","Result<(), Error>"],["get_type_id","is a","method"],["get_type_id","has return type","TypeId"]],"links":["../../std/index.html","../index.html","index.html","struct.Chunks.html","struct.ChunksExact.html","struct.ChunksExactMut.html","struct.ChunksMut.html","struct.Iter.html","struct.IterMut.html","struct.RChunks.html","struct.RChunksExact.html","struct.RChunksExactMut.html","struct.RChunksMut.html","struct.RSplit.html","struct.RSplitMut.html","struct.RSplitN.html","struct.RSplitNMut.html","struct.Split.html","struct.SplitMut.html","struct.SplitN.html","struct.SplitNMut.html","struct.Windows.html","trait.SliceConcatExt.html","trait.SliceIndex.html","fn.from_mut.html","fn.from_raw_parts.html","fn.from_raw_parts_mut.html","fn.from_ref.html","../../src/core/slice/mod.rs.html","../../src/core/iter/traits.rs.html"],"create_time":"2025-03-14T16:58:06.526Z","id":"c347c0a8-eef4-4c28-8c9a-3b4143bef99f","model":"deepseek-v3-241226","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/slice/struct.ChunksMut.html","metrics":{"escapeCount":0,"costTime":79864,"totalUsage":{"prompt_tokens":51161,"completion_tokens":2521,"cached_tokens":0,"reasoning_tokens":0},"length":150404},"extraInfo":{"startTime":"2025-03-14T16:56:46.395Z","examGroup":"full","sourceId":"0c9c4f92-3386-4e7c-a393-6932b6382dc0"}}