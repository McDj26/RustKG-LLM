{"relations":["is a","has full name","stable since","is successor of","is predecessor of","implements","has description","has declaration","has argument","has return type","has type"],"relation_triples":[["ChunksMut","is a","struct"],["ChunksMut","has full name","std::slice::ChunksMut"],["ChunksMut","stable since","1.0.0"],["ChunksMut","has description","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the beginning of the slice."],["ChunksMut","has declaration","pub struct ChunksMut<'a, T> where T: 'a + 'a, { /* fields omitted */ }"],["ChunksMut","implements","ExactSizeIterator"],["ChunksMut","implements","FusedIterator"],["ChunksMut","implements","DoubleEndedIterator"],["ChunksMut","implements","Iterator"],["ChunksMut","implements","TrustedLen"],["ChunksMut","implements","Debug"],["ChunksMut","implements","Send"],["ChunksMut","implements","Sync"],["ExactSizeIterator","has method","len"],["len","has return type","usize"],["ExactSizeIterator","has method","is_empty"],["is_empty","has return type","bool"],["FusedIterator","stable since","1.26.0"],["DoubleEndedIterator","has method","next_back"],["next_back","has return type","Option<&'a mut [T]>"],["DoubleEndedIterator","has method","try_rfold"],["try_rfold","has return type","R"],["DoubleEndedIterator","has method","rfold"],["rfold","has return type","B"],["DoubleEndedIterator","has method","rfind"],["rfind","has return type","Option<Self::Item>"],["Iterator","has associated type","Item"],["Item","has type","&'a mut [T]"],["Iterator","has method","next"],["next","has return type","Option<&'a mut [T]>"],["Iterator","has method","size_hint"],["size_hint","has return type","(usize, Option<usize>)"],["Iterator","has method","count"],["count","has return type","usize"],["Iterator","has method","nth"],["nth","has return type","Option<&'a mut [T]>"],["Iterator","has method","last"],["last","has return type","Option<&'a mut [T]>"],["Iterator","has method","step_by"],["step_by","has return type","StepBy<Self>"],["Iterator","has method","chain"],["chain","has return type","Chain<Self, <U as IntoIterator>::IntoIter>"],["Iterator","has method","zip"],["zip","has return type","Zip<Self, <U as IntoIterator>::IntoIter>"],["Iterator","has method","map"],["map","has return type","Map<Self, F>"],["Iterator","has method","for_each"],["for_each","has return type","()"],["Iterator","has method","filter"],["filter","has return type","Filter<Self, P>"],["Iterator","has method","filter_map"],["filter_map","has return type","FilterMap<Self, F>"],["Iterator","has method","enumerate"],["enumerate","has return type","Enumerate<Self>"],["Iterator","has method","peekable"],["peekable","has return type","Peekable<Self>"],["Iterator","has method","skip_while"],["skip_while","has return type","SkipWhile<Self, P>"],["Iterator","has method","take_while"],["take_while","has return type","TakeWhile<Self, P>"],["Iterator","has method","skip"],["skip","has return type","Skip<Self>"],["Iterator","has method","take"],["take","has return type","Take<Self>"],["Iterator","has method","scan"],["scan","has return type","Scan<Self, St, F>"],["Iterator","has method","flat_map"],["flat_map","has return type","FlatMap<Self, U, F>"],["Iterator","has method","flatten"],["flatten","has return type","Flatten<Self>"],["Iterator","has method","fuse"],["fuse","has return type","Fuse<Self>"],["Iterator","has method","inspect"],["inspect","has return type","Inspect<Self, F>"],["Iterator","has method","by_ref"],["by_ref","has return type","&mut Self"],["Iterator","has method","collect"],["collect","has return type","B"],["Iterator","has method","partition"],["partition","has return type","(B, B)"],["Iterator","has method","try_fold"],["try_f fold","has return type","R"],["Iterator","has method","try_for_each"],["try_for_each","has return type","R"],["Iterator","has method","fold"],["fold","has return type","B"],["Iterator","has method","all"],["all","has return type","bool"],["Iterator","has method","any"],["any","has return type","bool"],["Iterator","has method","find"],["find","has return type","Option<Self::Item>"],["Iterator","has method","find_map"],["find_map","has return type","Option<B>"],["Iterator","has method","position"],["position","has return type","Option<usize>"],["Iterator","has method","rposition"],["rposition","has return type","Option<usize>"],["Iterator","has method","max"],["max","has return type","Option<Self::Item>"],["Iterator","has method","min"],["min","has return type","Option<Self::Item>"],["Iterator","has method","max_by_key"],["max_by_key","has return type","Option<Self::Item>"],["Iterator","has method","max_by"],["max_by","has return type","Option<Self::Item>"],["Iterator","has method","min_by_key"],["min_by_key","has return type","Option<极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极极"]],"links":[],"create_time":"2025-03-14T17:02:33.991Z","id":"733e3322-aa4e-4d9f-8ac4-9c9b790550ac","model":"deepseek-v3-241226","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/slice/struct.ChunksMut.html","metrics":{"escapeCount":0,"costTime":119251,"totalUsage":{"prompt_tokens":51161,"completion_tokens":4096,"cached_tokens":0,"reasoning_tokens":0},"length":150404},"extraInfo":{"startTime":"2025-03-14T17:00:34.496Z","examGroup":"full","sourceId":"0c9c4f92-3386-4e7c-a393-6932b6382dc0"}}