{"relations":["is a","has full name","stable since","is successor of","is predecessor of","has description","requires method","provides method","has argument","has type","has return type","has attribute","implements","has stability"],"relation_triples":[["Alloc","is a","Trait"],["Alloc","has full name","alloc::alloc::Alloc"],["Alloc","has description","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`."],["Alloc","has stability","nightly-only experimental API (#32838)"],["Alloc","requires method","alloc"],["Alloc","requires method","dealloc"],["alloc","is a","method"],["alloc","has full name","alloc::alloc::Alloc::alloc"],["alloc","has attribute","unsafe"],["alloc","has argument","layout"],["layout","has type","Layout"],["alloc","has return type","Result<NonNull<u8>, AllocErr>"],["alloc","has description","Returns a pointer meeting the size and alignment guarantees of `layout`."],["dealloc","is a","method"],["dealloc","has full name","alloc::alloc::Alloc::dealloc"],["dealloc","has attribute","unsafe"],["dealloc","has argument","ptr"],["dealloc","has argument","layout"],["ptr","has type","NonNull<u8>"],["dealloc","has description","Deallocate the memory referenced by `ptr`."],["usable_size","is a","method"],["usable_size","has full name","alloc::alloc::Alloc::usable_size"],["usable_size","has argument","layout"],["usable_size","has return type","(usize, usize)"],["usable_size","has description","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`."],["realloc","is a","method"],["realloc","has full name","alloc::alloc::Alloc::realloc"],["realloc","has attribute","unsafe"],["realloc","has argument","ptr"],["realloc","has argument","layout"],["realloc","has argument","new_size"],["realloc","has return type","Result<NonNull<u8>, AllocErr>"],["realloc","has description","Returns a pointer suitable for holding data described by a new layout with `layout`’s alignment and a size given by `new_size`."],["AllocErr","is a","struct"],["AllocErr","has description","The `AllocErr` error indicates an allocation failure that may be due to resource exhaustion or to something wrong when combining the given input arguments with this allocator."],["CannotReallocInPlace","is a","struct"],["CannotReallocInPlace","has description","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout."],["Excess","is a","struct"],["Excess","has description","Represents the combination of a starting address and a total capacity of the returned block."],["Global","is a","struct"],["Global","has description","The global memory allocator."],["Global","implements","Alloc"],["Layout","is a","struct"],["Layout","has description","Layout of a block of memory."],["LayoutErr","is a","struct"],["LayoutErr","has description","The parameters given to `Layout::from_size_align` or some other `Layout` constructor do not satisfy its documented constraints."],["GlobalAlloc","is a","Trait"],["GlobalAlloc","has description","A memory allocator that can be registered as the standard library’s default though the `#[global_allocator]` attributes."],["alloc","is a","function"],["alloc","has full name","alloc::alloc::alloc"],["alloc","has description","Allocate memory with the global allocator."],["alloc_zeroed","is a","function"],["alloc_zeroed","has full name","alloc::alloc::alloc_zeroed"],["alloc_zeroed","has description","Allocate zero-initialized memory with the global allocator."],["dealloc","is a","function"],["dealloc","has full name","alloc::alloc::dealloc"],["dealloc","has description","Deallocate memory with the global allocator."],["handle_alloc_error","is a","function"],["handle_alloc_error","has full name","alloc::alloc::handle_alloc_error"],["handle_alloc_error","has description","Abort on memory allocation error or failure."],["realloc","is a","function"],["realloc","has full name","alloc::alloc::realloc"],["realloc","has description","Reallocate memory with the global allocator."]],"links":["struct.AllocErr.html","struct.CannotReallocInPlace.html","struct.Excess.html","struct.Global.html","struct.Layout.html","struct.LayoutErr.html","trait.Alloc.html","trait.GlobalAlloc.html","fn.alloc.html","fn.alloc_zeroed.html","fn.dealloc.html","fn.handle_alloc_error.html","fn.realloc.html","../../src/core/alloc.rs.html","https://github.com/rust-lang/rust/issues/32838","../../alloc/alloc/struct.Layout.html","../../alloc/alloc/fn.handle_alloc_error.html"],"create_time":"2025-03-14T17:00:48.213Z","id":"1a91a896-c1a4-4a73-b732-300fb12d6234","model":"deepseek-r1-250120","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/alloc/alloc/trait.Alloc.html","metrics":{"escapeCount":0,"costTime":182629,"totalUsage":{"prompt_tokens":23864,"completion_tokens":6032,"cached_tokens":0,"reasoning_tokens":4627},"length":69595},"extraInfo":{"startTime":"2025-03-14T16:57:45.367Z","examGroup":"full","sourceId":"05aff626-3bac-49b0-89ac-cbf16fee709d"}}