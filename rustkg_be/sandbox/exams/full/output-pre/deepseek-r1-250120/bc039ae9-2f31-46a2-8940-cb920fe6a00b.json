{"relations":["is a","has full name","stable since","is successor of","is predecessor of","inherits from","requires method","has argument","has return type","has description","implements"],"relation_triples":[["IndexMut","is a","Trait"],["IndexMut","has full name","std::ops::IndexMut"],["IndexMut","stable since","1.0.0"],["IndexMut","inherits from","Index"],["index_mut","is a","function"],["IndexMut","requires method","index_mut"],["index_mut","has argument","index_mut::self"],["index_mut","has argument","index_mut::index"],["index_mut","has return type","&mut Self::Output"],["IndexMut","has description","Used for indexing operations (container[index]) in mutable contexts."],["str","implements","IndexMut<Range<usize>>"],["String","implements","IndexMut<Range<usize>>"],["str","implements","IndexMut<RangeFrom<usize>>"],["String","implements","IndexMut<RangeFrom<usize>>"],["str","implements","IndexMut<RangeFull>"],["String","implements","IndexMut<RangeFull>"],["str","implements","IndexMut<RangeInclusive<usize>>"],["String","implements","IndexMut<RangeInclusive<usize>>"],["str","implements","IndexMut<RangeTo<usize>>"],["String","implements","IndexMut<RangeTo<usize>>"],["str","implements","IndexMut<RangeToInclusive<usize>>"],["String","implements","IndexMut<RangeToInclusive<usize>>"],["VecDeque<A>","implements","IndexMut<usize>"],["[T]","implements","IndexMut<I>"],["Vec<T>","implements","IndexMut<I>"],["Range","is a","struct"],["Range","has description","A (half-open) range bounded inclusively below and exclusively above (start..end)."],["RangeFrom","is a","struct"],["RangeFrom","has description","A range only bounded inclusively below (start..)."],["RangeFull","is a","struct"],["RangeFull","has description","An unbounded range (..)."],["RangeInclusive","is a","struct"],["RangeInclusive","has description","A range bounded inclusively below and above (start..=end)."],["RangeTo","is a","struct"],["RangeTo","has description","A range only bounded exclusively above (..end)."],["RangeToInclusive","is a","struct"],["RangeToInclusive","has description","A range only bounded inclusively above (..=end)."],["Bound","is a","enum"],["Bound","has description","An endpoint of a range of keys."],["GeneratorState","is a","enum"],["GeneratorState","has description","The result of a generator resumption."],["Add","is a","trait"],["Add","has description","The addition operator `+`."],["AddAssign","is a","trait"],["AddAssign","has description","The addition assignment operator `+=`."],["BitAnd","is a","trait"],["BitAnd","has description","The bitwise AND operator `&`."],["BitAndAssign","is a","trait"],["BitAndAssign","has description","The bitwise AND assignment operator `&=`."],["BitOr","is a","trait"],["BitOr","has description","The bitwise OR operator `|`."],["BitOrAssign","is a","trait"],["BitOrAssign","has description","The bitwise OR assignment operator `|=`."],["BitXor","is a","trait"],["BitXor","has description","The bitwise XOR operator `^`."],["BitXorAssign","is a","trait"],["BitXorAssign","has description","The bitwise XOR assignment operator `^=`."],["CoerceUnsized","is a","trait"],["CoerceUnsized","has description","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee."],["Deref","is a","trait"],["Deref","has description","Used for immutable dereferencing operations, like `*v`."],["DerefMut","is a","trait"],["DerefMut","has description","Used for mutable dereferencing operations, like in `*v = 1;`."],["Div","is a","trait"],["Div","has description","The division operator `/`."],["DivAssign","is a","trait"],["DivAssign","has description","The division assignment operator `/=`."],["Drop","is a","trait"],["Drop","has description","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'."],["Fn","is a","trait"],["Fn","has description","The version of the call operator that takes an immutable receiver."],["FnMut","is a","trait"],["FnMut","has description","The version of the call operator that takes a mutable receiver."],["FnOnce","is a","trait"],["FnOnce","has description","The version of the call operator that takes a by-value receiver."],["Generator","is a","trait"],["Generator","has description","The trait implemented by builtin generator types."],["Index","is a","trait"],["Index","has description","Used for indexing operations (`container[index]`) in immutable contexts."],["IndexMut","is a","trait"],["Mul","is a","trait"],["Mul","has description","The multiplication operator `*`."],["MulAssign","is a","trait"],["MulAssign","has description","The multiplication assignment operator `*=`."],["Neg","is a","trait"],["Neg","has description","The unary negation operator `-`."],["Not","is a","trait"],["Not","has description","The unary logical negation operator `!`."],["RangeBounds","is a","trait"],["RangeBounds","has description","`RangeBounds` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`."],["Rem","is a","trait"],["Rem","has description","The remainder operator `%`."],["RemAssign","is a","trait"],["RemAssign","has description","The remainder assignment operator `%=`."],["Shl","is a","trait"],["Shl","has description","The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference."],["ShlAssign","is a","trait"],["ShlAssign","has description","The left shift assignment operator `<<=`."],["Shr","is a","trait"],["Shr","has description","The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference."],["ShrAssign","is a","trait"],["ShrAssign","has description","The right shift assignment operator `>>=`."],["Sub","is a","trait"],["Sub","has description","The subtraction operator `-`."],["SubAssign","is a","trait"],["SubAssign","has description","The subtraction assignment operator `-=`."],["Try","is a","trait"],["Try","has description","A trait for customizing the behavior of the `?` operator."]],"links":["../../std/index.html","struct.Range.html","struct.RangeFrom.html","struct.RangeFull.html","struct.RangeInclusive.html","struct.RangeTo.html","struct.RangeToInclusive.html","enum.Bound.html","enum.GeneratorState.html","trait.Add.html","trait.AddAssign.html","trait.BitAnd.html","trait.BitAndAssign.html","trait.BitOr.html","trait.BitOrAssign.html","trait.BitXor.html","trait.BitXorAssign.html","trait.CoerceUnsized.html","trait.Deref.html","trait.DerefMut.html","trait.Div.html","trait.DivAssign.html","trait.Drop.html","trait.Fn.html","trait.FnMut.html","trait.FnOnce.html","trait.Generator.html","trait.Index.html","trait.Mul.html","trait.MulAssign.html","trait.Neg.html","trait.Not.html","trait.RangeBounds.html","trait.Rem.html","trait.RemAssign.html","trait.Shl.html","trait.ShlAssign.html","trait.Shr.html","trait.ShrAssign.html","trait.Sub.html","trait.SubAssign.html","trait.Try.html","../../src/core/ops/index.rs.html","../../src/core/str/mod.rs.html","../../src/alloc/string.rs.html","../../src/alloc/collections/vec_deque.rs.html","../../src/alloc/vec.rs.html","../../std/ops/trait.Index.html","../../std/marker/trait.Sized.html","../../std/process/struct.Command.html","../../std/collections/vec_deque/struct.VecDeque.html","../index.html","index.html"],"create_time":"2025-03-14T17:00:34.486Z","id":"bc039ae9-2f31-46a2-8940-cb920fe6a00b","model":"deepseek-r1-250120","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/ops/trait.IndexMut.html","metrics":{"escapeCount":0,"costTime":176163,"totalUsage":{"prompt_tokens":19967,"completion_tokens":5700,"cached_tokens":0,"reasoning_tokens":3096},"length":51145},"extraInfo":{"startTime":"2025-03-14T16:57:38.113Z","examGroup":"full","sourceId":"1f8962b2-201e-4b73-9e69-a70ef742f0d5"}}