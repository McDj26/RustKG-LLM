{"create_time":"2025-03-23T08:50:19.769Z","id":"923ecd9c-9c0e-4571-9d8d-738f027b7cf2","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/primitive.u8.html","relations":["has associated type","has declaration","has description","has full name","has method","has parameter","has parameter type","has return type","has stability","has type","implements","is a","stable since"],"relation_triples":[["&'a u8","has associated type","Output"],["&'a u8","has method","mul"],["&'a u8","implements","Mul<u8>"],["&'a u8","implements","Shr<&'a i8>"],["&'a u8","implements","Shr<i64>"],["&'a u8","implements","Shr<i8>"],["&'b u8","has associated type","Output"],["&'b u8","has method","rem"],["&'b u8","implements","Rem<&'a u8>"],["&mut self","has type","u8"],["Add<u8>","has associated type","Output"],["Add<u8>","has method","add"],["AsciiExt","has associated type","Owned"],["AsciiExt","has method","is_ascii"],["Binary::fmt","has description","Formats the value using the given formatter."],["Binary::fmt","has parameter","f"],["Binary::fmt","has parameter","self"],["Binary::fmt","has return type","Result<(), Error>"],["Binary::fmt","is a","function"],["Binary::fmt::f","has type","&mut Formatter"],["Binary::fmt::self","has type","&u8"],["BitAnd<u8>","has associated type","Output"],["BitAnd<u8>::Output","has type","u8"],["BitAnd<u8>::bitand","has description","Performs the & operation."],["BitAnd<u8>::bitand","has parameter","other"],["BitAnd<u8>::bitand","has parameter","self"],["BitAnd<u8>::bitand","has return type","u8"],["BitAndAssign<u8>","has method","bitand_assign"],["BitXor<u8>","has associated type","Output"],["BitXor<u8>::Output","has type","u8"],["BitXor<u8>::bitxor","has return type","u8"],["BitXor<u8>::bitxor","is a","function"],["Debug::fmt","has description","Formats the value using the given formatter."],["Debug::fmt","has parameter","f"],["Debug::fmt","has parameter","self"],["Debug::fmt","has return type","Result<(), Error>"],["Debug::fmt","is a","function"],["Debug::fmt::f","has type","&mut Formatter"],["Debug::fmt::self","has type","&u8"],["Default::default","has description","Returns the default value of 0"],["Default::default","has return type","u8"],["Display","has method","fmt"],["From<bool>","stable since","1.28.0"],["From<bool>::from","has description","Converts a bool to a u8. The resulting value is 0 for false and 1 for true values."],["From<bool>::from","has return type","u8"],["From<bool>::from","is a","function"],["FromStr for u8","has associated type","Err"],["FromStr for u8::Err","has type","ParseIntError"],["LowerHex","has method","fmt"],["Octal::fmt","has description","Formats the value using the given formatter."],["Octal::fmt","has parameter","f"],["Octal::fmt","has parameter","self"],["Octal::fmt","has return type","Result<(), Error>"],["Output","has description","The resulting type after applying the >> operator."],["Output","has type","u8"],["Owned","has type","u8"],["Product<u8>","has method","product"],["Shl<&'a isize>","has associated type","Output"],["Shl<&'a isize>::shl","has description","Performs the << operation."],["Shl<&'a isize>::shl","has parameter","other"],["Shl<&'a isize>::shl","has parameter","self"],["Shl<i128> for u8","has associated type","Output"],["Shl<i128> for u8::Output","has type","u8"],["Shl<i128>","has method","shl"],["Shl<i16> for u8","has associated type","Output"],["Shl<i16> for u8::Output","has type","u8"],["Shl<i16>","has method","shl"],["Shl<i32> for u8","has associated type","Output"],["Shl<i32> for u8::Output","has type","u8"],["Shl<i32>","has method","shl"],["Shl<i8>","has associated type","Output"],["Shl<i8>::Output","has type","u8"],["Shl<i8>::shl","has description","Performs the << operation."],["Shl<i8>::shl","has parameter","other"],["Shl<i8>::shl","has parameter","self"],["Shl<i8>::shl","has return type","u8"],["Shl<isize>","has associated type","Output"],["Shl<isize>::Output","has type","u8"],["Shl<isize>::shl","has description","Performs the << operation."],["Shl<isize>::shl","has parameter","other"],["Shl<isize>::shl","has parameter","self"],["Shl<isize>::shl","has return type","u8"],["Shl<u16> for u8","has associated type","Output"],["Shl<u16> for u8::Output","has type","u8"],["Shl<u16>","has method","shl"],["Shl<u32> for u8","has associated type","Output"],["Shl<u32> for u8::Output","has type","u8"],["Shl<u32>","has associated type","Output"],["Shl<u32>","has method","shl"],["Shl<u32>::Output","has type","u8"],["Shl<u32>::shl","has description","Performs the << operation."],["Shl<u32>::shl","has parameter","other"],["Shl<u32>::shl","has parameter","self"],["Shl<u32>::shl","has return type","u8"],["Shl<u64> for u8","has associated type","Output"],["Shl<u64> for u8::Output","has type","u8"],["Shl<u64>","has method","shl"],["Shl<u8> for u8","has associated type","Output"],["Shl<u8> for u8::Output","has type","u8"],["Shl<u8>","has method","shl"],["Shl<usize> for u8","has associated type","Output"],["Shl<usize> for u8::Output","has type","u8"],["Shl<usize>","has method","shl"],["ShlAssign<&'a u64>::shl_assign","has description","Performs the <<= operation."],["ShlAssign<&'a u64>::shl_assign","has parameter","&mut self"],["ShlAssign<&'a u64>::shl_assign","has parameter","other"],["Shr<&'a i8>","has associated type","Output"],["Shr<&'a i8>","has method","shr"],["Shr<i16>","has associated type","Output"],["Shr<i16>","has method","shr"],["Shr<i32> for u8","has associated type","Output"],["Shr<i32> for u8","has method","shr"],["Shr<i64>","has associated type","Output"],["Shr<i64>","has method","shr"],["Shr<i8> for u8","has associated type","Output"],["Shr<i8> for u8","has method","shr"],["Shr<i8> for u8::Output","has type","u8"],["Shr<i8>","has associated type","Output"],["Shr<i8>","has method","shr"],["Shr<u128> for u8","has associated type","Output"],["Shr<u128> for u8","has method","shr"],["Shr<u128> for u8::Output","has type","u8"],["Shr<u16> for &'a u8","has associated type","Output"],["Shr<u16> for &'a u8","has method","shr"],["Shr<u16> for &'a u8::Output","has type","<u8 as Shr<u16>>::Output"],["Shr<u32> for u8","has associated type","Output"],["Shr<u32> for u8","has method","shr"],["Shr<u64> for u8","has associated type","Output"],["Shr<u64> for u8","has method","shr"],["Shr<usize>","has associated type","Output"],["Shr<usize>","has method","shr"],["Step::steps_between","has description","Returns the number of steps between two step objects. The count is inclusive of start and exclusive of end."],["Step::steps_between","has parameter","end"],["Step::steps_between","has parameter","start"],["Step::steps_between","has return type","Option<usize>"],["Step::steps_between","has stability","nightly-only experimental API (#42168)"],["Step::steps_between","is a","function"],["Step::steps_between::end","has type","&u8"],["Step::steps_between::start","has type","&u8"],["Sub<u8> for u8","has associated type","Output"],["Sub<u8> for u8","has method","sub"],["Sum<&'a u8>","stable since","1.12.0"],["Sum<&'a u8>::sum","has description","Method which takes an iterator and generates Self from the elements by 'summing up' the items."],["Sum<&'a u8>::sum","has parameter","iter"],["Sum<&'a u8>::sum","has return type","u8"],["Sum<&'a u8>::sum","is a","function"],["Sum<&'a u8>::sum::iter","has type","Iterator<Item = &'a u8>"],["Sum<u8>","stable since","1.12.0"],["Sum<u8>::sum","has description","Method which takes an iterator and generates Self from the elements by 'summing up' the items."],["Sum<u8>::sum","has parameter","iter"],["Sum<u8>::sum","has return type","u8"],["Sum<u8>::sum","is a","function"],["Sum<u8>::sum::iter","has type","Iterator<Item = u8>"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","Into"],["T","implements","ToOwned"],["T","implements","ToString"],["T","implements","TryInto"],["TryFrom<i8> for u8","has associated type","Error"],["TryFrom<i8> for u8::Error","has type","TryFromIntError"],["TryFrom<u16> for u8","has associated type","Error"],["TryFrom<u16> for u8::Error","has type","TryFromIntError"],["TryInto","has associated type","Error"],["TryInto::Error","has type","<U as TryFrom<T>>::Error"],["add","has description","Performs the + operation."],["add","has parameter","other"],["add","has parameter","self"],["add","has return type","u8"],["bitand_assign","has description","Performs the &= operation."],["bitand_assign","has parameter","other"],["bitand_assign","has parameter","self"],["bitor_assign","has description","Performs the |= operation."],["bitxor_assign","has description","Performs the ^= operation."],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["checked_add","has declaration","pub fn checked_add(self, rhs: u8) -> Option<u8>"],["checked_add","has description","Checked integer addition. Computes self + rhs, returning None if overflow occurred."],["checked_add","has parameter","checked_add::rhs"],["checked_add","has parameter","checked_add::self"],["checked_add","has return type","Option<u8>"],["checked_add","is a","function"],["checked_add::rhs","has type","u8"],["checked_add::self","has type","u8"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has parameter type","&mut T"],["clone_into","has parameter","target"],["count_zeros","has declaration","pub const fn count_zeros(self) -> u32"],["count_zeros","has description","Returns the number of zeros in the binary representation of self."],["count_zeros","has parameter","count_zeros::self"],["count_zeros","has return type","u32"],["count_zeros","is a","function"],["count_zeros::self","has type","u8"],["div","has description","Performs the / operation."],["eq_ignore_ascii_case","has description","Checks that two values are an ASCII case-insensitive match."],["eq_ignore_ascii_case","has parameter","other"],["eq_ignore_ascii_case","has return type","bool"],["eq_ignore_ascii_case","is a","method"],["eq_ignore_ascii_case","stable since","1.23.0"],["exp","has type","u32"],["f","has type","&mut Formatter"],["f","has type","Formatter"],["fmt","has description","Formats the value using the given formatter."],["fmt","has parameter","f"],["fmt","has parameter","self"],["fmt","has return type","Result<(), Error>"],["fn shl(self, other: &'a i32)","has description","Performs the << operation."],["fn shl(self, other: &'a i32)","has parameter","other: &'a i32"],["fn shl(self, other: &'a i32)","has return type","<u8 as Shl<i32>>::Output"],["from_str_radix","has parameter","radix"],["from_str_radix","has parameter","src"],["from_str_radix","has return type","Result<u8, ParseIntError>"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["impl Shl<i8> for u8","has associated type","Output = u8"],["impl Shl<i8> for u8","has method","fn shl(self, other: i8) -> u8"],["impl Shl<i8> for u8","implements","Shl<i8>"],["impl Shl<u128> for u8","has associated type","Output = u8"],["impl Shl<u128> for u8","implements","Shl<u128>"],["impl Shl<u8> for u8","has associated type","Output = u8"],["impl Shl<u8> for u8","implements","Shl<u8>"],["impl<'a, 'b> Shl<&'a i32> for &'b u8","has associated type","Output = <u8 as Shl<i32>>::Output"],["impl<'a, 'b> Shl<&'a i32> for &'b u8","has method","fn shl(self, other: &'a i32) -> <u8 as Shl<i32>>::Output"],["impl<'a, 'b> Shl<&'a i32> for &'b u8","implements","Shl<&'a i32>"],["impl<'a, 'b> Shl<&'a u128> for &'b u8","has associated type","Output = <u8 as Shl<u128>>::Output"],["impl<'a, 'b> Shl<&'a u128> for &'b u8","has method","fn shl(self, other: &'a u128) -> <u8 as Shl<u128>>::Output"],["impl<'a, 'b> Shl<&'a u128> for &'b u8","implements","Shl<&'a u128>"],["impl<'a> Shl<i8> for &'a u8","has associated type","Output = <u8 as Shl<i8>>::Output"],["impl<'a> Shl<i8> for &'a u8","implements","Shl<i8>"],["impl<'a> Shl<u64> for &'a u8","has associated type","Output = <u8 as Shl<u64>>::Output"],["impl<'a> Shl<u64> for &'a u8","implements","Shl<u64>"],["into","has description","Performs the conversion."],["into","has return type","U"],["is_ascii","has return type","bool"],["is_ascii_alphabetic","has description","Checks if the value is an ASCII alphabetic character."],["is_ascii_alphabetic","has return type","bool"],["is_ascii_alphabetic","is a","method"],["is_ascii_alphabetic","stable since","1.24.0"],["is_ascii_alphanumeric","has description","Checks if the value is an ASCII alphanumeric character."],["is_ascii_alphanumeric","has return type","bool"],["is_ascii_alphanumeric","is a","method"],["is_ascii_alphanumeric","stable since","1.24.0"],["is_ascii_control","has description","Checks if the value is an ASCII control character: U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE."],["is_ascii_control","has parameter","self"],["is_ascii_control","has return type","bool"],["is_ascii_control","stable since","1.24.0"],["is_ascii_digit","has description","Checks if the value is an ASCII decimal digit."],["is_ascii_digit","has return type","bool"],["is_ascii_digit","is a","method"],["is_ascii_digit","stable since","1.24.0"],["is_ascii_graphic","has description","Checks if the value is an ASCII graphic character: U+0021 '!' ... U+007E '~'."],["is_ascii_graphic","has parameter","self"],["is_ascii_graphic","has return type","bool"],["is_ascii_graphic","stable since","1.24.0"],["is_ascii_hexdigit","has description","Checks if the value is an ASCII hexadecimal digit."],["is_ascii_hexdigit","has return type","bool"],["is_ascii_hexdigit","is a","method"],["is_ascii_hexdigit","stable since","1.24.0"],["is_ascii_lowercase","has description","Checks if the value is an ASCII lowercase character."],["is_ascii_lowercase","has return type","bool"],["is_ascii_lowercase","is a","method"],["is_ascii_lowercase","stable since","1.24.0"],["is_ascii_punctuation","has description","Checks if the value is an ASCII punctuation character."],["is_ascii_punctuation","has return type","bool"],["is_ascii_punctuation","is a","method"],["is_ascii_punctuation","stable since","1.24.0"],["is_ascii_uppercase","has description","Checks if the value is an ASCII uppercase character."],["is_ascii_uppercase","has return type","bool"],["is_ascii_uppercase","is a","method"],["is_ascii_uppercase","stable since","1.24.0"],["is_ascii_whitespace","has description","Checks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN."],["is_ascii_whitespace","has parameter","self"],["is_ascii_whitespace","has return type","bool"],["is_ascii_whitespace","stable since","1.24.0"],["leading_zeros","has declaration","pub const fn leading_zeros(self) -> u32"],["leading_zeros","has description","Returns the number of leading zeros in the binary representation of self."],["leading_zeros","has parameter","leading_zeros::self"],["leading_zeros","has return type","u32"],["leading_zeros","is a","function"],["leading_zeros::self","has type","u8"],["make_ascii_lowercase","has description","Converts this value to its ASCII lower case equivalent in-place."],["make_ascii_lowercase","is a","method"],["make_ascii_lowercase","stable since","1.23.0"],["make_ascii_uppercase","has description","Converts this value to its ASCII upper case equivalent in-place."],["make_ascii_uppercase","is a","method"],["make_ascii_uppercase","stable since","1.23.0"],["max_value","has description","Returns the largest value that can be represented by this integer type."],["max_value","has return type","u8"],["min_value","has description","Returns the smallest value that can be represented by this integer type."],["min_value","has return type","u8"],["mul","has description","Performs the * operation."],["mul","has parameter","other"],["mul","has parameter","self"],["mul","has return type","<u8 as Mul<u8>>::Output"],["mul","has return type","u8"],["other","has type","&'a i8"],["other","has type","&'a isize"],["other","has type","&'a u64"],["other","has type","&'a u8"],["other","has type","&i8"],["other","has type","&u8"],["other","has type","i16"],["other","has type","i32"],["other","has type","i64"],["other","has type","i8"],["other","has type","isize"],["other","has type","u128"],["other","has type","u16"],["other","has type","u32"],["other","has type","u64"],["other","has type","u8"],["other","has type","usize"],["overflowing_mod_euc","has declaration","pub fn overflowing_mod_euc(self, rhs: u8) -> (u8, bool)"],["overflowing_mod_euc","has description","Calculates the remainder self.mod_euc(rhs) by Euclidean division. Returns a tuple of the modulo after dividing along with a boolean indicating whether an arithmetic overflow would occur. Note that for unsigned integers overflow never occurs, so the second value is always false. Panics if rhs is 0."],["overflowing_mod_euc","has return type","(u8, bool)"],["overflowing_mod_euc","has stability","nightly-only experimental API. (euclidean_division #49048)"],["overflowing_mod_euc::rhs","has type","u8"],["overflowing_mod_euc::self","has type","u8"],["overflowing_neg","has declaration","pub fn overflowing_neg(self) -> (u8, bool)"],["overflowing_neg","has description","Negates self in an overflowing fashion. Returns !self + 1 using wrapping operations. Note that for positive unsigned values overflow always occurs, but negating 0 does not overflow."],["overflowing_neg","has return type","(u8, bool)"],["overflowing_neg","stable since","1.7.0"],["overflowing_neg::self","has type","u8"],["overflowing_rem","has declaration","pub fn overflowing_rem(self, rhs: u8) -> (u8, bool)"],["overflowing_rem","has description","Calculates the remainder when self is divided by rhs. Returns a tuple of the remainder after dividing along with a boolean indicating whether an arithmetic overflow would occur. Note that for unsigned integers overflow never occurs, so the second value is always false. Panics if rhs is 0."],["overflowing_rem","has parameter","rhs"],["overflowing_rem","has parameter","self"],["overflowing_rem","has return type","(u8, bool)"],["overflowing_rem","stable since","1.7.0"],["overflowing_rem::rhs","has type","u8"],["overflowing_rem::self","has type","u8"],["overflowing_shl","has declaration","pub const fn overflowing_shl(self, rhs: u32) -> (u8, bool)"],["overflowing_shl","has return type","(u8, bool)"],["overflowing_shl","stable since","1.7.0"],["overflowing_shl::rhs","has type","u32"],["overflowing_shr","has declaration","pub const fn overflowing_shr(self, rhs: u32) -> (u8, bool)"],["overflowing_shr","has return type","(u8, bool)"],["overflowing_shr","stable since","1.7.0"],["overflowing_shr::rhs","has type","u32"],["pow","has declaration","pub fn pow(self, exp: u32) -> u8"],["pow","has description","Raises self to the power of exp using exponentiation by squaring."],["pow","has return type","u8"],["pow::exp","has type","u32"],["product","has description","Method which takes an iterator and generates Self from the elements by multiplying the items."],["product","has return type","u8"],["radix","has type","u32"],["rem","has description","Performs the % operation."],["rem","has parameter","other"],["rem","has parameter","self"],["rem","has return type","<u8 as Rem<u8>>::Output"],["rem","has return type","u8"],["reverse_bits","has declaration","pub const fn reverse_bits(self) -> u8"],["reverse_bits","has description","Reverses the bit pattern of the integer."],["reverse_bits","has parameter","reverse_bits::self"],["reverse_bits","has return type","u8"],["reverse_bits","has stability","nightly-only experimental"],["reverse_bits","is a","function"],["reverse_bits::self","has type","u8"],["rhs","has type","u8"],["rotate_left","has declaration","pub const fn rotate_left(self, n: u32) -> u8"],["rotate_left","has description","Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."],["rotate_left","has parameter","rotate_left::n"],["rotate_left","has parameter","rotate_left::self"],["rotate_left","has return type","u8"],["rotate_left","is a","function"],["rotate_left::n","has type","u32"],["rotate_left::self","has type","u8"],["rotate_right","has declaration","pub const fn rotate_right(self, n: u32) -> u8"],["rotate_right","has description","Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."],["rotate_right","has parameter","rotate_right::n"],["rotate_right","has parameter","rotate_right::self"],["rotate_right","has return type","u8"],["rotate_right","is a","function"],["rotate_right::n","has type","u32"],["rotate_right::self","has type","u8"],["saturating_add","has declaration","pub fn saturating_add(self, rhs: u8) -> u8"],["saturating_add","has description","Saturating integer addition. Computes self + rhs, saturating at the numeric bounds instead of overflowing."],["saturating_add","has parameter","rhs"],["saturating_add","has parameter","self"],["saturating_add","has return type","u8"],["saturating_mul","has declaration","pub fn saturating_mul(self, rhs: u8) -> u8"],["saturating_mul","has description","Saturating integer multiplication. Computes self * rhs, saturating at the numeric bounds instead of overflowing."],["saturating_mul","has parameter","rhs"],["saturating_mul","has parameter","self"],["saturating_mul","has return type","u8"],["saturating_mul","stable since","1.7.0"],["saturating_pow","has declaration","pub fn saturating_pow(self, exp: u32) -> u8"],["saturating_pow","has description","Saturating integer exponentiation. Computes self.pow(exp), saturating at the numeric bounds instead of overflowing."],["saturating_pow","has parameter","exp"],["saturating_pow","has parameter","self"],["saturating_pow","has return type","u8"],["saturating_pow","has stability","This is a nightly-only experimental API. (#48320)"],["saturating_sub","has declaration","pub fn saturating_sub(self, rhs: u8) -> u8"],["saturating_sub","has description","Saturating integer subtraction. Computes self - rhs, saturating at the numeric bounds instead of overflowing."],["saturating_sub","has parameter","rhs"],["saturating_sub","has parameter","self"],["saturating_sub","has return type","u8"],["self","has type","&'a u8"],["self","has type","&'b u8"],["self","has type","&mut u8"],["self","has type","&u8"],["self","has type","u8"],["shl","has description","Performs the << operation."],["shl","has parameter","i128"],["shl","has parameter","other"],["shl","has parameter","self"],["shl","has return type","u8"],["shl::i128","has type","i128"],["shl::self","has type","u8"],["shl_assign","has description","Performs the <<= operation."],["shr","has description","Performs the >> operation."],["shr","has parameter","other"],["shr","has parameter","self"],["shr","has return type","<u8 as Shr<i64>>::Output"],["shr","has return type","<u8 as Shr<i8>>::Output"],["shr","has return type","<u8 as Shr<u16>>::Output"],["shr","has return type","u8"],["source","has type","&u8"],["src","has type","&str"],["sub","has description","Performs the - operation."],["sub","has parameter","other"],["sub","has parameter","self"],["sub","has return type","u8"],["swap_bytes","has declaration","pub const fn swap_bytes(self) -> u8"],["swap_bytes","has description","Reverses the byte order of the integer."],["swap_bytes","has parameter","swap_bytes::self"],["swap_bytes","has return type","u8"],["swap_bytes","is a","function"],["swap_bytes::self","has type","u8"],["to_ascii_lowercase","has description","Makes a copy of the value in its ASCII lower case equivalent."],["to_ascii_lowercase","has return type","u8"],["to_ascii_lowercase","is a","method"],["to_ascii_lowercase","stable since","1.23.0"],["to_ascii_uppercase","has description","Makes a copy of the value in its ASCII upper case equivalent."],["to_ascii_uppercase","has return type","u8"],["to_ascii_uppercase","is a","method"],["to_ascii_uppercase","stable since","1.23.0"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_string","has description","Converts the given value to a String."],["to_string","has return type","String"],["trailing_zeros","has declaration","pub const fn trailing_zeros(self) -> u32"],["trailing_zeros","has description","Returns the number of trailing zeros in the binary representation of self."],["trailing_zeros","has parameter","trailing_zeros::self"],["trailing_zeros","has return type","u32"],["trailing_zeros","is a","function"],["trailing_zeros::self","has type","u8"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["u8","has associated type","Output"],["u8","has description","This operation satisfies n % d == n - (n / d) * d. The result has the same sign as the left operand."],["u8","has method","checked_add"],["u8","has method","count_zeros"],["u8","has method","eq_ignore_ascii_case"],["u8","has method","from_str_radix"],["u8","has method","is_ascii_alphabetic"],["u8","has method","is_ascii_alphanumeric"],["u8","has method","is_ascii_control"],["u8","has method","is_ascii_digit"],["u8","has method","is_ascii_graphic"],["u8","has method","is_ascii_hexdigit"],["u8","has method","is_ascii_lowercase"],["u8","has method","is_ascii_punctuation"],["u8","has method","is_ascii_uppercase"],["u8","has method","is_ascii_whitespace"],["u8","has method","leading_zeros"],["u8","has method","make_ascii_lowercase"],["u8","has method","make_ascii_uppercase"],["u8","has method","max_value"],["u8","has method","min_value"],["u8","has method","mul"],["u8","has method","overflowing_mod_euc"],["u8","has method","overflowing_neg"],["u8","has method","overflowing_rem"],["u8","has method","overflowing_shl"],["u8","has method","overflowing_shr"],["u8","has method","pow"],["u8","has method","rem"],["u8","has method","reverse_bits"],["u8","has method","rotate_left"],["u8","has method","rotate_right"],["u8","has method","saturating_add"],["u8","has method","saturating_mul"],["u8","has method","saturating_pow"],["u8","has method","saturating_sub"],["u8","has method","shl"],["u8","has method","swap_bytes"],["u8","has method","to_ascii_lowercase"],["u8","has method","to_ascii_uppercase"],["u8","has method","trailing_zeros"],["u8","has method","wrapping_add"],["u8","has method","wrapping_div"],["u8","implements","Add<u8>"],["u8","implements","AddAssign<&'a u8>"],["u8","implements","AddAssign<u8>"],["u8","implements","AsciiExt"],["u8","implements","Binary"],["u8","implements","BitAnd<u8>"],["u8","implements","BitAndAssign<&'a u8>"],["u8","implements","BitAndAssign<u8>"],["u8","implements","BitOrAssign<&'a u8>"],["u8","implements","BitOrAssign<u8>"],["u8","implements","BitXor<u8>"],["u8","implements","BitXorAssign<&'a u8>"],["u8","implements","BitXorAssign<u8>"],["u8","implements","Clone"],["u8","implements","Debug"],["u8","implements","Default"],["u8","implements","Display"],["u8","implements","Div<&'a u8>"],["u8","implements","Div<u8>"],["u8","implements","DivAssign<&'a u8>"],["u8","implements","DivAssign<u8>"],["u8","implements","From<bool>"],["u8","implements","FromStr"],["u8","implements","Hash"],["u8","implements","LowerHex"],["u8","implements","Mul<u8>"],["u8","implements","MulAssign<&'a u8>"],["u8","implements","MulAssign<u8>"],["u8","implements","Octal"],["u8","implements","Ord"],["u8","implements","PartialOrd<u8>"],["u8","implements","Product<u8>"],["u8","implements","Rem<u8>"],["u8","implements","RemAssign<&'a u8>"],["u8","implements","RemAssign<u8>"],["u8","implements","Shl<&'a isize>"],["u8","implements","Shl<i128>"],["u8","implements","Shl<i16>"],["u8","implements","Shl<i32>"],["u8","implements","Shl<i8>"],["u8","implements","Shl<isize>"],["u8","implements","Shl<u16>"],["u8","implements","Shl<u32>"],["u8","implements","Shl<u64>"],["u8","implements","Shl<u8>"],["u8","implements","Shl<usize>"],["u8","implements","ShlAssign<&'a i128>"],["u8","implements","ShlAssign<&'a i8>"],["u8","implements","ShlAssign<&'a u16>"],["u8","implements","ShlAssign<&'a u32>"],["u8","implements","ShlAssign<&'a u64>"],["u8","implements","ShlAssign<i8>"],["u8","implements","ShlAssign<u128>"],["u8","implements","ShlAssign<usize>"],["u8","implements","Shr<i16>"],["u8","implements","Shr<i32>"],["u8","implements","Shr<i8>"],["u8","implements","Shr<u128>"],["u8","implements","Shr<u16>"],["u8","implements","Shr<u32>"],["u8","implements","Shr<u64>"],["u8","implements","Shr<usize>"],["u8","implements","ShrAssign<&i8>"],["u8","implements","ShrAssign<u16>"],["u8","implements","ShrAssign<u64>"],["u8","implements","Step"],["u8","implements","Sub<u8>"],["u8","implements","SubAssign<&'a u8>"],["u8","implements","SubAssign<u8>"],["u8","implements","Sum<&'a u8>"],["u8","implements","Sum<u8>"],["u8","implements","TryFrom<i128>"],["u8","implements","TryFrom<i16>"],["u8","implements","TryFrom<i32>"],["u8","implements","TryFrom<i64>"],["u8","implements","TryFrom<i8>"],["u8","implements","TryFrom<isize>"],["u8","implements","TryFrom<u128>"],["u8","implements","TryFrom<u16>"],["u8","implements","TryFrom<u32>"],["u8","implements","TryFrom<u64>"],["u8","implements","TryFrom<usize>"],["u8","is a","primitive"],["u8","is a","primitive type"],["u8","stable since","1.0.0"],["u8","stable since","1.22.0"],["u8","stable since","1.8.0"],["u8::Clone::clone","has description","Returns a copy of the value."],["u8::Clone::clone","has parameter","self"],["u8::Clone::clone","has return type","u8"],["u8::Clone::clone_from","has description","Performs copy-assignment from source."],["u8::Clone::clone_from","has parameter","self"],["u8::Clone::clone_from","has parameter","source"],["u8::Ord::cmp","has description","This method returns an Ordering between self and other."],["u8::Ord::cmp","has parameter","other"],["u8::Ord::cmp","has parameter","self"],["u8::Ord::cmp","has return type","Ordering"],["u8::PartialOrd<u8>::partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["u8::PartialOrd<u8>::partial_cmp","has parameter","other"],["u8::PartialOrd<u8>::partial_cmp","has parameter","self"],["u8::PartialOrd<u8>::partial_cmp","has return type","Option<Ordering>"],["u8::ShrAssign<&i8>::shr_assign","has declaration","fn shr_assign(&mut self, other: &i8)"],["u8::ShrAssign<&i8>::shr_assign","has description","Performs the >>= operation."],["u8::ShrAssign<&i8>::shr_assign","has parameter","other"],["u8::ShrAssign<&i8>::shr_assign","stable since","1.22.0"],["u8::ShrAssign<u16>::shr_assign","has declaration","fn shr_assign(&mut self, other: u16)"],["u8::ShrAssign<u16>::shr_assign","has description","Performs the >>= operation."],["u8::ShrAssign<u16>::shr_assign","has parameter","other"],["u8::ShrAssign<u16>::shr_assign","stable since","1.8.0"],["u8::ShrAssign<u64>::shr_assign","has declaration","fn shr_assign(&mut self, other: u64)"],["u8::ShrAssign<u64>::shr_assign","has description","Performs the >>= operation."],["u8::ShrAssign<u64>::shr_assign","has parameter","other"],["u8::ShrAssign<u64>::shr_assign","stable since","1.8.0"],["u8::add_assign(&'a u8)","has description","Performs the += operation."],["u8::add_assign(&'a u8)","has parameter","&'a u8"],["u8::add_assign(&'a u8)","stable since","1.22.0"],["u8::add_assign(u8)","has description","Performs the += operation."],["u8::add_assign(u8)","has parameter","u8"],["u8::add_assign(u8)","stable since","1.8.0"],["u8::div_assign(&'a u8)","has description","Performs the /= operation."],["u8::div_assign(&'a u8)","has parameter","&'a u8"],["u8::div_assign(&'a u8)","stable since","1.22.0"],["u8::div_assign(u8)","has description","Performs the /= operation."],["u8::div_assign(u8)","has parameter","u8"],["u8::div_assign(u8)","stable since","1.8.0"],["u8::from_str","has description","Parses a string s to return a value of this type."],["u8::from_str","has parameter","str"],["u8::from_str","has return type","Result<u8, ParseIntError>"],["u8::hash","has description","Feeds this value into the given Hasher."],["u8::hash","has parameter","H"],["u8::mul_assign(&'a u8)","has description","Performs the *= operation."],["u8::mul_assign(&'a u8)","has parameter","&'a u8"],["u8::mul_assign(&'a u8)","stable since","1.22.0"],["u8::mul_assign(u8)","has description","Performs the *= operation."],["u8::mul_assign(u8)","has parameter","u8"],["u8::mul_assign(u8)","stable since","1.8.0"],["u8::rem_assign(&'a u8)","has description","Performs the %= operation."],["u8::rem_assign(&'a u8)","has parameter","&'a u8"],["u8::rem_assign(&'a u8)","stable since","1.22.0"],["u8::rem_assign(u8)","has description","Performs the %= operation."],["u8::rem_assign(u8)","has parameter","u8"],["u8::rem_assign(u8)","stable since","1.8.0"],["u8::sub_assign(&'a u8)","has description","Performs the -= operation."],["u8::sub_assign(&'a u8)","has parameter","&'a u8"],["u8::sub_assign(&'a u8)","stable since","1.22.0"],["u8::sub_assign(u8)","has description","Performs the -= operation."],["u8::sub_assign(u8)","has parameter","u8"],["u8::sub_assign(u8)","stable since","1.8.0"],["u8::try_from(i8)","has description","Performs the conversion."],["u8::try_from(i8)","has parameter","i8"],["u8::try_from(i8)","has return type","Result<u8, TryFromIntError>"],["u8::try_from(i8)","has stability","nightly-only experimental API (try_from #33417)"],["u8::try_from(u16)","has description","Performs the conversion."],["u8::try_from(u16)","has parameter","u16"],["u8::try_from(u16)","has return type","Result<u8, TryFromIntError>"],["u8::try_from(u16)","has stability","nightly-only experimental API (try_from #33417)"],["wrapping_add","has declaration","pub const fn wrapping_add(self, rhs: u8) -> u8"],["wrapping_add","has description","Wrapping (modular) addition. Computes self + rhs, wrapping around at the boundary of the type."],["wrapping_add","has parameter","rhs"],["wrapping_add","has parameter","self"],["wrapping_add","has return type","u8"],["wrapping_div","has declaration","pub fn wrapping_div(self, rhs: u8) -> u8"],["wrapping_div","has description","Wrapping (modular) division. Computes self / rhs. Wrapped division on unsigned types is just normal division."],["wrapping_div","has parameter","rhs"],["wrapping_div","has parameter","self"],["wrapping_div","has return type","u8"],["wrapping_div","stable since","1.2.0"]],"links":["../src/alloc/borrow.rs.html","../src/alloc/string.rs.html","../src/core/any.rs.html","../src/core/borrow.rs.html","../src/core/clone.rs.html","../src/core/cmp.rs.html","../src/core/convert.rs.html","../src/core/default.rs.html","../src/core/fmt/num.rs.html","../src/core/internal_macros.rs.html","../src/core/iter/traits.rs.html","../src/core/num/mod.rs.html","../src/core/ops/arith.rs.html","../src/core/ops/bit.rs.html","../src/std/ascii.rs.html","../std/any/struct.TypeId.html","../std/cmp/trait.Eq.html","../std/cmp/trait.PartialEq.html","../std/convert/trait.From.html","../std/convert/trait.TryFrom.html","../std/default/trait.Default.html","../std/fmt/struct.Error.html","../std/fmt/struct.Formatter.html","../std/fmt/trait.Binary.html","../std/fmt/trait.Octal.html","../std/hash/trait.Hash.html","../std/iter/trait.Iterator.html","../std/iter/trait.Step.html","../std/iter/trait.Sum.html","../std/marker/trait.Copy.html","../std/num/struct.ParseIntError.html","../std/num/struct.TryFromIntError.html","../std/ops/trait.AddAssign.html","../std/ops/trait.BitAnd.html","../std/ops/trait.BitXor.html","../std/ops/trait.DivAssign.html","../std/ops/trait.MulAssign.html","../std/ops/trait.Not.html","../std/ops/trait.Rem.html","../std/ops/trait.RemAssign.html","../std/ops/trait.Shl.html","../std/ops/trait.ShlAssign.html","../std/ops/trait.Shr.html","../std/ops/trait.ShrAssign.html","../std/ops/trait.SubAssign.html","../std/option/enum.Option.html","../std/result/enum.Result.html","../std/str/trait.FromStr.html","../std/string/struct.String.html","https://github.com/rust-lang/rust/issues/32463","https://github.com/rust-lang/rust/issues/48320","https://github.com/rust-lang/rust/issues/48763","https://github.com/rust-lang/rust/issues/49048","https://github.com/rust-lang/rust/issues/52963","primitive.bool.html","primitive.i16.html","primitive.i8.html","primitive.isize.html","primitive.str.html","primitive.tuple.html","primitive.u128.html","primitive.u16.html","primitive.u32.html","primitive.u64.html","primitive.u8.html","primitive.usize.html","u8/index.html"],"metrics":{"escapeCount":0,"costTime":4032102,"totalUsage":{"prompt_tokens":305817,"completion_tokens":105001,"cached_tokens":0,"reasoning_tokens":88082},"chunkLength":19,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":93530},{"contextLength":500,"contentLength":39000,"costTime":292618},{"contextLength":500,"contentLength":39000,"costTime":104625},{"contextLength":500,"contentLength":39000,"costTime":200742},{"contextLength":500,"contentLength":39000,"costTime":263844},{"contextLength":500,"contentLength":39000,"costTime":231229},{"contextLength":500,"contentLength":39000,"costTime":203316},{"contextLength":500,"contentLength":39000,"costTime":332507},{"contextLength":500,"contentLength":39000,"costTime":71025},{"contextLength":500,"contentLength":39000,"costTime":336014},{"contextLength":500,"contentLength":39000,"costTime":94961},{"contextLength":500,"contentLength":39000,"costTime":327884},{"contextLength":500,"contentLength":39000,"costTime":180337},{"contextLength":500,"contentLength":39000,"costTime":275167},{"contextLength":500,"contentLength":39000,"costTime":56934},{"contextLength":500,"contentLength":39000,"costTime":322156},{"contextLength":500,"contentLength":39000,"costTime":479584},{"contextLength":500,"contentLength":39000,"costTime":74351},{"contextLength":500,"contentLength":19114,"costTime":91278}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-23T07:43:01.008Z","examGroup":"split","examParams":{"windowLength":39000}}}