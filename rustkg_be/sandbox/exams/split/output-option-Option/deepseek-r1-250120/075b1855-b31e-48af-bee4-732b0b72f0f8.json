{"create_time":"2025-03-22T14:44:11.700Z","id":"075b1855-b31e-48af-bee4-732b0b72f0f8","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has full name","has method","has return type","has stability","has type","has variant","implements","is a","returns"],"add_triples":[["&'a Option<T>","implements","IntoIterator"],["&'a mut Option<T>","implements","IntoIterator"],["Any::get_type_id","has description","Gets the TypeId of self."],["Any::get_type_id","has stability","nightly-only experimental API (get_type_id #27745)"],["Borrow::borrow","has description","Immutably borrows from an owned value."],["BorrowMut::borrow_mut","has description","Mutably borrows from an owned value."],["Default","has method","default"],["F","implements","FnOnce() -> E"],["F","implements","FnOnce() -> Option<T>"],["F","implements","FnOnce(T) -> Option<U>"],["From::from","has description","Performs the conversion."],["Hash","has method","hash"],["Into::into","has description","Performs the conversion."],["IntoIter","has type","IntoIter<T>"],["IntoIterator for Option<T>","has associated type","IntoIter"],["IntoIterator for Option<T>","has associated type","Item"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has method","into_iter"],["IntoIterator::into_iter","has return type","I"],["Item","has type","T"],["Iter<T>","implements","Iterator"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or_default"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","Try"],["Option","is a","enum"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Some","has description","Some value T"],["ToOwned","has associated type","Owned"],["ToOwned::clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["ToOwned::clone_into","has stability","nightly-only experimental API (toowned_clone_into #41263)"],["ToOwned::to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["Try","has method","from_error"],["TryFrom","has associated type","Error"],["TryFrom::try_from","has description","Performs the conversion."],["TryFrom::try_from","has stability","nightly-only experimental API (try_from #33417)"],["TryInto","has associated type","Error"],["TryInto::try_into","has description","Performs the conversion."],["TryInto::try_into","has stability","nightly-only experimental API (try_from #33417)"],["and","has argument","optb"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","is a","method"],["and","returns","Option<U>"],["and_then","has argument","f"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","is a","method"],["and_then","returns","Option<U>"],["as_mut","has argument","&mut self"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","is a","function"],["as_mut","returns","Option<&mut T>"],["as_ref","has argument","&self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","is a","function"],["as_ref","returns","Option<&T>"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","has stability","Stable since Rust version 1.26.0"],["default","has description","Returns None."],["default","has return type","Option<T>"],["err","has type","F"],["expect","has argument","msg: &str"],["expect","has argument","self"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","is a","function"],["expect","returns","T"],["f","has type","F"],["f","has type","FnOnce() -> T"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","has stability","Stable since Rust version 1.20.0"],["hash","has argument","state: &mut __HT"],["hash","has description","Feeds this value into the given Hasher. Read more"],["is_none","has argument","&self"],["is_none","has description","Returns true if the option is a None value."],["is_none","is a","function"],["is_none","returns","bool"],["is_some","has argument","&self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","is a","function"],["is_some","returns","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","is a","method"],["iter","returns","Iter<T>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","is a","method"],["ok_or_else","returns","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","is a","method"],["or","returns","Option<T>"],["or_else","has argument","f"],["or_else","is a","method"],["or_else","returns","Option<T>"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2));"],["replace","has return type","Option<T>"],["replace","has stability","Stable since Rust version 1.31.0"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","has return type","Option<T>"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","is a","function"],["unwrap","returns","T"],["unwrap_or_default","has description","Returns the contained value or a default. Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has example","let good_year_from_input = \"1909\"; let bad_year_from_input = \"190blarg\"; let good_year = good_year_from_input.parse().ok().unwrap_or_default(); let bad_year = bad_year_from_input.parse().ok().unwrap_or_default(); assert_eq!(1909, good_year); assert_eq!(0, bad_year);"],["unwrap_or_default","has return type","T"]],"add_links":["../../../primitive.bool.html","../../../primitive.u32.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../primitive.reference.html","https://github.com/rust-lang/rust/issues/42327","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":704323,"totalUsage":{"prompt_tokens":75592,"completion_tokens":21217,"cached_tokens":0,"reasoning_tokens":17335},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":235841},{"contextLength":500,"contentLength":39000,"costTime":111717},{"contextLength":500,"contentLength":39000,"costTime":100276},{"contextLength":500,"contentLength":39000,"costTime":191462},{"contextLength":500,"contentLength":22078,"costTime":65027}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:32:26.140Z","examGroup":"split"}}