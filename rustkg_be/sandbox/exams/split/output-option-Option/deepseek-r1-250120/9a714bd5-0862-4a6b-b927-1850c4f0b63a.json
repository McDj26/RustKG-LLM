{"create_time":"2025-03-22T14:06:10.034Z","id":"9a714bd5-0862-4a6b-b927-1850c4f0b63a","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has description","has error type","has full name","has implementation","has method","has return type","has stability","has trait bound","has type","has variant","implements","is a","requires method","returns","stable since"],"add_triples":[["Any","has method","get_type_id"],["Any","has stability","nightly-only experimental API (get_type_id #27745)"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["F","implements","FnOnce"],["From","has method","from"],["Into","has method","into"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["None","has description","No value"],["None","is a","variant"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a T>","implements","Clone"],["Option<T>","implements","From<T>"],["Some","has description","Some value T"],["Some","is a","variant"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom","has stability","nightly-only experimental API (try_from #33417)"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["and","has argument","optb"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","returns","Option<U>"],["and_then","has argument","f"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","returns","Option<U>"],["as_mut","has argument","self"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","is a","method"],["as_mut","returns","Option<&mut T>"],["as_mut::self","has type","&mut self"],["as_pin_mut","has stability","nightly-only experimental API"],["as_pin_ref","has stability","nightly-only experimental API"],["as_ref","has argument","self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","is a","method"],["as_ref","returns","Option<&T>"],["as_ref::self","has type","&self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","stable since","1.26.0"],["err","has type","F"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message."],["expect","is a","method"],["expect::msg","has type","&str"],["f","has type","F"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has argument","predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, otherwise None."],["filter","returns","Option<T>"],["from","has return type","T"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","returns","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has return type","TypeId"],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value"],["into_iter","has return type","I"],["is_none","has description","Returns true if the option is a None value."],["is_none","is a","method"],["is_none","returns","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","is a","method"],["is_some","returns","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","returns","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","returns","IterMut<T>"],["ok_or_else","has argument","err"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","returns","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","returns","Option<T>"],["or_else","has argument","f"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","returns","Option<T>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","stable since","1.31.0"],["self","has type","&mut self"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["try_from","has argument","value"],["try_from::value","has type","U"],["try_into","has return type","U"],["unwrap","has description","Moves the value out of the Option<T> if it is Some(v)."],["unwrap","is a","method"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["v","has type","T"],["value","has type","T"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/clone/trait.Clone.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/default/trait.Default.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.Iterator.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/primitive.u32.html","../../std/process/struct.Command.html","../../std/result/enum.Result.html","../primitive.u32.html","struct.Command.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","struct.Pin.html","struct.String.html"],"metrics":{"escapeCount":1,"costTime":609059,"totalUsage":{"prompt_tokens":75581,"completion_tokens":18267,"cached_tokens":0,"reasoning_tokens":14604},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":116179},{"contextLength":500,"contentLength":39000,"costTime":98155},{"contextLength":500,"contentLength":39000,"costTime":189327},{"contextLength":500,"contentLength":39000,"costTime":169516},{"contextLength":500,"contentLength":22078,"costTime":35882}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:18.239Z","examGroup":"split"}}