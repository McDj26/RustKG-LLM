{"create_time":"2025-03-22T15:26:09.113Z","id":"455721f0-b1cc-41c7-a57f-cd2e34400303","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["contains","defined in","has argument","has associated type","has declaration","has description","has full name","has method","has return type","has stability","has type","has variant","implements","is a","requires method","requires trait","stable since"],"add_triples":[["&'a Option<T>","defined in","../../src/core/option.rs.html"],["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>","stable since","1.4.0"],["&'a Option<T>::IntoIter","has description","Which kind of iterator are we turning this into?"],["&'a Option<T>::IntoIter","has type","Iter<'a, T>"],["&'a Option<T>::Item","has description","The type of the elements being iterated over."],["&'a Option<T>::Item","has type","&'a T"],["&'a Option<T>::into_iter","has description","Creates an iterator from a value."],["&'a Option<T>::into_iter","has return type","Iter<'a, T>"],["&'a mut I","implements","Iterator"],["&'a mut Option<T>","defined in","../../src/core/option.rs.html"],["&'a mut Option<T>","has associated type","IntoIter"],["&'a mut Option<T>","has associated type","Item"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut Option<T>","stable since","1.4.0"],["&'a mut Option<T>::IntoIter","has description","Which kind of iterator are we turning this into?"],["&'a mut Option<T>::IntoIter","has type","IterMut<'a, T>"],["&'a mut Option<T>::Item","has description","The type of the elements being iterated over."],["&'a mut Option<T>::Item","has type","&'a mut T"],["&'a mut Option<T>::into_iter","has description","Creates an iterator from a value."],["&'a mut Option<T>::into_iter","has return type","IterMut<'a, T>"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Clone","has full name","std::clone::Clone"],["Clone","has method","clone"],["Clone","has method","clone_from"],["Clone","is a","trait"],["Debug","has full name","std::fmt::Debug"],["Debug","has method","fmt"],["Debug","is a","trait"],["Default","has full name","std::default::Default"],["Default","has method","default"],["Default","is a","trait"],["Eq","has full name","std::cmp::Eq"],["Eq","is a","trait"],["Error","has full name","std::fmt::Error"],["Error","is a","struct"],["FnOnce","is a","trait"],["Formatter","has full name","std::fmt::Formatter"],["Formatter","is a","struct"],["From","has method","from"],["From","is a","trait"],["FromIterator<Option<A>>","requires method","from_iter"],["H","requires trait","Hasher"],["Hash","has method","hash"],["Hash","has method","hash_slice"],["I","implements","IntoIterator"],["I","implements","Iterator"],["I","requires trait","IntoIterator<Item = Option<A>>"],["Into","requires trait","From<T>"],["IntoIter","has type","IntoIter<T>"],["IntoIter","is a","struct"],["IntoIterator for Option<T>","has associated type","IntoIter"],["IntoIterator for Option<T>","has associated type","Item"],["IntoIterator for Option<T>","has method","into_iter"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["IntoIterator::IntoIter","has type","I"],["IntoIterator::Item","has type","<I as Iterator>::Item"],["Item","has type","T"],["Iter","has full name","std::option::Iter"],["Iter","is a","struct"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["Iterator::Item","has type","<I as Iterator>::Item"],["None","has description","No value"],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","is a","enum"],["Option::map","has argument","f"],["Option::map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["Option::map","has return type","Option<U>"],["Option::map","is a","method"],["Option::map_or","has argument","default"],["Option::map_or","has argument","f"],["Option::map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["Option::map_or","has return type","U"],["Option::map_or","is a","method"],["Option::map_or_else","has argument","default"],["Option::map_or_else","has argument","f"],["Option::map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["Option::map_or_else","has return type","U"],["Option::map_or_else","is a","method"],["Option<&'a T>","implements","From"],["Option<&'a T>","stable since","1.30.0"],["Option<&'a T>::from","has argument","o: &'a Option<T>"],["Option<&'a T>::from","has description","Performs the conversion."],["Option<&'a T>::from","has return type","Option<&'a T>"],["Option<&'a T>::from","is a","function"],["Option<&'a T>::from","stable since","1.30.0"],["Option<&'a mut T>","implements","From"],["Option<&'a mut T>","stable since","1.30.0"],["Option<&'a mut T>::from","has argument","o: &'a mut Option<T>"],["Option<&'a mut T>::from","has description","Performs the conversion."],["Option<&'a mut T>::from","has return type","Option<&'a mut T>"],["Option<&'a mut T>::from","is a","function"],["Option<&'a mut T>::from","stable since","1.30.0"],["Option<&T>","has method","cloned"],["Option<&mut T>","has method","cloned"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","defined in","../../src/core/option.rs.html"],["Option<T>","has full name","std::option::Option<T>"],["Option<T>","has method","as_ref"],["Option<T>","has method","cmp"],["Option<T>","has method","deref"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","is_none"],["Option<T>","has method","is_some"],["Option<T>","has method","iter"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","ok_or"],["Option<T>","has method","ok_or_else"],["Option<T>","has method","partial_cmp"],["Option<T>","has method","transpose"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has variant","None"],["Option<T>","has variant","Some"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<T>","requires trait","Copy"],["Option<T>","stable since","1.12.0"],["Option<T>::from","has argument","val: T"],["Option<T>::from","has description","Performs the conversion."],["Option<T>::from","has return type","Option<T>"],["Option<T>::from","is a","function"],["Option<T>::from","stable since","1.12.0"],["Option<V>","implements","FromIterator"],["Option<V>","implements","FromIterator<Option<A>>"],["Option<V>","requires trait","FromIterator<A>"],["Ord","has full name","std::cmp::Ord"],["Ord","has method","max"],["Ord","has method","min"],["Ord","is a","trait"],["Ord","requires method","cmp"],["Ord","requires method","max"],["Ordering","has full name","std::cmp::Ordering"],["Ordering","is a","enum"],["PartialEq","has full name","std::cmp::PartialEq"],["PartialEq","has method","eq"],["PartialEq","has method","ne"],["PartialEq","is a","trait"],["PartialOrd","requires method","ge"],["PartialOrd","requires method","gt"],["PartialOrd","requires method","le"],["PartialOrd","requires method","lt"],["PartialOrd","requires method","partial_cmp"],["R","implements","Read"],["Result","has full name","std::result::Result"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result","is a","enum"],["Some","has description","Some value"],["Some","has description","Some value T"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","ToOwned"],["T","implements","TryInto"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned::Owned","has type","T"],["Try for Option<T>","has associated type","Error = NoneError"],["Try for Option<T>","has associated type","Ok = T"],["Try for Option<T>::Error","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Try for Option<T>::Ok","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Try","has method","from_error"],["Try","has method","from_ok"],["Try","has method","into_result"],["Try","requires method","into_result"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryFrom::Error","has stability","nightly-only experimental API"],["TryFrom::Error","has type","!"],["TryInto","has associated type","Error"],["TryInto","is a","trait"],["TryInto::Error","has type","<U as TryFrom<T>>::Error"],["U","implements","TryFrom"],["W","implements","Write"],["__HT","requires trait","Hasher"],["and","has argument","and::optb"],["and","has argument","and::self"],["and","has argument","optb"],["and","has argument","self"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and::optb","has type","Option<U>"],["and::self","has type","Self"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["as_mut","has argument","self"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has description","Converts from Option<T> to Option<PinMut<'_ T>>."],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_ref","has argument","self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["as_ref","is a","function"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has argument","self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value. Read more"],["clone","has return type","Option<T>"],["clone_from","has argument","clone_from::source"],["clone_from","has description","Performs copy-assignment from source. Read more"],["clone_from::source","has type","&Self"],["clone_into","has argument","self"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","defined in","../../src/core/option.rs.html#879-896"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","requires trait","Clone"],["cloned","stable since","1.26.0"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","method"],["cmp::other","has type","&Option<T>"],["cmp::self","has type","&Option<T>"],["def","has type","T"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has type","D"],["default","has type","U"],["deref","has argument","self"],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["deref","requires trait","Deref"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has full name","std::cmp::PartialEq::eq"],["eq","has return type","bool"],["eq","is a","method"],["err","has type","E"],["err","has type","F"],["expect","has argument","msg"],["expect","has argument","self"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","has return type","T"],["f","has type","&mut Formatter"],["f","has type","F"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["f","has type","FnOnce(T) -> U"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false. This function works similar to Iterator::filter(). You can imagine the Option<T> being an iterator over one or zero elements. filter() lets you decide which elements to keep."],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, None otherwise."],["filter","has return type","Option<T>"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has full name","std::fmt::Debug::fmt"],["fmt","has return type","Result<(), Error>"],["from","has argument","t: T"],["from","has declaration","fn from(t: T) -> T"],["from","has return type","T"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability","This is a nightly-only experimental API. (#42327)"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["from_iter::iter","has type","I"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has stability","This is a nightly-only experimental API. (#42327)"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","method"],["ge::other","has type","&Option<T>"],["ge::self","has type","&Option<T>"],["get_or_insert","has argument","v: T"],["get_or_insert","has description","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","has stability","Stable since Rust version 1.20.0"],["get_or_insert::v","has type","T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","f: F"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has declaration","pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T where F: FnOnce() -> T"],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","has stability","Stable since Rust version 1.20.0"],["get_or_insert_with::f","has type","FnOnce() -> T"],["get_type_id","has argument","self"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","method"],["gt::other","has type","&Option<T>"],["gt::self","has type","&Option<T>"],["hash","has argument","hash::state"],["hash","has description","Feeds this value into the given [Hasher]. Read more"],["hash","is a","method"],["hash::state","has type","&mut __HT"],["hash_slice","has argument","hash_slice::data"],["hash_slice","has argument","hash_slice::state"],["hash_slice","has description","Feeds a slice of this type into the given [Hasher]. Read more"],["hash_slice","stable since","1.3.0"],["hash_slice::data","has type","&[Self]"],["hash_slice::state","has type","&mut H"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has declaration","fn into_iter(self) -> I"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_result","has argument","self"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Option<T>"],["into_result","has return type","Result<T, NoneError>"],["into_result","has stability","This is a nightly-only experimental API. (#42327)"],["into_result","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["is_none","has argument","self"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has argument","self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has argument","iter::self"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter","is a","function"],["iter::self","has type","&self"],["iter_mut","has argument","iter_mut::self"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["iter_mut::self","has type","&mut self"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","method"],["le::other","has type","&Option<T>"],["le::self","has type","&Option<T>"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","method"],["lt::other","has type","&Option<T>"],["lt::self","has type","&Option<T>"],["map","has argument","f"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","has description","This method returns the maximum of self and other."],["max","has full name","std::cmp::Ord::max"],["max","has return type","Self"],["max","is a","method"],["max","stable since","1.21.0"],["max::other","has type","Self"],["max::self","has type","Self"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","has full name","std::cmp::Ord::min"],["min","has return type","Self"],["min","stable since","1.21.0"],["msg","has type","&str"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has full name","std::cmp::PartialEq::ne"],["ne","has return type","bool"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has declaration","pub fn ok_or<E>(self, err: E) -> Result<T, E>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err). Arguments passed to ok_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use ok_or_else, which is lazily evaluated."],["ok_or","has return type","Result<T, E>"],["ok_or","is a","function"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","is a","function"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has description","Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["other","has type","&Option<T>"],["other","has type","Self"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","method"],["partial_cmp::other","has type","&Option<T>"],["partial_cmp::self","has type","&Option<T>"],["predicate","has type","Fn(&T) -> bool"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","self"],["replace","has argument","value"],["replace","has declaration","pub fn replace(&mut self, value: T) -> Option<T>"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API. (option_replace #51998)"],["self","has type","&Option<T>"],["self","has type","&Self"],["self","has type","&mut Self"],["self","has type","&mut T"],["self","has type","Self"],["self","has type","T"],["std::ops::FnOnce","has full name","std::ops::FnOnce"],["std::ops::FnOnce","is a","trait"],["std::option","contains","IntoIter"],["std::option","contains","Iter"],["std::option","contains","IterMut"],["std::option","contains","NoneError"],["std::option","contains","Option"],["std::string::String","has full name","std::string::String"],["std::string::String","is a","struct"],["take","has argument","self"],["take","has declaration","pub fn take(&mut self) -> Option<T>"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["target","has type","&mut T"],["to_owned","has argument","self"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has argument","self"],["transpose","has description","Transposes an Option of a Result into a Result of an Option"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["transpose_result","has description","Transposes an Option of a Result into a Result of an Option"],["transpose_result","has stability","nightly-only experimental API"],["try_from","has argument","value: U"],["try_from","has declaration","fn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>"],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","nightly-only experimental API"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly. Panics if the self value equals None."],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has description","Returns the contained value or a default..."],["unwrap_or_default","has return type","T"],["unwrap_or_default","requires trait","Default"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["usize","is a","primitive"],["v","has type","T"],["value","has type","T"],["xor","has argument","optb"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"],["xor::optb","has type","Option<T>"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.PinMut.html","../../std/primitive.bool.html","../../std/primitive.reference.html","../../std/primitive.str.html","../../std/primitive.u32.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../default/trait.Default.html","../index.html","../primitive.bool.html","../primitive.never.html","../primitive.reference.html","../primitive.slice.html","../primitive.str.html","enum.Option.html","https://github.com/rust-lang/rust/issues/33417","https://github.com/rust-lang/rust/issues/41263","https://github.com/rust-lang/rust/issues/42327","https://github.com/rust-lang/rust/issues/50512","https://github.com/rust-lang/rust/issues/51998","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aassert_eq!(Some(%22car%22).unwrap_or(%22bike%22)%2C%20%22car%22)%3B%0Aassert_eq!(None.unwrap_or(%22bike%22)%2C%20%22bike%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20is_even(n%3A%20%26i32)%20-%3E%20bool%20%7B%0A%20%20%20%20n%20%25%202%20%3D%3D%200%0A%7D%0A%0Aassert_eq!(None.filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(3).filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(4).filter(is_even)%2C%20Some(4))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2010%3B%0Aassert_eq!(Some(4).unwrap_or_else(%7C%7C%202%20*%20k)%2C%204)%3B%0Aassert_eq!(None.unwrap_or_else(%7C%7C%202%20*%20k)%2C%2020)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22air%22)%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%20%2F%2F%20fails%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.Clone.html","trait.Debug.html","trait.Default.html","trait.Hash.html","trait.IntoIterator.html"],"metrics":{"escapeCount":0,"costTime":4852514,"totalUsage":{"prompt_tokens":137724,"completion_tokens":148218,"cached_tokens":0,"reasoning_tokens":132847},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":64885},{"contextLength":500,"contentLength":7000,"costTime":216815},{"contextLength":500,"contentLength":7000,"costTime":188414},{"contextLength":500,"contentLength":7000,"costTime":289174},{"contextLength":500,"contentLength":7000,"costTime":215992},{"contextLength":500,"contentLength":7000,"costTime":195277},{"contextLength":500,"contentLength":7000,"costTime":239475},{"contextLength":500,"contentLength":7000,"costTime":74313},{"contextLength":500,"contentLength":7000,"costTime":226144},{"contextLength":500,"contentLength":7000,"costTime":113389},{"contextLength":500,"contentLength":7000,"costTime":148886},{"contextLength":500,"contentLength":7000,"costTime":198504},{"contextLength":500,"contentLength":7000,"costTime":176879},{"contextLength":500,"contentLength":7000,"costTime":135906},{"contextLength":500,"contentLength":7000,"costTime":41623},{"contextLength":500,"contentLength":7000,"costTime":240369},{"contextLength":500,"contentLength":7000,"costTime":149950},{"contextLength":500,"contentLength":7000,"costTime":266407},{"contextLength":500,"contentLength":7000,"costTime":251906},{"contextLength":500,"contentLength":7000,"costTime":376250},{"contextLength":500,"contentLength":7000,"costTime":203756},{"contextLength":500,"contentLength":7000,"costTime":210987},{"contextLength":500,"contentLength":7000,"costTime":298558},{"contextLength":500,"contentLength":7000,"costTime":81087},{"contextLength":500,"contentLength":7000,"costTime":156499},{"contextLength":500,"contentLength":1900,"costTime":91069}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:05:16.054Z","examGroup":"split"}}