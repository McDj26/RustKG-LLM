{
  "create_time": "2025-03-22T15:37:25.524Z",
  "id": "3f0f1c81-3846-4b68-93ec-513b95a22e61",
  "source_url": "file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html",
  "relations": [
    "contains",
    "has argument",
    "has associated type",
    "has declaration",
    "has description",
    "has example",
    "has full name",
    "has method",
    "has return type",
    "has stability",
    "has type",
    "has variant",
    "implements",
    "is a",
    "is a enum",
    "is a primitive type",
    "is a struct",
    "is a trait",
    "requires trait",
    "stable since"
  ],
  "add_triples": [
    ["&'a Option<T>", "has associated type", "IntoIter"],
    ["&'a Option<T>", "has associated type", "Item"],
    ["&'a Option<T>", "has method", "into_iter"],
    ["&'a Option<T>", "implements", "IntoIterator"],
    ["&'a Option<T>", "stable since", "1.4.0"],
    ["&'a Option<T>::IntoIter", "has type", "Iter<'a, T>"],
    ["&'a Option<T>::Item", "has type", "&'a T"],
    [
      "&'a Option<T>::into_iter",
      "has description",
      "Creates an iterator from a value."
    ],
    ["&'a Option<T>::into_iter", "has return type", "Iter<'a, T>"],
    ["&'a mut I", "implements", "Iterator"],
    ["&'a mut Option<T>", "has associated type", "IntoIter"],
    ["&'a mut Option<T>", "has associated type", "Item"],
    ["&'a mut Option<T>", "has method", "into_iter"],
    ["&'a mut Option<T>", "implements", "IntoIterator"],
    ["&'a mut Option<T>", "stable since", "1.4.0"],
    ["&'a mut Option<T>::IntoIter", "has type", "IterMut<'a, T>"],
    ["&'a mut Option<T>::Item", "has type", "&'a mut T"],
    [
      "&'a mut Option<T>::into_iter",
      "has description",
      "Creates an iterator from a value."
    ],
    ["&'a mut Option<T>::into_iter", "has return type", "IterMut<'a, T>"],
    ["&'a mut R", "implements", "Read"],
    ["&'a mut W", "implements", "Write"],
    ["&mut I", "implements", "Iterator"],
    ["&self", "has type", "&Option<T>"],
    ["Any", "has method", "get_type_id"],
    ["Borrow", "has method", "borrow"],
    ["BorrowMut", "has method", "borrow_mut"],
    ["BorrowMut", "is a", "trait"],
    ["Clone", "has method", "clone"],
    ["Clone", "has method", "clone_from"],
    ["Copy", "is a", "trait"],
    ["D", "is a", "FnOnce() -> U"],
    ["Debug::fmt", "has argument", "&self"],
    ["Debug::fmt", "has argument", "f: &mut Formatter"],
    [
      "Debug::fmt",
      "has description",
      "Formats the value using the given formatter."
    ],
    ["Debug::fmt", "has return type", "Result<(), Error>"],
    ["Deref", "has associated type", "Target"],
    ["F", "implements", "FnOnce() -> Option<T>"],
    ["F", "implements", "FnOnce() -> T"],
    ["F", "implements", "FnOnce(T) -> U"],
    ["FnOnce", "has full name", "std::ops::FnOnce"],
    ["FnOnce", "is a", "trait"],
    ["From", "is a", "trait"],
    ["From<&'a Option<T>>", "has method", "from"],
    ["From<&'a Option<T>>", "stable since", "1.30.0"],
    ["From<&'a mut Option<T>>", "has method", "from"],
    ["From<&'a mut Option<T>>", "stable since", "1.30.0"],
    ["From<T>", "has method", "from"],
    ["From<T>", "stable since", "1.12.0"],
    ["FromIterator", "is a", "trait"],
    ["H", "requires trait", "Hasher"],
    ["Hash", "has method", "hash"],
    ["Hash", "has method", "hash_slice"],
    ["I", "has associated type", "Item = std::option::Option<A>"],
    ["I", "implements", "std::iter::IntoIterator"],
    ["Into", "has method", "into"],
    [
      "IntoIter",
      "has description",
      "An iterator over the value in Some variant of an Option."
    ],
    ["IntoIter", "has type", "I"],
    ["IntoIter", "has type", "IntoIter<T>"],
    ["IntoIter", "is a", "struct"],
    ["IntoIter<T>", "is a", "struct"],
    ["IntoIterator for Option<T>", "has associated type", "IntoIter"],
    ["IntoIterator for Option<T>", "has associated type", "Item"],
    ["IntoIterator for Option<T>", "has method", "into_iter"],
    ["IntoIterator", "is a", "trait"],
    ["IntoIterator<I>", "has associated type", "IntoIter"],
    ["IntoIterator<I>", "has associated type", "Item"],
    ["IntoIterator<I>", "has method", "into_iter"],
    ["Item", "has type", "<I as Iterator>::Item"],
    ["Item", "has type", "T"],
    [
      "Iter",
      "has description",
      "An iterator over a reference to the Some variant of an Option."
    ],
    ["Iter", "implements", "Iterator"],
    ["Iter", "is a", "struct"],
    ["Iter<'a, T>", "is a", "struct"],
    [
      "IterMut",
      "has description",
      "An iterator over a mutable reference to the Some variant of an Option."
    ],
    ["IterMut", "implements", "Iterator"],
    ["IterMut", "is a struct", "struct"],
    ["IterMut", "is a", "struct"],
    ["IterMut<'a, T>", "is a", "struct"],
    ["Iterator", "is a trait", "trait"],
    ["Iterator", "is a", "trait"],
    ["None", "has description", "No value"],
    [
      "NoneError",
      "has description",
      "The error type that results from applying the try operator (?) to a None value."
    ],
    ["NoneError", "is a", "struct"],
    [
      "Option",
      "has description",
      "The Option type. See the module level documentation for more."
    ],
    ["Option", "has full name", "std::option::Option"],
    ["Option", "has method", "and"],
    ["Option", "has method", "and_then"],
    ["Option", "has method", "as_mut"],
    ["Option", "has method", "as_pin_mut"],
    ["Option", "has method", "as_ref"],
    ["Option", "has method", "cloned"],
    ["Option", "has method", "deref"],
    ["Option", "has method", "expect"],
    ["Option", "has method", "filter"],
    ["Option", "has method", "get_or_insert"],
    ["Option", "has method", "get_or_insert_with"],
    ["Option", "has method", "is_none"],
    ["Option", "has method", "is_some"],
    ["Option", "has method", "iter"],
    ["Option", "has method", "iter_mut"],
    ["Option", "has method", "map"],
    ["Option", "has method", "map_or"],
    ["Option", "has method", "map_or_else"],
    ["Option", "has method", "ok_or"],
    ["Option", "has method", "ok_or_else"],
    ["Option", "has method", "or"],
    ["Option", "has method", "or_else"],
    ["Option", "has method", "replace"],
    ["Option", "has method", "take"],
    ["Option", "has method", "transpose"],
    ["Option", "has method", "unwrap"],
    ["Option", "has method", "unwrap_or"],
    ["Option", "has method", "unwrap_or_default"],
    ["Option", "has method", "unwrap_or_else"],
    ["Option", "has method", "xor"],
    ["Option", "has variant", "None"],
    ["Option", "has variant", "Some"],
    ["Option", "implements", "Clone"],
    ["Option", "implements", "Copy"],
    ["Option", "implements", "Debug"],
    ["Option", "implements", "Default"],
    ["Option", "implements", "Eq"],
    ["Option", "implements", "From<&'a Option<T>>"],
    ["Option", "implements", "From<&'a mut Option<T>>"],
    ["Option", "implements", "From<T>"],
    ["Option", "implements", "FromIterator<Option<A>>"],
    ["Option", "implements", "Hash"],
    ["Option", "implements", "IntoIterator"],
    ["Option", "implements", "Ord"],
    ["Option", "implements", "PartialEq<Option<T>>"],
    ["Option", "implements", "PartialOrd<Option<T>>"],
    ["Option", "implements", "Send"],
    ["Option", "implements", "Sync"],
    ["Option", "implements", "Try"],
    ["Option", "is a enum", "enum"],
    ["Option", "is a", "enum"],
    ["Option", "stable since", "1.0.0"],
    ["Option<&'a T>", "has method", "cloned"],
    ["Option<&'a T>", "implements", "From<&'a Option<T>>"],
    ["Option<&'a mut T>", "has method", "cloned"],
    ["Option<&'a mut T>", "implements", "From<&'a mut Option<T>>"],
    ["Option<Result<T, E>>", "has method", "transpose"],
    ["Option<T>", "has method", "default"],
    ["Option<T>", "has method", "deref"],
    ["Option<T>", "has method", "filter"],
    ["Option<T>", "has method", "from_error"],
    ["Option<T>", "has method", "from_ok"],
    ["Option<T>", "has method", "into_result"],
    ["Option<T>", "has method", "map"],
    ["Option<T>", "has method", "or"],
    ["Option<T>", "has method", "or_else"],
    ["Option<T>", "has method", "unwrap"],
    ["Option<T>", "has method", "unwrap_or"],
    ["Option<T>", "has method", "unwrap_or_default"],
    ["Option<T>", "has method", "unwrap_or_else"],
    ["Option<T>", "has variant", "None"],
    ["Option<T>", "has variant", "Some"],
    ["Option<T>", "implements", "Clone"],
    ["Option<T>", "implements", "Copy"],
    ["Option<T>", "implements", "Debug"],
    ["Option<T>", "implements", "Default"],
    ["Option<T>", "implements", "Eq"],
    ["Option<T>", "implements", "From<T>"],
    ["Option<T>", "implements", "Hash"],
    ["Option<T>", "implements", "IntoIterator"],
    ["Option<T>", "implements", "Ord"],
    ["Option<T>", "implements", "PartialEq<Option<T>>"],
    ["Option<T>", "implements", "PartialOrd"],
    ["Option<T>", "implements", "Send"],
    ["Option<T>", "implements", "Sync"],
    ["Option<T>", "implements", "Try"],
    ["Option<T>", "is a", "enum"],
    ["Option<V>", "implements", "FromIterator<Option<A>>"],
    ["Ord", "has method", "cmp"],
    ["Ord", "has method", "max"],
    ["Ord", "is a", "trait"],
    [
      "Ord::max",
      "has description",
      "Compares and returns the maximum of two values."
    ],
    ["Ord::max", "has return type", "Self"],
    ["Ord::max", "is a", "method"],
    ["Ord::max", "stable since", "1.21.0"],
    [
      "Ord::min",
      "has description",
      "Compares and returns the minimum of two values."
    ],
    ["Ord::min", "has return type", "Self"],
    ["Ord::min", "is a", "method"],
    ["Ord::min", "stable since", "1.21.0"],
    ["Ordering", "is a", "enum"],
    ["Owned", "has type", "T"],
    ["P", "implements", "FnOnce(&T) -> bool"],
    [
      "PartialEq::eq",
      "has description",
      "This method tests for self and other values to be equal, and is used by =="
    ],
    ["PartialEq::eq", "has return type", "bool"],
    ["PartialEq::ne", "has description", "This method tests for !=."],
    ["PartialEq::ne", "has return type", "bool"],
    ["PartialOrd", "has method", "ge"],
    ["PartialOrd", "has method", "gt"],
    ["PartialOrd", "has method", "le"],
    ["PartialOrd", "has method", "lt"],
    ["PartialOrd", "has method", "partial_cmp"],
    ["PartialOrd", "is a", "trait"],
    ["Read", "is a", "trait"],
    ["Result", "is a", "enum"],
    ["Some", "has description", "Some value T"],
    ["Some", "has description", "Some(T)"],
    ["SomeErr", "is a", "struct"],
    ["String", "has full name", "std::string::String"],
    ["String", "is a", "struct"],
    ["T", "implements", "Any"],
    ["T", "implements", "Borrow"],
    ["T", "implements", "BorrowMut"],
    ["T", "implements", "Into<U>"],
    ["T", "implements", "ToOwned"],
    ["ToOwned", "has associated type", "Owned"],
    ["ToOwned", "has full name", "std::borrow::ToOwned"],
    ["ToOwned", "has method", "clone_into"],
    ["ToOwned", "has method", "to_owned"],
    ["ToOwned", "is a", "trait"],
    ["TryFrom", "has associated type", "Error"],
    ["TryFrom<T>", "has associated type", "Error"],
    ["TryFrom<T>", "has method", "try_from"],
    ["TryFrom<T>::Error", "has type", "never"],
    ["TryInto", "has method", "try_into"],
    ["TryInto<T, U>", "has associated type", "Error"],
    [
      "TryInto<T, U>::Error",
      "has stability",
      "This is a nightly-only experimental API. (try_from #33417)"
    ],
    ["TryInto<T, U>::Error", "has type", "<U as TryFrom<T>>::Error"],
    ["Write", "is a", "trait"],
    ["__HT", "requires trait", "Hasher"],
    ["and", "has argument", "optb: Option<U>"],
    [
      "and",
      "has example",
      "let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\"))"
    ],
    ["and", "has return type", "Option<&str>"],
    ["and", "has return type", "Option<U>"],
    ["and_then", "has argument", "f"],
    [
      "and_then",
      "has declaration",
      "pub fn and_then<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> Option<U>"
    ],
    [
      "and_then",
      "has description",
      "Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."
    ],
    ["and_then", "has return type", "Option<U>"],
    ["as_mut", "has argument", "as_mut::self"],
    [
      "as_mut",
      "has description",
      "Converts from `Option<T>` to `Option<&mut T>`."
    ],
    ["as_mut", "has return type", "Option<&mut T>"],
    ["as_mut::self", "has type", "&mut Self"],
    ["as_pin_mut", "has argument", "as_pin_mut::self"],
    ["as_pin_mut", "has return type", "Option<PinMut<'a, T>>"],
    ["as_pin_mut::self", "has type", "PinMut<'a, Option<T>>"],
    ["as_ref", "has argument", "as_ref::self"],
    ["as_ref", "has argument", "self"],
    ["as_ref", "has description", "Converts from Option<T> to Option<&T>."],
    ["as_ref", "has description", "Converts from `Option<T>` to `Option<&T>`."],
    ["as_ref", "has return type", "Option<&T>"],
    ["as_ref::self", "has type", "&Self"],
    ["bool", "is a", "primitive type"],
    ["borrow", "has description", "Immutably borrows from an owned value."],
    ["borrow", "has return type", "&T"],
    ["borrow_mut", "has argument", "self"],
    ["borrow_mut", "has description", "Mutably borrows from an owned value."],
    ["borrow_mut", "has return type", "&mut T"],
    ["clone", "has description", "Returns a copy of the value. Read more"],
    ["clone", "has return type", "Option<T>"],
    ["clone_from", "has argument", "self"],
    ["clone_from", "has argument", "source"],
    [
      "clone_from",
      "has description",
      "Performs copy-assignment from source. Read more"
    ],
    ["clone_into", "has argument", "self"],
    ["clone_into", "has argument", "target"],
    [
      "clone_into",
      "has description",
      "Uses borrowed data to replace owned data, usually by cloning."
    ],
    [
      "clone_into",
      "has stability",
      "This is a nightly-only experimental API. (#41263)"
    ],
    [
      "cloned",
      "has description",
      "Maps an Option<&T> to an Option<T> by cloning the contents of the option."
    ],
    [
      "cloned",
      "has description",
      "Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."
    ],
    [
      "cloned",
      "has example",
      "let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"
    ],
    [
      "cloned",
      "has example",
      "let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"
    ],
    ["cloned", "has full name", "Option<&'a T>::cloned"],
    ["cloned", "has full name", "Option<&'a mut T>::cloned"],
    ["cloned", "has return type", "Option<T>"],
    ["cloned", "is a", "method"],
    ["cloned", "requires trait", "Clone"],
    ["cloned", "stable since", "1.26.0"],
    ["cmp", "has argument", "other"],
    ["cmp", "has argument", "self"],
    [
      "cmp",
      "has description",
      "This method returns an Ordering between self and other."
    ],
    ["cmp", "has return type", "Ordering"],
    ["data", "has type", "&[Self]"],
    ["def", "has type", "T"],
    ["default", "has description", "Returns None."],
    ["default", "has return type", "Option<T>"],
    ["deref", "has argument", "&self"],
    [
      "deref",
      "has description",
      "Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."
    ],
    ["deref", "has return type", "Option<&<T as Deref>::Target>"],
    ["deref", "has stability", "nightly-only experimental API: inner_deref"],
    ["deref", "requires trait", "Deref"],
    ["err", "has type", "E"],
    ["err", "has type", "F"],
    ["expect", "has argument", "expect::msg"],
    [
      "expect",
      "has description",
      "Unwraps an option yielding the content of a Some. Panics if the value is a None with custom message."
    ],
    ["expect", "has return type", "T"],
    ["expect::msg", "has type", "&str"],
    ["f", "has type", "F"],
    ["f", "has type", "FnOnce() -> Option<T>"],
    ["f", "has type", "FnOnce() -> T"],
    ["f", "has type", "FnOnce(T) -> Option<U>"],
    ["filter", "has argument", "predicate"],
    [
      "filter",
      "has declaration",
      "pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"
    ],
    [
      "filter",
      "has description",
      "Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, None if predicate returns false. This function works similar to Iterator::filter(). You can imagine the Option<T> being an iterator over one or zero elements. filter() lets you decide which elements to keep."
    ],
    [
      "filter",
      "has example",
      "assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"
    ],
    ["filter", "has return type", "Option<T>"],
    ["filter", "is a", "method"],
    ["filter", "stable since", "1.27.0"],
    ["from", "has argument", "o: &'a Option<T>"],
    ["from", "has argument", "o: &'a mut Option<T>"],
    ["from", "has argument", "t"],
    ["from", "has argument", "val: T"],
    ["from", "has description", "Performs the conversion."],
    ["from", "has return type", "Option<&'a T>"],
    ["from", "has return type", "Option<&'a mut T>"],
    ["from", "has return type", "Option<T>"],
    ["from", "has return type", "T"],
    ["from_error", "has argument", "NoneError"],
    [
      "from_error",
      "has description",
      "Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."
    ],
    ["from_error", "has return type", "Option<T>"],
    [
      "from_error",
      "has stability",
      "This is a nightly-only experimental API. (try_trait #42327)"
    ],
    ["from_ok", "has argument", "v"],
    [
      "from_ok",
      "has description",
      "Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."
    ],
    ["from_ok", "has return type", "Option<T>"],
    [
      "from_ok",
      "has stability",
      "This is a nightly-only experimental API. (try_trait #42327)"
    ],
    ["ge", "has argument", "other"],
    ["ge", "has argument", "self"],
    [
      "ge",
      "has description",
      "This method tests greater than or equal to (for self and other) and is used by the >= operator."
    ],
    ["ge", "has return type", "bool"],
    ["get_or_insert", "has argument", "v"],
    [
      "get_or_insert",
      "has description",
      "Inserts v into the option if it is None, then returns a mutable reference to the contained value."
    ],
    [
      "get_or_insert",
      "has example",
      "let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"
    ],
    ["get_or_insert", "has return type", "&mut T"],
    ["get_or_insert", "stable since", "1.20.0"],
    ["get_or_insert_with", "has argument", "f"],
    [
      "get_or_insert_with",
      "has description",
      "Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."
    ],
    ["get_or_insert_with", "has return type", "&mut T"],
    ["get_or_insert_with", "stable since", "1.20.0"],
    ["get_type_id", "has return type", "TypeId"],
    ["get_type_id", "has stability", "nightly-only experimental API"],
    ["gt", "has argument", "other"],
    ["gt", "has argument", "self"],
    [
      "gt",
      "has description",
      "This method tests greater than (for self and other) and is used by the > operator."
    ],
    ["gt", "has return type", "bool"],
    ["hash", "has argument", "self"],
    ["hash", "has argument", "state"],
    [
      "hash",
      "has description",
      "Feeds this value into the given Hasher. Read more"
    ],
    ["hash_slice", "has argument", "data"],
    ["hash_slice", "has argument", "state"],
    [
      "hash_slice",
      "has description",
      "Feeds a slice of this type into the given Hasher. Read more"
    ],
    ["hash_slice", "stable since", "1.3.0"],
    ["into", "has description", "Performs the conversion."],
    ["into", "has return type", "U"],
    ["into_iter", "has argument", "self"],
    ["into_iter", "has description", "Creates an iterator from a value."],
    [
      "into_iter",
      "has description",
      "Returns a consuming iterator over the possibly contained value."
    ],
    [
      "into_iter",
      "has example",
      "let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect();"
    ],
    ["into_iter", "has return type", "I"],
    ["into_iter", "has return type", "IntoIter<T>"],
    ["into_result", "has argument", "self"],
    [
      "into_result",
      "has description",
      "Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."
    ],
    ["into_result", "has return type", "Result<T, NoneError>"],
    [
      "into_result",
      "has stability",
      "This is a nightly-only experimental API. (try_trait #42327)"
    ],
    ["is_none", "has argument", "self"],
    [
      "is_none",
      "has description",
      "Returns true if the option is a None value."
    ],
    ["is_none", "has return type", "bool"],
    ["is_some", "has argument", "self"],
    [
      "is_some",
      "has description",
      "Returns true if the option is a Some value."
    ],
    ["is_some", "has return type", "bool"],
    ["iter", "has argument", "self"],
    ["iter", "has declaration", "pub fn iter(&self) -> Iter<T>"],
    [
      "iter",
      "has description",
      "Returns an iterator over the possibly contained value."
    ],
    ["iter", "has return type", "Iter<T>"],
    ["iter", "has type", "I"],
    ["iter_mut", "has return type", "IterMut<T>"],
    ["le", "has argument", "other"],
    ["le", "has argument", "self"],
    [
      "le",
      "has description",
      "This method tests less than or equal to (for self and other) and is used by the <= operator."
    ],
    ["le", "has return type", "bool"],
    ["lt", "has argument", "other"],
    ["lt", "has argument", "self"],
    [
      "lt",
      "has description",
      "This method tests less than (for self and other) and is used by the < operator."
    ],
    ["lt", "has return type", "bool"],
    ["map", "has argument", "f"],
    ["map", "has argument", "map::f"],
    [
      "map",
      "has description",
      "Maps an Option<T> to Option<U> by applying a function to a contained value."
    ],
    ["map", "has return type", "Option<U>"],
    ["map::f", "has type", "FnOnce(T) -> U"],
    ["map_or", "has argument", "map_or::default"],
    ["map_or", "has argument", "map_or::f"],
    [
      "map_or",
      "has description",
      "Applies a function to the contained value (if any), or returns the provided default (if not)."
    ],
    ["map_or", "has return type", "U"],
    ["map_or::default", "has type", "U"],
    ["map_or::f", "has type", "FnOnce(T) -> U"],
    ["map_or_else", "has argument", "map_or_else::default"],
    ["map_or_else", "has argument", "map_or_else::f"],
    [
      "map_or_else",
      "has description",
      "Applies a function to the contained value (if any), or computes a default (if not)."
    ],
    ["map_or_else", "has return type", "U"],
    ["map_or_else::default", "has type", "D"],
    ["map_or_else::f", "has type", "FnOnce(T) -> U"],
    ["max", "has argument", "other"],
    ["max", "has argument", "self"],
    [
      "max",
      "has description",
      "This method returns the maximum of self and other."
    ],
    ["max", "has return type", "Option<T>"],
    ["ok_or", "has argument", "err"],
    ["ok_or", "has argument", "self"],
    [
      "ok_or",
      "has declaration",
      "pub fn ok_or<E>(self, err: E) -> Result<T, E>"
    ],
    [
      "ok_or",
      "has description",
      "Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."
    ],
    ["ok_or", "has return type", "Result<T, E>"],
    ["ok_or_else", "has argument", "err"],
    ["ok_or_else", "has argument", "self"],
    [
      "ok_or_else",
      "has declaration",
      "pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"
    ],
    [
      "ok_or_else",
      "has description",
      "Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."
    ],
    ["ok_or_else", "has return type", "Result<T, E>"],
    ["optb", "has type", "Option<T>"],
    ["or", "has argument", "optb"],
    ["or", "has declaration", "pub fn or(self, optb: Option<T>) -> Option<T>"],
    [
      "or",
      "has description",
      "Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."
    ],
    [
      "or",
      "has example",
      "assert_eq!(x.or(y), Some(2)); assert_eq!(x.or(y), Some(100)); assert_eq!(x.or(y), Some(2)); assert_eq!(x.or(y), None);"
    ],
    ["or", "has return type", "Option<T>"],
    ["or", "is a", "method"],
    ["or_else", "has argument", "f"],
    [
      "or_else",
      "has declaration",
      "pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"
    ],
    [
      "or_else",
      "has description",
      "Returns the option if it contains a value, otherwise calls f and returns the result."
    ],
    ["or_else", "has return type", "Option<T>"],
    ["or_else", "is a", "method"],
    ["other", "has type", "&Option<T>"],
    ["other", "has type", "Option<T>"],
    ["partial_cmp", "has argument", "other"],
    ["partial_cmp", "has argument", "self"],
    [
      "partial_cmp",
      "has description",
      "This method returns an ordering between self and other values if one exists."
    ],
    ["partial_cmp", "has return type", "Option<Ordering>"],
    ["predicate", "has type", "FnOnce(&T) -> bool"],
    ["predicate", "has type", "P"],
    ["replace", "has argument", "value"],
    [
      "replace",
      "has declaration",
      "pub fn replace(&mut self, value: T) -> Option<T>"
    ],
    [
      "replace",
      "has description",
      "Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."
    ],
    [
      "replace",
      "has example",
      "#![feature(option_replace)] let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"
    ],
    ["replace", "has return type", "Option<T>"],
    [
      "replace",
      "has stability",
      "nightly-only experimental API (option_replace #51998)"
    ],
    ["replace", "is a", "function"],
    ["self", "has type", "&Option<T>"],
    ["self", "has type", "&Self"],
    ["self", "has type", "&mut T"],
    ["self", "has type", "Option<Result<T, E>>"],
    ["self", "has type", "Option<T>"],
    ["self", "has type", "Self"],
    ["source", "has type", "&Self"],
    ["state", "has type", "&mut H"],
    ["state", "has type", "&mut __HT"],
    ["std::iter::FromIterator", "is a", "trait"],
    ["std::iter::FromIterator::from_iter", "has argument", "iter"],
    [
      "std::iter::FromIterator::from_iter",
      "has description",
      "Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."
    ],
    [
      "std::iter::FromIterator::from_iter",
      "has example",
      "Here is an example which increments every integer in a vector, checking for overflow"
    ],
    [
      "std::iter::FromIterator::from_iter",
      "has return type",
      "std::option::Option<V>"
    ],
    ["std::iter::IntoIterator", "is a", "trait"],
    [
      "std::ops::Try for std::option::Option<T>",
      "has associated type",
      "Error = std::option::NoneError"
    ],
    [
      "std::ops::Try for std::option::Option<T>",
      "has associated type",
      "Ok = T"
    ],
    ["std::ops::Try", "is a", "trait"],
    [
      "std::ops::Try::into_result",
      "has return type",
      "std::result::Result<T, std::option::NoneError>"
    ],
    [
      "std::ops::Try::into_result",
      "has stability",
      "This is a nightly-only experimental API. (try_trait #42327)"
    ],
    ["std::option", "contains", "IntoIter"],
    ["std::option", "contains", "Iter"],
    ["std::option", "contains", "IterMut"],
    ["std::option", "contains", "NoneError"],
    ["std::option::NoneError", "is a", "struct"],
    ["std::option::Option", "is a", "enum"],
    ["std::option::Option<T>", "implements", "std::ops::Try"],
    [
      "std::option::Option<V>",
      "implements",
      "std::iter::FromIterator<std::option::Option<A>>"
    ],
    ["std::result::Result", "is a", "enum"],
    ["t", "has type", "T"],
    ["take", "has argument", "self"],
    ["take", "has declaration", "pub fn take(&mut self) -> Option<T>"],
    [
      "take",
      "has description",
      "Takes the value out of the option, leaving a None in its place."
    ],
    [
      "take",
      "has example",
      "let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"
    ],
    ["take", "has return type", "Option<T>"],
    ["take", "is a", "function"],
    ["target", "has type", "&mut T"],
    ["to_owned", "has return type", "T"],
    ["transpose", "has argument", "self"],
    [
      "transpose",
      "has description",
      "Transposes an Option of a Result into a Result of an Option."
    ],
    [
      "transpose",
      "has description",
      "Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."
    ],
    [
      "transpose",
      "has example",
      "let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"
    ],
    ["transpose", "has return type", "Result<Option<T>, E>"],
    [
      "transpose",
      "has stability",
      "nightly-only experimental API: transpose_result"
    ],
    ["try_from", "has argument", "value"],
    ["try_from", "has description", "Performs the conversion."],
    ["try_from", "has return type", "Result<T, TryFrom<T>::Error>"],
    [
      "try_from",
      "has stability",
      "This is a nightly-only experimental API. (try_from #33417)"
    ],
    ["try_into", "has description", "Performs the conversion."],
    ["try_into", "has return type", "Result<U, <U as TryFrom<T>>::Error>"],
    [
      "try_into",
      "has stability",
      "This is a nightly-only experimental API. (try_from #33417)"
    ],
    ["u32", "is a primitive type", "primitive type"],
    ["unwrap", "has argument", "self"],
    [
      "unwrap",
      "has description",
      "Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly. Panics if the self value equals None."
    ],
    ["unwrap", "has return type", "T"],
    ["unwrap_or", "has argument", "def"],
    [
      "unwrap_or",
      "has description",
      "Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."
    ],
    ["unwrap_or", "has return type", "T"],
    ["unwrap_or_default", "has argument", "self"],
    [
      "unwrap_or_default",
      "has description",
      "Returns the contained value or a default"
    ],
    [
      "unwrap_or_default",
      "has example",
      "Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."
    ],
    ["unwrap_or_default", "has return type", "T"],
    ["unwrap_or_default", "is a", "method"],
    ["unwrap_or_default", "requires trait", "Default"],
    ["unwrap_or_else", "has argument", "f"],
    [
      "unwrap_or_else",
      "has description",
      "Returns the contained value or computes it from a closure."
    ],
    ["unwrap_or_else", "has return type", "T"],
    ["usize", "is a", "primitive type"],
    ["v", "has type", "T"],
    ["value", "has type", "T"],
    ["value", "has type", "U"],
    ["xor", "has argument", "optb"],
    [
      "xor",
      "has description",
      "Returns Some if exactly one of self, optb is Some, otherwise returns None."
    ],
    ["xor", "has return type", "Option<T>"],
    ["xor", "has stability", "nightly-only experimental"]
  ],
  "add_links": [
    "../../src/alloc/borrow.rs.html",
    "../../src/core/any.rs.html",
    "../../src/core/borrow.rs.html",
    "../../src/core/clone.rs.html",
    "../../src/core/cmp.rs.html",
    "../../src/core/convert.rs.html",
    "../../src/core/hash/mod.rs.html",
    "../../src/core/iter/traits.rs.html",
    "../../src/core/option.rs.html",
    "../../std/any/struct.TypeId.html",
    "../../std/any/trait.Any.html",
    "../../std/borrow/trait.Borrow.html",
    "../../std/borrow/trait.BorrowMut.html",
    "../../std/borrow/trait.ToOwned.html",
    "../../std/clone/trait.Clone.html",
    "../../std/cmp/enum.Ordering.html",
    "../../std/cmp/trait.Ord.html",
    "../../std/cmp/trait.PartialEq.html",
    "../../std/cmp/trait.PartialOrd.html",
    "../../std/convert/trait.From.html",
    "../../std/convert/trait.Into.html",
    "../../std/convert/trait.TryFrom.html",
    "../../std/convert/trait.TryInto.html",
    "../../std/default/trait.Default.html",
    "../../std/fmt/struct.Error.html",
    "../../std/fmt/struct.Formatter.html",
    "../../std/fmt/trait.Debug.html",
    "../../std/hash/trait.Hash.html",
    "../../std/index.html",
    "../../std/io/trait.Read.html",
    "../../std/io/trait.Write.html",
    "../../std/iter/trait.FromIterator.html",
    "../../std/iter/trait.IntoIterator.html",
    "../../std/iter/trait.Iterator.html",
    "../../std/marker/trait.Copy.html",
    "../../std/marker/trait.Send.html",
    "../../std/marker/trait.Sized.html",
    "../../std/marker/trait.Sync.html",
    "../../std/ops/trait.Deref.html",
    "../../std/ops/trait.FnOnce.html",
    "../../std/ops/trait.Try.html",
    "../../std/option/enum.Option.html",
    "../../std/option/struct.IntoIter.html",
    "../../std/option/struct.Iter.html",
    "../../std/option/struct.IterMut.html",
    "../../std/option/struct.NoneError.html",
    "../../std/pin/struct.PinMut.html",
    "../../std/primitive.str.html",
    "../../std/primitive.usize.html",
    "../../std/result/enum.Result.html",
    "../../std/str/trait.FromStr.html",
    "../../std/string/struct.String.html",
    "../default/trait.Default.html",
    "../primitive.bool.html",
    "../primitive.never.html",
    "../primitive.reference.html",
    "../primitive.u32.html",
    "../primitive.unit.html",
    "enum.Option.html",
    "https://github.com/rust-lang/rust/issues/33417",
    "https://github.com/rust-lang/rust/issues/41263",
    "https://github.com/rust-lang/rust/issues/49150",
    "https://github.com/rust-lang/rust/issues/51998",
    "https://play.rust-lang.org/",
    "https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_replace)%5D%0A%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet",
    "https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly",
    "https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D",
    "https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D",
    "https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20maybe_some_string%20%3D%20Some(String%3A%3Afrom(%22Hello%2C%20World!%22))%3B%0A%2F%2F%20%60Option%3A%3Amap%60%20takes%20self%20*by%20value*%2C%20consuming%20%60maybe_some_string%60%0Alet%20maybe_some_len%20%3D%20maybe_some_string.map(%7Cs%7C%20s.len())%3B%0A%0Aassert_eq!(maybe_some_len%2C%20Some(13))%3B%0A%7D",
    "https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D",
    "https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D",
    "struct.IntoIter.html",
    "struct.Iter.html",
    "struct.IterMut.html",
    "struct.NoneError.html",
    "trait.Clone.html",
    "trait.Copy.html",
    "trait.Debug.html",
    "trait.Default.html",
    "trait.Eq.html",
    "trait.From.html",
    "trait.FromIterator.html",
    "trait.Hash.html",
    "trait.IntoIterator.html",
    "trait.Ord.html",
    "trait.PartialEq.html",
    "trait.PartialOrd.html",
    "trait.Send.html",
    "trait.Sync.html",
    "trait.Try.html"
  ],
  "metrics": {
    "escapeCount": 0,
    "costTime": 4288669,
    "totalUsage": {
      "prompt_tokens": 138090,
      "completion_tokens": 131658,
      "cached_tokens": 0,
      "reasoning_tokens": 115604
    },
    "chunkLength": 26,
    "chunksInfo": [
      { "contextLength": 0, "contentLength": 7000, "costTime": 152317 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 157904 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 119569 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 224429 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 327871 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 180822 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 64679 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 72863 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 187628 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 101637 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 146706 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 190035 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 268137 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 109744 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 174482 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 102444 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 88867 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 203271 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 93956 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 344771 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 310071 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 266514 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 103372 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 55168 },
      { "contextLength": 500, "contentLength": 7000, "costTime": 138262 },
      { "contextLength": 500, "contentLength": 1900, "costTime": 103150 }
    ]
  },
  "model": "deepseek-r1-250120",
  "extraInfo": { "startTime": "2025-03-22T14:25:56.357Z", "examGroup": "split" }
}
