{"create_time":"2025-03-22T14:37:51.388Z","id":"b3154dc9-046c-48af-9fe5-96f605bf2dfb","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["contains","has argument","has associated type","has declaration","has description","has example","has full name","has implementation","has method","has return type","has stability","has type","has variant","implements","is a","stable since"],"add_triples":[["&'_ mut I","implements","Iterator"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Clone","has full name","std::clone::Clone"],["Clone","is a","trait"],["Debug","has full name","std::fmt::Debug"],["Debug","is a","trait"],["Eq","has full name","std::cmp::Eq"],["Eq","is a","trait"],["Error","has full name","std::fmt::Error"],["Error","is a","struct"],["FnOnce","has full name","std::ops::FnOnce"],["FnOnce","is a","trait"],["Formatter","has full name","std::fmt::Formatter"],["Formatter","is a","struct"],["Hash","has method","hash"],["I","implements","IntoIterator"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","struct"],["IntoIterator for &'a Option<T>","has associated type","IntoIter"],["IntoIterator for &'a Option<T>","has associated type","Item"],["IntoIterator for &'a mut Option<T>","has associated type","IntoIter"],["IntoIterator for &'a mut Option<T>","has associated type","Item"],["IntoIterator for Option<T>","has associated type","IntoIter"],["IntoIterator for Option<T>","has associated type","Item"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Item","has type","T"],["Iter","is a","struct"],["IterMut","has full name","std::option::IterMut"],["IterMut","is a","struct"],["NoneError","has description","The error type that results from applying the try operator (`?`) to a `None` value."],["NoneError","is a","struct"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","From<T>"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option::as_mut","has description","Converts from Option<T> to Option<&mut T>."],["Option::as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["Option::as_mut","has return type","Option<&mut T>"],["Option::as_mut","is a","method"],["Option::as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["Option::as_pin_mut","has stability","nightly-only experimental API: pin #49150"],["Option::as_pin_ref","has return type","Option<Pin<&'a T>>"],["Option::as_pin_ref","has stability","nightly-only experimental API: pin #49150"],["Option::expect","has argument","msg"],["Option::expect","has description","Unwraps an option yielding the content of a Some. Panics if the value is None with custom message."],["Option::expect","has example","let x = Some(\"value\"); x.expect(\"the world is ending\");"],["Option::map","has argument","f"],["Option::map","has example","Converts Option<String> to Option<usize> using s.len()"],["Option::map","has return type","Option<U>"],["Option::unwrap","has description","Moves the value out of Option<T> if Some(v). Panics if None."],["Option::unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["Option::unwrap_or","has argument","def"],["Option::unwrap_or","has example","Some(\"car\").unwrap_or(\"bike\") returns \"car\""],["Option::unwrap_or_else","has argument","f"],["Option::unwrap_or_else","has example","Some(4).unwrap_or_else(|| 2 * k) returns 4"],["Option<&'a T>","implements","From"],["Option<&'a T>","stable since","1.30.0"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&T>","has method","cloned"],["Option<&mut T>","has method","cloned"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","cmp"],["Option<T>","has method","deref"],["Option<T>","has method","fmt"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","partial_cmp"],["Option<T>","has method","unwrap_or_default"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>::Error","has type","NoneError"],["Option<T>::Ok","has type","T"],["Option<V>","implements","FromIterator"],["Ord","has full name","std::cmp::Ord"],["Ord","is a","trait"],["Ordering","has full name","std::cmp::Ordering"],["Ordering","is a","enum"],["PartialEq","has method","eq"],["PartialEq","has method","ne"],["PartialOrd","has full name","std::cmp::PartialOrd"],["PartialOrd","is a","trait"],["Result","has full name","std::result::Result"],["Result","is a","enum"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","Into"],["T","implements","ToOwned"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["U","implements","TryFrom"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has return type","Option<U>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has argument","self"],["borrow","has description","Immutably borrows from an owned value. Read more"],["borrow","has return type","&T"],["borrow_mut","has argument","self"],["borrow_mut","has description","Mutably borrows from an owned value. Read more"],["borrow_mut","has return type","&mut T"],["clone","has argument","self"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from::source","has type","&Self"],["clone_into","has argument","self"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning. Read more"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["default","has return type","Option<T>"],["default","has type","FnOnce() -> U"],["default","has type","U"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["err","has type","E"],["err","has type","FnOnce() -> E"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["f","has type","FnOnce(T) -> U"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false. This function works similar to Iterator::filter(). You can imagine the Option<T> being an iterator over one or zero elements. filter() lets you decide which elements to keep."],["filter","has return type","Option<T>"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt::f","has type","&mut Formatter"],["from","has argument","&'a Option<T>"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from_error","has return type","Option<T>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","Here is an example which increments every integer in a vector, checking for overflow..."],["from_iter","has return type","Option<V>"],["from_ok","has return type","Option<T>"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); ... }"],["get_or_insert","has full name","std::option::Option::get_or_insert"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","method"],["get_or_insert::v","has type","T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has description","Gets the TypeId of self. Read more"],["get_type_id","has return type","TypeId"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["hash","has argument","self"],["hash","has argument","state"],["hash_slice","stable since","1.3.0"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","U"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","stable since","1.21.0"],["msg","has type","&str"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !="],["ne","has return type","bool"],["ok_or","has argument","err"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); ..."],["or","has full name","std::option::Option::or"],["or","has return type","Option<T>"],["or","is a","method"],["or::optb","has type","Option<T>"],["or::self","has type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None } ..."],["or_else","has full name","std::option::Option::or_else"],["or_else","has return type","Option<T>"],["or_else","is a","method"],["or_else::f","has type","FnOnce() -> Option<T>"],["or_else::self","has type","Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp::other","has type","&Option<T>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","stable since","1.31.0"],["self","has type","&T"],["self","has type","&mut T"],["self","has type","Option<T>"],["state","has type","&mut __HT"],["std::option","contains","IntoIter"],["std::option","contains","Iter"],["std::option","contains","IterMut"],["std::option","contains","NoneError"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["target","has type","&mut T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning. Read more"],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["unwrap_or_default","has description","Returns the contained value or a default. Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has return type","T"],["value","has type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","#![feature(option_xor)] let x = Some(2); ..."],["xor","has full name","std::option::Option::xor"],["xor","has return type","Option<T>"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"],["xor","is a","method"],["xor::optb","has type","Option<T>"],["xor::self","has type","Option<T>"]],"add_links":["../../../../std/process/struct.Command.html","../../../primitive.u32.html","../../settings.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/pin/struct.Pin.html","../../std/primitive.u32.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.never.html","../primitive.reference.html","../string/struct.String.html","enum.Option.html","https://play.rust-lang.org/","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20maybe_some_string%20%3D%20Some(String%3A%3Afrom(%22Hello%2C%20World!%22))%3B%0A%2F%2F%20%60Option%3A%3Amap%60%20takes%20self%20*by%20value*%2C%20consuming%20%60maybe_some_string%60%0Alet%20maybe_some_len%20%3D%20maybe_some_string.map(%7Cs%7C%20s.len())%3B%0A%0Aassert_eq!(maybe_some_len%2C%20Some(13))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter().next()%2C%20Some(%264))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=...","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1775840,"totalUsage":{"prompt_tokens":96552,"completion_tokens":55183,"cached_tokens":0,"reasoning_tokens":45530},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":64286},{"contextLength":500,"contentLength":15000,"costTime":62139},{"contextLength":500,"contentLength":15000,"costTime":185331},{"contextLength":500,"contentLength":15000,"costTime":268677},{"contextLength":500,"contentLength":15000,"costTime":249474},{"contextLength":500,"contentLength":15000,"costTime":246883},{"contextLength":500,"contentLength":15000,"costTime":66751},{"contextLength":500,"contentLength":15000,"costTime":60780},{"contextLength":500,"contentLength":15000,"costTime":43370},{"contextLength":500,"contentLength":15000,"costTime":303157},{"contextLength":500,"contentLength":15000,"costTime":95264},{"contextLength":500,"contentLength":13078,"costTime":129728}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:08:15.049Z","examGroup":"split"}}