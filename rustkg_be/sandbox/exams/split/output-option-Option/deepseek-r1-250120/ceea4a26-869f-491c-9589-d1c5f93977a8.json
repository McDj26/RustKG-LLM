{"create_time":"2025-03-22T15:18:57.314Z","id":"ceea4a26-869f-491c-9589-d1c5f93977a8","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["contains","has argument","has associated type","has declaration","has description","has example","has full name","has method","has return type","has stability","has type","has variant","implements","is a","panics","requires trait","returns","stable since"],"add_triples":[["&'_ mut I","implements","Iterator"],["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>","stable since","1.4.0"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["Debug","has method","fmt"],["Default","has full name","std::default::Default"],["Default","has method","default"],["Error","has description","The type of this value when viewed as failed."],["Error","has type","!"],["Error","has type","<U as TryFrom<T>>::Error"],["Error","has type","NoneError"],["F","requires trait","FnOnce"],["FnOnce","has full name","std::ops::FnOnce"],["FnOnce","is a","trait"],["From","has method","from"],["From","is a","trait"],["From<&'a Option<T>> for Option<&'a T>","stable since","1.30.0"],["FromIterator","is a","trait"],["Hash","has full name","std::hash::Hash"],["Hash","has method","hash"],["Hash","has method","hash_slice"],["I","implements","IntoIterator"],["Into","is a","trait"],["Into","requires trait","From"],["IntoIter","has full name","std::option::IntoIter"],["IntoIter","has type","I"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has full name","std::iter::IntoIterator"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Item","has type","<I as Iterator>::Item"],["Item","has type","T"],["Iter","has full name","std::option::Iter"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","has full name","std::option::IterMut"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["Iterator","has full name","std::iter::Iterator"],["Iterator","is a","trait"],["None","has description","No value"],["NoneError","has full name","std::option::NoneError"],["NoneError","is a","struct"],["Ok","has description","The type of this value when viewed as successful."],["Ok","has type","T"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option::as_mut","has argument","Option::as_mut::self"],["Option::as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["Option::as_mut","has description","Converts from Option<T> to Option<&mut T>."],["Option::as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["Option::as_mut","has return type","Option<&mut T>"],["Option::as_mut","is a","method"],["Option::as_mut::self","has type","&mut Self"],["Option::as_pin_mut","has declaration","pub fn as_pin_mut(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>>"],["Option::as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["Option::as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["Option::as_pin_mut","has stability","nightly-only experimental API (pin #49150)"],["Option::as_pin_mut","is a","method"],["Option::as_pin_ref","has declaration","pub fn as_pin_ref(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>>"],["Option::as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["Option::as_pin_ref","has return type","Option<Pin<&'a T>>"],["Option::as_pin_ref","has stability","nightly-only experimental API (pin #49150)"],["Option::as_pin_ref","is a","method"],["Option::as_ref","has argument","Option::as_ref::self"],["Option::as_ref","has declaration","pub fn as_ref(&self) -> Option<&T>"],["Option::as_ref","has description","Converts from Option<T> to Option<&T>."],["Option::as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); // First, cast `Option<String>` to `Option<&String>` with `as_ref`, // then consume *that* with `map`, leaving `text` on the stack. let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["Option::as_ref","has return type","Option<&T>"],["Option::as_ref","is a","method"],["Option::as_ref::self","has type","&Self"],["Option::expect","has argument","Option::expect::msg"],["Option::expect","has argument","Option::expect::self"],["Option::expect","has declaration","pub fn expect(self, msg: &str) -> T"],["Option::expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["Option::expect","has return type","T"],["Option::expect","is a","method"],["Option::expect","panics","Panics if the value is a None with a custom panic message provided by msg."],["Option::expect::msg","has type","&str"],["Option::expect::self","has type","Self"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&T>","has method","cloned"],["Option<&T>","requires trait","Clone"],["Option<&mut T>","has method","cloned"],["Option<&mut T>","requires trait","Clone"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","Error"],["Option<T>","has associated type","IntoIter"],["Option<T>","has associated type","Item"],["Option<T>","has associated type","Item = T"],["Option<T>","has associated type","Ok"],["Option<T>","has full name","std::option::Option<T>"],["Option<T>","has method","as_ref"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","cmp"],["Option<T>","has method","expect"],["Option<T>","has method","from_error"],["Option<T>","has method","from_ok"],["Option<T>","has method","ge"],["Option<T>","has method","get_or_insert"],["Option<T>","has method","gt"],["Option<T>","has method","into_iter"],["Option<T>","has method","into_result"],["Option<T>","has method","is_none"],["Option<T>","has method","is_some"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","partial_cmp"],["Option<T>","has method","unwrap"],["Option<T>","has method","unwrap_or"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has method","unwrap_or_else"],["Option<T>","has method","xor"],["Option<T>","has variant","None"],["Option<T>","has variant","Some"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Deref"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<T>","requires trait","Default"],["Option<T>","requires trait","Ord"],["Option<V>","implements","FromIterator<Option<A>>"],["Owned","has type","T"],["P","requires trait","FnOnce(&T) -> bool"],["PartialEq","has method","eq"],["PartialEq","has method","ne"],["Result","has full name","std::result::Result"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result","is a","enum"],["Some","has declaration","Some(T)"],["Some","has description","Some value T"],["String","is a","struct"],["T","implements","Any"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","ToOwned"],["T","implements","TryFrom"],["T","implements","TryInto"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["ToOwned","requires trait","Clone"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryInto","has associated type","Error"],["TryInto","is a","trait"],["TryInto","requires trait","TryFrom"],["TypeId","has full name","std::any::TypeId"],["TypeId","is a","struct"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); ..."],["and","has return type","Option<U>"],["and::optb","has type","Option<U>"],["and::self","has type","self"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } ..."],["and_then","has return type","Option<U>"],["as_ref","has argument","self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has return type","&T"],["borrow","is a","method"],["borrow_mut","has argument","self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","nightly-only experimental API: toowned_clone_into (issue #41263)"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D"],["cloned","has example","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D"],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cloned","stable since","1.26.0"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp::other","has type","&Option<T>"],["data","has type","&[Self]"],["default","has description","Returns None."],["default","has return type","Option<T>"],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["err","has type","E"],["err","has type","F"],["expect","has argument","msg"],["expect","has argument","self"],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\");"],["expect","has example","let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","has return type","T"],["expect","panics","Panics if the value is a None with a custom panic message provided by msg"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has argument","predicate"],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, None otherwise. This function works similar to Iterator::filter(). You can imagine the Option<T> being an iterator over one or zero elements. filter() lets you decide which elements to keep."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","std::option::Option<T>"],["filter","has stability","1.27.0"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["from","has argument","o"],["from","has argument","t"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability","nightly-only experimental API: try_trait #42327"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["from_iter","requires trait","FromIterator<A>"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has stability","nightly-only experimental API: try_trait #42327"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge::other","has type","&Option<T>"],["get_or_insert","has argument","&mut self"],["get_or_insert","has argument","v"],["get_or_insert","has declaration","pub fn get_or_insert(&mut self, v: T) -> &mut T"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert","has stability","Stable since Rust version 1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None;\n{\n    let y: &mut u32 = x.get_or_insert_with(|| 5);\n    assert_eq!(y, &5);\n    *y = 7;\n}\nassert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has argument","self"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt::other","has type","&Option<T>"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given Hasher. Read more"],["hash_slice","has argument","data"],["hash_slice","has description","Feeds a slice of this type into the given Hasher. Read more"],["hash_slice","stable since","1.3.0"],["impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T>","stable since","1.30.0"],["impl<T> From<T> for Option<T>","stable since","1.12.0"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","is a","method"],["into_iter","has argument","self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_result","has argument","self"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","has stability","nightly-only experimental API: try_trait #42327"],["is_none","has argument","self"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has argument","self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter","has type","IntoIterator<Item = Option<A>>"],["iter::self","has type","&self"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["iter_mut::self","has type","&mut self"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le::other","has type","&Option<T>"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt::other","has type","&Option<T>"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\"));\nlet maybe_some_len = maybe_some_string.map(|s| s.len());\nassert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map","is a","method"],["map::f","has type","FnOnce(T) -> U"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\");\nassert_eq!(x.map_or(42, |v| v.len()), 3);\nlet x: Option<&str> = None;\nassert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or","is a","method"],["map_or::default","has type","U"],["map_or::f","has type","FnOnce(T) -> U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["map_or_else","is a","method"],["map_or_else::default","has type","D"],["map_or_else::f","has type","FnOnce(T) -> U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","stable since","1.21.0"],["max::other","has type","Self"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","stable since","1.21.0"],["min::other","has type","Self"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["o","has type","&'a Option<T>"],["o","has type","&'a mut Option<T>"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err). Arguments passed to ok_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use ok_or_else, which is lazily evaluated."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2)); let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\")); assert_eq!(None.or_else(vikings), Some(\"vikings\")); assert_eq!(None.or_else(nobody), None);"],["or_else","has return type","Option<T>"],["other","has type","&Option<T>"],["other","has type","Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["predicate","has type","P"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D"],["replace","has example","let mut x = Some(2);\nlet old = x.replace(5);\nassert_eq!(x, Some(5));\nassert_eq!(old, Some(2));\nlet mut x = None;\nlet old = x.replace(3);\nassert_eq!(x, Some(3));\nassert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","is a","method"],["replace","stable since","1.31.0"],["self","has type","&Option<T>"],["self","has type","&Self"],["self","has type","&mut Self"],["self","has type","Option<T>"],["self","has type","Self"],["source","has type","&Self"],["state","has type","&mut H"],["std::option","contains","IntoIter"],["std::option","contains","Iter"],["std::option","contains","IterMut"],["std::option","contains","NoneError"],["std::option::Option","has method","filter"],["std::option::Option","has method","or"],["t","has type","T"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2);\nlet y = x.take();\nassert_eq!(x, None);\nassert_eq!(y, Some(2));\nlet mut x: Option<u32> = None;\nlet y = x.take();\nassert_eq!(x, None);\nassert_eq!(y, None);"],["take","has return type","Option<T>"],["target","has type","&mut T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has argument","self"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","assert_eq!(x, y.transpose());"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (#47338)"],["try_from","has argument","value"],["try_from","has return type","Result<T, Error>"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","method"],["unwrap","has argument","self"],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has example","let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has return type","T"],["unwrap","panics","Panics if the self value equals None"],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0"],["unwrap_or_default","has return type","T"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["usize","is a","primitive type"],["v","has type","T"],["val","has type","T"],["value","has type","T"],["value","has type","U"],["xor","has argument","optb"],["xor","has argument","other"],["xor","has argument","self"],["xor","has declaration","pub fn xor(self, other: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has description","Returns Some if exactly one of self, other is Some, otherwise returns None."],["xor","has example","assert_eq!(Some(2).xor(None), Some(2)); let x: Option<u32> = None; assert_eq!(x.xor(Some(2)), Some(2)); assert_eq!(Some(2).xor(Some(2)), None); assert_eq!(None::<u32>.xor(None), None);"],["xor","has example","assert_eq!(x.xor(y), Some(2)); assert_eq!(x.xor(y), Some(2)); assert_eq!(x.xor(y), None);"],["xor","has return type","Option<T>"],["xor","has stability","This is a nightly-only experimental API. (#50512)"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.Pin.html","../../std/primitive.bool.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.never.html","../primitive.reference.html","../primitive.str.html","https://github.com/rust-lang/rust/issues/41263","https://github.com/rust-lang/rust/issues/47338","https://play.rust-lang.org/?code=%23!%5Ballo","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20good_year_from_input%20%3D%20%221909%22%3B%0Alet%20bad_year_from_input%20%3D%20%22190blarg%22%3B%0Alet%20good_year%20%3D%20good_year_from_input.parse().ok().unwrap_or_default()%3B%0Alet%20bad_year%20%3D%20bad_year_from_input.parse().ok().unwrap_or_default()%3B%0A%0Aassert_eq!(1909%2C%20good_year)%3B%0Aassert_eq!(0%2C%20bad_year)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22string%22)%3B%0Alet%20v%3A%20Vec%3C%26str%3E%20%3D%20x.into_iter().collect()%3B%0Aassert_eq!(v%2C%20%5B%22string%22%5D)%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20v%3A%20Vec%3C%26str%3E%20%3D%20x.into_iter().collect()%3B%0Aassert!(v.is_empty())%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.FnOnce.html"],"metrics":{"escapeCount":0,"costTime":4250860,"totalUsage":{"prompt_tokens":138235,"completion_tokens":130228,"cached_tokens":0,"reasoning_tokens":113685},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":150704},{"contextLength":500,"contentLength":7000,"costTime":126691},{"contextLength":500,"contentLength":7000,"costTime":236205},{"contextLength":500,"contentLength":7000,"costTime":52924},{"contextLength":500,"contentLength":7000,"costTime":163320},{"contextLength":500,"contentLength":7000,"costTime":260872},{"contextLength":500,"contentLength":7000,"costTime":164201},{"contextLength":500,"contentLength":7000,"costTime":75844},{"contextLength":500,"contentLength":7000,"costTime":243650},{"contextLength":500,"contentLength":7000,"costTime":161759},{"contextLength":500,"contentLength":7000,"costTime":155004},{"contextLength":500,"contentLength":7000,"costTime":66674},{"contextLength":500,"contentLength":7000,"costTime":330880},{"contextLength":500,"contentLength":7000,"costTime":51024},{"contextLength":500,"contentLength":7000,"costTime":352155},{"contextLength":500,"contentLength":7000,"costTime":68636},{"contextLength":500,"contentLength":7000,"costTime":243324},{"contextLength":500,"contentLength":7000,"costTime":115995},{"contextLength":500,"contentLength":7000,"costTime":198673},{"contextLength":500,"contentLength":7000,"costTime":220067},{"contextLength":500,"contentLength":7000,"costTime":245246},{"contextLength":500,"contentLength":7000,"costTime":102966},{"contextLength":500,"contentLength":7000,"costTime":179368},{"contextLength":500,"contentLength":7000,"costTime":56798},{"contextLength":500,"contentLength":7000,"costTime":168396},{"contextLength":500,"contentLength":3078,"costTime":59484}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:08:05.885Z","examGroup":"split"}}