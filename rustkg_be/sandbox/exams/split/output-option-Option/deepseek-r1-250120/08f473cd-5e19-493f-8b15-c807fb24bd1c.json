{"create_time":"2025-03-22T14:19:15.592Z","id":"08f473cd-5e19-493f-8b15-c807fb24bd1c","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has documentation","has example","has full name","has implementation","has method","has portability","has return type","has source code","has stability","has type","has variant","implements","is a","requires method","requires trait","returns","stable since"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Error","has type","!"],["F","requires trait","FnOnce"],["From","has method","from"],["From<T> for Option<T>","stable since","1.12.0"],["Into","has method","into"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","requires trait","Iterator"],["Item","has description","The type of the elements being iterated over."],["Iter","implements","Iterator"],["IterMut","implements","Iterator"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Eq"],["Option","implements","From<T>"],["Option","implements","PartialEq<Option<T>>"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&T>","has method","cloned"],["Option<&mut T>","has method","cloned"],["Option<Result<T, E>>","implements","FromIterator"],["Option<T>","has method","clone"],["Option<T>","has method","cmp"],["Option<T>","has method","default"],["Option<T>","has method","fmt"],["Option<T>","has method","hash"],["Option<T>","has method","into_iter"],["Option<T>","has method","partial_cmp"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has stability","nightly-only experimental API (try_trait #42327)"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>::into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect();"],["Owned","has type","T"],["P","requires trait","FnOnce"],["Some","has description","Some value T"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["and","has argument","optb"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","returns","Option<U>"],["and_then","has argument","f"],["and_then","has declaration","pub fn and_then<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","returns","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","returns","Option<&mut T>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_pin_ref","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","returns","Option<&T>"],["borrow","has return type","&T"],["borrow_mut","has return type","&mut T"],["clone_into","has stability","nightly-only experimental API (toowned_clone_into #41263)"],["cloned","returns","Option<T>"],["cloned","stable since","1.26.0"],["default","has description","Returns None"],["default","returns","Option<T>"],["err","has type","F"],["expect","has argument","msg: &str"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom message."],["f","has type","F"],["filter","has argument","predicate"],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns:"],["from","has argument","t"],["from","has return type","T"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result"],["from_error","is a","method"],["from_error","returns","Option<T>"],["get_or_insert","has declaration","pub fn get_or_insert(&mut self, v: T) -> &mut T"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has declaration","pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T where F: FnOnce() -> T"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","returns","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has return type","TypeId"],["get_type_id","has stability","nightly-only experimental API (get_type_id #27745)"],["hash","has argument","__HT"],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","returns","IntoIter<T>"],["is_none","has description","Returns true if the option is a None value."],["is_none","returns","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","returns","bool"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","returns","Iter<T>"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","returns","IterMut<T>"],["ok_or_else","has argument","err"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","returns","Result<T, E>"],["optb","has type","Option<U>"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","returns","Option<T>"],["or_else","has argument","f"],["or_else","has declaration","pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["predicate","has type","P"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","returns","Option<T>"],["replace","stable since","1.31.0"],["t","has type","T"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","returns","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["transpose","has stability","nightly-only experimental API"],["try_from","has argument","value"],["try_from","has return type","Result<T, Error>"],["try_from","has stability","nightly-only experimental API (try_from #33417)"],["unwrap","has description","Moves the value out of the Option<T> if it is Some(v). Panics if None."],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","requires trait","Default"],["value","has type","T"],["value","has type","U"],["xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/pin/struct.Pin.html","../../std/primitive.bool.html","../../std/primitive.reference.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../primitive.u32.html","enum.Result.html","https://github.com/rust-lang/rust/issues/42327","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","struct.Pin.html","trait.FnOnce.html"],"metrics":{"escapeCount":0,"costTime":415309,"totalUsage":{"prompt_tokens":75631,"completion_tokens":12603,"cached_tokens":0,"reasoning_tokens":8526},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":79555},{"contextLength":500,"contentLength":39000,"costTime":127319},{"contextLength":500,"contentLength":39000,"costTime":107566},{"contextLength":500,"contentLength":39000,"costTime":40600},{"contextLength":500,"contentLength":22078,"costTime":60269}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:12:19.761Z","examGroup":"split"}}