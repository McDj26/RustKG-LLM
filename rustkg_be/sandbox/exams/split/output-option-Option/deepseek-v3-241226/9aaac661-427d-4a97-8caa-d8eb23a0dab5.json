{"create_time":"2025-03-22T14:05:52.068Z","id":"9aaac661-427d-4a97-8caa-d8eb23a0dab5","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated item","has associated item type","has associated iterator","has associated type","has conversion error type","has declaration","has description","has error type","has example","has feature","has iterator type","has method","has return type","has source","has stability","has type","has variant","implements","is a","performs"],"add_triples":[["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>::IntoIter","has type","Iter<'a, T>"],["&'a Option<T>::Item","has type","&'a T"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["Borrow","has method","borrow"],["Borrow::borrow","has return type","&T"],["BorrowMut","has method","borrow_mut"],["Copy","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Debug","is a","trait"],["Default","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Eq","is a","trait"],["Error","has type","!"],["Error","has type","NoneError"],["Error","is a","struct"],["Error","is a","type"],["FnOnce","is a","trait"],["Formatter","is a","struct"],["From","is a","trait"],["I","implements","IntoIterator"],["I","implements","Iterator"],["Into","has method","into"],["Into::into","has description","Performs the conversion."],["Into::into","has return type","U"],["IntoIter","has full name","std::option::IntoIter"],["IntoIter","has type","I"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","struct"],["IntoIter","is a","type"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has full name","std::iter::IntoIterator"],["IntoIterator","is a","trait"],["Item","has type","&'a mut T"],["Item","has type","<I as Iterator>::Item"],["Item","is a","type"],["Iter","has full name","std::option::Iter"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","has full name","std::option::IterMut"],["IterMut","has source","../../src/core/option.rs.html#1061-1063"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["Iterator","has full name","std::iter::Iterator"],["Iterator","is a","trait"],["None","has description","No value"],["None","is a","variant"],["Ok","has type","T"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Any"],["Option","implements","Borrow"],["Option","implements","BorrowMut"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","Into"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","ToOwned"],["Option","implements","Try"],["Option","implements","TryFrom"],["Option","implements","TryInto"],["Option","is a","enum"],["Option<&T>","implements","Clone"],["Option<&mut T>","implements","Clone"],["Option<T>","has associated type","IntoIter"],["Option<T>","has associated type","Item"],["Option<T>","has method","into_iter"],["Option<T>","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<T>::IntoIter","has type","IntoIter<T>"],["Option<T>::Item","has type","T"],["Owned","has associated item type","T"],["Owned","has type","T"],["PartialEq","is a","trait"],["Result","has full name","std::result::Result"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result","is a","enum"],["Send","is a","trait"],["Some","has description","Some value T"],["Some","has type","T"],["Some","is a","variant"],["Sync","is a","trait"],["T","implements","From"],["T","implements","From<U>"],["T","implements","Sync"],["T","implements","TryFrom"],["T","implements","TryInto"],["T","is a","type"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["Try","has associated type","Error"],["Try","has associated type","Ok"],["Try","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["Try","has method","from_error"],["Try","has method","from_ok"],["Try","has method","into_result"],["TryFrom","has associated type","Error"],["TryFrom","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["TryInto::Error","has description","The type returned in the event of a conversion error."],["TryInto::Error","has type","<U as TryFrom<T>>::Error"],["TryInto::try_into","has description","Performs the conversion."],["TryInto::try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["TryInto::try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["U","implements","TryFrom"],["and","has argument","and::optb"],["and","has argument","and::self"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has full name","std::option::Option::and"],["and","has return type","Option<U>"],["and","is a","function"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["and_then","has type","FnOnce(T) -> Option<U>"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","method"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_pin_mut","is a","method"],["as_pin_ref","has declaration","pub fn as_pin_ref(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_pin_ref","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_pin_ref","is a","method"],["as_ref","has declaration","pub fn as_ref(&self) -> Option<&T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["as_ref","is a","method"],["borrow","has argument","borrow::self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","is a","function"],["borrow_mut","has argument","borrow_mut::self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","is a","function"],["clone","has argument","clone::self"],["clone","has description","Returns a copy of the value."],["clone","has full name","std::clone::Clone::clone"],["clone","has return type","Option<T>"],["clone","is a","function"],["clone_from","has argument","clone_from::self"],["clone_from","has argument","clone_from::source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","has full name","std::clone::Clone::clone_from"],["clone_from","is a","function"],["clone_into","has argument","clone_into::self"],["clone_into","has argument","clone_into::target"],["clone_into","has declaration","fn clone_into(&self, target: &mut T)"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","has type","&mut T"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","has stability","Stable since Rust version 1.26.0"],["cloned","is a","method"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","has source","../../src/core/option.rs.html#158"],["cmp","is a","function"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","method"],["deref","has description","Converts from &Option<T> to Option<&T::Target>"],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","is a","function"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["eq","has source","../../src/core/option.rs.html#158"],["eq","is a","function"],["expect","has argument","expect::msg"],["expect","has argument","expect::self"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Panics if the value is a None with a custom panic message provided by msg."],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","has return type","T"],["expect","is a","method"],["filter","has argument","filter::predicate"],["filter","has argument","filter::self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has full name","std::option::Option::filter"],["filter","has return type","Option<T>"],["filter","has stability","Stable since Rust version 1.27.0"],["filter","is a","method"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","has source","../../src/core/option.rs.html#158"],["fmt","is a","function"],["from","has argument type","T"],["from","has argument","from::o"],["from","has argument","from::val"],["from","has argument","t"],["from","has declaration","fn from(val: T) -> Option<T>"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","has return type","Option<&'a T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","has source","../../src/core/option.rs.html#1075-1077"],["from","has stability","Stable since Rust version 1.12.0"],["from","implements","From<T>"],["from","is a","function"],["from","is a","method"],["from::val","has type","T"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_iter","has argument","from_iter::iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) } ).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has full name","std::iter::FromIterator::from_iter"],["from_iter","has return type","Option<V>"],["from_iter","has source","../../src/core/option.rs.html#1272-1315"],["from_iter","is a","function"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","has source","../../src/core/option.rs.html#158"],["ge","is a","function"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","method"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","has stability","Stable since Rust version 1.20.0"],["get_or_insert_with","is a","function"],["get_or_insert_with","is a","method"],["get_type_id","has argument","get_type_id::self"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API."],["get_type_id","is a","function"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","has source","../../src/core/option.rs.html#158"],["gt","is a","function"],["hash","has argument","hash::self"],["hash","has argument","hash::state"],["hash","has description","Feeds this value into the given Hasher."],["hash","has type","&mut __HT"],["hash","is a","method"],["hash_slice","has argument","hash_slice::data"],["hash_slice","has argument","hash_slice::state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["hash_slice","has type","&[Self]"],["hash_slice","has type","&mut H"],["hash_slice","is a","method"],["impl<'a, T> From<&'a Option<T>> for Option<&'a T>","implements","From"],["impl<A, V> FromIterator<Option<A>> for Option<V>","implements","FromIterator"],["into_iter","has argument","into_iter::self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]);"],["into_iter","has full name","std::iter::IntoIterator::into_iter"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","is a","function"],["into_iter","is a","method"],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_none","is a","method"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some","is a","method"],["iter","has argument","iter::self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has full name","std::option::Option::iter"],["iter","has return type","Iter<T>"],["iter","is a","function"],["iter_mut","has argument","iter_mut::self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has full name","std::option::Option::iter_mut"],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","function"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","has source","../../src/core/option.rs.html#158"],["le","is a","function"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","has source","../../src/core/option.rs.html#158"],["lt","is a","function"],["map","has argument","map::f"],["map","has argument","map::self"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["map::f","has type","FnOnce(T) -> U"],["map_or","has argument","map_or::default"],["map_or","has argument","map_or::f"],["map_or","has argument","map_or::self"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has return type","U"],["map_or::default","has type","U"],["map_or::f","has type","FnOnce(T) -> U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","map_or_else::default"],["map_or_else","has argument","map_or_else::f"],["map_or_else","has argument","map_or_else::self"],["map_or_else","has argument","self"],["map_or_else","has declaration","pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U where D: FnOnce() -> U, F: FnOnce(T) -> U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["map_or_else","is a","function"],["map_or_else::default","has type","FnOnce() -> U"],["map_or_else::f","has type","FnOnce(T) -> U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","has source","../../src/core/cmp.rs.html#556-559"],["max","is a","function"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","has source","../../src/core/cmp.rs.html#573-576"],["min","has stability","Stable since Rust version 1.21.0"],["min","is a","function"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !="],["ne","has return type","bool"],["ne","has source","../../src/core/option.rs.html#158"],["ne","is a","function"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has return type","Result<T, E>"],["ok_or","is a","function"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","is a","function"],["or","has argument","or::optb"],["or","has argument","or::self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has full name","std::option::Option::or"],["or","has return type","Option<T>"],["or","has stability","Stable since Rust version 1.27.0"],["or","is a","method"],["or_else","has argument","or_else::f"],["or_else","has argument","or_else::self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has method","or_else"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["or_else::f","has type","FnOnce() -> Option<T>"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has full name","std::cmp::PartialOrd::partial_cmp"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","function"],["replace","has argument","replace::self"],["replace","has argument","replace::value"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","Stable since Rust version 1.31.0"],["replace","is a","function"],["replace","is a","method"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has declaration","fn to_owned(&self) -> T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source","../../src/alloc/borrow.rs.html#94-96"],["transpose","has declaration","pub fn transpose(self) -> Result<Option<T>, E>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","#![feature(transpose_result)] #[derive(Debug, Eq, PartialEq)] struct SomeErr; let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["transpose","has feature","transpose_result"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["transpose","is a","function"],["try_from","has argument type","U"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_from","is a","method"],["unwrap","has argument","unwrap::self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). Panics if the self value equals None."],["unwrap","has return type","T"],["unwrap","is a","method"],["unwrap_or","has argument","unwrap_or::def"],["unwrap_or","has argument","unwrap_or::self"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has return type","T"],["unwrap_or","is a","method"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["unwrap_or_else","has argument","unwrap_or_else::f"],["unwrap_or_else","has argument","unwrap_or_else::self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["unwrap_or_else","is a","method"],["xor","has argument","self"],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has argument","y"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has method","xor"],["xor","has return type","Option<T>"],["xor","has return type","Option<u32>"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"],["xor","is a","function"],["xor","is a","method"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/index.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.Pin.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.never.html","../primitive.reference.html","../primitive.slice.html","../primitive.str.html","enum.Option.html","https://github.com/rust-lang/rust/issues/41263","https://github.com/rust-lang/rust/issues/42327","https://github.com/rust-lang/rust/issues/47338","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aassert_eq!(Some(%22car%22).unwrap_or(%22bike%22)%2C%20%22car%22)%3B%0Aassert_eq!(None.unwrap_or(%22bike%22)%2C%20%22bike%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2010%3B%0Aassert_eq!(Some(4).unwrap_or_else(%7C%7C%202%20*%20k)%2C%204)%3B%0Aassert_eq!(None.unwrap_or_else(%7C%7C%202%20*%20k)%2C%2020)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22air%22)%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22value%22)%3B%0Aassert_eq!(x.expect(%22the%20world%20is%20ending%22)%2C%20%22value%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%20%2F%2F%20fails%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Ax.expect(%22the%20world%20is%20ending%22)%3B%20%2F%2F%20panics%20with%20%60the%20world%20is%20ending%60%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":588727,"totalUsage":{"prompt_tokens":138058,"completion_tokens":15404,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":38558},{"contextLength":500,"contentLength":7000,"costTime":14157},{"contextLength":500,"contentLength":7000,"costTime":26068},{"contextLength":500,"contentLength":7000,"costTime":39745},{"contextLength":500,"contentLength":7000,"costTime":24835},{"contextLength":500,"contentLength":7000,"costTime":22801},{"contextLength":500,"contentLength":7000,"costTime":17858},{"contextLength":500,"contentLength":7000,"costTime":13034},{"contextLength":500,"contentLength":7000,"costTime":14607},{"contextLength":500,"contentLength":7000,"costTime":14724},{"contextLength":500,"contentLength":7000,"costTime":32328},{"contextLength":500,"contentLength":7000,"costTime":17317},{"contextLength":500,"contentLength":7000,"costTime":25195},{"contextLength":500,"contentLength":7000,"costTime":14751},{"contextLength":500,"contentLength":7000,"costTime":24013},{"contextLength":500,"contentLength":7000,"costTime":20736},{"contextLength":500,"contentLength":7000,"costTime":21367},{"contextLength":500,"contentLength":7000,"costTime":20477},{"contextLength":500,"contentLength":7000,"costTime":20553},{"contextLength":500,"contentLength":7000,"costTime":25111},{"contextLength":500,"contentLength":7000,"costTime":32517},{"contextLength":500,"contentLength":7000,"costTime":30649},{"contextLength":500,"contentLength":7000,"costTime":29642},{"contextLength":500,"contentLength":7000,"costTime":13396},{"contextLength":500,"contentLength":7000,"costTime":17897},{"contextLength":500,"contentLength":3078,"costTime":16391}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T13:55:22.612Z","examGroup":"split"}}