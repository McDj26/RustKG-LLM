{"create_time":"2025-03-22T14:02:19.339Z","id":"0455f8bf-b710-4fb4-9cfb-c8f7498dee09","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has description","has error type","has example","has method","has return type","has source code","has stability","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Error","has type","NoneError"],["Hash","is a","trait"],["Into","has method","into"],["IntoIterator","is a","trait"],["None","has description","No value"],["None","is a","variant"],["Ok","has type","T"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has description","Transposes an Option of a Result into a Result of an Option."],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","default"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","from"],["Option","has method","from_error"],["Option","has method","from_iter"],["Option","has method","from_ok"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","into_iter"],["Option","has method","into_result"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has source code","../../src/core/option.rs"],["Option","has source code","../../src/core/option.rs.html#160-167"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has stability","This is a nightly-only experimental API."],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Copy"],["Option","implements","Default"],["Option","implements","FromIterator"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","Try"],["Option","is a","enum"],["Option<T>","implements","Clone"],["Option<T>","implements","Debug"],["Option<T>","implements","Eq"],["Option<T>","implements","From<&'a Option<T>>"],["Option<T>","implements","From<&'a mut Option<T>>"],["Option<T>","implements","From<T>"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result","is a","enum"],["Some","has description","Some value `T`"],["Some","is a","variant"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["Try","has associated type","Error"],["Try","has associated type","Ok"],["TryFrom","has associated type","Error"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and","is a","method"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));"],["and_then","has return type","Option<U>"],["and_then","is a","method"],["as_mut","has description","Converts from `Option<T>` to `Option<&mut T>`."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has description","Converts from `Option<T>` to `Option<PinMut<'_, T>>`"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","has source code","../../src/core/borrow.rs.html#220"],["borrow","is a","function"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","has source code","../../src/core/borrow.rs.html#225"],["borrow_mut","is a","function"],["clone","has return type","Option<T>"],["clone","has source code","../../src/core/option.rs.html#158"],["clone","is a","method"],["clone_from","has argument","source"],["clone_from","has source code","../../src/core/clone.rs.html#130-132"],["clone_from","is a","method"],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source code","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","is a","function"],["cloned","has description","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cmp","has argument","other"],["cmp","has return type","Ordering"],["cmp","has source code","../../src/core/option.rs.html#158"],["cmp","is a","method"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","function"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","has stability","This is a nightly-only experimental API."],["deref","is a","method"],["eq","has argument","other"],["eq","has return type","bool"],["eq","has source code","../../src/core/option.rs.html#158"],["eq","is a","method"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a `Some`."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\"); let x: Option<&str> = None; x.expect(\"the world is ending\");"],["expect","has return type","T"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, and None if predicate returns false."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None);"],["filter","has return type","Option<T>"],["filter","is a","method"],["fmt","has argument","f"],["fmt","has return type","Result<(), Error>"],["fmt","has source code","../../src/core/option.rs.html#158"],["fmt","is a","method"],["from","has argument","o"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has source code","../../src/core/option.rs.html#1060-1062"],["from","has source code","../../src/core/option.rs.html#1066-1070"],["from","has source code","../../src/core/option.rs.html#1074-1076"],["from","has stability","Stable since Rust version 1.12.0"],["from","has stability","Stable since Rust version 1.30.0"],["from","is a","function"],["from","is a","method"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","is a","function"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) } ).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has return type","Option<V>"],["from_iter","is a","function"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","is a","function"],["ge","has argument","other"],["ge","has return type","bool"],["ge","has source code","../../src/core/option.rs.html#158"],["ge","is a","method"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source code","../../src/core/any.rs.html#115"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["get_type_id","is a","function"],["gt","has argument","other"],["gt","has return type","bool"],["gt","has source code","../../src/core/option.rs.html#158"],["gt","is a","method"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","has source code","../../src/core/convert.rs.html#455-457"],["into","is a","function"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","is a","method"],["into_result","has description","Applies the '?' operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","function"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_some","has description","Returns `true` if the option is a `Some` value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None;"],["iter_mut","has return type","IterMut<T>"],["le","has argument","other"],["le","has return type","bool"],["le","has source code","../../src/core/option.rs.html#158"],["le","is a","method"],["lt","has argument","other"],["lt","has return type","bool"],["lt","has source code","../../src/core/option.rs.html#158"],["lt","is a","method"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","U"],["max","has argument","other"],["max","has return type","Self"],["max","has source code","../../src/core/cmp.rs.html#556-559"],["max","has stability","Stable since Rust version 1.21.0"],["max","is a","method"],["min","has argument","other"],["min","has return type","Self"],["min","has source code","../../src/core/cmp.rs.html#573-576"],["min","has stability","Stable since Rust version 1.21.0"],["min","is a","method"],["ne","has argument","other"],["ne","has return type","bool"],["ne","has source code","../../src/core/option.rs.html#158"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));"],["or","has return type","Option<T>"],["or","is a","method"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None } assert_eq!(None.or_else(nobody), None);"],["or_else","has return type","Option<T>"],["or_else","is a","method"],["partial_cmp","has argument","other"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","has source code","../../src/core/option.rs.html#158"],["partial_cmp","is a","method"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a `Some` in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["take","has description","Takes the value out of the option, leaving a `None` in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source code","../../src/alloc/borrow.rs.html#94-96"],["to_owned","is a","function"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has stability","This is a nightly-only experimental API."],["transpose","is a","method"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has source code","../../src/core/convert.rs.html#473-475"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","function"],["unwrap","has description","Moves the value `v` out of the `Option<T>` if it is `Some(v)`."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\"); let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\");"],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has description","Returns the contained value or the default value for that type."],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","method"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2));"],["xor","has return type","Option<T>"],["xor","is a","method"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/primitive.str.html","../../std/primitive.u32.html","../../std/result/enum.Result.html","../index.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aassert_eq!(Some(%22car%22).unwrap_or(%22bike%22)%2C%20%22car%22)%3B%0Aassert_eq!(None.unwrap_or(%22bike%22)%2C%20%22bike%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2010%3B%0Aassert_eq!(Some(4).unwrap_or_else(%7C%7C%202%20*%20k)%2C%204)%3B%0Aassert_eq!(None.unwrap_or_else(%7C%7C%202%20*%20k)%2C%2020)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20maybe_some_string%20%3D%20Some(String%3A%3Afrom(%22Hello%2C%20World!%22))%3B%0A%2F%2F%20%60Option%3A%3Amap%60%20takes%20self%20*by%20value*%2C%20consuming%20%60maybe_some_string%60%0Alet%20maybe_some_len%20%3D%20maybe_some_string.map(%7Cs%7C%20s.len())%3B%0A%0Aassert_eq!(maybe_some_len%2C%20Some(13))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(4)%3B%0Amatch%20x.iter_mut().next()%20%7B%20Some(v)%20%3D%3E%20*v%20%3D%2042%2C%20None%20%3D%3E%20%7B%7D%2C%20%7D%0Aassert_eq!(x%2C%20Some(42))%3B%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter().next()%2C%20Some(%264))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%20%2F%2F%20fails%0A%7D","index.html"],"metrics":{"escapeCount":0,"costTime":377553,"totalUsage":{"prompt_tokens":83995,"completion_tokens":9666,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":39831},{"contextLength":500,"contentLength":23000,"costTime":113710},{"contextLength":500,"contentLength":23000,"costTime":38785},{"contextLength":500,"contentLength":23000,"costTime":36417},{"contextLength":500,"contentLength":23000,"costTime":21253},{"contextLength":500,"contentLength":23000,"costTime":55646},{"contextLength":500,"contentLength":23000,"costTime":35143},{"contextLength":500,"contentLength":15900,"costTime":36768}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T13:55:20.248Z","examGroup":"split"}}