{"create_time":"2025-03-22T14:46:38.900Z","id":"ef419ee7-776b-4b03-8a6e-d15b86e3ec8b","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has declaration","has description","has example","has method","has return type","has stability","has type","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","has stability","This is a nightly-only experimental API."],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Error","has description","The type returned in the event of a conversion error."],["Error","has type","<U as TryFrom<T>>::Error"],["From","has method","from"],["From","is a","trait"],["Into","has method","into"],["Into","is a","trait"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has type","I"],["IntoIterator","has method","into_iter"],["IntoIterator","has type","IntoIter"],["IntoIterator","has type","Item"],["IntoIterator","is a","trait"],["Item","has description","The type of the elements being iterated over."],["Item","has type","<I as Iterator>::Item"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","is a","enum"],["Some","has description","Some value T"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","has stability","This is a nightly-only experimental API."],["ToOwned","is a","trait"],["TryInto","has method","try_into"],["TryInto","has stability","This is a nightly-only experimental API."],["TryInto","has type","Error"],["TryInto","is a","trait"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\"));"],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has example","let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None);"],["and","has example","let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has example","assert_eq!(Some(2).and_then(nope).and_then(sq), None);"],["and_then","has example","assert_eq!(Some(2).and_then(sq).and_then(nope), None);"],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));"],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone_from","has argument","clone_from::self"],["clone_from","has argument","clone_from::source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","has type","&Self"],["clone_from","is a","function"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","function"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","function"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","is a","method"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","function"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\"); let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","has return type","T"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, otherwise returns None."],["filter","has example","assert_eq!(Some(3).filter(is_even), None);"],["filter","has example","assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None);"],["filter","has return type","Option<T>"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["from","has argument","from::o"],["from","has argument","from::val"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","is a","function"],["from_error","has argument","from_error::NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","is a","function"],["from_iter","has argument","from_iter::iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["from_iter","is a","function"],["from_ok","has argument","from_ok::v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","is a","function"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","function"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_result","has argument","into_result::self"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","function"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4));"],["iter","has example","let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {} } assert_eq!(x, Some(42));"],["iter_mut","has example","let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","function"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","function"],["map","has argument","f"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","is a","function"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","is a","function"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","function"],["ok_or","has argument","err"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has argument","|| 0"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));"],["ok_or_else","has example","let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100));"],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));"],["or","has example","let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2);"],["or","has example","let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","assert_eq!(None.or_else(nobody), None);"],["or_else","has example","assert_eq!(None.or_else(vikings), Some(\"vikings\"));"],["or_else","has example","fn nobody() -> Option<&'static str> { None } fn vikings() -> Option<&'static str> { Some(\"vikings\") } assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));"],["or_else","has return type","Option<T>"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","function"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2));"],["replace","has return type","Option<T>"],["replace","is a","method"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","has return type","Option<T>"],["take","is a","method"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has example","let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["transpose","has return type","Result<Option<T>, E>"],["transpose","is a","method"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\"); let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","let good_year_from_input = \"1909\"; let bad_year_from_input = \"190blarg\"; let good_year = good_year_from_input.parse().ok().unwrap_or_default(); let bad_year = bad_year_from_input.parse().ok().unwrap_or_default(); assert_eq!(1909, good_year); assert_eq!(0, bad_year);"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","method"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","let x = Some(2); let y = Some(2); assert_eq!(x.xor(y), None);"],["xor","has example","let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2));"],["xor","has example","let x: Option<u32> = None; let y = Some(2); assert_eq!(x.xor(y), Some(2));"],["xor","has example","let x: Option<u32> = None; let y: Option<u32> = None; assert_eq!(x.xor(y), None);"],["xor","has return type","Option<T>"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","index.html"],"metrics":{"escapeCount":0,"costTime":279812,"totalUsage":{"prompt_tokens":75098,"completion_tokens":7548,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":63428},{"contextLength":500,"contentLength":39000,"costTime":83249},{"contextLength":500,"contentLength":39000,"costTime":33899},{"contextLength":500,"contentLength":39000,"costTime":63087},{"contextLength":500,"contentLength":20900,"costTime":36149}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:41:58.609Z","examGroup":"split"}}