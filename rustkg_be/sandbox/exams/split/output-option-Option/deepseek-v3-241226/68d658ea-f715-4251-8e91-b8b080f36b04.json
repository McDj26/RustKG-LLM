{"create_time":"2025-03-22T14:48:29.600Z","id":"68d658ea-f715-4251-8e91-b8b080f36b04","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has attribute","has auto trait implementation","has blanket implementation","has declaration","has description","has example","has implementation","has method","has return type","has stability","has trait implementation","has type","has variant","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Clone","has method","clone_from"],["Copy","has method","clone"],["Default","has method","default"],["Error","has description","The type returned in the event of a conversion error."],["Error","has stability","This is a nightly-only experimental API. (try_from #33417)"],["Error","has type","<U as TryFrom<T>>::Error"],["Hash","has method","hash"],["Hash","has method","hash_slice"],["Into","has method","into"],["Into","is a","trait"],["IntoIterator","has method","into_iter"],["None","has description","No value"],["Option","has auto trait implementation","Send"],["Option","has auto trait implementation","Sync"],["Option","has blanket implementation","Any"],["Option","has blanket implementation","Borrow"],["Option","has blanket implementation","BorrowMut"],["Option","has blanket implementation","From"],["Option","has blanket implementation","Into"],["Option","has blanket implementation","IntoIterator"],["Option","has blanket implementation","ToOwned"],["Option","has blanket implementation","TryFrom"],["Option","has blanket implementation","TryInto"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has trait implementation","Clone"],["Option","has trait implementation","Copy"],["Option","has trait implementation","Debug"],["Option","has trait implementation","Default"],["Option","has trait implementation","Eq"],["Option","has trait implementation","From<&'a Option<T>>"],["Option","has trait implementation","From<&'a mut Option<T>>"],["Option","has trait implementation","From<T>"],["Option","has trait implementation","FromIterator<Option<A>>"],["Option","has trait implementation","Hash"],["Option","has trait implementation","IntoIterator"],["Option","has trait implementation","Ord"],["Option","has trait implementation","PartialEq<Option<T>>"],["Option","has trait implementation","PartialOrd<Option<T>>"],["Option","has trait implementation","Try"],["Option","has variant","None"],["Option","has variant","Some"],["Option","is a","enum"],["Option<T>","has auto trait implementation","Send"],["Option<T>","has auto trait implementation","Sync"],["Option<T>","has method","cmp"],["Option<T>","has method","eq"],["Option<T>","has method","fmt"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","ne"],["Option<T>","has method","partial_cmp"],["Option<T>","has trait implementation","Clone"],["Option<T>","has trait implementation","Copy"],["Option<T>","has trait implementation","Debug"],["Option<T>","has trait implementation","Default"],["Option<T>","has trait implementation","Eq"],["Option<T>","has trait implementation","Hash"],["Option<T>","has trait implementation","IntoIterator"],["Option<T>","has trait implementation","Ord"],["Option<T>","has trait implementation","PartialEq<Option<T>>"],["Option<T>","has trait implementation","PartialOrd"],["Option<T>","has trait implementation","PartialOrd<Option<T>>"],["Option<T>","is a","enum"],["Owned","has type","T"],["Some","has description","Some value `T`"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["Try","has method","from_error"],["Try","has method","from_ok"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and","is a","function"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["and_then","is a","function"],["as_mut","has description","Converts from `Option<T>` to `Option<&mut T>`."],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has description","Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_ref","has description","Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has argument","self"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["default","has description","Returns None."],["default","has return type","Option<T>"],["deref","has attribute","nightly-only experimental API"],["deref","has declaration","pub fn deref(&self) -> Option<&<T as Deref>::Target>"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","is a","method"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["expect","has argument","expect::msg"],["expect","has description","Unwraps an option, yielding the content of a `Some`."],["expect","has return type","T"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, and None if predicate returns false."],["filter","has return type","Option<T>"],["filter","is a","function"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["from","has declaration","fn from(val: T) -> Option<T>"],["from","has description","Performs the conversion."],["from","is a","method"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["from_iter","has declaration","fn from_iter<I>(iter: I) -> Option<V> where I: IntoIterator<Item = Option<A>>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","is a","method"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["ge","has argument","other"],["ge","has argument","self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has argument","other"],["gt","has argument","self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given [Hasher]."],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given [Hasher]."],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","IntoIter<T>"],["into_result","has attribute","nightly-only experimental API"],["into_result","has declaration","fn into_result(self) -> Result<T, NoneError>"],["into_result","has description","Applies the '?' operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that the execution should exit and return the error e."],["into_result","is a","method"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_none","has return type","bool"],["is_some","has description","Returns `true` if the option is a `Some` value."],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter_mut","has argument","&mut self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","function"],["le","has argument","other"],["le","has argument","self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ok_or","has description","Arguments passed to ok_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use ok_or_else, which is lazily evaluated."],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["or","is a","function"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has attribute","nightly-only experimental API"],["transpose","has declaration","pub fn transpose(self) -> Result<Option<T>, E>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","is a","method"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["unwrap","has description","In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has description","Moves the value `v` out of the `Option<T>` if it is `Some(v)`."],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has description","Panics if the self value equals None."],["unwrap","has return type","T"],["unwrap_or","has description","Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or_default","has declaration","pub fn unwrap_or_default(self) -> T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."],["unwrap_or_default","is a","method"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","is a","function"]],"add_links":["../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/pin/struct.Pin.html","../../std/primitive.bool.html","../../std/primitive.reference.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert_with(%7C%7C%205)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","index.html"],"metrics":{"escapeCount":0,"costTime":268277,"totalUsage":{"prompt_tokens":84412,"completion_tokens":7436,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":38544},{"contextLength":500,"contentLength":23000,"costTime":29399},{"contextLength":500,"contentLength":23000,"costTime":26712},{"contextLength":500,"contentLength":23000,"costTime":49906},{"contextLength":500,"contentLength":23000,"costTime":24368},{"contextLength":500,"contentLength":23000,"costTime":28642},{"contextLength":500,"contentLength":23000,"costTime":40876},{"contextLength":500,"contentLength":17078,"costTime":29830}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:44:00.858Z","examGroup":"split"}}