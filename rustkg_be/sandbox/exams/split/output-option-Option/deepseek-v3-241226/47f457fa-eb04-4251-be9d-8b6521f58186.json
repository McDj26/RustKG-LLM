{"create_time":"2025-03-22T14:43:30.981Z","id":"47f457fa-eb04-4251-be9d-8b6521f58186","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has method","has return type","has source code","has stability","has type","has variant","implements","is a"],"add_triples":[["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","is a","trait"],["None","has description","No value"],["None","is a","variant"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","clone"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","ge"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","gt"],["Option","has method","hash"],["Option","has method","into_iter"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","le"],["Option","has method","lt"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","partial_cmp"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","FromIterator"],["Option","implements","Ord"],["Option","implements","PartialEq"],["Option","implements","Try"],["Option","is a","enum"],["Some","has description","Some value `T`"],["Some","is a","variant"],["and","has argument","optb"],["and","has argument","self"],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from `Option<T>` to `Option<&mut T>`."],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","method"],["as_pin_mut","has description","Converts from `Option<T>` to `Option<PinMut<'_, T>>`"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","is a","method"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["as_ref","has return type","Option<&T>"],["as_ref","is a","method"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","has source code","../../src/core/borrow.rs.html#220"],["borrow","is a","function"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","has source code","../../src/core/borrow.rs.html#225"],["borrow_mut","is a","function"],["clone","has return type","Option<T>"],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source code","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","is a","function"],["cloned","has argument","cloned::self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","is a","function"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","method"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","method"],["deref","has return type","Option<&<T as Deref>::Target>"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","method"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a `Some`."],["expect","has return type","T"],["expect","is a","method"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has return type","Option<T>"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","method"],["from","has argument","from::o"],["from","has argument","from::t"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a mut T>"],["from","has return type","T"],["from","has source code","../../src/core/convert.rs.html#463"],["from","is a","function"],["from","is a","method"],["from_error","has argument","from_error::NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","is a","method"],["from_iter","has argument","from_iter::iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["from_iter","is a","method"],["from_ok","has argument","from_ok::v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","is a","method"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has return type","bool"],["get_or_insert","has argument","get_or_insert::self"],["get_or_insert","has argument","get_or_insert::v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert_with","has argument","get_or_insert_with::f"],["get_or_insert_with","has argument","get_or_insert_with::self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source code","../../src/core/any.rs.html#115"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["get_type_id","is a","function"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has return type","bool"],["hash","has argument","hash::self"],["hash","has argument","hash::state"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","has source code","../../src/core/convert.rs.html#455-457"],["into","is a","function"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has source code","../../src/core/iter/traits.rs.html#259-261"],["into_iter","is a","function"],["into_result","has argument","into_result::self"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","method"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_none","has return type","bool"],["is_none","is a","method"],["is_some","has description","Returns `true` if the option is a `Some` value."],["is_some","has return type","bool"],["is_some","is a","method"],["iter","has argument","self"],["iter","has return type","Iter<T>"],["iter_mut","has argument","self"],["iter_mut","has return type","IterMut<T>"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has return type","bool"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has return type","bool"],["map","has argument","f"],["map","has description","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value."],["map","has return type","Option<U>"],["map","is a","method"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has return type","U"],["map_or","is a","method"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has return type","U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","has stability","Stable since Rust version 1.21.0"],["max","is a","method"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","has stability","Stable since Rust version 1.21.0"],["min","is a","method"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","optb"],["or","has argument","self"],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","or_else::f"],["or_else","has argument","or_else::self"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has return type","Option<Ordering>"],["replace","has argument","replace::self"],["replace","has argument","replace::value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API."],["replace","is a","function"],["take","has argument","take::self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source code","../../src/alloc/borrow.rs.html#94-96"],["to_owned","is a","function"],["transpose","has return type","Result<Option<T>, E>"],["try_from","has argument","try_from::value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has source code","../../src/core/convert.rs.html#484-486"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_from","is a","function"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has source code","../../src/core/convert.rs.html#473-475"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","function"],["unwrap","has description","Moves the value `v` out of the `Option<T>` if it is `Some(v)`."],["unwrap","has return type","T"],["unwrap","is a","method"],["unwrap_or","has argument","def"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has return type","T"],["unwrap_or","is a","method"],["unwrap_or_default","has argument","unwrap_or_default::self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["unwrap_or_else","is a","method"],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has stability","This is a nightly-only experimental API."],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/result/enum.Result.html","../index.html","enum.Option.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20is_even(n%3A%20%26i32)%20-%3E%20bool%20%7B%0A%20%20%20%20n%20%25%202%20%3D%3D%200%0A%7D%0A%0Aassert_eq!(None.filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(3).filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(4).filter(is_even)%2C%20Some(4))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20sq(x%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20Some(x%20*%20x)%20%7D%0Afn%20nope(_%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20None%20%7D%0A%0Aassert_eq!(Some(2).and_then(sq).and_then(sq)%2C%20Some(16))%3B%0Aassert_eq!(Some(2).and_then(sq).and_then(nope)%2C%20None)%3B%0Aassert_eq!(Some(2).and_then(nope).and_then(sq)%2C%20None)%3B%0Aassert_eq!(None.and_then(sq).and_then(sq)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(4)%3B%0Amatch%20x.iter_mut().next()%20%7B%0A%20%20%20%20Some(v)%20%3D%3E%20*v%20%3D%2042%2C%0A%20%20%20%20None%20%3D%3E%20%7B%7D%2C%0A%7D%0Aassert_eq!(x%2C%20Some(42))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter_mut().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20Some(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter().next()%2C%20Some(%264))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter().next()%2C%20None)%3B%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":293236,"totalUsage":{"prompt_tokens":78092,"completion_tokens":8047,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":47764},{"contextLength":500,"contentLength":31000,"costTime":102472},{"contextLength":500,"contentLength":31000,"costTime":40249},{"contextLength":500,"contentLength":31000,"costTime":21751},{"contextLength":500,"contentLength":31000,"costTime":45988},{"contextLength":500,"contentLength":21900,"costTime":35012}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:38:37.131Z","examGroup":"split"}}