{"create_time":"2025-03-22T14:29:18.189Z","id":"a7de353a-442f-4cd6-bec3-93d80e61fd27","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has method","has return type","has source code","has stability","has trait implementation","has type","has variant","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Copy","has trait implementation","Option<T>"],["Default","has method","default"],["From","has method","from"],["From","has trait implementation","T"],["From<&'a Option<T>>","has method","from"],["From<&'a mut Option<T>>","has method","from"],["From<T>","has method","from"],["FromIterator<Option<A>>","has method","from_iter"],["Hash","is a","trait"],["Into","has method","into"],["Into","has trait implementation","T"],["IntoIter","is a","struct"],["IntoIterator","has method","into_iter"],["IntoIterator","has trait implementation","I"],["IntoIterator","is a","trait"],["Iter","is a","struct"],["IterMut","has full name","std::option::IterMut"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","Returns a consuming iterator over the possibly contained value."],["Option","has description","The Option type. See the module level documentation for more."],["Option","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","hash"],["Option","has method","hash_slice"],["Option","has method","into_iter"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","transpose"],["Option","has method","unwrap_or_default"],["Option","has trait implementation","Clone"],["Option","has trait implementation","Copy"],["Option","has trait implementation","Debug"],["Option","has trait implementation","Default"],["Option","has trait implementation","Eq"],["Option","has trait implementation","From<&'a Option<T>>"],["Option","has trait implementation","From<&'a mut Option<T>>"],["Option","has trait implementation","From<T>"],["Option","has trait implementation","FromIterator<Option<A>>"],["Option","has trait implementation","Hash"],["Option","has trait implementation","IntoIterator"],["Option","has trait implementation","Ord"],["Option","has trait implementation","PartialEq<Option<T>>"],["Option","has trait implementation","PartialOrd<Option<T>>"],["Option","has trait implementation","Try"],["Option","has variant","None"],["Option","has variant","Some"],["Option","is a","enum"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","cmp"],["Option<T>","has method","fmt"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","partial_cmp"],["Option<T>","has trait implementation","Clone"],["Option<T>","has trait implementation","Debug"],["Option<T>","has trait implementation","Eq"],["Option<T>","has trait implementation","Ord"],["Option<T>","has trait implementation","PartialEq<Option<T>>"],["Option<T>","has trait implementation","PartialOrd<Option<T>>"],["Option<T>","has trait implementation","Send"],["Option<T>","has trait implementation","Sync"],["Option<T>","is a","enum"],["Owned","has type","T"],["PartialEq<Option<T>>","has method","eq"],["PartialEq<Option<T>>","has method","ne"],["Send","has trait implementation","Option<T>"],["Some","has description","Some value T"],["Sync","has trait implementation","Option<T>"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["Try","has associated type","Error"],["Try","has associated type","Ok"],["Try","has method","from_error"],["Try","has method","from_ok"],["Try","has method","into_result"],["TryFrom","has method","try_from"],["TryFrom","has trait implementation","T"],["TryInto","has method","try_into"],["TryInto","has trait implementation","T"],["and","has argument","and::optb"],["and","has argument","and::self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has full name","std::option::Option::and"],["and","has return type","Option<U>"],["and","has source code","../../src/core/option.rs.html#603-608"],["and","is a","function"],["and_then","has argument","and_then::f"],["and_then","has argument","and_then::self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has full name","std::option::Option::and_then"],["and_then","has return type","Option<U>"],["and_then","has source code","../../src/core/option.rs.html#630-635"],["and_then","is a","function"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_mut","has source code","../../src/core/option.rs.html#266-271"],["as_mut","is a","method"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>>"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_mut","has source code","../../src/core/option.rs.html#286-290"],["as_pin_mut","is a","method"],["as_pin_ref","has declaration","pub fn as_pin_ref(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>>"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_pin_ref","has source code","../../src/core/option.rs.html#277-281"],["as_pin_ref","is a","method"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has return type","Option<T>"],["clone_from","has argument","source"],["clone_from","has type","&Self"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API."],["clone_into","has type","&mut T"],["cloned","has argument","cloned::self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","is a","function"],["cmp","has argument","other"],["cmp","has return type","Ordering"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has source code","../../src/core/option.rs.html#1019"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["expect","has argument","msg"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has return type","T"],["expect","has source code","../../src/core/option.rs.html#319-324"],["expect","is a","method"],["filter","has argument","filter::predicate"],["filter","has argument","filter::self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has full name","std::option::Option::filter"],["filter","has return type","Option<T>"],["filter","has source code","../../src/core/option.rs.html#661-668"],["filter","is a","function"],["fmt","has argument","f"],["fmt","has return type","Result<(), Error>"],["from","has argument","o"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","T"],["from","has source code","../../src/core/option.rs.html#1075-1077"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has source code","../../src/core/option.rs.html#1342-1344"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) } ).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has return type","Option<V>"],["from_iter","has source code","../../src/core/option.rs.html#1272-1315"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has source code","../../src/core/option.rs.html#1337-1339"],["ge","has argument","other"],["ge","has return type","bool"],["get_or_insert","has argument","get_or_insert::self"],["get_or_insert","has argument","get_or_insert::v"],["get_or_insert","has declaration","pub fn get_or_insert(&mut self, v: T) -> &mut T"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","has source code","../../src/core/option.rs.html#789-799"],["get_or_insert","is a","function"],["get_or_insert_with","has argument","get_or_insert_with::f"],["get_or_insert_with","has argument","get_or_insert_with::self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_or_insert_with::f","has type","FnOnce() -> T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API."],["gt","has argument","other"],["gt","has return type","bool"],["hash","has argument","self"],["hash","has argument","state"],["hash","is a","function"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","is a","function"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","is a","function"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","has source code","../../src/core/option.rs.html#1332-1334"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4));"],["iter","is a","method"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has full name","std::option::Option::iter_mut"],["iter_mut","has return type","IterMut<T>"],["iter_mut","has source code","../../src/core/option.rs.html#570-572"],["iter_mut","is a","function"],["le","has argument","other"],["le","has return type","bool"],["lt","has argument","other"],["lt","has return type","bool"],["map","has argument","f"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has description","takes self by value, consuming maybe_some_string"],["map","has example","let maybe_some_len = maybe_some_string.map(|s| s.len());"],["map","has return type","Option<U>"],["map","has source code","../../src/core/option.rs.html#422-427"],["map","is a","method"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3);"],["map_or","is a","method"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3);"],["map_or_else","is a","method"],["max","has argument","other"],["max","has return type","Self"],["min","has argument","other"],["min","has return type","Self"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\"));"],["ok_or","is a","method"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));"],["ok_or_else","is a","method"],["or","has argument","or::optb"],["or","has argument","or::self"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has full name","std::option::Option::or"],["or","has return type","Option<T>"],["or","has source code","../../src/core/option.rs.html#699-704"],["or","is a","function"],["or_else","has argument","or_else::f"],["or_else","has argument","or_else::self"],["or_else","has declaration","pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["or_else","has source code","../../src/core/option.rs.html#721-726"],["or_else","is a","function"],["partial_cmp","has argument","other"],["partial_cmp","has return type","Option<Ordering>"],["replace","has argument","replace::self"],["replace","has argument","replace::value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","is a","function"],["replace::value","has type","T"],["take","has argument","take::self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has example","let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["unwrap","has declaration","pub fn unwrap(self) -> T"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has return type","T"],["unwrap","has source code","../../src/core/option.rs.html#352-357"],["unwrap","is a","method"],["unwrap_or","has argument","def"],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has return type","T"],["unwrap_or","has source code","../../src/core/option.rs.html#375-380"],["unwrap_or","is a","method"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","let good_year_from_input = \"1909\"; let bad_year_from_input = \"190blarg\"; let good_year = good_year_from_input.parse().ok().unwrap_or_default(); let bad_year = bad_year_from_input.parse().ok().unwrap_or_default(); assert_eq!(1909, good_year); assert_eq!(0, bad_year);"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["unwrap_or_else","has source code","../../src/core/option.rs.html#393-398"],["unwrap_or_else","is a","method"],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has source code","../../src/core/option.rs.html#756-762"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../index.html","index.html"],"metrics":{"escapeCount":0,"costTime":332225,"totalUsage":{"prompt_tokens":96432,"completion_tokens":8917,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":29810},{"contextLength":500,"contentLength":15000,"costTime":38143},{"contextLength":500,"contentLength":15000,"costTime":22535},{"contextLength":500,"contentLength":15000,"costTime":28169},{"contextLength":500,"contentLength":15000,"costTime":25337},{"contextLength":500,"contentLength":15000,"costTime":33628},{"contextLength":500,"contentLength":15000,"costTime":25772},{"contextLength":500,"contentLength":15000,"costTime":36195},{"contextLength":500,"contentLength":15000,"costTime":21526},{"contextLength":500,"contentLength":15000,"costTime":23977},{"contextLength":500,"contentLength":15000,"costTime":26184},{"contextLength":500,"contentLength":13078,"costTime":20949}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:23:45.508Z","examGroup":"split"}}