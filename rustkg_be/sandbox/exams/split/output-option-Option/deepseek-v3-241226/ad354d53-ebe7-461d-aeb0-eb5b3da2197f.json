{"create_time":"2025-03-22T14:48:49.584Z","id":"ad354d53-ebe7-461d-aeb0-eb5b3da2197f","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has description","has implementation","has method","has return type","has source","has stability","has stability attribute","has type","has variant","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","has source","../../src/core/any.rs.html#114-116"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","has source","../../src/core/borrow.rs.html#219-221"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","has source","../../src/core/borrow.rs.html#224-226"],["BorrowMut","is a","trait"],["Error","has description","The type returned in the event of a conversion error."],["Error","has type","!"],["Error","has type","<U as TryFrom<T>>::Error"],["From","has method","from"],["From","has source","../../src/core/convert.rs.html#462-464"],["From","is a","trait"],["Into","has method","into"],["Into","has source","../../src/core/convert.rs.html#453-458"],["Into","is a","trait"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","is a","type"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","has source","../../src/core/iter/traits.rs.html#255-262"],["IntoIterator","is a","trait"],["Item","has description","The type of the elements being iterated over."],["Item","is a","type"],["IterMut<'a, T>","has implementation","Iterator"],["IterMut<'a, T>","is a","struct"],["Iterator","has method","all"],["Iterator","has method","any"],["Iterator","has method","by_ref"],["Iterator","has method","chain"],["Iterator","has method","cmp"],["Iterator","has method","collect"],["Iterator","has method","count"],["Iterator","has method","cycle"],["Iterator","has method","enumerate"],["Iterator","has method","eq"],["Iterator","has method","filter"],["Iterator","has method","filter_map"],["Iterator","has method","find"],["Iterator","has method","find_map"],["Iterator","has method","flat_map"],["Iterator","has method","flatten"],["Iterator","has method","fold"],["Iterator","has method","fuse"],["Iterator","has method","ge"],["Iterator","has method","gt"],["Iterator","has method","inspect"],["Iterator","has method","into_iter"],["Iterator","has method","is_sorted"],["Iterator","has method","is_sorted_by"],["Iterator","has method","is_sorted_by_key"],["Iterator","has method","last"],["Iterator","has method","le"],["Iterator","has method","lt"],["Iterator","has method","map"],["Iterator","has method","max"],["Iterator","has method","max_by"],["Iterator","has method","max_by_key"],["Iterator","has method","min"],["Iterator","has method","min_by"],["Iterator","has method","min_by_key"],["Iterator","has method","ne"],["Iterator","has method","next"],["Iterator","has method","nth"],["Iterator","has method","partial_c"],["Iterator","has method","partial_cmp"],["Iterator","has method","partition"],["Iterator","has method","peekable"],["Iterator","has method","position"],["Iterator","has method","product"],["Iterator","has method","reduce"],["Iterator","has method","rev"],["Iterator","has method","rposition"],["Iterator","has method","scan"],["Iterator","has method","size_hint"],["Iterator","has method","skip"],["Iterator","has method","skip_while"],["Iterator","has method","step_by"],["Iterator","has method","sum"],["Iterator","has method","take"],["Iterator","has method","take_while"],["Iterator","has method","unzip"],["Iterator","has method","zip"],["Iterator","is a","trait"],["None","has description","No value"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has implementation","Copy"],["Option","has implementation","Default"],["Option","has implementation","From<&'a Option<T>>"],["Option","has implementation","From<&'a mut Option<T>>"],["Option","has implementation","From<T>"],["Option","has implementation","FromIterator<Option<A>>"],["Option","has implementation","Hash"],["Option","has implementation","IntoIterator"],["Option","has implementation","Try"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","default"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","from"],["Option","has method","from_iter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","hash"],["Option","has method","hash_slice"],["Option","has method","into_result"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","map"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has source","../../src/core/option.rs.html#160-167"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","is a","enum"],["Option<T>","has implementation","IntoIterator"],["Option<T>","has method","into_iter"],["Owned","has type","T"],["Some","has description","Some value `T`"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","has source","../../src/alloc/borrow.rs.html#90-101"],["ToOwned","is a","trait"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom","has source","../../src/core/convert.rs.html#481-487"],["TryFrom","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","has source","../../src/core/convert.rs.html#469-476"],["TryInto","is a","trait"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has source","../../src/core/option.rs.html#603-608"],["and","is a","method"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has source","../../src/core/option.rs.html#630-635"],["and_then","is a","method"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","has source","../../src/core/borrow.rs.html#220"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","has source","../../src/core/borrow.rs.html#225"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability attribute","nightly-only experimental API"],["cloned","has argument","self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["default","has description","Returns None"],["default","has return type","Option<T>"],["deref","has description","Converts from &Option<T> to Option<&T::Target>"],["deref","has return type","Option<&<T as Deref>::Target>"],["expect","has argument","msg"],["expect","has return type","T"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has source","../../src/core/option.rs.html#661-668"],["filter","is a","method"],["from","has argument","t"],["from","has description","Performs the conversion"],["from","has description","Performs the conversion."],["from","has return type","Option<T>"],["from","has return type","T"],["from","has source","../../src/core/convert.rs.html#463"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned"],["from_iter","has return type","Option<V>"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source","../../src/core/any.rs.html#115"],["get_type_id","has stability attribute","nightly-only experimental API"],["hash","has argument","self"],["hash","has argument","state"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","has source","../../src/core/convert.rs.html#455-457"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","has source","../../src/core/iter/traits.rs.html#259-261"],["into_iter","is a","method"],["into_result","has description","Applies the '?' operator. A return of Ok(t) means that the execution should continue normally, and the result of '?' is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function"],["into_result","has return type","Result<T, NoneError>"],["is_none","has return type","bool"],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has source","../../src/core/option.rs.html#549-551"],["iter","is a","method"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has source","../../src/core/option.rs.html#570-572"],["iter_mut","is a","method"],["map","has argument","f"],["map","has return type","Option<U>"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has source","../../src/core/option.rs.html#443-448"],["map_or","is a","method"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has source","../../src/core/option.rs.html#466-471"],["map_or_else","is a","method"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has source","../../src/core/option.rs.html#498-503"],["ok_or","is a","method"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has source","../../src/core/option.rs.html#525-530"],["ok_or_else","is a","method"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has description","Returns the option if it contains a value, otherwise returns the option passed in."],["or","has return type","Option<T>"],["or","has source","../../src/core/option.rs.html#699-704"],["or","is a","method"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source","../../src/alloc/borrow.rs.html#94-96"],["transpose","has description","Transposes an Option of a Result into a Result of an Option"],["transpose","has return type","Result<Option<T>, E>"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has source","../../src/core/convert.rs.html#484-486"],["try_from","has stability attribute","nightly-only experimental API"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has source","../../src/core/convert.rs.html#473-475"],["try_into","has stability attribute","nightly-only experimental API"],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/clone/trait.Clone.html","../../std/convert/trait.From.html","../../std/default/trait.Default.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/primitive.str.html","../../std/str/trait.FromStr.html","../index.html","index.html"],"metrics":{"escapeCount":0,"costTime":277259,"totalUsage":{"prompt_tokens":78470,"completion_tokens":7510,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":28730},{"contextLength":500,"contentLength":31000,"costTime":32901},{"contextLength":500,"contentLength":31000,"costTime":32312},{"contextLength":500,"contentLength":31000,"costTime":30239},{"contextLength":500,"contentLength":31000,"costTime":96528},{"contextLength":500,"contentLength":23078,"costTime":56549}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:44:11.719Z","examGroup":"split"}}