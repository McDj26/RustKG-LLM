{"create_time":"2025-03-22T14:08:15.030Z","id":"05050ac9-71b2-4c83-8fd4-b153e33b232e","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has important trait","has method","has panic","has return type","has stability","has trait","has type","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["From","has method","from"],["Into","has method","into"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has important trait","IntoIter<A>"],["IntoIterator","has important trait","Iter<'a, A>"],["IntoIterator","has important trait","IterMut<'a, A>"],["IntoIterator","has method","into_iter"],["IntoIterator","implements","Iterator"],["IntoIterator::IntoIter","has type","I"],["IntoIterator::Item","has type","Iterator::Item"],["Item","has description","The type of the elements being iterated over."],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Item","has type","T"],["Iterator","has associated type","Item"],["Iterator::Item","has type","&'a A"],["Iterator::Item","has type","&'a mut A"],["Iterator::Item","has type","A"],["None","has description","No value"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","map"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has trait","Default"],["Option","has trait","Deref"],["Option","has trait","FromStr"],["Option","has trait","Hash"],["Option","has trait","IntoIterator"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Any"],["Option","implements","Borrow"],["Option","implements","BorrowMut"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","Into"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","ToOwned"],["Option","implements","Try"],["Option","implements","TryFrom"],["Option","implements","TryInto"],["Option","is a","enum"],["Some","has description","Some value T"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned::Owned","has type","T"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom::Error","has type","!"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto::Error","has type","TryFrom::Error"],["and","has argument","and::optb"],["and","has argument","and::self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\")); let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and","is a","function"],["and_then","has argument","and_then::f"],["and_then","has argument","and_then::self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has return type","Option<U>"],["and_then","is a","function"],["and_then::f","has type","FnOnce(T) -> Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone","is a","method"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","is a","method"],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has argument","self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","method"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","This is a nightly-only experimental API."],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","method"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\"); let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","has panic","Panics if the value is a None with a custom panic message provided by msg."],["expect","has return type","T"],["filter","has argument","filter::predicate"],["filter","has argument","filter::self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","Option<T>"],["filter","is a","function"],["filter::predicate","has type","FnOnce(&T) -> bool"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","method"],["from","has argument","from::t"],["from","has description","Performs the conversion."],["from","has return type","T"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","method"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","method"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","method"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","method"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","is a","method"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["iter","has argument","iter::self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter","is a","function"],["iter_mut","has argument","iter_mut::self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","function"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","method"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","method"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map_or","has argument","map_or::default"],["map_or","has argument","map_or::f"],["map_or","has argument","map_or::self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or","is a","function"],["map_or::f","has type","FnOnce(T) -> U"],["map_or_else","has argument","map_or_else::default"],["map_or_else","has argument","map_or_else::f"],["map_or_else","has argument","map_or_else::self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","U"],["map_or_else","is a","function"],["map_or_else::default","has type","FnOnce() -> U"],["map_or_else::f","has type","FnOnce(T) -> U"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","is a","method"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","is a","method"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","method"],["ok_or","has argument","ok_or::err"],["ok_or","has argument","ok_or::self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or","is a","function"],["ok_or_else","has argument","ok_or_else::err"],["ok_or_else","has argument","ok_or_else::self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","is a","function"],["ok_or_else::err","has type","FnOnce() -> E"],["or","has argument","optb"],["or","has argument","or::optb"],["or","has argument","or::self"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2));"],["or","has return type","Option<T>"],["or","is a","function"],["or","is a","method"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["or_else","is a","method"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","method"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","is a","method"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["take","is a","method"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API."],["try_from","has argument","try_from::value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, TryFrom::Error>"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, TryInto::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\"); let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has panic","Panics if the self value equals None."],["unwrap","has return type","T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","method"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","is a","method"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/primitive.str.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","enum.Option.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert_with(%7C%7C%205)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":360835,"totalUsage":{"prompt_tokens":78538,"completion_tokens":9664,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":67496},{"contextLength":500,"contentLength":31000,"costTime":76862},{"contextLength":500,"contentLength":31000,"costTime":100094},{"contextLength":500,"contentLength":31000,"costTime":24260},{"contextLength":500,"contentLength":31000,"costTime":53111},{"contextLength":500,"contentLength":23078,"costTime":39012}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:02:13.548Z","examGroup":"split"}}