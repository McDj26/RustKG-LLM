{"create_time":"2025-03-22T14:28:51.139Z","id":"7c16de86-9b84-47be-bd5b-1fe2e0530339","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has attribute","has declaration","has description","has methods","has return type","has source code","has source link","has stability","has trait implementations","has type","has variants","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["From","has method","from"],["From","is a","trait"],["Into","has method","into"],["Into","is a","trait"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","is a","type"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has methods","and"],["Option","has methods","and_then"],["Option","has methods","as_mut"],["Option","has methods","as_pin_mut"],["Option","has methods","as_pin_ref"],["Option","has methods","as_ref"],["Option","has methods","cloned"],["Option","has methods","deref"],["Option","has methods","expect"],["Option","has methods","filter"],["Option","has methods","get_or_insert"],["Option","has methods","get_or_insert_with"],["Option","has methods","is_none"],["Option","has methods","is_some"],["Option","has methods","iter"],["Option","has methods","iter_mut"],["Option","has methods","map"],["Option","has methods","map_or"],["Option","has methods","map_or_else"],["Option","has methods","ok_or"],["Option","has methods","ok_or_else"],["Option","has methods","or"],["Option","has methods","or_else"],["Option","has methods","replace"],["Option","has methods","take"],["Option","has methods","transpose"],["Option","has methods","unwrap"],["Option","has methods","unwrap_or"],["Option","has methods","unwrap_or_default"],["Option","has methods","unwrap_or_else"],["Option","has methods","xor"],["Option","has source code","../../src/core/option.rs.html#160-167"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variants","None"],["Option","has variants","Some"],["Option","is a","enum"],["Option<T>","has source link","../../src/core/clone.rs.html#130-132"],["Option<T>","has source link","../../src/core/cmp.rs.html#556-559"],["Option<T>","has source link","../../src/core/cmp.rs.html#573-576"],["Option<T>","has source link","../../src/core/iter/traits.rs.html#255-262"],["Option<T>","has source link","../../src/core/option.rs.html#1016-1020"],["Option<T>","has source link","../../src/core/option.rs.html#1019"],["Option<T>","has source link","../../src/core/option.rs.html#1023-1044"],["Option<T>","has source link","../../src/core/option.rs.html#1041-1043"],["Option<T>","has source link","../../src/core/option.rs.html#1047-1054"],["Option<T>","has source link","../../src/core/option.rs.html#1051-1053"],["Option<T>","has source link","../../src/core/option.rs.html#1057-1064"],["Option<T>","has source link","../../src/core/option.rs.html#1061-1063"],["Option<T>","has source link","../../src/core/option.rs.html#158"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Some","has description","Some value `T`"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and","has source code","../../src/core/option.rs.html#603-608"],["and","is a","function"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["and_then","has source code","../../src/core/option.rs.html#630-635"],["and_then","is a","function"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","has source link","../../src/core/borrow.rs.html#220"],["borrow","is a","function"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","has source link","../../src/core/borrow.rs.html#225"],["borrow_mut","is a","function"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source link","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","is a","function"],["cloned","has argument","self"],["cloned","has description","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","is a","function"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has return type","Option<T>"],["filter","has source code","../../src/core/option.rs.html#661-668"],["filter","is a","function"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has return type","T"],["from","has source link","../../src/core/convert.rs.html#463"],["from","is a","function"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has source link","../../src/core/option.rs.html#1342-1344"],["from_error","has stability","This is a nightly-only experimental API. (#42327)"],["from_error","is a","function"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","has source code","../../src/core/option.rs.html#789-799"],["get_or_insert","is a","function"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","has source code","../../src/core/option.rs.html#789-799"],["get_or_insert_with","has stability","Stable since Rust version 1.20.0"],["get_or_insert_with","is a","function"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source link","../../src/core/any.rs.html#115"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["get_type_id","is a","function"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","has source link","../../src/core/convert.rs.html#455-457"],["into","is a","function"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has source link","../../src/core/iter/traits.rs.html#259-261"],["into_iter","is a","function"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter","has source code","../../src/core/option.rs.html#549-551"],["iter","is a","function"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["iter_mut","has source code","../../src/core/option.rs.html#570-572"],["iter_mut","is a","function"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","has source code","../../src/core/option.rs.html#525-530"],["ok_or_else","is a","function"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["or","has source code","../../src/core/option.rs.html#699-704"],["or","is a","function"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["or_else","has source code","../../src/core/option.rs.html#721-726"],["or_else","is a","function"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a `Some` in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","Stable since Rust version 1.31.0"],["replace","is a","function"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a `None` in its place."],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source link","../../src/alloc/borrow.rs.html#94-96"],["to_owned","is a","function"],["transpose","has argument","self"],["transpose","has description","Transposes an `Option` of a `Result` into a `Result` of an `Option`."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API."],["transpose","is a","function"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has source link","../../src/core/convert.rs.html#484-486"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_from","is a","function"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has source link","../../src/core/convert.rs.html#473-475"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","function"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has source code","../../src/core/option.rs.html#756-762"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/index.html","../../std/ops/trait.FnOnce.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/result/enum.Result.html","../index.html","index.html"],"metrics":{"escapeCount":0,"costTime":186892,"totalUsage":{"prompt_tokens":75568,"completion_tokens":4872,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":25416},{"contextLength":500,"contentLength":39000,"costTime":50164},{"contextLength":500,"contentLength":39000,"costTime":30541},{"contextLength":500,"contentLength":39000,"costTime":35733},{"contextLength":500,"contentLength":22078,"costTime":45038}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:25:43.027Z","examGroup":"split"}}