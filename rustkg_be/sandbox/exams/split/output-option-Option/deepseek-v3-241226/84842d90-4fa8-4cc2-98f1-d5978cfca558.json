{"create_time":"2025-03-22T14:00:39.416Z","id":"84842d90-4fa8-4cc2-98f1-d5978cfca558","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has attribute","has declaration","has description","has method","has portability","has return type","has source code","has stability","has type","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["From","has method","from"],["From","is a","trait"],["Into","has method","into"],["Into","is a","trait"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Iter","is a","struct"],["IterMut","is a","struct"],["None","has description","No value"],["Option","has associated type","Error"],["Option","has associated type","Ok"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","clone_from"],["Option","has method","cloned"],["Option","has method","cmp"],["Option","has method","default"],["Option","has method","deref"],["Option","has method","eq"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","fmt"],["Option","has method","from"],["Option","has method","from_error"],["Option","has method","from_iter"],["Option","has method","from_ok"],["Option","has method","ge"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","gt"],["Option","has method","into_iter"],["Option","has method","into_result"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","le"],["Option","has method","lt"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","max"],["Option","has method","min"],["Option","has method","ne"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","partial_cmp"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has portability","This is supported on Windows only."],["Option","has source code","../../src/core/option.rs.html#158"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","FromIterator"],["Option","implements","Ord"],["Option","implements","PartialEq"],["Option","implements","PartialOrd"],["Option","implements","Try"],["Option","is a","enum"],["Result","has variant","Err"],["Result","has variant","Ok"],["Some","has description","Some value T"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["and","has argument","optb"],["and","has argument","self"],["and","has return type","Option"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has return type","Option"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone_from","has argument","self"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","has return type","&mut Self"],["clone_from","has source code","../../src/core/clone.rs.html#130-132"],["clone_from","is a","method"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API."],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","has source code","../../src/core/option.rs.html#158"],["cmp","is a","method"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has source code","../../src/core/option.rs.html#1011"],["default","is a","method"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","This is a nightly-only experimental API. (inner_deref #50264)"],["deref","is a","method"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","has source code","../../src/core/option.rs.html#158"],["eq","is a","method"],["expect","has argument","msg"],["expect","has return type","T"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has return type","Option"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","has source code","../../src/core/option.rs.html#158"],["fmt","is a","method"],["from","has argument","o"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a mut T>"],["from","has return type","T"],["from","has source code","../../src/core/option.rs.html#1074-1076"],["from","is a","method"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has source code","../../src/core/option.rs.html#1334-1336"],["from_error","is a","method"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["from_iter","has source code","../../src/core/option.rs.html#1264-1307"],["from_iter","is a","method"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has source code","../../src/core/option.rs.html#1329-1331"],["from_ok","is a","method"],["ge","has argument","other"],["ge","has argument","self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","has source code","../../src/core/option.rs.html#158"],["ge","is a","method"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API."],["gt","has argument","other"],["gt","has argument","self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","has source code","../../src/core/option.rs.html#158"],["gt","is a","method"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","is a","method"],["into_result","has argument","self"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","has source code","../../src/core/option.rs.html#1324-1326"],["into_result","is a","method"],["is_none","has return type","bool"],["is_some","has return type","bool"],["iter","has argument","self"],["iter","has return type","Iter"],["iter_mut","has argument","self"],["iter_mut","has return type","IterMut"],["le","has argument","other"],["le","has argument","self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","has source code","../../src/core/option.rs.html#158"],["le","is a","method"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","has source code","../../src/core/option.rs.html#158"],["lt","is a","method"],["map","has argument","f"],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has return type","U"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","has source code","../../src/core/cmp.rs.html#556-559"],["max","is a","method"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","has source code","../../src/core/cmp.rs.html#573-576"],["min","is a","method"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","has source code","../../src/core/option.rs.html#158"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has return type","Result"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","optb"],["or","has argument","self"],["or","has return type","Option"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has return type","Option"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","has source code","../../src/core/option.rs.html#158"],["partial_cmp","is a","method"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API. (option_replace #51998)"],["replace","is a","method"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["take","is a","method"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["transpose","is a","method"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API."],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has return type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","method"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has return type","Option"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryInto.html","../../std/index.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/ops/trait.FnOnce.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/result/enum.Result.html","enum.Option.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_replace)%5D%0A%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(transpose_result)%5D%0A%0Afn%20main()%20%7B%0A%23%5Bderive(Debug%2C%20Eq%2C%20PartialEq)%5D%0Astruct%20SomeErr%3B%0A%0Alet%20x%3A%20Result%3COption%3Ci32%3E%2C%20SomeErr%3E%20%3D%20Ok(Some(5))%3B%0Alet%20y%3A%20Option%3CResult%3Ci32%2C%20SomeErr%3E%3E%20%3D%20Some(Ok(5))%3B%0Aassert_eq!(x%2C%20y.transpose())%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20good_year_from_input%20%3D%20%221909%22%3B%0Alet%20bad_year_from_input%20%3D%20%22190blarg%22%3B%0Alet%20good_year%20%3D%20good_year_from_input.parse().ok().unwrap_or_default()%3B%0Alet%20bad_year%20%3D%20bad_year_from_input.parse().ok().unwrap_or_default()%3B%0A%0Aassert_eq!(1909%2C%20good_year)%3B%0Aassert_eq!(0%2C%20bad_year)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert_with(%7C%7C%205)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22string%22)%3B%0Alet%20v%3A%20Vec%3C%26str%3E%20%3D%20x.into_iter().collect()%3B%0Aassert_eq!(v%2C%20%5B%22string%22%5D)%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20v%3A%20Vec%3C%26str%3E%20%3D%20x.into_iter().collect()%3B%0Aassert!(v.is_empty())%3B%0A%7D","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":277661,"totalUsage":{"prompt_tokens":75092,"completion_tokens":6939,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":32153},{"contextLength":500,"contentLength":39000,"costTime":31384},{"contextLength":500,"contentLength":39000,"costTime":87775},{"contextLength":500,"contentLength":39000,"costTime":91960},{"contextLength":500,"contentLength":20900,"costTime":34389}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T13:55:21.604Z","examGroup":"split"}}