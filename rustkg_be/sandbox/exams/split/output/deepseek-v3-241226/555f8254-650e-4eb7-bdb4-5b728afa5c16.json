{"create_time":"2025-03-22T14:02:08.808Z","id":"555f8254-650e-4eb7-bdb4-5b728afa5c16","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has method","has return type","has stability","has trait","has type","has variant","implements","is a"],"add_triples":[["&'a mut I","has type","Item"],["&'a mut I","implements","Iterator"],["&'a mut I","implements","Read"],["&'a mut I","implements","Write"],["&'a mut I","is a","primitive reference"],["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Clone","has method","clone"],["Clone","has method","clone_from"],["Clone","is a","trait"],["Copy","is a","trait"],["Error","has type","NoneError"],["Error","is a","associated type"],["From","has method","from"],["From<&'a Option<T>>","is a","trait"],["From<T>","is a","trait"],["FromIterator<Option<A>>","is a","trait"],["Hash","has method","hash"],["Hash","has method","hash_slice"],["Hash","is a","trait"],["Into","has method","into"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Iterator","has associated type","Item"],["None","has description","No value"],["Ok","has type","T"],["Ok","is a","associated type"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","Creates an iterator from a value."],["Option","has description","Feeds a slice of this type into the given Hasher."],["Option","has description","Feeds this value into the given Hasher."],["Option","has description","Performs copy-assignment from source."],["Option","has description","Returns a copy of the value."],["Option","has description","The Option type. See the module level documentation for more."],["Option","has description","The type of the elements being iterated over."],["Option","has description","This method returns an ordering between self and other values if one exists."],["Option","has description","Which kind of iterator are we turning this into?"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","into_iter"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has stability","Stable since Rust version 1.3.0"],["Option","has stability","Stable since Rust version 1.4.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","PartialOrd"],["Option","is a","enum"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a T>","is a","enum"],["Option<T>","has method","default"],["Option<T>","has method","from"],["Option<T>","implements","Borrow"],["Option<T>","implements","Copy"],["Option<T>","implements","Default"],["Option<T>","implements","From"],["Option<T>","implements","From<T>"],["Option<T>","implements","Into"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","implements","TryFrom"],["Option<T>","implements","TryInto"],["Option<T>","is a","enum"],["Option<V>","implements","FromIterator<Option<A>>"],["Option<V>","is a","enum"],["PartialOrd","has method","partial_cmp"],["PartialOrd","is a","trait"],["Some","has description","Some value T"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["Try","is a","trait"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom::Error","has type","!"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto::Error","has type","TryFrom::Error"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\")); let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has return type","Option<U>"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: PinMut<'a, Option<T>>) -> Option<PinMut<'a, T>>"],["as_pin_mut","has description","Converts from Option<T> to Option<PinMut<'_, T>>"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has description","Performs the conversion."],["borrow","has return type","&T"],["borrow","is a","method"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","is a","method"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["cloned","has argument","self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","is a","function"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","function"],["def","has type","T"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has type","U"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","This is a nightly-only experimental API."],["deref","is a","function"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","function"],["expect","has argument","msg"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has return type","T"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> U"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","Option<T>"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["from","has argument","o"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","is a","function"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","Here is an example which increments every integer in a vector, checking for overflow:"],["from_iter","has return type","Option<V>"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["ge","has argument","other"],["ge","has argument","self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["gt","has argument","other"],["gt","has argument","self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","function"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","is a","function"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["iter","has argument","iter::self"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter","is a","function"],["iter_mut","has argument","iter_mut::self"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["iter_mut","has return type","mutable iterator"],["iter_mut","is a","function"],["le","has argument","other"],["le","has argument","self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","function"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","function"],["map","has argument","f"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","map_or::default"],["map_or","has argument","map_or::f"],["map_or","has argument","map_or::self"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has description","Maps an Option<T> to U by applying a function to a contained value or returns a default."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or","is a","function"],["map_or::default","has type","U"],["map_or::f","has type","FnOnce(T) -> U"],["map_or_else","has argument","map_or_else::default"],["map_or_else","has argument","map_or_else::f"],["map_or_else","has argument","map_or_else::self"],["map_or_else","has declaration","pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U where D: FnOnce() -> U, F: FnOnce(T) -> U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","U"],["map_or_else","is a","function"],["map_or_else::default","has type","FnOnce() -> U"],["map_or_else::f","has type","FnOnce(T) -> U"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","is a","function"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","is a","function"],["msg","has type","&str"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","function"],["ok_or","has argument","ok_or::err"],["ok_or","has argument","ok_or::self"],["ok_or","has declaration","pub fn ok_or<E>(self, err: E) -> Result<T, E>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or","is a","function"],["ok_or::err","has type","E"],["ok_or_else","has argument","ok_or_else::err"],["ok_or_else","has argument","ok_or_else::self"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","is a","function"],["ok_or_else::err","has type","FnOnce() -> E"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has description","Returns the option if it contains a value, otherwise returns the provided option."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100));"],["or","has return type","Option<T>"],["or","is a","function"],["or_else","has argument","f"],["or_else","has description","Returns the option if it contains a value, otherwise calls `f` and returns the result."],["or_else","has return type","Option<T>"],["or_else","is a","function"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","is a","function"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has example","Transposes an Option of a Result into a Result of an Option."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API."],["transpose","is a","function"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, TryFrom::Error>"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, TryInto::Error>"],["unwrap","has declaration","pub fn unwrap(self) -> T"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has return type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has description","Returns `Some` if exactly one of `self`, `optb` is `Some`, otherwise returns `None`."],["xor","has return type","Option<T>"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.NoneError.html","../../std/pin/struct.PinMut.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.reference.html","enum.Option.html","https://play.rust-lang.org/","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":365521,"totalUsage":{"prompt_tokens":96022,"completion_tokens":9450,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":21931},{"contextLength":500,"contentLength":15000,"costTime":38565},{"contextLength":500,"contentLength":15000,"costTime":52149},{"contextLength":500,"contentLength":15000,"costTime":33270},{"contextLength":500,"contentLength":15000,"costTime":21782},{"contextLength":500,"contentLength":15000,"costTime":34112},{"contextLength":500,"contentLength":15000,"costTime":24430},{"contextLength":500,"contentLength":15000,"costTime":20857},{"contextLength":500,"contentLength":15000,"costTime":34607},{"contextLength":500,"contentLength":15000,"costTime":33257},{"contextLength":500,"contentLength":15000,"costTime":27854},{"contextLength":500,"contentLength":11900,"costTime":22707}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T13:55:19.491Z","examGroup":"split"}}