{"create_time":"2025-03-22T14:53:28.746Z","id":"5a0b4e15-b71e-4f45-983c-e4f209896e8a","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has link","has method","has return type","has source code","has stability","has target","has type","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["Clone","has method","clone"],["Clone","has method","clone_from"],["Copy","has full name","std::marker::Copy"],["Copy","is a","trait"],["Default","has full name","std::default::Default"],["Default","is a","trait"],["Error","has description","The type returned in the event of a conversion error."],["Error","has type","<U as TryFrom<T>>::Error"],["Error","has type","NoneError"],["From","has full name","std::convert::From"],["From","has method","from"],["From","is a","trait"],["From<&'a Option<T>>","has return type","Option<&'a T>"],["From<&'a Option<T>>","implements","From"],["FromIterator<Option<A>>","has return type","Option<V>"],["FromIterator<Option<A>>","implements","FromIterator"],["Into","has method","into"],["Into","is a","trait"],["IntoIter","has associated type","Item"],["IntoIter","has source code","../../src/core/option.rs.html#1041-1043"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","implements","Iterator"],["IntoIterator","is a","trait"],["IntoIterator::IntoIter","has type","I"],["IntoIterator::Item","has type","Iterator::Item"],["Item","has type","&'a mut T"],["Item","has type","T"],["Item","is a","associated type"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","has source code","../../src/core/option.rs.html#1061-1063"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["Iterator","is a","trait"],["None","has description","No value"],["None","is a","variant"],["NoneError","has full name","std::option::NoneError"],["NoneError","is a","struct"],["Ok","has type","T"],["Option","has associated type","Error"],["Option","has associated type","Ok"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","from_error"],["Option","has method","from_ok"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","into_iter"],["Option","has method","into_result"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has source code","../../src/core/option.rs.html#1023-1044"],["Option","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Any"],["Option","implements","Borrow"],["Option","implements","BorrowMut"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","Into"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","ToOwned"],["Option","implements","Try"],["Option","implements","TryFrom"],["Option","implements","TryInto"],["Option","is a","enum"],["Option<&'a T>","has declaration","impl<'a, T> Option<&'a T> where T: Clone"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a T>","implements","cloned"],["Option<&'a mut T>","has declaration","impl<'a, T> Option<&'a mut T> where T: Clone"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&'a mut T>","implements","cloned"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has method","default"],["Option<T>","has method","hash"],["Option<T>","has method","hash_slice"],["Option<T>","implements","Clone"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","is a","enum"],["Owned","has type","T"],["PartialOrd<Option<T>>","has method","partial_cmp"],["Read","is a","trait"],["Result","is a","enum"],["Sized","is a","trait"],["Some","has description","Some(T)"],["Some","is a","variant"],["T as Deref","has target","T::Target"],["T","has type","Sync"],["T","has type","T"],["T","implements","Default"],["T","implements","Deref"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["Try","has full name","std::ops::Try"],["Try","is a","trait"],["TryFrom","has associated type","Error"],["TryFrom","implements","From<U>"],["TryFrom","is a","trait"],["TryFrom::Error","has type","!"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","implements","TryFrom<U>"],["TryInto","is a","trait"],["Write","is a","trait"],["and","has argument","optb"],["and","has argument","self"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\")); let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and","is a","function"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has declaration","pub fn and_then<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has return type","Option<U>"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>>"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["as_pin_ref","has declaration","pub fn as_pin_ref(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>>"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["as_ref","has argument","self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize>"],["as_ref","has return type","Option<&String>"],["as_ref","has return type","Option<&T>"],["as_ref","is a","function"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has description","Performs the conversion."],["borrow","has return type","&T"],["borrow","has source code","../../src/core/borrow.rs.html#220"],["borrow","is a","function"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","has source code","../../src/core/borrow.rs.html#225"],["borrow_mut","is a","function"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone","is a","function"],["clone_from","has argument","clone_from::self"],["clone_from","has argument","clone_from::source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","is a","function"],["clone_into","has argument","clone_into::self"],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source code","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","is a","function"],["clone_into::target","has type","&mut T"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has full name","std::cmp::Ord::cmp"],["cmp","has return type","Ordering"],["cmp","has source code","../../src/core/option.rs.html#158"],["cmp","is a","function"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has source code","../../src/core/option.rs.html#1019"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","This is a nightly-only experimental API."],["deref","is a","function"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","has source code","../../src/core/option.rs.html#158"],["eq","is a","method"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Panics if the value is a None with a custom panic message provided by msg."],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example","let x = Some(\"value\");"],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\");"],["expect","has example","let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","is a","method"],["filter","has argument","filter::predicate"],["filter","has argument","filter::self"],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has example","assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","Option<T>"],["filter","is a","method"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","has source code","../../src/core/option.rs.html#158"],["fmt","is a","method"],["from","has argument","o"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","has return type","Option<&'a T>"],["from","has return type","T"],["from","is a","method"],["from_error","has argument","from_error::NoneError"],["from_error","has return type","Option<T>"],["from_error","has source code","../../src/core/option.rs.html#1342-1344"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","Here is an example which increments every integer in a vector, checking for overflow."],["from_iter","has full name","std::iter::FromIterator::from_iter"],["from_iter","has return type","Option<V>"],["from_iter","is a","method"],["from_ok","has argument","from_ok::v"],["from_ok","has return type","Option<T>"],["from_ok","has source code","../../src/core/option.rs.html#1337-1339"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has full name","std::cmp::PartialOrd::ge"],["ge","has return type","bool"],["ge","has source code","../../src/core/option.rs.html#158"],["ge","is a","function"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","get_or_insert_with::f"],["get_or_insert_with","has argument","get_or_insert_with::self"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has declaration","pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T where F: FnOnce() -> T"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source code","../../src/core/any.rs.html#115"],["get_type_id","has stability","This is a nightly-only experimental API."],["get_type_id","is a","function"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has full name","std::cmp::PartialOrd::gt"],["gt","has return type","bool"],["gt","has source code","../../src/core/option.rs.html#158"],["gt","is a","function"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given [Hasher]."],["hash","has source code","../../src/core/option.rs.html#158"],["hash","has type","&mut __HT"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given [Hasher]."],["hash_slice","has source code","../../src/core/hash/mod.rs.html#203-209"],["hash_slice","has stability","Stable since Rust version 1.3.0"],["hash_slice","has type","&[Self]"],["hash_slice","has type","&mut H"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","has source code","../../src/core/option.rs.html#1041-1043"],["into_iter","has source code","../../src/core/option.rs.html#1057-1064"],["into_iter","is a","function"],["into_iter","is a","method"],["into_result","has return type","Result<T, NoneError>"],["into_result","has source code","../../src/core/option.rs.html#1332-1334"],["is_none","has argument","self"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has argument","self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<'a, A>"],["iter","has return type","Iter<T>"],["iter","is a","function"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","function"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has full name","std::cmp::PartialOrd::le"],["le","has return type","bool"],["le","has source code","../../src/core/option.rs.html#158"],["le","is a","function"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has full name","std::cmp::PartialOrd::lt"],["lt","has return type","bool"],["lt","has source code","../../src/core/option.rs.html#158"],["lt","is a","function"],["map","has argument","s"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<usize>"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has declaration","pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U where D: FnOnce() -> U, F: FnOnce(T) -> U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3);"],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","usize"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has full name","std::cmp::Ord::max"],["max","has return type","Self"],["max","has source code","../../src/core/cmp.rs.html#556-559"],["max","is a","function"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has full name","std::cmp::Ord::min"],["min","has return type","Self"],["min","has source code","../../src/core/cmp.rs.html#573-576"],["min","has stability","Stable since Rust version 1.21.0"],["min","is a","function"],["min","is a","method"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","has source code","../../src/core/option.rs.html#158"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","or::optb"],["or","has argument","or::self"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","assert_eq!(x.or(y), Some(2)); assert_eq!(x.or(y), Some(100)); assert_eq!(x.or(y), Some(2)); assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or","is a","method"],["or_else","has argument","or_else::f"],["or_else","has argument","or_else::self"],["or_else","has declaration","pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","assert_eq!(None.or_else(nobody), None)"],["or_else","has example","assert_eq!(None.or_else(vikings), Some(\"vikings\"))"],["or_else","has example","assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"))"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","function"],["replace","has argument","replace::self"],["replace","has argument","replace::value"],["replace","has declaration","pub fn replace(&mut self, value: T) -> Option<T>"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2));"],["replace","has return type","Option<T>"],["replace","is a","function"],["replace","is a","method"],["take","has argument","take::self"],["take","has declaration","pub fn take(&mut self) -> Option<T>"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source code","../../src/alloc/borrow.rs.html#94-96"],["to_owned","is a","function"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","#![feature(transpose_result)] #[derive(Debug, Eq, PartialEq)] struct SomeErr; let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["transpose","is a","function"],["try_from","has argument","value"],["try_from","has return type","Result<T, TryFrom<U>::Error>"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has example","let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","is a","method"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","is a","method"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","is a","method"],["xor","has argument","other"],["xor","has argument","self"],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","assert_eq!(None.xor(Some(2)), Some(2))"],["xor","has example","assert_eq!(Some(2).xor(None), Some(2))"],["xor","has example","assert_eq!(Some(2).xor(Some(2)), None)"],["xor","has example","let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2));"],["xor","has return type","Option"],["xor","has return type","Option<T>"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/borrow/trait.Borrow.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","enum.Option.html","https://github.com/rust-lang/rust/issues/41263","https://github.com/rust-lang/rust/issues/49150","https://github.com/rust-lang/rust/issues/50512","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aassert_eq!(Some(%22car%22).unwrap_or(%22bike%22)%2C%20%22car%22)%3B%0Aassert_eq!(None.unwrap_or(%22bike%22)%2C%20%22bike%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20is_even(n%3A%20%26i32)%20-%3E%20bool%20%7B%0A%20%20%20%20n%20%25%202%20%3D%3D%200%0A%7D%0A%0Aassert_eq!(None.filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(3).filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(4).filter(is_even)%2C%20Some(4))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20sq(x%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20Some(x%20*%20x)%20%7D%0Afn%20nope(_%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20None%20%7D%0A%0Aassert_eq!(Some(2).and_then(sq).and_then(sq)%2C%20Some(16))%3B%0Aassert_eq!(Some(2).and_then(sq).and_then(nope)%2C%20None)","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2010%3B%0Aassert_eq!(Some(4).unwrap_or_else(||%202%20*%20k)%2C%204)%3B%0Aassert_eq!(None.unwrap_or_else(||%202%20*%20k)%2C%2020)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20maybe_some_string%20%3D%20Some(String%3A%3Afrom(%22Hello%2C%20World!%22))%3B%0A%2F%2F%20%60Option%3A%3Amap%60%20takes%20self%20*by%20value*%2C%20consuming%20%60maybe_some_string%60%0Alet%20maybe_some_len%20%3D%20maybe_some_string.map(%7Cs%7C%20s.len())%3B%0A%0Aassert_eq!(maybe_some_len%2C%20Some(13))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Amatch%20x.as_mut()%20%7B%0A%20%20%20%20Some(v)%20%3D%3E%20*v%20%3D%2042%2C%0A%20%20%20%20None%20%3D%3E%20%7B%7D%2C%0A%7D%0Aassert_eq!(x%2C%20Some(42))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20text%3A%20Option%3CString%3E%20%3D%20Some(%22Hello%2C%20world!%22.to_string())%3B%0A%2F%2F%20First%2C%20cast%20%60Option%3CString%3E%60%20to%20%60Option%3C%26String%3E%60%20with%20%60as_ref%60%2C%0A%2F%2F%20then%20consume%20*that*%20with%20%60map%60%2C%20leaving%20%60text%60%20on%20the%20stack.%0Alet%20text_length%3A%20Option%3Cusize%3E%20%3D%20text.as_ref().map(%7Cs%7C%20s.len())%3B%0Aprintln!(%22still%20can%20print%20text%3A%20%7B%3A%3F%7D%22%2C%20text)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22air%22)%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22value%22)%3B%0Aassert_eq!(x.expect(%22the%20world%20is%20ending%22)%2C%20%22value%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20Some(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%20%2F%2F%20fails%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Ax.expect(%22the%20world%20is%20ending%22)%3B%20%2F%2F%20panics%20with%20%60the%20world%20is%20ending%60%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":685254,"totalUsage":{"prompt_tokens":137942,"completion_tokens":18475,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":33965},{"contextLength":500,"contentLength":7000,"costTime":19008},{"contextLength":500,"contentLength":7000,"costTime":37562},{"contextLength":500,"contentLength":7000,"costTime":43320},{"contextLength":500,"contentLength":7000,"costTime":32914},{"contextLength":500,"contentLength":7000,"costTime":38908},{"contextLength":500,"contentLength":7000,"costTime":15948},{"contextLength":500,"contentLength":7000,"costTime":41511},{"contextLength":500,"contentLength":7000,"costTime":29844},{"contextLength":500,"contentLength":7000,"costTime":23006},{"contextLength":500,"contentLength":7000,"costTime":32882},{"contextLength":500,"contentLength":7000,"costTime":23939},{"contextLength":500,"contentLength":7000,"costTime":37562},{"contextLength":500,"contentLength":7000,"costTime":19022},{"contextLength":500,"contentLength":7000,"costTime":18684},{"contextLength":500,"contentLength":7000,"costTime":19453},{"contextLength":500,"contentLength":7000,"costTime":22917},{"contextLength":500,"contentLength":7000,"costTime":25350},{"contextLength":500,"contentLength":7000,"costTime":18436},{"contextLength":500,"contentLength":7000,"costTime":22079},{"contextLength":500,"contentLength":7000,"costTime":36156},{"contextLength":500,"contentLength":7000,"costTime":23973},{"contextLength":500,"contentLength":7000,"costTime":16714},{"contextLength":500,"contentLength":7000,"costTime":20108},{"contextLength":500,"contentLength":7000,"costTime":16958},{"contextLength":500,"contentLength":3078,"costTime":15035}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:42:02.991Z","examGroup":"split"}}