{"create_time":"2025-03-22T14:44:00.843Z","id":"c020d6d3-3e7c-439f-a7a9-d4f8b217e083","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has declaration","has description","has example","has method","has return type","has type","has variant","implements","is a"],"add_triples":[["&'a mut I","has type","I"],["&'a mut I","implements","Iterator"],["&'a mut I","implements","Read"],["&'a mut I","implements","Write"],["&'a mut R","has type","R"],["&'a mut R","implements","Read"],["&'a mut W","has type","W"],["&'a mut W","implements","Write"],["Clone","is a","trait"],["Copy","is a","trait"],["From<&'a Option<T>>","implements","Option<&'a T>"],["From<&'a Option<T>>","is a","trait"],["From<T>","implements","Option<T>"],["From<T>","is a","trait"],["FromIterator<Option<A>>","implements","Option<V>"],["FromIterator<Option<A>>","is a","trait"],["Hash","is a","trait"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Iter<'a, T>","is a","struct"],["IterMut<'a, T>","is a","struct"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has method","as_ref"],["Option","has method","clone"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","hash"],["Option","has method","into_iter"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","partial_cmp"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap_or_default"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Debug"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq"],["Option","implements","PartialOrd"],["Option","is a","enum"],["Option<&'a T>","is a","enum"],["Option<T>","implements","Borrow"],["Option<T>","implements","Copy"],["Option<T>","implements","Default"],["Option<T>","implements","From"],["Option<T>","implements","Into"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","implements","TryFrom"],["Option<T>","implements","TryInto"],["Option<T>","is a","enum"],["Option<V>","is a","enum"],["Ordering","is a","enum"],["PartialOrd","is a","trait"],["Some","has description","Some value T"],["Try","is a","trait"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\")); let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","is a","function"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","is a","function"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","method"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: PinMut<'a, Option<T>>) -> Option<PinMut<'a, T>>"],["as_pin_mut","has description","Converts from Option<T> to Option<PinMut<'_, T>>"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","is a","method"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["as_ref","is a","function"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has description","Performs the conversion."],["borrow","has return type","&T"],["borrow","is a","function"],["borrow","is a","method"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","is a","function"],["clone","has return type","Option<T>"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","is a","function"],["cloned","has argument","self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","is a","function"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","function"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","method"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","is a","function"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","function"],["expect","has argument","expect::msg"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\");"],["expect","has example","let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","has return type","T"],["expect","is a","method"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","is a","function"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["from","has argument","from::o"],["from","has argument","o"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","is a","function"],["from","is a","method"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","is a","method"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) }).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has return type","Option<V>"],["from_iter","is a","method"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","is a","method"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has description","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","is a","function"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","function"],["hash","has argument","self"],["hash","has argument","state"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","is a","method"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","is a","function"],["into_iter","is a","method"],["into_result","has argument","self"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","method"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has argument","iter::self"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter","has type","I"],["iter","is a","method"],["iter_mut","has argument","iter_mut::self"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","function"],["iter_mut","is a","method"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","function"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","function"],["map","has argument","map::f"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U,"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map","is a","method"],["map_or","has argument","map_or::default"],["map_or","has argument","map_or::f"],["map_or","has argument","map_or::self"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U,"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has description","Maps an Option<T> to U by applying a function to a contained value or a default."],["map_or","has return type","U"],["map_or","is a","method"],["map_or::default","has type","U"],["map_or::f","has type","FnOnce(T) -> U"],["map_or_else","has argument","map_or_else::default"],["map_or_else","has argument","map_or_else::f"],["map_or_else","has argument","map_or_else::self"],["map_or_else","has declaration","pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U where D: FnOnce() -> U, F: FnOnce(T) -> U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["map_or_else","is a","method"],["map_or_else::default","has type","FnOnce() -> U"],["map_or_else::f","has type","FnOnce(T) -> U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","is a","function"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","is a","function"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","function"],["o","has type","&'a Option<T>"],["ok_or","has argument","ok_or::err"],["ok_or","has argument","ok_or::self"],["ok_or","has declaration","pub fn ok_or<E>(self, err: E) -> Result<T, E>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has return type","Result<T, E>"],["ok_or","is a","method"],["ok_or::err","has type","E"],["ok_or_else","has argument","ok_or_else::err"],["ok_or_else","has argument","ok_or_else::self"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","is a","method"],["ok_or_else::err","has type","FnOnce() -> E"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has description","Returns the option if it contains a value, otherwise returns the option passed as an argument."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));"],["or","is a","function"],["or_else","has description","Returns the option if it contains a value, otherwise calls `f` and returns the result."],["or_else","has example","assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has return type","Option<Ordering>"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","is a","function"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","is a","function"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has return type","Result<Option<T>, E>"],["transpose","is a","function"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","is a","method"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","is a","method"],["unwrap","has declaration","pub fn unwrap(self) -> T"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has example","let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has return type","T"],["unwrap","is a","method"],["unwrap_or","has argument","unwrap_or::def"],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or","is a","method"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["unwrap_or_else","has argument","unwrap_or_else::f"],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T,"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["unwrap_or_else","is a","method"],["v","has type","T"],["val","has type","T"],["xor","has description","Returns `Some` if exactly one of `self`, `optb` is `Some`, otherwise returns `None`."],["xor","has example","let x = Some(2); let y = None; assert_eq!(x.xor(y), Some(2));"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.PinMut.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","../primitive.unit.html","enum.Option.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","index.html","primitive.bool.html","primitive.reference.html","primitive.usize.html","struct.String.html"],"metrics":{"escapeCount":0,"costTime":367571,"totalUsage":{"prompt_tokens":95961,"completion_tokens":10219,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":21419},{"contextLength":500,"contentLength":15000,"costTime":42575},{"contextLength":500,"contentLength":15000,"costTime":35781},{"contextLength":500,"contentLength":15000,"costTime":27708},{"contextLength":500,"contentLength":15000,"costTime":55799},{"contextLength":500,"contentLength":15000,"costTime":28897},{"contextLength":500,"contentLength":15000,"costTime":22965},{"contextLength":500,"contentLength":15000,"costTime":16155},{"contextLength":500,"contentLength":15000,"costTime":37911},{"contextLength":500,"contentLength":15000,"costTime":34804},{"contextLength":500,"contentLength":15000,"costTime":23683},{"contextLength":500,"contentLength":11900,"costTime":19874}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:37:51.403Z","examGroup":"split"}}