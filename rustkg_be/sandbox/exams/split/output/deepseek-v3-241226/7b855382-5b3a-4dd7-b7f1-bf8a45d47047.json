{"create_time":"2025-03-22T14:02:13.526Z","id":"7b855382-5b3a-4dd7-b7f1-bf8a45d47047","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has closure","has default","has description","has example","has full name","has map function","has method","has panic","has return type","has source code","has stability","has variant","implements","is a","stable since"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Copy","has full name","std::marker::Copy"],["Copy","is a","trait"],["Debug","has full name","std::fmt::Debug"],["Debug","is a","trait"],["Default","has full name","std::default::Default"],["Default","is a","trait"],["Eq","has full name","std::cmp::Eq"],["Eq","is a","trait"],["Error","has full name","std::ops::Try::Error"],["Error","has type","NoneError"],["Error","is a","type"],["From","has method","from"],["From","is a","trait"],["From<&'a Option<T>>","has full name","std::convert::From<&'a Option<T>>"],["From<&'a Option<T>>","is a","trait"],["From<&'a mut Option<T>>","has full name","std::convert::From<&'a mut Option<T>>"],["From<&'a mut Option<T>>","is a","trait"],["From<T>","has full name","std::convert::From<T>"],["From<T>","is a","trait"],["FromIterator<Option<A>>","has full name","std::iter::FromIterator<Option<A>>"],["FromIterator<Option<A>>","is a","trait"],["Into","has method","into"],["Into","is a","trait"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["None","has description","No value"],["Ok","has full name","std::ops::Try::Ok"],["Ok","has type","T"],["Ok","is a","type"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Any"],["Option","implements","Borrow"],["Option","implements","BorrowMut"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Deref"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","Into"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","ToOwned"],["Option","implements","Try"],["Option","implements","TryFrom"],["Option","implements","TryInto"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<V>","implements","FromIterator<Option<A>>"],["Ord","has full name","std::cmp::Ord"],["Ord","is a","trait"],["PartialEq<Option<T>>","has full name","std::cmp::PartialEq<Option<T>>"],["PartialEq<Option<T>>","is a","trait"],["Send","has full name","std::marker::Send"],["Send","is a","trait"],["Some","has description","Some value `T`"],["Sync","has full name","std::marker::Sync"],["Sync","is a","trait"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["Try","has full name","std::ops::Try"],["Try","is a","trait"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["and","has argument","optb"],["and","has argument","self"],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from `Option<T>` to `Option<&mut T>`."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has description","Converts from `Option<T>` to `Option<PinMut<'_, T>>`"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (`pin` #49150)"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has full name","std::option::Option::clone"],["clone","has return type","Option<T>"],["clone","is a","method"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (#41263)"],["cloned","has argument","self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has full name","std::option::Option::cloned"],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has full name","std::cmp::Ord::cmp"],["cmp","has return type","Ordering"],["cmp","is a","method"],["default","has description","Returns None."],["default","has full name","std::default::Default::default"],["default","has return type","Option<T>"],["default","is a","method"],["deref","has full name","std::option::Option::deref"],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","is a","method"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has full name","std::cmp::PartialEq::eq"],["eq","has return type","bool"],["eq","is a","method"],["expect","has description","Unwraps an option, yielding the content of a `Some`."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\"); let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","has panic","Panics if the value is a `None` with a custom panic message provided by `msg`."],["expect","has return type","T"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has return type","Option<T>"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has full name","std::fmt::Debug::fmt"],["fmt","has return type","Result<(), Error>"],["fmt","is a","method"],["from","has argument","from::o"],["from","has argument","from::val"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","is a","method"],["from","stable since","1.12.0"],["from","stable since","1.30.0"],["from_error","has argument","from_error::NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has full name","std::ops::Try::from_error"],["from_error","has return type","Option<T>"],["from_error","is a","method"],["from_iter","has argument","from_iter::iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","Here is an example which increments every integer in a vector, checking for overflow:"],["from_iter","has full name","std::iter::FromIterator::from_iter"],["from_iter","has return type","Option<V>"],["from_iter","is a","method"],["from_ok","has argument","from_ok::v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has full name","std::ops::Try::from_ok"],["from_ok","has return type","Option<T>"],["from_ok","is a","method"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has full name","std::option::Option::get_or_insert"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","method"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has full name","std::option::Option::get_or_insert_with"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","method"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (#27745)"],["hash","has full name","std::option::Option::hash"],["hash","is a","method"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has full name","std::option::Option::into_iter"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","is a","method"],["into_result","has argument","into_result::self"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has full name","std::ops::Try::into_result"],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","method"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_some","has description","Returns `true` if the option is a `Some` value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["iter","has argument","self"],["iter","has return type","Iter<T>"],["iter_mut","has argument","self"],["iter_mut","has return type","IterMut<T>"],["map","has description","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has map function","FnOnce(T) -> U"],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has default","U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3);"],["map_or","has map function","FnOnce(T) -> U"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has return type","U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has full name","std::cmp::Ord::max"],["max","has return type","Self"],["max","is a","method"],["max","stable since","1.21.0"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has full name","std::cmp::Ord::min"],["min","has return type","Self"],["min","is a","method"],["min","stable since","1.21.0"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has full name","std::cmp::PartialEq::ne"],["ne","has return type","bool"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","optb"],["or","has argument","self"],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None } fn vikings() -> Option<&'static str> { Some(\"vikings\") } assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\")); assert_eq!(None.or_else(vikings), Some(\"vikings\")); assert_eq!(None.or_else(nobody), None);"],["or_else","has full name","std::option::Option::or_else"],["or_else","has return type","Option<T>"],["or_else","is a","method"],["partial_cmp","has full name","std::option::Option::partial_cmp"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","method"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","#![feature(option_replace)] let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has full name","std::option::Option::replace"],["replace","has return type","Option<T>"],["replace","is a","method"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has full name","std::option::Option::take"],["take","has return type","Option<T>"],["take","is a","method"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has full name","std::option::Option::transpose"],["transpose","has return type","Result<Option<T>, E>"],["transpose","is a","method"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has stability","This is a nightly-only experimental API. (#33417)"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (#33417)"],["unwrap","has description","Moves the value `v` out of the `Option<T>` if it is `Some(v)`."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\"); let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has panic","Panics if the self value equals `None`."],["unwrap","has return type","T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","let good_year_from_input = \"1909\"; let bad_year_from_input = \"190blarg\"; let good_year = good_year_from_input.parse().ok().unwrap_or_default(); let bad_year = bad_year_from_input.parse().ok().unwrap_or_default();"],["unwrap_or_default","has full name","std::option::Option::unwrap_or_default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","method"],["unwrap_or_else","has closure","FnOnce() -> T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","#![feature(option_xor)] let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2)); let x: Option<u32> = None; let y = Some(2); assert_eq!(x.xor(y), Some(2)); let x = Some(2); let y = Some(2); assert_eq!(x.xor(y), None); let x: Option<u32> = None; let y: Option<u32> = None; assert_eq!(x.xor(y), None);"],["xor","has full name","std::option::Option::xor"],["xor","has return type","Option<T>"],["xor","is a","method"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../index.html","enum.Option.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%极简风格和设计风格的区别是什么？极简风格和设计风格是两个不同的概念，它们虽然都涉及到设计，但侧重点和应用范围有所不同。\n\n### 极简风格\n极简风格（Minimalism）是一种设计哲学或美学风格，强调“少即是多”的理念。它的核心是通过减少不必要的元素，保留最本质的部分，以达到简洁、清晰和功能性的效果。极简风格通常体现在以下几个方面：\n\n1. **简洁的视觉元素**：使用最少的颜色、形状和纹理，避免复杂的装饰。\n2. **功能性**：设计以功能为导向，去除多余的部分，确保每个元素都有其存在的意义。\n3. **留白**：通过大量的留白来增强视觉上的简洁感，突出核心内容。\n4. **清晰的层次结构**：通过简单的布局和明确的层次结构，让用户能够快速理解信息。\n\n极简风格广泛应用于建筑、室内设计、平面设计、产品设计等领域。\n\n### 设计风格\n设计风格（Design Style）是一个更广泛的概念，指的是在设计中形成的一种独特的视觉或功能特征。设计风格可以是多种多样的，包括但不限于极简风格、复古风格、现代风格、未来主义风格、工业风格等。设计风格通常反映了一个时代的文化、技术和社会背景。\n\n1. **多样性**：设计风格可以涵盖各种不同的美学和功能取向，从复杂到简单，从传统到现代。\n2. **文化背景**：设计风格往往与特定的文化、历史或艺术运动相关，例如巴洛克风格、包豪斯风格等。\n3. **个性化**：设计风格可以根据设计师或品牌的个性进行定制，形成独特的视觉语言。\n\n### 区别\n- **范围**：极简风格是一种具体的设计风格，而设计风格是一个更广泛的概念，包含了极简风格在内的多种风格。\n- **核心理念**：极简风格的核心是简洁和功能性，而设计风格可以有不同的核心理念，取决于具体的风格类型。\n- **应用**：极简风格通常用于追求简洁和功能性的设计场景，而设计风格可以根据需求应用于各种不同的设计领域。\n\n总的来说，极简风格是设计风格中的一种，而设计风格则是一个更大的范畴，涵盖了多种不同的设计取向和美学理念。","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":370963,"totalUsage":{"prompt_tokens":78192,"completion_tokens":9477,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":82954},{"contextLength":500,"contentLength":31000,"costTime":67376},{"contextLength":500,"contentLength":31000,"costTime":66643},{"contextLength":500,"contentLength":31000,"costTime":23323},{"contextLength":500,"contentLength":31000,"costTime":90424},{"contextLength":500,"contentLength":21900,"costTime":40243}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T13:55:20.957Z","examGroup":"split"}}