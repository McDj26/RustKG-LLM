{"create_time":"2025-03-22T14:25:56.337Z","id":"81c60376-bcb4-4dd7-a25c-b398c0247d9e","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has iterator type","has method","has return type","has source code","has stability","has type","has variant","has where clause","implements","is a","performs conversion","stable since"],"add_triples":[["&'a mut I","has iterator type","Item"],["&'a mut I","has where clause","I: Iterator + ?Sized"],["&'a mut I","implements","Iterator"],["&'a mut I","implements","Read"],["&'a mut I","implements","Write"],["&'a mut I","is a","Iterator"],["&'a mut R","has where clause","R: Read + ?Sized"],["&'a mut R","implements","Read"],["&'a mut W","has where clause","W: Write + ?Sized"],["&'a mut W","implements","Write"],["Borrow","has full name","std::borrow::Borrow"],["Borrow","has method","borrow"],["Borrow","has source code","../../src/core/borrow.rs.html#219-221"],["Borrow","has where clause","T: ?Sized"],["Borrow","is a","trait"],["BorrowMut","has full name","std::borrow::BorrowMut"],["BorrowMut","has source code","../../src/core/borrow.rs.html#224-226"],["BorrowMut","has where clause","T: ?Sized"],["BorrowMut","is a","trait"],["Copy","has source code","../../src/core/option.rs.html#158"],["Copy","has where clause","T: Copy"],["Copy","implements","Option<T>"],["Default","is a","trait"],["Error","has description","The type returned in the event of a conversion error."],["Error","has type","!"],["Error","has type","<U as TryFrom<T>>::Error"],["From","has method","from"],["From","is a","trait"],["From<&'a Option<T>>","has source code","../../src/core/option.rs.html#1066-1070"],["From<&'a Option<T>>","implements","Option<&'a T>"],["From<&'a Option<T>>","stable since","1.30.0"],["From<&'a mut Option<T>>","has source code","../../src/core/option.rs.html#1073-1077"],["From<&'a mut Option<T>>","implements","Option<&'a mut T>"],["From<&'a mut Option<T>>","stable since","1.30.0"],["From<T>","has source code","../../src/core/option.rs.html#1059-1063"],["From<T>","implements","Option<T>"],["From<T>","stable since","1.12.0"],["FromIterator<Option<A>>","has where clause","V: FromIterator<A>"],["FromIterator<Option<A>>","implements","Option<V>"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has type","I"],["IntoIter","has type","Iter<'a, T>"],["IntoIter<T>","has type","T"],["IntoIter<T>","implements","Iterator"],["IntoIter<T>","is a","struct"],["IntoIterator for &'a Option<T>","has associated type","IntoIter"],["IntoIterator for &'a Option<T>","has associated type","Item"],["IntoIterator for &'a Option<T>","has method","into_iter"],["IntoIterator for &'a Option<T>","has source code","../../src/core/option.rs.html#1039-1046"],["IntoIterator for &'a Option<T>","stable since","1.4.0"],["IntoIterator for &'a mut Option<T>","has associated type","IntoIter"],["IntoIterator for &'a mut Option<T>","has associated type","Item"],["IntoIterator for &'a mut Option<T>","has method","into_iter"],["IntoIterator for &'a mut Option<T>","has source code","../../src/core/option.rs.html#1049-1056"],["IntoIterator for &'a mut Option<T>","stable since","1.4.0"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Item","has description","The type of the elements being iterated over."],["Item","has type","&'a T"],["Item","has type","<I as Iterator>::Item"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["Iterator","has method","next"],["Iterator","has type","A"],["Iterator","is a","trait"],["None","has description","No value"],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","default"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","from_error"],["Option","has method","from_ok"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has source code","../../src/core/option.rs.html#160-167"],["Option","has source code","../../src/core/option.rs.html#173-877"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Any"],["Option","implements","Borrow"],["Option","implements","BorrowMut"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","Into"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","ToOwned"],["Option","implements","Try"],["Option","implements","TryFrom"],["Option","implements","TryInto"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option::map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["Option::map","has source code","../../src/core/option.rs.html#433-438"],["Option::map","is a","method"],["Option::map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["Option::map_or","has source code","../../src/core/option.rs.html#433-438"],["Option::map_or","is a","method"],["Option::map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["Option::map_or_else","has source code","../../src/core/option.rs.html#456-461"],["Option::map_or_else","is a","method"],["Option<&T>","implements","Clone"],["Option<&mut T>","implements","Clone"],["Option<T>","implements","Clone"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Try"],["Option<V>","implements","FromIterator<Option<A>>"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result","is a","enum"],["Send","is a","trait"],["Some","has description","Some value T"],["Some","has description","Some value of type T"],["SomeErr","has description","Derives Debug, Eq, PartialEq"],["SomeErr","is a","struct"],["Sync","is a","trait"],["T","has where clause","T: 'static + ?Sized"],["T","has where clause","T: Clone"],["T","implements","Any"],["T","implements","ToOwned"],["Try","has associated type","Error"],["Try","has associated type","Ok"],["Try","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Try::Error","has type","NoneError"],["Try::Ok","has type","T"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom","has where clause","T: From<U>"],["TryFrom","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has stability","This is a nightly-only experimental API. (try_from #33417)"],["TryInto","is a","trait"],["and","has argument","self"],["and","has argument","y"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option"],["and","is a","function"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option"],["and_then","is a","function"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","is a","method"],["as_pin_mut","has description","Converts from Option<T> to Option<PinMut<'_, T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_pin_mut","is a","method"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has source code","../../src/core/option.rs.html#245-250"],["as_ref","is a","method"],["borrow","has argument","borrow::self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has full name","std::borrow::Borrow::borrow"],["borrow","has return type","&T"],["borrow","has source code","../../src/core/borrow.rs.html#220"],["borrow","is a","function"],["borrow_mut","has argument","borrow_mut::self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&'a mut T"],["borrow_mut","has source code","../../src/core/borrow.rs.html#225"],["borrow_mut","is a","function"],["clone","has argument","self"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone","is a","method"],["clone_from","has argument","self"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","is a","method"],["clone_into","has argument","clone_into::self"],["clone_into","has argument","clone_into::target"],["clone_into","has description","Creates owned data from borrowed data, usually by cloning."],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has full name","std::borrow::ToOwned::clone_into"],["clone_into","has return type","void"],["clone_into","has source code","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","is a","function"],["clone_into::target","has type","&mut T"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has source code","../../src/core/option.rs.html#893-895"],["cloned","is a","method"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","has source code","../../src/core/option.rs.html#158"],["cmp","is a","function"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","function"],["deref","has argument","deref::self"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has full name","std::option::Option::deref"],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","This is a nightly-only experimental API. (inner_deref #50264)"],["deref","is a","function"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has full name","std::cmp::PartialEq::eq"],["eq","has return type","bool"],["eq","has source code","../../src/core/option.rs.html#158"],["eq","is a","function"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","is a","method"],["f","has type","FnOnce() -> T"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has return type","Option"],["filter","has return type","Option<T>"],["filter","is a","function"],["filter","stable since","1.27.0"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has full name","std::fmt::Debug::fmt"],["fmt","has return type","Result<(), Error>"],["fmt","has source code","../../src/core/option.rs.html#158"],["fmt","is a","function"],["from","has argument","o"],["from","has argument","t"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","is a","method"],["from","performs conversion","Performs the conversion."],["from_error","has argument","from_error::NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","is a","function"],["from_error::NoneError","has type","NoneError"],["from_iter","has argument","from_iter::iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","Here is an example which increments every integer in a vector, checking for overflow."],["from_iter","has full name","std::iter::FromIterator::from_iter"],["from_iter","has return type","Option<V>"],["from_iter","has source code","../../src/core/option.rs.html#1264-1307"],["from_iter","has where clause","I: IntoIterator<Item = Option<A>>"],["from_iter","is a","function"],["from_ok","has argument","from_ok::v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","is a","function"],["from_ok::v","has type","T"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","has source code","../../src/core/option.rs.html#158"],["ge","is a","function"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&'a mut I"],["get_or_insert","has return type","&'a mut T"],["get_or_insert","has source code","../../src/core/option.rs.html#779-789"],["get_or_insert","is a","function"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&'a mut T"],["get_or_insert_with","has return type","&mut u32"],["get_or_insert_with","has source code","../../src/core/option.rs.html#812-822"],["get_or_insert_with","is a","function"],["get_or_insert_with","is a","method"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has argument","get_type_id::self"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source code","../../src/core/any.rs.html#115"],["get_type_id","has stability","This is a nightly-only experimental API."],["get_type_id","is a","function"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","has source code","../../src/core/option.rs.html#158"],["gt","is a","function"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given Hasher."],["hash","is a","method"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["hash_slice","is a","method"],["hash_slice","stable since","1.3.0"],["into","has argument","into::self"],["into","has description","Performs the conversion."],["into","has full name","std::convert::Into::into"],["into","has return type","U"],["into","has source code","../../src/core/convert.rs.html#455-457"],["into","is a","function"],["into_iter","has argument","self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has iterator type","Iter<'a, T>"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_result","has full name","std::ops::Try::into_result"],["into_result","has return type","Result<T, NoneError>"],["into_result","has source code","../../src/core/option.rs.html#1324-1326"],["into_result","is a","function"],["is_none","has description","Returns true if the option is a None value."],["is_none","has source code","../../src/core/option.rs.html#215-217"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has source code","../../src/core/option.rs.html#193-198"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has method","iter"],["iter","has source code","../../src/core/option.rs.html#539-541"],["iter","is a","function"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","has source code","../../src/core/option.rs.html#158"],["le","is a","function"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","has source code","../../src/core/option.rs.html#158"],["lt","is a","function"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has source code","../../src/core/option.rs.html#412-417"],["map","is a","function"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has description","This method returns the maximum of two values."],["max","has full name","std::cmp::Ord::max"],["max","has return type","Self"],["max","has source code","../../src/core/cmp.rs.html#556-559"],["max","has source code","../../src/core/option.rs.html#158"],["max","is a","function"],["max","stable since","1.21.0"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has full name","std::cmp::Ord::min"],["min","has return type","Self"],["min","has source code","../../src/core/cmp.rs.html#573-576"],["min","is a","function"],["min","stable since","1.21.0"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has full name","std::cmp::PartialEq::ne"],["ne","has return type","bool"],["ne","has source code","../../src/core/option.rs.html#158"],["ne","is a","function"],["next","has description","Advances the iterator and returns the next value."],["ok_or","has declaration","pub fn ok_or<E>(self, err: E) -> Result<T, E>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has method","ok_or"],["ok_or","has source code","../../src/core/option.rs.html#488-493"],["ok_or","is a","function"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has method","ok_or_else"],["ok_or_else","has source code","../../src/core/option.rs.html#515-520"],["ok_or_else","is a","function"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<&'static str>"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has argument","self"],["partial_cmp","has description","Compares two values, returning an order."],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","has source code","../../src/core/option.rs.html#158"],["partial_cmp","is a","function"],["partial_cmp","is a","method"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API."],["replace","is a","method"],["t","has type","T"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["take","is a","method"],["to_owned","has argument","to_owned::self"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source code","../../src/alloc/borrow.rs.html#94-96"],["to_owned","is a","function"],["transpose","has argument","transpose::self"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has full name","std::option::Option::transpose"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["transpose","is a","function"],["transpose_result","has description","Transposes an Option of a Result into a Result of an Option."],["transpose_result","has example","let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["transpose_result","is a","experimental API"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","has argument","try_into::self"],["try_into","has description","Performs the conversion."],["try_into","has full name","std::convert::TryInto::try_into"],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has source code","../../src/core/convert.rs.html#473-475"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","function"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has description","Unwraps an option, yielding the content of a Some."],["unwrap","has source code","../../src/core/option.rs.html#342-347"],["unwrap","is a","function"],["unwrap","is a","method"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has source code","../../src/core/option.rs.html#365-370"],["unwrap_or","is a","function"],["unwrap_or_default","has argument","unwrap_or_default::self"],["unwrap_or_default","has description","Returns the contained value or a default."],["unwrap_or_default","has description","Returns the contained value or a default. Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers). parse converts a string to any other type that implements FromStr, returning None on error."],["unwrap_or_default","has full name","std::option::Option::unwrap_or_default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","has source code","../../src/core/option.rs.html#917-954"],["unwrap_or_default","is a","function"],["unwrap_or_default","is a","method"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has source code","../../src/core/option.rs.html#383-388"],["unwrap_or_else","is a","function"],["value","has type","U"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","enum.Option.html","https://github.com/rust-lang/rust/issues/41263","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/49150","https://github.com/rust-lang/rust/issues/51998","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(transpose_result)%5D%0A%0Afn%20main()%20%7B%0A%23%5Bderive(Debug%2C%20Eq%2C%20PartialEq)%5D%0Astruct%20SomeErr%3B%0A%0Alet%20x%3A%20Result%3COption%3Ci32%3E%2C%20SomeErr%3E%20%3D%20Ok(Some(5))%3B%0Alet%20y%3A%20Option%3CResult%3Ci32%2C%20SomeErr%3E%3E%20%3D%20Some(Ok(5))%3B%0Aassert_eq!(x%2C%20y.transpose())%3B%0A%7D&version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20is_even(n%3A%20%26i32)%20-%3E%20bool%20%7B%0A%20%20%20%20n%20%25%202%20%3D%3D%200%0A%7D%0A%0Aassert_eq!(None.filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(3).filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(4).filter(is_even)%2C%20Some(4))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20sq(x%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20Some(x%20*%20x)%20%7D%0Afn%20nope(_%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20None%20%7D%0A%0Aassert_eq!(Some(2).and_then(sq).and_then(sq)%2C%20Some(16))%3B%0Aassert_eq!(Some(2).and_then(sq).and_then(nope)%2C%20None)%3B%0Aassert_eq!(Some(2).and_then(nope).and_then(sq)%2C%20None)%3B%0Aassert_eq!(None.and_then(sq).and_then(sq)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Amatch%20x.as_mut()%20%7B%0A%20%20%20%20Some(v)%20%3D%3E%20*v%20%3D%2042%2C%0A%20%20%20%20None%20%3D%3E%20%7B%7D%2C%0A%7D%0Aassert_eq!(x%2C%20Some(42))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20text%3A%20Option%3CString%3E%20%3D%20Some(%22Hello%2C%20world!%22.to_string())%3B%0A%2F%2F%20First%2C%20cast%20%60Option%3CString%3E%60%20to%20%60Option%3C%26String%3E%60%20with%20%60as_ref%60%2C%0A%2F%2F%20then%20consume%20*that*%20with%20%60map%60%2C%20leaving%20%60text%60%20on%20the%20stack.%0Alet%20text_length%3A%20Option%3Cusize%3E%20%3D%20text.as_ref().map(%7Cs%7C%20s.len())%3B%0Aprintln!(%22still%20can%20print%20text%3A%20%7B%3A%3F%7D%22%2C%20text)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22string%22)%3B%0Alet%20v%3A%20Vec%3C%26str%3E%20%3D%20x.into_iter().collect()%3B%0Aassert_eq!(v%2C%20%5B%22string%22%5D)%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20v%3A","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20Some(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":610692,"totalUsage":{"prompt_tokens":137565,"completion_tokens":16499,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":32490},{"contextLength":500,"contentLength":7000,"costTime":15412},{"contextLength":500,"contentLength":7000,"costTime":29288},{"contextLength":500,"contentLength":7000,"costTime":17252},{"contextLength":500,"contentLength":7000,"costTime":12632},{"contextLength":500,"contentLength":7000,"costTime":20383},{"contextLength":500,"contentLength":7000,"costTime":12372},{"contextLength":500,"contentLength":7000,"costTime":36070},{"contextLength":500,"contentLength":7000,"costTime":28739},{"contextLength":500,"contentLength":7000,"costTime":31679},{"contextLength":500,"contentLength":7000,"costTime":17907},{"contextLength":500,"contentLength":7000,"costTime":25336},{"contextLength":500,"contentLength":7000,"costTime":17565},{"contextLength":500,"contentLength":7000,"costTime":24183},{"contextLength":500,"contentLength":7000,"costTime":29730},{"contextLength":500,"contentLength":7000,"costTime":22771},{"contextLength":500,"contentLength":7000,"costTime":19315},{"contextLength":500,"contentLength":7000,"costTime":34460},{"contextLength":500,"contentLength":7000,"costTime":27282},{"contextLength":500,"contentLength":7000,"costTime":22156},{"contextLength":500,"contentLength":7000,"costTime":20149},{"contextLength":500,"contentLength":7000,"costTime":24807},{"contextLength":500,"contentLength":7000,"costTime":24268},{"contextLength":500,"contentLength":7000,"costTime":24112},{"contextLength":500,"contentLength":7000,"costTime":27800},{"contextLength":500,"contentLength":1900,"costTime":12534}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:15:43.917Z","examGroup":"split"}}