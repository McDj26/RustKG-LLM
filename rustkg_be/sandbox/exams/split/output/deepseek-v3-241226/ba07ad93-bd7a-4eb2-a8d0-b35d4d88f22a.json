{"create_time":"2025-03-22T14:41:58.594Z","id":"ba07ad93-bd7a-4eb2-a8d0-b35d4d88f22a","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has method","has module","has return type","has source","has stability","has trait implementation","has variant","implements","is a"],"add_triples":[["Error","has type","NoneError"],["None","has description","No value"],["Ok","has type","T"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["Option","has description","Returns a consuming iterator over the possibly contained value."],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["Option","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."],["Option","has example","Returns a consuming iterator over the possibly contained value."],["Option","has example","Transposes an Option of a Result into a Result of an Option."],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","default"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","from"],["Option","has method","from_error"],["Option","has method","from_iter"],["Option","has method","from_ok"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","into_iter"],["Option","has method","into_result"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has module","std::option"],["Option","has source","../../src/core/option.rs.html#1015-1036"],["Option","has source","../../src/core/option.rs.html#1039-1046"],["Option","has source","../../src/core/option.rs.html#1049-1056"],["Option","has source","../../src/core/option.rs.html#158"],["Option","has source","../../src/core/option.rs.html#160-167"],["Option","has source","../../src/core/option.rs.html#957-965"],["Option","has source","../../src/core/option.rs.html#967-994"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has trait implementation","Hash"],["Option","has trait implementation","IntoIterator"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Copy"],["Option","implements","Default"],["Option","implements","FromIterator"],["Option","implements","Try"],["Option","is a","enum"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","cmp"],["Option<T>","has method","eq"],["Option<T>","has method","fmt"],["Option<T>","has method","from"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","ne"],["Option<T>","has method","partial_cmp"],["Option<T>","has trait implementation","Clone"],["Option<T>","has trait implementation","Debug"],["Option<T>","has trait implementation","Eq"],["Option<T>","has trait implementation","From<&'a Option<T>>"],["Option<T>","has trait implementation","From<&'a mut Option<T>>"],["Option<T>","has trait implementation","From<T>"],["Option<T>","has trait implementation","Ord"],["Option<T>","has trait implementation","PartialEq<Option<T>>"],["Option<T>","has trait implementation","PartialOrd<Option<T>>"],["Option<T>","is a","enum"],["Some","has description","Some value `T`"],["Try","has associated type","Error"],["Try","has associated type","Ok"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","is a","method"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));"],["and_then","is a","method"],["as_mut","has description","Converts from `Option<T>` to `Option<&mut T>`."],["as_pin_mut","has description","Converts from `Option<T>` to `Option<PinMut<'_, T>>`"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","has source","../../src/core/borrow.rs.html#220"],["borrow","is a","function"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","has source","../../src/core/borrow.rs.html#225"],["borrow_mut","is a","function"],["clone","has description","Returns a copy of the value."],["clone_from","has description","Performs copy-assignment from source."],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source","../../src/alloc/borrow.rs.html#98-100"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","is a","function"],["clone_into::target","has type","&mut T"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cmp","has description","This method returns an Ordering between self and other."],["default","has description","Returns None."],["default","has return type","Option<T>"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["expect","has description","Unwraps an option, yielding the content of a `Some`."],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None);"],["filter","is a","method"],["fmt","has description","Formats the value using the given formatter."],["from","has argument","o"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) } ).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has return type","Option<V>"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source","../../src/core/any.rs.html#115"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["get_type_id","is a","function"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["into","has description","Performs the conversion."],["into","has return type","U"],["into","has source","../../src/core/convert.rs.html#455-457"],["into","is a","function"],["into_result","has description","Applies the '?' operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_some","has description","Returns `true` if the option is a `Some` value."],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has source","../../src/core/option.rs.html#539-541"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has source","../../src/core/option.rs.html#560-562"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has source","../../src/core/option.rs.html#412-417"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has source","../../src/core/option.rs.html#433-438"],["map_or_else","has declaration","pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U where D: FnOnce() -> U, F: FnOnce(T) -> U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has source","../../src/core/option.rs.html#456-461"],["max","has description","Compares and returns the maximum of two values."],["min","has description","Compares and returns the minimum of two values."],["ne","has description","This method tests for !=."],["ok_or","has declaration","pub fn ok_or<E>(self, err: E) -> Result<T, E>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has source","../../src/core/option.rs.html#488-493"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has source","../../src/core/option.rs.html#515-520"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));"],["or","is a","method"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None } fn vikings() -> Option<&'static str> { Some(\"vikings\") } assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));"],["or_else","is a","method"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source","../../src/alloc/borrow.rs.html#94-96"],["to_owned","is a","function"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has source","../../src/core/convert.rs.html#473-475"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","function"],["unwrap","has description","Moves the value `v` out of the `Option<T>` if it is `Some(v)`."],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has source","../../src/core/option.rs.html#365-370"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers)."],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has source","../../src/core/option.rs.html#383-388"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2));"],["xor","is a","method"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/option.rs.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/ops/trait.Deref.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.NoneError.html","../../std/primitive.str.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../index.html","https://play.rust-lang.org/","index.html"],"metrics":{"escapeCount":0,"costTime":229843,"totalUsage":{"prompt_tokens":83994,"completion_tokens":6134,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":25492},{"contextLength":500,"contentLength":23000,"costTime":39055},{"contextLength":500,"contentLength":23000,"costTime":27703},{"contextLength":500,"contentLength":23000,"costTime":29212},{"contextLength":500,"contentLength":23000,"costTime":20442},{"contextLength":500,"contentLength":23000,"costTime":31359},{"contextLength":500,"contentLength":23000,"costTime":30665},{"contextLength":500,"contentLength":15900,"costTime":25915}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:38:08.159Z","examGroup":"split"}}