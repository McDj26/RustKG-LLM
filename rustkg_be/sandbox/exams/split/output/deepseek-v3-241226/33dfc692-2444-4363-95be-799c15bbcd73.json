{"create_time":"2025-03-22T14:07:21.211Z","id":"33dfc692-2444-4363-95be-799c15bbcd73","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has method","has return type","has source","has stability","has trait implementation","has type","has variant","implements","is a"],"add_triples":[["&'a Option<T>","has method","into_iter"],["&'a Option<T>","has source","src/core/option.rs.html#1039-1046"],["&'a Option<T>","has stability","Stable since Rust version 1.4.0"],["&'a Option<T>","has trait implementation","IntoIterator"],["&'a Option<T>","implements","IntoIterator"],["&'a mut I","implements","Iterator"],["&'a mut I","implements","Read"],["&'a mut I","implements","Write"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","has source","src/core/option.rs.html#1049-1056"],["&'a mut Option<T>","has stability","Stable since Rust version 1.4.0"],["&'a mut Option<T>","has trait implementation","IntoIterator"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","is a","trait"],["BorrowMut","is a","trait"],["Clone","has full name","std::clone::Clone"],["Clone","is a","trait"],["Copy","implements","Option<T>"],["Error","has description","The type returned in the event of a conversion error."],["Error","has type","!"],["Error","has type","<U as TryFrom<T>>::Error"],["From","has method","from"],["From","is a","trait"],["From<&'a Option<T>>","implements","Option<&'a T>"],["From<&'a mut Option<T>>","implements","Option<&'a mut T>"],["From<T>","implements","Option<T>"],["FromIterator","has argument","FromIterator::A"],["FromIterator::A","has type","A"],["FromIterator<Option<A>>","implements","Option<V>"],["Hash","has full name","std::hash::Hash"],["Hash","is a","trait"],["I","implements","IntoIterator"],["Into","is a","trait"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has type","I"],["IntoIterator","has argument","IntoIterator::Item"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["IntoIterator::Item","has type","Option<A>"],["Item","has description","The type of the elements being iterated over."],["Item","has type","<I as Iterator>::Item"],["Iter","is a","struct"],["IterMut","is a","struct"],["Iterator","is a","trait"],["None","has description","No value"],["None","is a","variant"],["NoneError","has source","../../src/core/option.rs.html#1324-1326"],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","unwrap"],["Option","has method","unwrap_or_default"],["Option","has source","../../src/core/option.rs.html#160-167"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has trait implementation","impl<T> IntoIterator for Option<T>"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Any"],["Option","implements","Borrow"],["Option","implements","BorrowMut"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","Into"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","ToOwned"],["Option","implements","Try"],["Option","implements","TryFrom"],["Option","implements","TryInto"],["Option","is a","enum"],["Option::map","has argument","f"],["Option::map","has argument","self"],["Option::map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["Option::map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["Option::map","has return type","Option<U>"],["Option::map","is a","method"],["Option::map_or","has argument","default"],["Option::map_or","has argument","f"],["Option::map_or","has argument","self"],["Option::map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["Option::map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["Option::map_or","has return type","U"],["Option::map_or","is a","method"],["Option::map_or_else","has argument","default"],["Option::map_or_else","has argument","f"],["Option::map_or_else","has argument","self"],["Option::map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["Option::map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["Option::map_or_else","has return type","U"],["Option::map_or_else","is a","method"],["Option<&'a T>","implements","Clone"],["Option<&'a mut T>","implements","Clone"],["Option<T>","has method","default"],["Option<T>","has trait implementation","TryFrom"],["Option<T>","implements","Default"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","implements","TryFrom"],["Option<V>","implements","FromIterator"],["PartialOrd","has full name","std::cmp::PartialOrd"],["PartialOrd","is a","trait"],["Read","is a","trait"],["Sized","is a","trait"],["Some","has description","Some value T"],["Some","has description","Some(T)"],["Some","is a","variant"],["SomeErr","has declaration","#[derive(Debug, Eq, PartialEq)] struct SomeErr;"],["SomeErr","is a","struct"],["String","is a","struct"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["Try","has associated type","Try::Error"],["Try","has associated type","Try::Ok"],["Try::Error","has type","NoneError"],["Try::Ok","has type","T"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has stability","This is a nightly-only experimental API. (try_from #33417)"],["Write","is a","trait"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has description","Returns None if the option is None, otherwise returns the other option."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\"));"],["and_then","has argument","and_then::f"],["and_then","has argument","and_then::self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has return type","Option<U>"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_mut","has source","../../src/core/option.rs.html#266-271"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: PinMut<'a, Option<T>>) -> Option<PinMut<'a, T>>"],["as_pin_mut","has description","Converts from Option<T> to Option<PinMut<'_, T>>"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","has source","../../src/core/option.rs.html#276-280"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len());"],["as_ref","has return type","Option<&T>"],["as_ref","is a","method"],["borrow","has description","Immutably borrows from an owned value. Read more"],["borrow","has return type","&T"],["borrow","has source","../../src/core/borrow.rs.html#220"],["borrow","is a","function"],["borrow_mut","has declaration","fn borrow_mut(&mut self) -> &mut T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","has source","../../src/core/borrow.rs.html#225"],["borrow_mut","is a","function"],["clone","has argument","clone::self"],["clone","has description","Returns a copy of the value."],["clone","has full name","std::clone::Clone::clone"],["clone","has return type","Option<T>"],["clone","is a","function"],["clone_from","has argument","clone_from::self"],["clone_from","has argument","clone_from::source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","has full name","std::clone::Clone::clone_from"],["clone_from","has return type","()"],["clone_from","is a","function"],["clone_into","has argument","clone_into::self"],["clone_into","has argument","clone_into::target"],["clone_into","has declaration","fn clone_into(&self, target: &mut T)"],["clone_into","has description","Clones the data into the target."],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has source","../../src/alloc/borrow.rs.html#98-10"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into","is a","function"],["clone_into::target","has type","&mut T"],["cloned","has declaration","pub fn cloned(self) -> Option<T>"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","has source","../../src/core/option.rs.html#893-895"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","has source","../../src/core/option.rs.html#158"],["cmp","is a","function"],["default","has description","Returns None."],["default","has full name","std::default::Default::default"],["default","has return type","Option<T>"],["default","has source","../../src/core/option.rs.html#1011"],["default","is a","function"],["deref","has argument","deref::self"],["deref","has declaration","pub fn deref(&self) -> Option<&<T as Deref>::Target>"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has source","../../src/core/option.rs.html#962-964"],["deref","has stability","This is a nightly-only experimental API. (inner_deref #50264)"],["deref","is a","function"],["eq","has declaration","fn eq(&self, other: &Option<T>) -> bool"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has source","../../src/core/option.rs.html#158"],["eq","is a","function"],["expect","has argument","expect::msg"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\");"],["expect","has example","let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","has return type","T"],["expect","has source","../../src/core/option.rs.html#309-314"],["filter","has argument","filter::predicate"],["filter","has argument","filter::self"],["filter","has argument","predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, and None if predicate returns false."],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has example","Returns Some(t) if predicate returns true, and None if predicate returns false."],["filter","has example","assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","Option<T>"],["filter","has source","../../src/core/option.rs.html#651-658"],["filter","has stability","Stable since Rust version 1.27.0"],["filter","is a","function"],["fmt","has declaration","fn fmt(&self, f: &mut Formatter) -> Result<(), Error>"],["fmt","has description","Formats the value using the given formatter."],["fmt","has source","../../src/core/option.rs.html#158"],["fmt","is a","function"],["from","has argument","from::o"],["from","has argument","from::val"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","has source","../../src/core/option.rs.html#1060-1062"],["from","has source","../../src/core/option.rs.html#1067-1069"],["from","has source","../../src/core/option.rs.html#1074-1076"],["from","is a","method"],["from_error","has argument","from_error::NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has full name","std::ops::Try::from_error"],["from_error","has return type","Option<T>"],["from_error","has source","../../src/core/option.rs.html#1334-1336"],["from_error","has stability","This is a nightly-only experimental API. (#42327)"],["from_error","is a","function"],["from_iter","has argument","from_iter::iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) } ).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has full name","std::iter::FromIterator::from_iter"],["from_iter","has return type","Option<V>"],["from_iter","is a","function"],["from_iter::iter","has type","I"],["from_ok","has argument","from_ok::v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has full name","std::ops::Try::from_ok"],["from_ok","has return type","Option<T>"],["from_ok","has source","../../src/core/option.rs.html#1329-1331"],["from_ok","has stability","This is a nightly-only experimental API. (#42327)"],["from_ok","is a","function"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","has source","../../src/core/option.rs.html#158"],["ge","is a","function"],["get_or_insert","has argument","get_or_insert::self"],["get_or_insert","has argument","get_or_insert::v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","get_or_insert_with::f"],["get_or_insert_with","has argument","get_or_insert_with::self"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","has return type","&mut u32"],["get_or_insert_with","is a","function"],["get_or_insert_with","is a","method"],["get_type_id","has declaration","fn get_type_id(&self) -> TypeId"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has source","../../src/core/any.rs.html#115"],["get_type_id","has stability","This is a nightly-only experimental API."],["get_type_id","is a","function"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","has source","../../src/core/option.rs.html#158"],["gt","is a","function"],["hash","has argument","hash::self"],["hash","has argument","hash::state"],["hash","has description","Feeds this value into the given [Hasher]."],["hash","has full name","std::hash::Hash::hash"],["hash","has return type","()"],["hash","is a","function"],["hash_slice","has argument","hash_slice::data"],["hash_slice","has argument","hash_slice::state"],["hash_slice","has description","Feeds a slice of this type into the given [Hasher]."],["hash_slice","has full name","std::hash::Hash::hash_slice"],["hash_slice","has return type","()"],["hash_slice","is a","function"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","has source","../../src/core/convert.rs.html#455-457"],["into","is a","function"],["into_iter","has argument","self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_result","has full name","std::ops::Try::into_result"],["into_result","has return type","Result<T, NoneError>"],["into_result","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["into_result","is a","function"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_none","is a","method"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["is_some","is a","method"],["iter","has argument","iter::self"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter","has source","../../src/core/option.rs.html#539-541"],["iter","is a","function"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","has source","../../src/core/option.rs.html#158"],["le","is a","function"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","has source","../../src/core/option.rs.html#158"],["lt","is a","function"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has source","../../src/core/option.rs.html#412-417"],["map","is a","function"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has declaration","fn max(self, other: Self) -> Self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","has source","../../src/core/cmp.rs.html#556-559"],["max","has stability","Stable since Rust version 1.21.0"],["max","is a","function"],["min","has declaration","fn min(self, other: Self) -> Self"],["min","has description","Compares and returns the minimum of two values."],["min","has source","../../src/core/cmp.rs.html#573-576"],["min","has stability","Stable since Rust version 1.21.0"],["min","is a","function"],["ne","has declaration","fn ne(&self, other: &Option<T>) -> bool"],["ne","has description","This method tests for !=."],["ne","has source","../../src/core/option.rs.html#158"],["ne","is a","function"],["ok_or","has argument","ok_or::err"],["ok_or","has argument","ok_or::self"],["ok_or","has declaration","pub fn ok_or<E>(self, err: E) -> Result<T, E>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or","has source","../../src/core/option.rs.html#488-493"],["ok_or","is a","function"],["ok_or_else","has argument","ok_or_else::err"],["ok_or_else","has argument","ok_or_else::self"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","has source","../../src/core/option.rs.html#515-520"],["ok_or_else","is a","function"],["or","has argument","optb"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","assert_eq!(x.or(y), Some(2)); assert_eq!(x.or(y), Some(100)); assert_eq!(x.or(y), Some(2)); assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or","is a","function"],["or_else","has argument","f"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","assert_eq!(None.or_else(nobody), None);"],["or_else","has example","assert_eq!(None.or_else(vikings), Some(\"vikings\"));"],["or_else","has example","assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","Compares two values."],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has full name","std::cmp::PartialOrd::partial_cmp"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","has source","../../src/core/option.rs.html#158"],["partial_cmp","is a","function"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API. (option_replace #51998)"],["replace","is a","method"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["take","is a","method"],["to_owned","has declaration","fn to_owned(&self) -> T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","has source","../../src/alloc/borrow.rs.html#94-96"],["to_owned","is a","function"],["transpose","has argument","transpose::self"],["transpose","has declaration","pub fn transpose(self) -> Result<Option<T>, E>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has source","../../src/core/option.rs.html#987-993"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["transpose","is a","function"],["transpose_result","has description","Transposes an Option of a Result into a Result of an Option."],["transpose_result","has example","let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["transpose_result","is a","experimental API"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has source","../../src/core/convert.rs.html#473-475"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","function"],["unwrap","has declaration","pub fn unwrap(self) -> T"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has example","let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has return type","T"],["unwrap","has source","../../src/core/option.rs.html#309-314"],["unwrap","has source","../../src/core/option.rs.html#342-347"],["unwrap","is a","function"],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has source","../../src/core/option.rs.html#365-370"],["unwrap_or","is a","function"],["unwrap_or_default","has argument","unwrap_or_default::self"],["unwrap_or_default","has declaration","pub fn unwrap_or_default(self) -> T"],["unwrap_or_default","has description","Returns the contained value or a default."],["unwrap_or_default","has description","Returns the contained value or a default. Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers). parse converts a string to any other type that implements FromStr, returning None on error."],["unwrap_or_default","has return type","T"],["unwrap_or_default","has source","../../src/core/option.rs.html#917-954"],["unwrap_or_default","has source","../../src/core/option.rs.html#948-953"],["unwrap_or_default","is a","function"],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has source","../../src/core/option.rs.html#383-388"],["unwrap_or_else","is a","function"],["usize","is a","primitive type"],["xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","assert_eq!(x.xor(y), None);"],["xor","has example","assert_eq!(x.xor(y), Some(2));"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"],["xor","is a","function"]],"add_links":["../../settings.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Sized.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","enum.Option.html","https://github.com/rust-lang/rust/issues/41263","https://github.com/rust-lang/rust/issues/42327","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/49150","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_replace)%5D%0A%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(transpose_result)%5D%0A%0Afn%20main()%20%7B%0A%23%5Bderive(Debug%2C%20Eq%2C%20PartialEq)%5D%0Astruct%20SomeErr%3B%0A%0Alet%20x%3A%20Result%3COption%3Ci32%3E%2C%20SomeErr%3E%20%3D%20Ok(Some(5))%3B%0Alet%20y%3A%20Option%3CResult%3Ci32%2C%20SomeErr%3E%3E%20%3D%20Some(Ok(5))%3B%0Aassert_eq!(x%2C%20y.transpose())%3B%0A%7D&version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20is_even(n%3A%20%26i32)%20-%3E%20bool%20%7B%0A%20%20%20%20n%20%25%202%20%3D%3D%200%0A%7D%0A%0Aassert_eq!(None.filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(3).filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(4).filter(is_even)%2C%20Some(4))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20sq(x%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20Some(x%20*%20x)%20%7D%0Afn%20nope(_%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20None%20%7D%0A%0Aassert_eq!(Some(2).and_then(sq).and_then(sq)%2C%20Some(16))%3B%0Aassert_eq!(Some(2).and_then(sq).and_then(nope)%2C%20None)%3B%0Aassert_eq!(Some(2).and_then(nope).and_then(sq)%2C%20None)%3B%0Aassert_eq!(None.and_then(sq).and_then(sq)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert_with(%7C%7C%205)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22string%22)%3B%0Alet%20v%3A%20Vec%3C%26str%3E%20%3D%20x.into_iter().collect()%3B%0Aassert_eq!(v%2C%20%5B%22string%22%5D)%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20v%3A","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20Some(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%7D","index.html","src/core/option.rs.html","std/iter/trait.IntoIterator.html","std/option/enum.Option.html","std/option/struct.Iter.html","std/option/struct.IterMut.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":678842,"totalUsage":{"prompt_tokens":137523,"completion_tokens":17888,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":24847},{"contextLength":500,"contentLength":7000,"costTime":20915},{"contextLength":500,"contentLength":7000,"costTime":28092},{"contextLength":500,"contentLength":7000,"costTime":26281},{"contextLength":500,"contentLength":7000,"costTime":25209},{"contextLength":500,"contentLength":7000,"costTime":26654},{"contextLength":500,"contentLength":7000,"costTime":20391},{"contextLength":500,"contentLength":7000,"costTime":42348},{"contextLength":500,"contentLength":7000,"costTime":33779},{"contextLength":500,"contentLength":7000,"costTime":34566},{"contextLength":500,"contentLength":7000,"costTime":18882},{"contextLength":500,"contentLength":7000,"costTime":46034},{"contextLength":500,"contentLength":7000,"costTime":19194},{"contextLength":500,"contentLength":7000,"costTime":26879},{"contextLength":500,"contentLength":7000,"costTime":30453},{"contextLength":500,"contentLength":7000,"costTime":17741},{"contextLength":500,"contentLength":7000,"costTime":27137},{"contextLength":500,"contentLength":7000,"costTime":33694},{"contextLength":500,"contentLength":7000,"costTime":23081},{"contextLength":500,"contentLength":7000,"costTime":21137},{"contextLength":500,"contentLength":7000,"costTime":22988},{"contextLength":500,"contentLength":7000,"costTime":30640},{"contextLength":500,"contentLength":7000,"costTime":21618},{"contextLength":500,"contentLength":7000,"costTime":21095},{"contextLength":500,"contentLength":7000,"costTime":24663},{"contextLength":500,"contentLength":1900,"costTime":10524}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T13:55:18.934Z","examGroup":"split"}}