{"create_time":"2025-03-22T14:06:27.979Z","id":"9a0e4fdf-aa1a-4273-991a-b578b570ffa5","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has method","has return type","has stability","has stability attribute","has trait","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Copy<Option<T>>","implements","Copy"],["Default<Option<T>>","has method","default"],["Default<Option<T>>","implements","Default"],["Error","has type","!"],["Error","has type","NoneError"],["Error","is a","associated type"],["From","is a","trait"],["From<&'a Option<T>>","has method","from"],["From<&'a Option<T>>","implements","From"],["FromIterator<Option<A>>","has method","from_iter"],["FromIterator<Option<A>>","implements","FromIterator"],["Into","is a","trait"],["IntoIter","has type","I"],["IntoIter","is a","associated type"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has example","Returns a consuming iterator over the possibly contained value."],["IntoIterator","is a","trait"],["IntoIterator::IntoIter","has type","IntoIter<T>"],["IntoIterator::Item","has type","T"],["Item","has type","Iterator::Item"],["Item","is a","associated type"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["None","has description","No value"],["Ok","has type","T"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["Option","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["Option","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["Option","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["Option","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["Option","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","is a","enum"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","cmp"],["Option<T>","has method","fmt"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","hash"],["Option<T>","has method","hash_slice"],["Option<T>","has method","into_iter"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","partial_cmp"],["Option<T>","has variant","None"],["Option<T>","implements","Clone"],["Option<T>","implements","Debug"],["Option<T>","implements","Eq"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","is a","enum"],["PartialEq","is a","trait"],["PartialEq<Option<T>>","implements","PartialEq"],["Send","is a","trait"],["Some","has description","Some value `T`"],["Sync","is a","trait"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","ToOwned"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["Try<Option<T>>","has associated type","Error"],["Try<Option<T>>","has associated type","Ok"],["Try<Option<T>>","has method","from_error"],["Try<Option<T>>","has method","from_ok"],["Try<Option<T>>","has method","into_result"],["Try<Option<T>>","implements","Try"],["TryFrom","is a","trait"],["TryInto","is a","trait"],["and","has argument","and::optb"],["and","has argument","and::self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and","is a","function"],["and_then","has argument","and_then::f"],["and_then","has argument","and_then::self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["and_then","is a","function"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","function"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API."],["as_pin_mut","is a","function"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_pin_ref","has stability","This is a nightly-only experimental API."],["as_pin_ref","is a","function"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["as_ref","is a","function"],["borrow","has argument","self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","is a","function"],["borrow_mut","has argument","self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","is a","function"],["clone","has return type","Option<T>"],["clone_from","has argument","source"],["clone_from","has return type","()"],["clone_into","has argument","self"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability attribute","This is a nightly-only experimental API."],["clone_into","is a","function"],["cloned","has argument","cloned::self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","is a","function"],["cloned-1","has argument","cloned-1::self"],["cloned-1","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned-1","has return type","Option<T>"],["cloned-1","is a","function"],["cmp","has argument","other"],["cmp","has return type","Ordering"],["default","has description","Returns None."],["default","has return type","Option<T>"],["deref","has argument","self"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","has return type","Option<&<T as Deref>::Target>"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","method"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\");"],["expect","has return type","T"],["expect","is a","function"],["filter","has argument","filter::predicate"],["filter","has argument","filter::self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has return type","Option<T>"],["filter","is a","function"],["fmt","has argument","f"],["fmt","has return type","Result<(), Error>"],["from","has argument","o"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","T"],["from","is a","method"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability attribute","This is a nightly-only experimental API. (try_trait #42327)"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) } ).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has return type","Option<V>"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has stability attribute","This is a nightly-only experimental API. (try_trait #42327)"],["ge","has argument","other"],["ge","has return type","bool"],["get_or_insert","has argument","get_or_insert::self"],["get_or_insert","has argument","get_or_insert::v"],["get_or_insert","has declaration","pub fn get_or_insert(&mut self, v: T) -> &mut T"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert_with","has argument","get_or_insert_with::f"],["get_or_insert_with","has argument","get_or_insert_with::self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_type_id","has argument","self"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability attribute","This is a nightly-only experimental API."],["get_type_id","is a","function"],["gt","has argument","other"],["gt","has return type","bool"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given Hasher."],["hash","has return type","()"],["hash","is a","method"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["hash_slice","has return type","()"],["hash_slice","has stability attribute","Stable since Rust version 1.3.0"],["hash_slice","is a","method"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","is a","method"],["into_iter","has argument","self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","is a","method"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","has stability attribute","This is a nightly-only experimental API. (try_trait #42327)"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has description","Returns `true` if the option is a `Some` value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has argument","self"],["iter","has return type","Iter<T>"],["iter_mut","has argument","iter_mut::self"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","function"],["le","has argument","other"],["le","has return type","bool"],["lt","has argument","other"],["lt","has return type","bool"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\"));"],["map","has return type","Option<U>"],["map","is a","function"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has return type","U"],["max","has argument","other"],["max","has return type","Self"],["min","has argument","other"],["min","has return type","Self"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","or::optb"],["or","has argument","or::self"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2)); let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or","is a","function"],["or_else","has argument","or_else::f"],["or_else","has argument","or_else::self"],["or_else","has declaration","pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None } fn vikings() -> Option<&'static str> { Some(\"vikings\") } assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\")); assert_eq!(None.or_else(vikings), Some(\"vikings\")); assert_eq!(None.or_else(nobody), None);"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","other"],["partial_cmp","has return type","Option<Ordering>"],["replace","has argument","replace::self"],["replace","has argument","replace::value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","is a","function"],["take","has argument","take::self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has argument","self"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","is a","function"],["transpose","has argument","self"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has return type","Result<Option<T>, E>"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, Error>"],["try_from","is a","method"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, Error>"],["try_into","is a","method"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has return type","T"],["unwrap","is a","function"],["unwrap_or","has argument","def"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or","is a","function"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["unwrap_or_else","is a","function"],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","#![feature(option_xor)] let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2)); let x: Option<u32> = None; let y = Some(2); assert_eq!(x.xor(y), Some(2)); let x = Some(2); let y = Some(2); assert_eq!(x.xor(y), None); let x: Option<u32> = None; let y: Option<u32> = None; assert_eq!(x.xor(y), None);"],["xor","has return type","Option<T>"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/hash/mod.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.reference.html","index.html"],"metrics":{"escapeCount":0,"costTime":347891,"totalUsage":{"prompt_tokens":96409,"completion_tokens":9007,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":22606},{"contextLength":500,"contentLength":15000,"costTime":39703},{"contextLength":500,"contentLength":15000,"costTime":34590},{"contextLength":500,"contentLength":15000,"costTime":20247},{"contextLength":500,"contentLength":15000,"costTime":38478},{"contextLength":500,"contentLength":15000,"costTime":30467},{"contextLength":500,"contentLength":15000,"costTime":18969},{"contextLength":500,"contentLength":15000,"costTime":37926},{"contextLength":500,"contentLength":15000,"costTime":21518},{"contextLength":500,"contentLength":15000,"costTime":25499},{"contextLength":500,"contentLength":15000,"costTime":29196},{"contextLength":500,"contentLength":13078,"costTime":28692}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:00:39.436Z","examGroup":"split"}}