{"create_time":"2025-03-22T14:08:05.866Z","id":"f173dd1e-93a0-4ee5-a692-3460867229e9","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has auto trait implementation","has blanket implementation","has declaration","has description","has example","has method","has return type","has stability","has stability note","has trait implementation","has type","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Error","has description","The type returned in the event of a conversion error."],["Error","has stability","This is a nightly-only experimental API. (try_from #33417)"],["Error","has type","<U as TryFrom<T>>::Error"],["Into","has method","into"],["Into","is a","trait"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","from_error"],["Option","has method","from_ok"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Any"],["Option","implements","Borrow"],["Option","implements","BorrowMut"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","Into"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","ToOwned"],["Option","implements","Try"],["Option","implements","TryFrom"],["Option","implements","TryInto"],["Option","is a","enum"],["Option<&'a T>","implements","Clone"],["Option<&'a mut T>","implements","Clone"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Some","has description","Some value T"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["TryFrom","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["and","has argument","and::optb"],["and","has argument","and::self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has full name","std::option::Option::and"],["and","has return type","Option<U>"],["and","is a","function"],["and_then","has argument","and_then::f"],["and_then","has argument","and_then::self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has full name","std::option::Option::and_then"],["and_then","has return type","Option<U>"],["and_then","is a","function"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string()); let text_length: Option<usize> = text.as_ref().map(|s| s.len()); println!(\"still can print text: {:?}\", text);"],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has description","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","method"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","function"],["deref","has declaration","pub fn deref(&self) -> Option<&<T as Deref>::Target>"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has stability","This is a nightly-only experimental API. (inner_deref #50264)"],["deref","is a","method"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","method"],["expect","has argument","expect::msg"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\"); let x: Option<&str> = None; x.expect(\"the world is ending\");"],["expect","has return type","T"],["filter","has argument","filter::predicate"],["filter","has argument","filter::self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has full name","std::option::Option::filter"],["filter","has return type","Option<T>"],["filter","is a","function"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","method"],["from","has declaration","fn from(val: T) -> Option<T>"],["from","has description","Performs the conversion."],["from","is a","method"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["from_error","is a","function"],["from_iter","has declaration","fn from_iter<I>(iter: I) -> Option<V> where I: IntoIterator<Item = Option<A>>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","Here is an example which increments every integer in a vector, checking for overflow."],["from_iter","is a","method"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["from_ok","is a","function"],["ge","has argument","other"],["ge","has argument","self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","method"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has argument","other"],["gt","has argument","self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","method"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given Hasher."],["hash","is a","function"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["hash_slice","is a","function"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has argument","self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","is a","function"],["into_result","has declaration","fn into_result(self) -> Result<T, NoneError>"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that the execution should branch to the innermost enclosing catch block."],["into_result","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["into_result","is a","method"],["is_none","has description","Returns true if the option is a None value."],["is_none","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_none(), false); let x: Option<u32> = None; assert_eq!(x.is_none(), true);"],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true); let x: Option<u32> = None; assert_eq!(x.is_some(), false);"],["is_some","has return type","bool"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has full name","std::option::Option::iter_mut"],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","function"],["le","has argument","other"],["le","has argument","self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","method"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","method"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","U"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","is a","method"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","is a","method"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","method"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["or","has argument","or::optb"],["or","has argument","or::self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has full name","std::option::Option::or"],["or","has return type","Option<T>"],["or","is a","function"],["or_else","has argument","or_else::f"],["or_else","has argument","or_else::self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has full name","std::option::Option::or_else"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","method"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a `Some` in its place without deinitializing either one."],["replace","has return type","Option<T>"],["take","has description","Takes the value out of the option, leaving a `None` in its place."],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has declaration","pub fn transpose(self) -> Result<Option<T>, E>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","Transposes an Option of a Result into a Result of an Option."],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["transpose","is a","method"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has example","let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or_default","has declaration","pub fn unwrap_or_default(self) -> T"],["unwrap_or_default","has description","Returns the contained value or a default. Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers). parse converts a string to any other type that implements FromStr, returning None on error."],["unwrap_or_default","is a","method"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has description","Returns `Some` if exactly one of `self`, `other` is `Some`, otherwise returns `None`."],["xor","has full name","std::option::Option::xor"],["xor","has return type","Option<T>"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/pin/struct.Pin.html","../../std/primitive.usize.html","../../std/string/struct.String.html","../index.html","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert_with(%7C%7C%205)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","index.html"],"metrics":{"escapeCount":0,"costTime":356510,"totalUsage":{"prompt_tokens":84415,"completion_tokens":9408,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":53566},{"contextLength":500,"contentLength":23000,"costTime":53732},{"contextLength":500,"contentLength":23000,"costTime":35597},{"contextLength":500,"contentLength":23000,"costTime":76228},{"contextLength":500,"contentLength":23000,"costTime":34204},{"contextLength":500,"contentLength":23000,"costTime":30136},{"contextLength":500,"contentLength":23000,"costTime":41857},{"contextLength":500,"contentLength":17078,"costTime":31190}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:02:08.831Z","examGroup":"split"}}