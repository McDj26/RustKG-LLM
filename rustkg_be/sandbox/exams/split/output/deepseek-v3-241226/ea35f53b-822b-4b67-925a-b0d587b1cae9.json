{"create_time":"2025-03-22T14:28:05.683Z","id":"ea35f53b-822b-4b67-925a-b0d587b1cae9","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has declaration","has description","has implementation","has method","has return type","has stability","has type","has variant","implements","is a"],"add_triples":[["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["From","has method","from"],["From","is a","trait"],["Into","has method","into"],["Into","is a","trait"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","type"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Item","has description","The type of the elements being iterated over."],["Item","has type","&'a mut T"],["Item","is a","type"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","Converts from &Option<T> to Option<&T::Target>"],["Option","has description","Performs the conversion"],["Option","has description","Returns None"],["Option","has description","Returns the contained value or a default"],["Option","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has description","Transposes an Option of a Result into a Result of an Option"],["Option","has implementation","Clone"],["Option","has implementation","Copy"],["Option","has implementation","Debug"],["Option","has implementation","Default"],["Option","has implementation","Eq"],["Option","has implementation","From<&'a Option<T>>"],["Option","has implementation","From<&'a mut Option<T>>"],["Option","has implementation","From<T>"],["Option","has implementation","FromIterator<Option<A>>"],["Option","has implementation","Hash"],["Option","has implementation","IntoIterator"],["Option","has implementation","Ord"],["Option","has implementation","PartialEq<Option<T>>"],["Option","has implementation","PartialOrd<Option<T>>"],["Option","has implementation","Send"],["Option","has implementation","Sync"],["Option","has implementation","Try"],["Option","has implementation","impl<'a, T> From<&'a Option<T>> for Option<&'a T>"],["Option","has implementation","impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T>"],["Option","has implementation","impl<'a, T> IntoIterator for &'a mut Option<T>"],["Option","has implementation","impl<A, V> FromIterator<Option<A>> for Option<V> where V: FromIterator<A>"],["Option","has implementation","impl<T, E> Option<Result<T, E>>"],["Option","has implementation","impl<T> Copy for Option<T> where T: Copy"],["Option","has implementation","impl<T> Default for Option<T>"],["Option","has implementation","impl<T> From<T> for Option<T>"],["Option","has implementation","impl<T> Hash for Option<T> where T: Hash"],["Option","has implementation","impl<T> Option<T> where T: Deref"],["Option","has implementation","impl<T> Try for Option<T>"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","default"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","from"],["Option","has method","from_error"],["Option","has method","from_iter"],["Option","has method","from_ok"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","hash"],["Option","has method","hash_slice"],["Option","has method","into_result"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has variant","None"],["Option","has variant","Some"],["Option","is a","enum"],["Option<T>","has argument","&'a mut self"],["Option<T>","has argument","&'a self"],["Option<T>","has argument","self"],["Option<T>","has description","Returns a consuming iterator over the possibly contained value."],["Option<T>","has implementation","impl<'a, T> IntoIterator for &'a Option<T>"],["Option<T>","has implementation","impl<T> IntoIterator for Option<T>"],["Option<T>","has method","into_iter"],["Option<T>","has return type","IntoIter<T>"],["Option<T>","has return type","Iter<'a, T>"],["Option<T>","has return type","IterMut<'a, T>"],["Option<T>","has type","&'a T"],["Option<T>","has type","&'a mut T"],["Option<T>","has type","T"],["Option<T>","implements","IntoIterator"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","is a","method"],["and_then","has declaration","pub fn and_then<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","is a","method"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["cloned","has description","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option."],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","is a","method"],["from","has description","Performs the conversion."],["from","has return type","T"],["get_or_insert","has description","Inserts `v` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","is a","method"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","is a","method"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","is a","method"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","is a","method"],["map_or_else","has declaration","pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U where D: FnOnce() -> U, F: FnOnce(T) -> U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","is a","method"],["ok_or","has declaration","pub fn ok_or<E>(self, err: E) -> Result<T, E>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","is a","method"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","is a","method"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has description","Returns the option if it contains a value, otherwise returns the other option."],["or","is a","method"],["or_else","has description","Returns the option if it contains a value, otherwise calls `f` and returns the result."],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a `Some` in its place without deinitializing either one."],["take","has description","Takes the value out of the option, leaving a `None` in its place."],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["unwrap_or_default","has description","Returns the contained value or a default"],["xor","has description","Returns `Some` if exactly one of `self`, `optb` is `Some`, otherwise returns `None`."]],"add_links":["../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/primitive.str.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../index.html","enum.Option.html","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":174961,"totalUsage":{"prompt_tokens":78448,"completion_tokens":4489,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":29789},{"contextLength":500,"contentLength":31000,"costTime":40259},{"contextLength":500,"contentLength":31000,"costTime":21080},{"contextLength":500,"contentLength":31000,"costTime":29490},{"contextLength":500,"contentLength":31000,"costTime":23293},{"contextLength":500,"contentLength":23078,"costTime":31050}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:25:10.211Z","examGroup":"split"}}