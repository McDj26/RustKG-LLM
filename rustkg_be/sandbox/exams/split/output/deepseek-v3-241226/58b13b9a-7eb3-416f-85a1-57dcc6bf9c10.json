{"create_time":"2025-03-22T14:05:16.036Z","id":"58b13b9a-7eb3-416f-85a1-57dcc6bf9c10","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has declaration","has description","has methods","has return type","has stability","has trait implementations","has type","has variants","implements","is a"],"add_triples":[["Any","is a","trait"],["Borrow","is a","trait"],["BorrowMut","is a","trait"],["Error","has description","The type returned in the event of a conversion error."],["Error","is a","type"],["From","is a","trait"],["Into","is a","trait"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","is a","type"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["Option","has method","clone"],["Option","has method","clone_from"],["Option","has method","cmp"],["Option","has method","default"],["Option","has method","eq"],["Option","has method","fmt"],["Option","has method","ge"],["Option","has method","gt"],["Option","has method","hash"],["Option","has method","hash_slice"],["Option","has method","into_iter"],["Option","has method","le"],["Option","has method","lt"],["Option","has method","max"],["Option","has method","min"],["Option","has method","ne"],["Option","has method","partial_cmp"],["Option","has methods","as_mut"],["Option","has methods","as_pin_mut"],["Option","has methods","as_pin_ref"],["Option","has methods","as_ref"],["Option","has methods","expect"],["Option","has methods","is_none"],["Option","has methods","is_some"],["Option","has methods","map"],["Option","has methods","map_or"],["Option","has methods","map_or_else"],["Option","has methods","ok_or"],["Option","has methods","unwrap"],["Option","has methods","unwrap_or"],["Option","has methods","unwrap_or_else"],["Option","has stability","Stable since Rust version 1.0.0"],["Option","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Option","has trait implementations","Clone"],["Option","has trait implementations","Copy"],["Option","has trait implementations","Debug"],["Option","has trait implementations","Default"],["Option","has trait implementations","Eq"],["Option","has trait implementations","From<&'a Option<T>>"],["Option","has trait implementations","From<&'a mut Option<T>>"],["Option","has trait implementations","From<T>"],["Option","has trait implementations","FromIterator<Option<A>>"],["Option","has trait implementations","Hash"],["Option","has trait implementations","IntoIterator"],["Option","has trait implementations","Ord"],["Option","has trait implementations","PartialEq<Option<T>>"],["Option","has trait implementations","PartialOrd<Option<T>>"],["Option","has trait implementations","Try"],["Option","has variants","None"],["Option","has variants","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq"],["Option","implements","PartialOrd"],["Option","implements","Send"],["Option","implements","Sync"],["Option","is a","enum"],["Owned","is a","type"],["ToOwned","is a","trait"],["TryFrom","is a","trait"],["TryInto","is a","trait"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb"],["and","is a","method"],["and_then","has declaration","pub fn and_then<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result"],["and_then","is a","method"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow","is a","function"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut","is a","function"],["clone","has return type","Option<T>"],["clone_from","has argument","source"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","is a","function"],["cloned","has description","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option."],["cloned","has stability","Stable since Rust version 1.26.0"],["cloned","is a","function"],["cmp","has argument","other"],["cmp","has return type","Ordering"],["data","has type","&[Self]"],["default","has return type","Option<T>"],["deref","has description","Converts from `&Option<T>` to `Option<&T::Target>`."],["deref","is a","function"],["eq","has argument","other"],["eq","has return type","bool"],["f","has type","&mut Formatter"],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, and None if predicate returns false"],["filter","is a","method"],["fmt","has argument","f"],["fmt","has return type","Result<(), Error>"],["from","has description","Performs the conversion."],["from","has return type","T"],["from","has stability","Stable since Rust version 1.12.0"],["from","is a","function"],["from_error","has description","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent."],["from_error","is a","function"],["from_iter","has description","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned."],["from_iter","is a","function"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent."],["from_ok","is a","function"],["ge","has argument","other"],["ge","has return type","bool"],["get_or_insert","has declaration","pub fn get_or_insert(&mut self, v: T) -> &mut T"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value"],["get_or_insert","is a","method"],["get_or_insert_with","has declaration","pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T where F: FnOnce() -> T"],["get_or_insert_with","has description","Inserts a value computed from `f` into the option if it is `None`, then returns a mutable reference to the contained value."],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value"],["get_or_insert_with","has stability","Stable since Rust version 1.20.0"],["get_or_insert_with","is a","function"],["get_or_insert_with","is a","method"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","is a","function"],["gt","has argument","other"],["gt","has return type","bool"],["hash","has argument","self"],["hash","has argument","state"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["into","has description","Performs the conversion."],["into","has return type","U"],["into","is a","function"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","is a","function"],["into_result","has description","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function."],["into_result","is a","function"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Returns an iterator over the possibly contained value"],["iter","is a","method"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value"],["iter_mut","is a","method"],["le","has argument","other"],["le","has return type","bool"],["lt","has argument","other"],["lt","has return type","bool"],["max","has argument","other"],["max","has return type","Self"],["min","has argument","other"],["min","has return type","Self"],["ne","has argument","other"],["ne","has return type","bool"],["ok_or_else","has declaration","pub fn ok_or_else<E, F>(self, err: F) -> Result<T, E> where F: FnOnce() -> E"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())"],["ok_or_else","is a","method"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb"],["or","is a","method"],["or_else","has declaration","pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result"],["or_else","is a","method"],["other","has type","&Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has return type","Option<Ordering>"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a `Some` in its place without deinitializing either one."],["replace","has stability","Stable since Rust version 1.31.0"],["replace","is a","function"],["source","has type","&Self"],["state","has type","&mut __HT"],["take","has description","Takes the value out of the option, leaving a `None` in its place."],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned","is a","function"],["transpose","has description","Transposes an `Option` of a `Result` into a `Result` of an `Option`."],["transpose","is a","function"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","is a","function"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","is a","function"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","is a","function"],["xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None"],["xor","is a","method"]],"add_links":["../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/result/enum.Result.html","../index.html","index.html"],"metrics":{"escapeCount":0,"costTime":176067,"totalUsage":{"prompt_tokens":75519,"completion_tokens":4339,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":24096},{"contextLength":500,"contentLength":39000,"costTime":38141},{"contextLength":500,"contentLength":39000,"costTime":38648},{"contextLength":500,"contentLength":39000,"costTime":43139},{"contextLength":500,"contentLength":22078,"costTime":32043}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:02:19.358Z","examGroup":"split"}}