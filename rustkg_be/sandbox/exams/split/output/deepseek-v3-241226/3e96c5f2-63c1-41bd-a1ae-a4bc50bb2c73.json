{"create_time":"2025-03-22T14:30:58.141Z","id":"3e96c5f2-63c1-41bd-a1ae-a4bc50bb2c73","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has attribute","has declaration","has description","has full name","has method","has return type","has variant","implements","is a","stable since"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has full name","std::borrow::Borrow"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["Clone","has full name","std::clone::Clone"],["Clone","is a","trait"],["Copy","has full name","std::marker::Copy"],["Copy","is a","trait"],["Default","has full name","std::default::Default"],["Default","is a","trait"],["FnOnce","has full name","std::ops::FnOnce"],["FnOnce","is a","trait"],["From","has full name","std::convert::From"],["From","has method","from"],["From","is a","trait"],["FromIterator","has full name","std::iter::FromIterator"],["FromIterator","is a","trait"],["I","has attribute","Iterator"],["I","implements","IntoIterator"],["I","is a","type parameter"],["Into","has full name","std::convert::Into"],["Into","has method","into"],["Into","is a","trait"],["IntoIter","has full name","std::option::IntoIter"],["IntoIter","is a","struct"],["IntoIterator","has full name","std::iter::IntoIterator"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Iter","has full name","std::option::Iter"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","has full name","std::option::IterMut"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["IterMut<'a, T>","has full name","std::option::IterMut"],["IterMut<'a, T>","is a","struct"],["Iterator","has full name","std::iter::Iterator"],["Iterator","is a","trait"],["None","has description","No value"],["None","has full name","std::option::Option::None"],["None","is a","variant"],["NoneError","has full name","std::option::NoneError"],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has full name","std::option::enum.Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Debug"],["Option","implements","Eq"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq"],["Option","implements","PartialOrd"],["Option","implements","Send"],["Option","implements","Sync"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a T>","implements","Clone"],["Option<&'a mut T>","implements","Clone"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&'a mut T>","stable since","1.30.0"],["Option<T>","has full name","std::option::Option"],["Option<T>","implements","Copy"],["Option<T>","implements","Default"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<T>","stable since","1.12.0"],["Owned","has type","T"],["Result","has full name","std::result::Result"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result","is a","enum"],["Sized","has full name","std::marker::Sized"],["Sized","is a","trait"],["Some","has description","Some value T"],["Some","has description","Some(T)"],["Some","has full name","std::option::Option::Some"],["Some","is a","variant"],["Sync","is a","trait"],["T","has attribute","From<U>"],["T","has attribute","Sync"],["T","has attribute","TryFrom<U>"],["T","implements","From"],["T","implements","TryFrom"],["T","implements","TryInto"],["T","is a","type parameter"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","has variant","Owned"],["Try","has full name","std::ops::Try"],["Try","is a","trait"],["Try::Error","has full name","std::ops::Try::Error"],["Try::Error","has type","NoneError"],["Try::Error","is a","type"],["Try::Ok","has full name","std::ops::Try::Ok"],["Try::Ok","has type","T"],["Try::Ok","is a","type"],["Try::from_error","has argument","Try::from_error::NoneError"],["Try::from_error","has full name","std::ops::Try::from_error"],["Try::from_error","has return type","Option<T>"],["Try::from_error","is a","method"],["Try::from_ok","has argument","Try::from_ok::v"],["Try::from_ok","has full name","std::ops::Try::from_ok"],["Try::from_ok","has return type","Option<T>"],["Try::from_ok","is a","method"],["Try::into_result","has full name","std::ops::Try::into_result"],["Try::into_result","has return type","Result<T, NoneError>"],["Try::into_result","is a","method"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryInto","has full name","std::convert::TryInto"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["Write","has full name","std::io::Write"],["Write","is a","trait"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has full name","std::option::Option::and"],["and","is a","function"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has description","Some languages call this operation flatmap."],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","is a","function"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>>"],["as_pin_mut","is a","function"],["as_pin_ref","has declaration","pub fn as_pin_ref(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>>"],["as_pin_ref","is a","function"],["as_ref","has declaration","pub fn as_ref(&self) -> Option<&T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","is a","function"],["as_ref","is a","method"],["borrow","has argument","borrow::self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has description","Performs the conversion."],["borrow","has full name","std::borrow::Borrow::borrow"],["borrow","has return type","&T"],["borrow","is a","function"],["borrow_mut","has argument","borrow_mut::self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has full name","std::borrow::BorrowMut::borrow_mut"],["borrow_mut","has return type","&mut T"],["borrow_mut","is a","function"],["clone","has argument","clone::self"],["clone","has description","Returns a copy of the value."],["clone","has full name","std::clone::trait.Clone::clone"],["clone","has return type","std::option::enum.Option<T>"],["clone","is a","function"],["clone_from","has argument","clone_from::self"],["clone_from","has argument","clone_from::source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","has full name","std::clone::trait.Clone::clone_from"],["clone_from","is a","function"],["clone_into","has argument","clone_into::self"],["clone_into","has argument","clone_into::target"],["clone_into","has attribute","nightly-only experimental API"],["clone_into","has attribute","toowned_clone_into"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has full name","std::borrow::trait.ToOwned::clone_into"],["clone_into","is a","function"],["cloned","has argument","cloned::self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has full name","std::option::Option::cloned"],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cloned","stable since","1.26.0"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has full name","std::cmp::Ord::cmp"],["cmp","has return type","Ordering"],["cmp","is a","function"],["default","has description","Returns None."],["default","has full name","std::default::Default::default"],["default","has return type","Option<T>"],["default","is a","method"],["deref","has attribute","nightly-only experimental API"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has full name","std::option::Option::deref"],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","is a","method"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has full name","std::cmp::PartialEq::eq"],["eq","has return type","bool"],["eq","is a","function"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Panics if the value is a None with a custom panic message provided by msg."],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","is a","function"],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has full name","std::option::Option::filter"],["filter","is a","method"],["filter","stable since","1.27.0"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has full name","std::fmt::Debug::fmt"],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["from","has argument","from::o"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","has return type","Option<&'a T>"],["from","has return type","T"],["from","is a","function"],["from::o","has type","&'a Option<T>"],["from_iter","has argument","from_iter::iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has full name","std::iter::FromIterator::from_iter"],["from_iter","has return type","Option<V>"],["from_iter","is a","function"],["from_iter::iter","has type","I"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has full name","std::cmp::PartialOrd::ge"],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has argument","get_or_insert::self"],["get_or_insert","has argument","get_or_insert::v"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","get_or_insert_with::f"],["get_or_insert_with","has argument","get_or_insert_with::self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has full name","std::option::Option::get_or_insert_with"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has argument","get_type_id::self"],["get_type_id","has attribute","nightly-only experimental API"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has full name","std::any::Any::get_type_id"],["get_type_id","has return type","TypeId"],["get_type_id","is a","function"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has full name","std::cmp::PartialOrd::gt"],["gt","has return type","bool"],["gt","is a","function"],["hash","has argument","hash::self"],["hash","has argument","hash::state"],["hash","has description","Feeds this value into the given Hasher."],["hash","has full name","std::hash::Hash::hash"],["hash","is a","method"],["hash_slice","has argument","hash_slice::data"],["hash_slice","has argument","hash_slice::state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["hash_slice","has full name","std::hash::Hash::hash_slice"],["hash_slice","is a","method"],["hash_slice","stable since","1.3.0"],["impl<'a, T> From<&'a Option<T>> for Option<&'a T>","implements","From"],["impl<'a, T> From<&'a Option<T>> for Option<&'a T>","stable since","1.30.0"],["impl<A, V> FromIterator<Option<A>> for Option<V>","implements","FromIterator"],["into","has argument","into::self"],["into","has description","Performs the conversion."],["into","has full name","std::convert::Into::into"],["into","has return type","U"],["into","is a","function"],["into_iter","has argument","into_iter::self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has description","Which kind of iterator are we turning this into?"],["into_iter","has full name","std::iter::IntoIterator::into_iter"],["into_iter","has full name","std::iter::trait.IntoIterator::into_iter"],["into_iter","has return type","I"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","has return type","std::option::struct.IntoIter<T>"],["into_iter","is a","function"],["into_iter","is a","method"],["is_none","has description","Returns true if the option is a None value."],["is_none","is a","method"],["is_some","has description","Returns true if the option is a Some value."],["is_some","is a","method"],["iter","has declaration","pub fn iter(&self) -> Iter<T>"],["iter","has description","Important traits for Iter<'a, A>"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has full name","std::option::Option::iter"],["iter","is a","function"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has full name","std::option::Option::iter_mut"],["iter_mut","is a","function"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has full name","std::cmp::PartialOrd::le"],["le","has return type","bool"],["le","is a","function"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has full name","std::cmp::PartialOrd::lt"],["lt","has return type","bool"],["lt","is a","function"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has full name","std::option::Option::map"],["map","is a","function"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has full name","std::option::Option::map_or"],["map_or","is a","function"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has description","Sets the process creation flags to be passed to CreateProcess. These will always be ORed with CREATE_UNICODE_ENVIRONMENT."],["map_or_else","has full name","std::option::Option::map_or_else"],["map_or_else","is a","function"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has full name","std::cmp::Ord::max"],["max","has return type","Self"],["max","is a","function"],["max","stable since","1.21.0"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has full name","std::cmp::Ord::min"],["min","has return type","Self"],["min","is a","function"],["min","stable since","1.21.0"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has full name","std::cmp::PartialEq::ne"],["ne","has return type","bool"],["ne","is a","function"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has full name","std::option::Option::or"],["or","is a","method"],["or_else","has argument","or_else::f"],["or_else","has argument","or_else::self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has full name","std::option::Option::or_else"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has full name","std::cmp::trait.PartialOrd::partial_cmp"],["partial_cmp","has return type","std::option::enum.Option<std::cmp::enum.Ordering>"],["partial_cmp","is a","function"],["replace","has argument","replace::self"],["replace","has argument","replace::value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has full name","std::option::Option::replace"],["replace","has return type","Option<T>"],["replace","is a","function"],["replace","is a","method"],["replace","stable since","1.31.0"],["take","has argument","take::self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has full name","std::option::Option::take"],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has argument","to_owned::self"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has full name","std::borrow::trait.ToOwned::to_owned"],["to_owned","has return type","T"],["to_owned","is a","function"],["transpose","has attribute","nightly-only experimental API"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has full name","std::option::Option::transpose"],["transpose","has return type","Result<Option<T>, E>"],["transpose","is a","function"],["transpose","is a","method"],["try_from","has argument","value"],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_into","has argument","try_into::self"],["try_into","has attribute","nightly-only experimental API"],["try_into","has description","Performs the conversion."],["try_into","has full name","std::convert::TryInto::try_into"],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","is a","function"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has description","Panics if the self value equals None."],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has full name","std::option::Option::unwrap_or_default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","method"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has argument","xor::y"],["xor","has attribute","nightly-only experimental API"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has full name","std::option::Option::xor"],["xor","has return type","Option<T>"],["xor","has return type","Option<u32>"],["xor","is a","function"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","../primitive.unit.html","enum.Option.html","https://github.com/rust-lang/rust/issues/41263","https://play.rust-lang.org/","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aassert_eq!(Some(%22car%22).unwrap_or(%22bike%22)%2C%20%22car%22)%3B%0Aassert_eq!(None.unwrap_or(%22bike%22)%2C%20%22bike%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2010%3B%0Aassert_eq!(Some(4).unwrap_or_else(%7C%7C%202%20*%20k)%2C%204)%3B%0Aassert_eq!(None.unwrap_or_else(%7C%7C%202%20*%20k)%2C%2020)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20maybe_some_string%20%3D%20Some(String%3A%3Afrom(%22Hello%2C%20World!%22))%3B%0A%2F%2F%20%60Option%3A%3Amap%60%20takes%20self%20*by%20value*%2C%20consuming%20%60maybe_some_string%60%0Alet%20maybe_some_len%20%3D%20maybe_some_string.map(%7Cs%7C%20s.len())%3B%0A%0Aassert_eq!(maybe_some_len%2C%20Some(13))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22air%22)%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22value%22)%3B%0Aassert_eq!(x.expect(%22the%20world%20is%20ending%22)%2C%20%22value%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%20%2F%2F%20fails%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Ax.expect(%22the%20world%20is%20ending%22)%3B%20%2F%2F%20panics%20with%20%60the%20world%20is%20ending%60%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":536250,"totalUsage":{"prompt_tokens":137782,"completion_tokens":14410,"cached_tokens":0,"reasoning_tokens":0},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":10084},{"contextLength":500,"contentLength":7000,"costTime":11945},{"contextLength":500,"contentLength":7000,"costTime":17650},{"contextLength":500,"contentLength":7000,"costTime":32880},{"contextLength":500,"contentLength":7000,"costTime":30493},{"contextLength":500,"contentLength":7000,"costTime":33147},{"contextLength":500,"contentLength":7000,"costTime":15134},{"contextLength":500,"contentLength":7000,"costTime":9438},{"contextLength":500,"contentLength":7000,"costTime":13578},{"contextLength":500,"contentLength":7000,"costTime":15137},{"contextLength":500,"contentLength":7000,"costTime":32453},{"contextLength":500,"contentLength":7000,"costTime":24496},{"contextLength":500,"contentLength":7000,"costTime":27874},{"contextLength":500,"contentLength":7000,"costTime":16202},{"contextLength":500,"contentLength":7000,"costTime":17753},{"contextLength":500,"contentLength":7000,"costTime":19394},{"contextLength":500,"contentLength":7000,"costTime":22476},{"contextLength":500,"contentLength":7000,"costTime":18750},{"contextLength":500,"contentLength":7000,"costTime":15333},{"contextLength":500,"contentLength":7000,"costTime":22626},{"contextLength":500,"contentLength":7000,"costTime":31437},{"contextLength":500,"contentLength":7000,"costTime":25084},{"contextLength":500,"contentLength":7000,"costTime":19768},{"contextLength":500,"contentLength":7000,"costTime":20218},{"contextLength":500,"contentLength":7000,"costTime":19344},{"contextLength":500,"contentLength":3078,"costTime":13556}]},"model":"deepseek-v3-241226","extraInfo":{"startTime":"2025-03-22T14:22:00.327Z","examGroup":"split"}}