{"create_time":"2025-03-22T15:13:05.795Z","id":"04873ce3-54c0-442c-a135-16346c541ba6","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["contains","experimental since","has argument","has associated type","has declaration","has description","has example","has full name","has method","has return type","has stability","has type","has variant","implements","is a","requires","stable since"],"add_triples":[["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>","stable since","1.4.0"],["&'a mut I","implements","Iterator"],["&'a mut Option<T>","has associated type","IntoIter"],["&'a mut Option<T>","has associated type","Item"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut Option<T>","stable since","1.4.0"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["BorrowMut","has method","borrow_mut"],["Debug","has method","fmt"],["Default","is a","trait"],["Error","has type","NoneError"],["FnOnce","has full name","std::ops::FnOnce"],["FnOnce","is a","trait"],["From","has method","from"],["From<&'a Option<T>>","requires","std::option::Option<&'a T>::from"],["From<&'a mut Option<T>>","requires","std::option::Option<&'a mut T>::from"],["From<T>","requires","std::option::Option<T>::from"],["FromIterator","has method","from_iter"],["H","implements","Hasher"],["I","implements","IntoIterator<Item = Option<A>>"],["IntoIter","has description","An iterator over the value in Some variant of an Option."],["IntoIter","has full name","std::option::IntoIter"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","requires method","into_iter"],["IntoIterator::IntoIter","has type","I"],["IntoIterator::Item","has type","<I as Iterator>::Item"],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Item","has type","T"],["Iter","has description","An iterator over a reference to the Some variant of an Option."],["Iter","has full name","std::option::Iter"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","has description","An iterator over a mutable reference to the Some variant of an Option."],["IterMut","has full name","std::option::IterMut"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["IterMut::Item","has type","&'a mut A"],["None","has description","No value"],["None","is a","variant"],["NoneError","has description","The error type that results from applying the try operator (`?`) to a `None` value."],["NoneError","has type","NoneError"],["NoneError","is a","struct"],["Ok","has type","T"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","deref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option::as_mut","has argument","self"],["Option::as_mut","has description","Converts from Option<T> to Option<&mut T>."],["Option::as_mut","has example","let mut x = Some(2);\nmatch x.as_mut() {\n    Some(v) => *v = 42,\n    None => {},\n}\nassert_eq!(x, Some(42));"],["Option::as_mut","has return type","Option<&mut T>"],["Option::as_mut","is a","method"],["Option::as_pin_mut","has description","Converts from Option<T> to Option<PinMut<'_ T>>."],["Option::as_pin_mut","has return type","Option<PinMut<'a, T>>"],["Option::as_pin_mut","has stability","nightly-only experimental API. (pin #49150)"],["Option::as_pin_mut","is a","method"],["Option::as_ref","has argument","self"],["Option::as_ref","has description","Converts from Option<T> to Option<&T>."],["Option::as_ref","has example","let text: Option<String> = Some(\"Hello, world!\".to_string());\nlet text_length: Option<usize> = text.as_ref().map(|s| s.len());\nprintln!(\"still can print text: {:?}\", text);"],["Option::as_ref","has return type","Option<&T>"],["Option::as_ref","is a","method"],["Option::expect","has argument","msg"],["Option::expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["Option::expect","has example","let x = Some(\"value\");\nassert_eq!(x.expect(\"the world is ending\"), \"value\");\nlet x: Option<&str> = None;\nx.expect(\"the world is ending\");"],["Option::expect","has return type","T"],["Option::expect","is a","method"],["Option::unwrap","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None."],["Option::unwrap","has return type","T"],["Option::unwrap","is a","method"],["Option<&'a T>","has method","cloned"],["Option<&'a T>","has method","std::option::Option<&'a T>::from"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a T>","stable since","1.30.0"],["Option<&'a mut T>","has method","cloned"],["Option<&'a mut T>","has method","std::option::Option<&'a mut T>::from"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&'a mut T>","stable since","1.30.0"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","experimental since","#42327"],["Option<T>","has full name","std::option::Option"],["Option<T>","has method","as_ref"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","deref"],["Option<T>","has method","hash"],["Option<T>","has method","hash_slice"],["Option<T>","has method","is_none"],["Option<T>","has method","is_some"],["Option<T>","has method","std::option::Option<T>::from"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has variant","None"],["Option<T>","has variant","Some"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<T>","stable since","1.12.0"],["Option<V>","implements","FromIterator<Option<A>>"],["Ord","has method","cmp"],["Ord","has method","max"],["Ord","has method","min"],["Ordering","is a","enum"],["Owned","has type","T"],["PartialEq<Option<T>>","has method","eq"],["PartialEq<Option<T>>","has method","ne"],["PartialOrd","has method","ge"],["PartialOrd","has method","gt"],["PartialOrd","has method","le"],["PartialOrd","has method","lt"],["PartialOrd","has method","partial_cmp"],["Result","has variant","Err"],["Result","has variant","Ok"],["Send","is a","trait"],["Some","has description","Some value"],["Some","has description","Some value T"],["Some","is a","variant"],["SomeErr","is a","struct"],["Sync","is a","trait"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","Into"],["T","implements","ToOwned"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["Try","has associated type","Error"],["Try","has associated type","Ok"],["Try","has method","into_result"],["Try","is a","trait"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryFrom::Error","experimental since","#33417"],["TryFrom::Error","has type","!"],["TryInto","has associated type","Error"],["TryInto::Error","experimental since","#33417"],["TryInto::Error","has type","<U as TryFrom<T>>::Error"],["__HT","implements","Hasher"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None);"],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\")); let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and","is a","method"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has return type","Option<U>"],["and_then","is a","method"],["as_ref","has argument","as_ref::self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["as_ref::self","has type","&Self"],["bool","is a","primitive"],["borrow","has argument","&self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has full name","std::borrow::Borrow::borrow"],["borrow","has return type","&T"],["borrow","is a","method"],["borrow_mut","has argument","&mut self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has full name","std::borrow::BorrowMut::borrow_mut"],["borrow_mut","has return type","&mut T"],["borrow_mut","is a","method"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has argument","self"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_into","experimental since","#41263"],["clone_into","has argument","self"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other. Read more"],["cmp","has return type","Ordering"],["cmp","is a","function"],["cmp::other","has type","&Option<T>"],["cmp::self","has type","&Self"],["data","has type","&[Option<T>]"],["def","has type","T"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has type","FnOnce() -> U"],["default","has type","U"],["default","is a","method"],["deref","has argument","&self"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["deref","is a","method"],["eq","has argument","&self"],["eq","has argument","other: &Option<T>"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["err","has type","E"],["err","has type","FnOnce() -> E"],["f","has type","F"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["f","has type","FnOnce(T) -> U"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, and None if predicate returns false."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","Option<T>"],["filter","is a","method"],["filter","stable since","1.27.0"],["fmt","has argument","&self"],["fmt","has argument","f: &mut Formatter"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["from","has argument","t"],["from","has description","Performs the conversion."],["from","has return type","T"],["from_error","experimental since","#42327"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","is a","method"],["from_iter","has argument","iter"],["from_iter","has example","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned. Here is an example which increments every integer in a vector, checking for overflow..."],["from_iter","has return type","Option<V>"],["from_ok","experimental since","#42327"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","is a","method"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator. Read more"],["ge","has return type","bool"],["ge","is a","function"],["ge::other","has type","&Option<T>"],["ge::self","has type","&Self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has declaration","pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","experimental since","#27745"],["get_type_id","has return type","TypeId"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator. Read more"],["gt","has return type","bool"],["gt","is a","function"],["gt::other","has type","&Option<T>"],["gt::self","has type","&Self"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given Hasher."],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["impl<T> IntoIterator for Option<T>","has associated type","IntoIter"],["impl<T> IntoIterator for Option<T>","has associated type","Item"],["into","has argument","self"],["into","has description","Performs the conversion."],["into","has full name","std::convert::Into::into"],["into","has return type","U"],["into","is a","method"],["into_iter","has argument","self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_result","experimental since","#42327"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Option<T>"],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","method"],["is_none","has argument","is_none::self"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_none::self","has type","&Self"],["is_some","has argument","is_some::self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some::self","has type","&Self"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter","has type","I"],["iter","is a","function"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator. Read more"],["le","has return type","bool"],["le","is a","function"],["le::other","has type","&Option<T>"],["le::self","has type","&Self"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator. Read more"],["lt","has return type","bool"],["lt","is a","function"],["lt::other","has type","&Option<T>"],["lt::self","has type","&Self"],["map","has argument","f"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has return type","U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","has description","This method returns the maximum of the two values. Read more"],["max","has return type","Self"],["max","is a","function"],["max","stable since","1.21.0"],["max::other","has type","Self"],["max::self","has type","Self"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","stable since","1.21.0"],["msg","has type","&str"],["ne","has argument","&self"],["ne","has argument","other: &Option<T>"],["ne","has description","This method tests for !="],["ne","has return type","bool"],["o","has type","&'a Option<T>"],["o","has type","&'a mut Option<T>"],["ok_or","has argument","err"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has return type","Result<T, E>"],["ok_or","is a","function"],["ok_or_else","has argument","err"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","is a","function"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2)); let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\")); assert_eq!(None.or_else(vikings), Some(\"vikings\")); assert_eq!(None.or_else(nobody), None);"],["or_else","has return type","Option<T>"],["or_else","is a","method"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists. Read more"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","function"],["partial_cmp::other","has type","&Option<T>"],["partial_cmp::self","has type","&Self"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","value"],["replace","has declaration","pub fn replace(&mut self, value: T) -> Option<T>"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API. (option_replace #51998)"],["self","has type","&Option<T>"],["self","has type","&Self"],["self","has type","&mut Option<T>"],["self","has type","&mut Self"],["self","has type","Option<T>"],["self","has type","Self"],["source","has type","&Option<T>"],["state","has type","&mut H"],["state","has type","&mut __HT"],["std","contains","option"],["std::option","contains","IntoIter"],["std::option","contains","Iter"],["std::option","contains","IterMut"],["std::option","contains","NoneError"],["std::option::Option<&'a T>::from","has argument","o"],["std::option::Option<&'a T>::from","has description","Performs the conversion."],["std::option::Option<&'a T>::from","has return type","Option<&'a T>"],["std::option::Option<&'a T>::from","is a","function"],["std::option::Option<&'a mut T>::from","has argument","o"],["std::option::Option<&'a mut T>::from","has description","Performs the conversion."],["std::option::Option<&'a mut T>::from","has return type","Option<&'a mut T>"],["std::option::Option<&'a mut T>::from","is a","function"],["std::option::Option<T>::from","has argument","val"],["std::option::Option<T>::from","has description","Performs the conversion."],["std::option::Option<T>::from","has return type","Option<T>"],["std::option::Option<T>::from","is a","function"],["t","has type","T"],["take","has declaration","pub fn take(&mut self) -> Option<T>"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["target","has type","&mut T"],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","#![feature(transpose_result)]\n#[derive(Debug, Eq, PartialEq)]\nstruct SomeErr;\nlet x: Result<Option<i32>, SomeErr> = Ok(Some(5));\nlet y: Option<Result<i32, SomeErr>> = Some(Ok(5));\nassert_eq!(x, y.transpose());"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["transpose","is a","method"],["transpose_result","experimental since","#47338"],["try_from","experimental since","#33417"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, TryFrom::Error>"],["try_into","experimental since","#33417"],["try_into","has argument","self"],["try_into","has description","Performs the conversion."],["try_into","has full name","std::convert::TryInto::try_into"],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","method"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly. Panics if the self value equals None."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has example","let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has description","Returns the contained value or a default..."],["unwrap_or_default","has example","Convert a string to an integer, turning poorly-formed strings into 0 (the default value for integers). parse converts a string to any other type that implements FromStr, returning None on error."],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","method"],["unwrap_or_default","requires","Default"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["v","has type","T"],["val","has type","T"],["value","has type","T"],["value","has type","U"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","assert_eq!(x.xor(y), Some(2)); assert_eq!(x.xor(y), Some(2)); assert_eq!(x.xor(y), None); assert_eq!(x.xor(y), None);"],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental API (option_xor #50512)"],["xor","is a","method"]],"add_links":["../../../primitive.u32.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.PinMut.html","../../std/primitive.bool.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.never.html","../primitive.reference.html","../primitive.str.html","https://github.com/rust-lang/rust/issues/27745","https://github.com/rust-lang/rust/issues/42327","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_replace)%5D%0A%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20is_even(n%3A%20%26i32)%20-%3E%20bool%20%7B%0A%20%20%20%20n%20%25%202%20%3D%3D%200%0A%7D%0A%0Aassert_eq!(None.filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(3).filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(4).filter(is_even)%2C%20Some(4))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20sq(x%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20Some(x%20*%20x)%20%7D%0Afn%20nope(_%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20None%20%7D%0A%0Aassert_eq!(Some(2).and_then(sq).and_then(sq)%2C%20Some(16))%3B%0Aassert_eq!(Some(2).and_then(sq).and_then(nope)%2C%20None)%3B%0Aassert_eq!(Some(2).and_then(nope).and_then(sq)%2C%20None)%3B%0Aassert_eq!(None.and_then(sq).and_then(sq)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert_with(%7C%7C%205)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(4)%3B%0Amatch%20x.iter_mut().next()%20%7B%0A%20%20%20%20Some(v)%20%3D%3E%20*v%20%3D%2042%2C%0A%20%20%20%20None%20%3D%3E%20%7B%7D%2C%0A%7D%0Aassert_eq!(x%2C%20Some(42))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter_mut().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26x)%3B%0Aassert_eq!(opt_x%2C%20Some(%2612))%3B%0Alet%20cloned%20%3D%20opt_x.cloned()%3B%0Aassert_eq!(cloned%2C%20Some(12))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20Some(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter().next()%2C%20Some(%264))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter().next()%2C%20None)%3B%0A%7D","index.html","src/core/option.rs.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.Clone.html","trait.Copy.html","trait.Debug.html","trait.Default.html","trait.Eq.html","trait.From.html","trait.FromIterator.html","trait.Hash.html","trait.IntoIterator.html","trait.Ord.html","trait.PartialEq.html","trait.PartialOrd.html","trait.Try.html"],"metrics":{"escapeCount":0,"costTime":4647509,"totalUsage":{"prompt_tokens":137777,"completion_tokens":140889,"cached_tokens":0,"reasoning_tokens":122541},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":139381},{"contextLength":500,"contentLength":7000,"costTime":215103},{"contextLength":500,"contentLength":7000,"costTime":210744},{"contextLength":500,"contentLength":7000,"costTime":257960},{"contextLength":500,"contentLength":7000,"costTime":60365},{"contextLength":500,"contentLength":7000,"costTime":251603},{"contextLength":500,"contentLength":7000,"costTime":185575},{"contextLength":500,"contentLength":7000,"costTime":176951},{"contextLength":500,"contentLength":7000,"costTime":237694},{"contextLength":500,"contentLength":7000,"costTime":154077},{"contextLength":500,"contentLength":7000,"costTime":85152},{"contextLength":500,"contentLength":7000,"costTime":170299},{"contextLength":500,"contentLength":7000,"costTime":260937},{"contextLength":500,"contentLength":7000,"costTime":78857},{"contextLength":500,"contentLength":7000,"costTime":295963},{"contextLength":500,"contentLength":7000,"costTime":273017},{"contextLength":500,"contentLength":7000,"costTime":166504},{"contextLength":500,"contentLength":7000,"costTime":267260},{"contextLength":500,"contentLength":7000,"costTime":52885},{"contextLength":500,"contentLength":7000,"costTime":379350},{"contextLength":500,"contentLength":7000,"costTime":120590},{"contextLength":500,"contentLength":7000,"costTime":187951},{"contextLength":500,"contentLength":7000,"costTime":51461},{"contextLength":500,"contentLength":7000,"costTime":88649},{"contextLength":500,"contentLength":7000,"costTime":138781},{"contextLength":500,"contentLength":1900,"costTime":140400}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:15.169Z","examGroup":"split"}}