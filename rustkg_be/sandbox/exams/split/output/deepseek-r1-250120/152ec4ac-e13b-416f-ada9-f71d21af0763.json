{"create_time":"2025-03-22T14:08:37.667Z","id":"152ec4ac-e13b-416f-ada9-f71d21af0763","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["contains","defined in","has argument","has associated type","has description","has example","has full name","has method","has parameter","has return type","has source code","has stability","has struct","has trait bound","has type","has variant","implements","is a","returns"],"add_triples":[["&'a Option<T>","has method","into_iter"],["&'a mut Option<T>","has method","into_iter"],["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["From","has method","from"],["From<T> for Option<T>","has method","from"],["Into","has method","into"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has full name","std::option::IntoIter"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["Item","has description","The type of the elements being iterated over."],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Item","has type","T"],["Iter","has full name","std::option::Iter"],["IterMut","has full name","std::option::IterMut"],["NoneError","has full name","std::option::NoneError"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<T>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has method","clone"],["Option<T>","has method","deref"],["Option<T>","has method","into_iter"],["Option<T>","implements","From<T>"],["Option<T>","implements","FromIterator<Option<A>>"],["Option<T>","implements","Try"],["ToOwned","has associated type","Owned"],["ToOwned","has method","to_owned"],["Try for Option<T>","has associated type","Error = NoneError"],["Try for Option<T>","has associated type","Ok = T"],["TryFrom","has associated type","Error"],["TryFrom","has stability","nightly-only experimental API (try_from #33417)"],["TryInto","has associated type","Error"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","returns","Option<&mut T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","returns","Option<&T>"],["borrow","has return type","&T"],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has parameter","self"],["clone","has return type","Option<T>"],["clone","is a","method"],["clone_into","has stability","nightly-only experimental API (toowned_clone_into #41263)"],["cloned","has example","opt_x.cloned();"],["cloned","returns","Option<T>"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["default","has type","FnOnce() -> U"],["default","has type","U"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has description","This method tests for self and other values to be equal."],["err","has type","E"],["err","has type","FnOnce() -> E"],["expect","has argument","msg: &str"],["expect","has description","Unwraps an option, yielding the content of a Some."],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> U"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, otherwise None."],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["from","has argument","t"],["from","has return type","Option<T>"],["from","has return type","T"],["get_or_insert","has example","let mut x = None; x.get_or_insert(5);"],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has example","x.get_or_insert_with(|| 5);"],["get_or_insert_with","has parameter","f"],["get_type_id","has return type","TypeId"],["get_type_id","has stability","nightly-only experimental API (get_type_id #27745)"],["impl<'a, T> IntoIterator for &'a Option<T>","implements","IntoIterator"],["impl<'a, T> IntoIterator for &'a Option<T>","stable since","1.4.0"],["impl<'a, T> IntoIterator for &'a Option<T>::IntoIterator","has associated type","IntoIter"],["impl<'a, T> IntoIterator for &'a Option<T>::IntoIterator","has associated type","Item"],["impl<'a, T> IntoIterator for &'a mut Option<T>","implements","IntoIterator"],["impl<'a, T> IntoIterator for &'a mut Option<T>","stable since","1.4.0"],["impl<'a, T> IntoIterator for &'a mut Option<T>::IntoIterator","has associated type","IntoIter"],["impl<'a, T> IntoIterator for &'a mut Option<T>::IntoIterator","has associated type","Item"],["impl<T> Clone for Option<T>","implements","Clone"],["impl<T> Debug for Option<T>","implements","Debug"],["impl<T> Eq for Option<T>","implements","Eq"],["impl<T> IntoIterator for Option<T>","implements","IntoIterator"],["impl<T> IntoIterator for Option<T>::IntoIterator","has associated type","IntoIter"],["impl<T> IntoIterator for Option<T>::IntoIterator","has associated type","Item"],["impl<T> Ord for Option<T>","implements","Ord"],["impl<T> PartialEq<Option<T>> for Option<T>","implements","PartialEq"],["impl<T> PartialOrd<Option<T>> for Option<T>","implements","PartialOrd"],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","is a","method"],["is_none","has description","Returns true if the option is a None value."],["is_none","returns","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","returns","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3);..."],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["ne","has description","This method tests for !=."],["ok_or","has argument","err"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));"],["or","returns","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has parameter","f"],["or_else","returns","Option<T>"],["other","has type","&Option<T>"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has parameter","other"],["partial_cmp","has return type","Option<Ordering>"],["replace","has example","x.replace(5);"],["replace","has parameter","value"],["self","has type","&Option<T>"],["self","has type","Option<T>"],["std::option","contains","IntoIter"],["std::option","contains","Iter"],["std::option","contains","IterMut"],["std::option","contains","NoneError"],["std::option::Option","has full name","std::option::Option"],["std::option::Option","is a","enum"],["t","has type","T"],["take","has example","let mut x = Some(2); let y = x.take();"],["take","returns","Option<T>"],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","https://play.rust-lang.org/?code=..."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["try_from","has argument","value"],["try_from","has return type","Result<T, Error>"],["try_into","has return type","Result<U, Error>"],["try_into","has stability","nightly-only experimental API (try_from #33417)"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap_or","has argument","def: T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","returns","T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["v","has type","T"],["value","has type","T"],["value","has type","U"],["xor","has example","let x = Some(2); assert_eq!(x.xor(y), Some(2));"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"]],"add_links":["../../index.html","../../settings.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.Pin.html","../../std/primitive.bool.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/process/struct.Command.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx","https://play.rust-lang.org/","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.FnOnce.html"],"metrics":{"escapeCount":0,"costTime":754780,"totalUsage":{"prompt_tokens":78577,"completion_tokens":22885,"cached_tokens":0,"reasoning_tokens":17980},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":127081},{"contextLength":500,"contentLength":31000,"costTime":102214},{"contextLength":500,"contentLength":31000,"costTime":100471},{"contextLength":500,"contentLength":31000,"costTime":42587},{"contextLength":500,"contentLength":31000,"costTime":260126},{"contextLength":500,"contentLength":23078,"costTime":122301}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:17.704Z","examGroup":"split"}}