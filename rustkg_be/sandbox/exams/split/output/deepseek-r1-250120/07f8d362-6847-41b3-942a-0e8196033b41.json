{"create_time":"2025-03-22T14:51:06.533Z","id":"07f8d362-6847-41b3-942a-0e8196033b41","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has method","has parameter","has return type","has stability","has type","has variant","implements","is a","requires","returns","stable since"],"add_triples":[["&'a mut I","implements","Iterator"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Into","has method","into"],["IntoIterator for Option<T>","has associated type","IntoIter = IntoIter<T>"],["IntoIterator for Option<T>","has associated type","Item = T"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a T>","has method","cloned"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a mut T>","has method","cloned"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<T>","has associated type","Error"],["Option<T>","has associated type","Ok"],["Option<T>","has method","deref"],["Option<T>","has method","transpose"],["Option<T>","has method","unwrap_or_default"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From"],["Option<T>","implements","From<T>"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<V>","implements","FromIterator"],["Result","is a","enum"],["Result<T, E>","has method","ok"],["Some","has description","Some value T"],["String","is a","struct"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned::Owned","has type","T"],["TryInto","has method","try_into"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2);\nlet y: Option<&str> = None;\nassert_eq!(x.and(y), None);\nlet x: Option<u32> = None;\nlet y = Some(\"foo\");\nassert_eq!(x.and(y), None);\nlet x = Some(2);\nlet y = Some(\"foo\");\nassert_eq!(x.and(y), Some(\"foo\"));\nlet x: Option<u32> = None;\nlet y: Option<&str> = None;\nassert_eq!(x.and(y), None);"],["and","has parameter","optb"],["and","has parameter","self"],["and","has return type","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) }\nfn nope(_: u32) -> Option<u32> { None }\nassert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));\nassert_eq!(Some(2).and_then(sq).and_then(nope), None);\nassert_eq!(Some(2).and_then(nope).and_then(sq), None);\nassert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has parameter","f"],["and_then","has parameter","self"],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has argument","self"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone","is a","method"],["clone_from","has argument","self"],["clone_from","has argument","source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","is a","method"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has argument","self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["def","has type","T"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has type","FnOnce() -> U"],["default","has type","U"],["default","is a","method"],["deref","has argument","self"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&T::Target>"],["deref","has stability","This is a nightly-only experimental API. (inner_deref #50264)"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["err","has type","E"],["err","has type","FnOnce() -> E"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom message."],["expect","has parameter","msg: &str"],["f","has type","F"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> U"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns:\n- Some(t) if predicate returns true (where t is the wrapped value), and\n- None if predicate returns false."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 }\nassert_eq!(None.filter(is_even), None);\nassert_eq!(Some(3).filter(is_even), None);\nassert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has parameter","predicate"],["filter","has parameter","self"],["filter","has return type","Option<T>"],["filter","stable since","1.27.0"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["from","has description","Performs the conversion."],["from","has parameter","o"],["from","has return type","Option<&'a T>"],["from","is a","method"],["from_error","has description","Wrap an error value to construct the composite result."],["from_error","has parameter","NoneError"],["from_error","has return type","Option<T>"],["from_error","is a","method"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) }).collect(); assert!(res == Some(vec![2, 3]));"],["from_iter","has parameter","iter"],["from_iter","has return type","Option<V>"],["from_iter","is a","method"],["from_ok","has description","Wrap an OK value to construct the composite result."],["from_ok","has parameter","v"],["from_ok","has return type","Option<T>"],["from_ok","is a","method"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["into","has argument","into::self"],["into","has description","Performs the conversion."],["into","has return type","U"],["into::self","has type","T"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","IntoIter<T>"],["into_result","has description","Applies the '?' operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","method"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter","has type","I"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has parameter","f"],["map","has return type","Option<U>"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has parameter","default"],["map_or","has parameter","f"],["map_or","has return type","U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has parameter","default"],["map_or_else","has parameter","f"],["map_or_else","has return type","U"],["max","has description","Compares and returns the maximum of two values."],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","stable since","1.21.0"],["ne","has description","This method tests for !=."],["o","has type","&'a Option<T>"],["ok","has return type","Option<T>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has parameter","err"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has parameter","err"],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2);\nlet y = None;\nassert_eq!(x.or(y), Some(2));\nlet x = None;\nlet y = Some(100);\nassert_eq!(x.or(y), Some(100));\nlet x = Some(2);\nlet y = Some(100);\nassert_eq!(x.or(y), Some(2));\nlet x: Option<u32> = None;\nlet y = None;\nassert_eq!(x.or(y), None);"],["or","has parameter","optb"],["or","has parameter","self"],["or","has return type","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None }\nfn vikings() -> Option<&'static str> { Some(\"vikings\") }\nassert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));\nassert_eq!(None.or_else(vikings), Some(\"vikings\"));\nassert_eq!(None.or_else(nobody), None);"],["or_else","has parameter","f"],["or_else","has parameter","self"],["or_else","has return type","Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["predicate","has type","P"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2)); let mut x = None; let old = x.replace(3); assert_eq!(x, Some(3)); assert_eq!(old, None);"],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API. (option_replace #51998)"],["self","has type","&self"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2)); let mut x: Option<u32> = None; let y = x.take(); assert_eq!(x, None); assert_eq!(y, None);"],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["transpose","has argument","self"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["try_into","has argument","try_into::self"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into::self","has type","T"],["unwrap","has description","Moves the value out of the Option<T> if it is Some(v). Panics if None."],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has parameter","def"],["unwrap_or","has return type","T"],["unwrap_or_default","has description","if Some, returns the contained value, otherwise returns the default value for T"],["unwrap_or_default","has return type","T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has parameter","f"],["unwrap_or_else","has return type","T"],["v","has type","T"],["value","has type","T"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","#![feature(option_xor)]\nlet x = Some(2);\nlet y: Option<u32> = None;\nassert_eq!(x.xor(y), Some(2));\nlet x: Option<u32> = None;\nlet y = Some(2);\nassert_eq!(x.xor(y), Some(2));\nlet x = Some(2);\nlet y = Some(2);\nassert_eq!(x.xor(y), None);\nlet x: Option<u32> = None;\nlet y: Option<u32> = None;\nassert_eq!(x.xor(y), None);"],["xor","has parameter","optb"],["xor","has parameter","self"],["xor","has return type","Option<T>"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../clone/trait.Clone.html","../cmp/trait.Eq.html","../cmp/trait.Ord.html","../cmp/trait.PartialEq.html","../cmp/trait.PartialOrd.html","../convert/trait.From.html","../default/trait.Default.html","../fmt/trait.Debug.html","../hash/trait.Hash.html","../iter/trait.FromIterator.html","../ops/trait.Try.html","../pin/struct.PinMut.html","../primitive.bool.html","../primitive.reference.html","../primitive.str.html","../primitive.usize.html","../string/struct.String.html","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/50264","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_replace)%5D%0A%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20old%20%3D%20x.replace(5)%3B%0Aassert_eq!(x%2C%20Some(5))%3B%0Aassert_eq!(old%2C%20Some(2))%3B%0A%0Alet%20mut%20x%20%3D%20None%3B%0Alet%20old%20%3D%20x.replace(3)%3B%0Aassert_eq!(x%2C%20Some(3))%3B%0Aassert_eq!(old%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aassert_eq!(Some(%22car%22).unwrap_or(%22bike%22)%2C%20%22car%22)%3B%0Aassert_eq!(None.unwrap_or(%22bike%22)%2C%20%22bike%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20is_even(n%3A%20%26i32)%20-%3E%20bool%20%7B%0A%20%20%20%20n%20%25%202%20%3D%3D%200%0A%7D%0A%0Aassert_eq!(None.filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(3).filter(is_even)%2C%20None)%3B%0Aassert_eq!(Some(4).filter(is_even)%2C%20Some(4))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20sq(x%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20Some(x%20*%20x)%20%7D%0Afn%20nope(_%3A%20u32)%20-%3E%20Option%3Cu32%3E%20%7B%20None%20%7D%0A%0Aassert_eq!(Some(2).and_then(sq).and_then(sq)%2C%20Some(16))%3B%0Aassert_eq!(Some(2).and_then(sq).and_then(nope)%2C%20None)%3B%0Aassert_eq!(Some(2).and_then(nope).and_then(sq)%2C%20None)%3B%0Aassert_eq!(None.and_then(sq).and_then(sq)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2010%3B%0Aassert_eq!(Some(4).unwrap_or_else(%7C%7C%202%20*%20k)%2C%204)%3B%0Aassert_eq!(None.unwrap_or_else(%7C%7C%202%20*%20k)%2C%2020)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20maybe_some_string%20%3D%20Some(String%3A%3Afrom(%22Hello%2C%20World!%22))%3B%0A%2F%2F%20%60Option%3A%3Amap%60%20takes%20self%20*by%20value*%2C%20consuming%20%60maybe_some_string%60%0Alet%20maybe_some_len%20%3D%20maybe_some_string.map(%7Cs%7C%20s.len())%3B%0A%0Aassert_eq!(maybe_some_len%2C%20Some(13))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert_with(%7C%7C%205)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20Some(2))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20x.take()%3B%0Aassert_eq!(x%2C%20None)%3B%0Aassert_eq!(y%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(4)%3B%0Amatch%20x.iter_mut().next()%20%7B%0A%20%20%20%20Some(v)%20%3D%3E%20*v%20%3D%2042%2C%0A%20%20%20%20None%20%3D%3E%20%7B%7D%2C%0A%7D%0Aassert_eq!(x%2C%20Some(42))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter_mut().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.and(y)%2C%20Some(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.and(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter().next()%2C%20Some(%264))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%20%2F%2F%20fails%0A%7D","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1469836,"totalUsage":{"prompt_tokens":84076,"completion_tokens":45400,"cached_tokens":0,"reasoning_tokens":33233},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":136232},{"contextLength":500,"contentLength":23000,"costTime":114331},{"contextLength":500,"contentLength":23000,"costTime":319668},{"contextLength":500,"contentLength":23000,"costTime":276155},{"contextLength":500,"contentLength":23000,"costTime":155677},{"contextLength":500,"contentLength":23000,"costTime":142007},{"contextLength":500,"contentLength":23000,"costTime":137616},{"contextLength":500,"contentLength":15900,"costTime":188150}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:26:34.315Z","examGroup":"split"}}