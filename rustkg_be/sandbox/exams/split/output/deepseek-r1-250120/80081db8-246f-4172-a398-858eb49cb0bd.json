{"create_time":"2025-03-22T14:42:02.978Z","id":"80081db8-246f-4172-a398-858eb49cb0bd","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has full name","has method","has parameter","has parameter type","has return type","has stability","has type","has variant","implements","is a","related struct","requires method","returns","stable since"],"add_triples":[["Any::get_type_id","has description","Gets the TypeId of self."],["Any::get_type_id","has stability","nightly-only experimental"],["Any::get_type_id","returns","TypeId"],["Borrow::borrow","has description","Immutably borrows from an owned value."],["Borrow::borrow","returns","&T"],["BorrowMut::borrow_mut","has description","Mutably borrows from an owned value."],["BorrowMut::borrow_mut","returns","&mut T"],["D","implements","FnOnce"],["F","implements","FnOnce"],["From::from","has description","Performs the conversion."],["From::from","returns","T"],["I","implements","IntoIterator"],["Into::into","has description","Performs the conversion."],["Into::into","returns","U"],["IntoIter","is a","struct"],["IntoIterator for Option<T>","has associated type","IntoIter = IntoIter<T>"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator::IntoIter","has type","I"],["IntoIterator::Item","has type","<I as Iterator>::Item"],["IntoIterator::into_iter","has description","Creates an iterator from a value."],["IntoIterator::into_iter","returns","I"],["Iter","is a","struct"],["Iter<T>","implements","Iterator"],["IterMut","is a","struct"],["NoneError","is a","struct"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","get_or_insert"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option::and","is a","method"],["Option::and","returns","Option<U>"],["Option::filter","has parameter","predicate: P"],["Option::filter","is a","method"],["Option::iter","is a","method"],["Option::iter","returns","Iter<T>"],["Option::map_or","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["Option::map_or","has parameter","default: D"],["Option::map_or","has parameter","f: F"],["Option::map_or","has parameter","self"],["Option::map_or","has return type","U"],["Option::map_or","is a","method"],["Option::map_or_else","has parameter","default: D"],["Option::map_or_else","has parameter","f: F"],["Option::map_or_else","has parameter","self"],["Option::map_or_else","has return type","U"],["Option::map_or_else","is a","method"],["Option::ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["Option::ok_or","has parameter","err: E"],["Option::ok_or","has parameter","self"],["Option::ok_or","is a","method"],["Option::ok_or","returns","Result<T, E>"],["Option::ok_or_else","has parameter","err: F"],["Option::ok_or_else","has parameter","self"],["Option::ok_or_else","is a","method"],["Option::ok_or_else","returns","Result<T, E>"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has method","deref"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Try"],["Option<V>","implements","FromIterator<Option<A>>"],["P","implements","FnOnce"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","ToOwned"],["T","implements","TryInto"],["ToOwned","has associated type","Owned"],["ToOwned::Owned","has type","T"],["ToOwned::clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["ToOwned::clone_into","has parameter","target: &mut T"],["ToOwned::clone_into","has stability","nightly-only experimental"],["ToOwned::to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["ToOwned::to_owned","returns","T"],["Try for Option<T>","has associated type","Error = NoneError"],["Try for Option<T>","has associated type","Ok = T"],["TryFrom","has associated type","Error"],["TryFrom::Error","has type","<T as TryFrom<U>>::Error"],["TryFrom::try_from","has description","Performs the conversion."],["TryFrom::try_from","has parameter type","U"],["TryFrom::try_from","has parameter","value: U"],["TryFrom::try_from","has stability","nightly-only experimental"],["TryFrom::try_from","returns","Result<T, Error>"],["TryInto","has associated type","Error"],["TryInto::Error","has type","<U as TryFrom<T>>::Error"],["TryInto::try_into","has description","Performs the conversion."],["TryInto::try_into","has stability","nightly-only experimental"],["TryInto::try_into","returns","Result<U, Error>"],["as_mut","returns","Option<&mut T>"],["as_ref","returns","Option<&T>"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","returns","Option<T>"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has parameter","other"],["cmp","has parameter","self"],["cmp","is a","method"],["cmp","returns","Ordering"],["cmp::other","has type","&Option<T>"],["cmp::self","has type","&self"],["default","has description","Returns None."],["default","is a","method"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has parameter","other"],["eq","has parameter","self"],["eq","is a","method"],["eq","returns","bool"],["eq::other","has type","&Option<T>"],["eq::self","has type","&self"],["expect","has parameter","msg"],["f","has type","FnOnce() -> Option<T>"],["fmt","has description","Formats the value using the given formatter."],["fmt","has parameter","f"],["fmt","has parameter","self"],["fmt","is a","method"],["fmt","returns","Result<(), Error>"],["fmt::f","has type","&mut Formatter"],["fmt::self","has type","&self"],["from","has description","Performs the conversion."],["from","stable since","1.12.0"],["from","stable since","1.30.0"],["from_error","is a","method"],["from_error","returns","Option<T>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned..."],["from_iter","is a","method"],["from_ok","is a","method"],["from_ok","returns","Option<T>"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has parameter","v"],["get_or_insert","returns","&mut T"],["get_or_insert","stable since","1.20.0"],["into_result","is a","method"],["into_result","returns","Result<T, NoneError>"],["is_none","returns","bool"],["is_some","returns","bool"],["max","has description","Compares and returns the maximum of two values."],["max","is a","method"],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","is a","method"],["min","stable since","1.21.0"],["msg","has type","&str"],["ne","has description","This method tests for !="],["ne","is a","method"],["ne","returns","bool"],["optb","has type","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has parameter","f"],["or_else","returns","Option<T>"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present"],["replace","has parameter","value"],["replace","has stability","This is a nightly-only experimental API. (option_replace #51998)"],["replace","returns","Option<T>"],["std::option","contains","IntoIter"],["std::option","contains","Iter"],["std::option","contains","IterMut"],["std::option","contains","NoneError"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","assert_eq!(x, y.transpose());"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["v","has type","T"],["value","has type","T"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has parameter","optb"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"],["xor","returns","Option<T>"]],"add_links":["../../../../std/process/struct.Command.html","../../../primitive.u32.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","enum.Option.html","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/50264","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":836726,"totalUsage":{"prompt_tokens":78223,"completion_tokens":25270,"cached_tokens":0,"reasoning_tokens":20539},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":149097},{"contextLength":500,"contentLength":31000,"costTime":94615},{"contextLength":500,"contentLength":31000,"costTime":136278},{"contextLength":500,"contentLength":31000,"costTime":106875},{"contextLength":500,"contentLength":31000,"costTime":177577},{"contextLength":500,"contentLength":21900,"costTime":172284}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:28:05.697Z","examGroup":"split"}}