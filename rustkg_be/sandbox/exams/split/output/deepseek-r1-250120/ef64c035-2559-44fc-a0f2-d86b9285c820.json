{"create_time":"2025-03-22T14:19:10.121Z","id":"ef64c035-2559-44fc-a0f2-d86b9285c820","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["converts from","has associated struct","has associated type","has declaration","has description","has example","has full name","has method","has parameter","has return type","has stability","has trait","has type","has variant","implements","is a","requires"],"add_triples":[["Error","has stability","This is a nightly-only experimental API. (try_from #33417)"],["I","implements","IntoIterator"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["Item","has description","The type of the elements being iterated over."],["Iter","has full name","std::option::Iter"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","has full name","std::option::IterMut"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["Option","has associated struct","IntoIter"],["Option","has associated struct","Iter"],["Option","has associated struct","IterMut"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","is a","enum"],["Option<&'a T>","has method","cloned"],["Option<&'a T>","requires","Clone"],["Option<T>","has method","replace"],["Option<T>","has method","take"],["Option<T>","has method","unwrap_or_default"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Deref"],["Option<T>","implements","Eq"],["Option<T>","implements","From<&'a mut Option<T>>"],["Option<T>","implements","From<T>"],["Option<T>","implements","FromIterator<Option<A>>"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Try"],["Option<T>","requires","Default"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","Into"],["T","implements","ToOwned"],["T","implements","TryInto"],["ToOwned","has associated type","Owned"],["Try for Option<T>","has associated type","Error = NoneError"],["Try for Option<T>","has associated type","Ok = T"],["TryInto","has associated type","Error"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has parameter","optb"],["and","has return type","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has parameter","f"],["and_then","has return type","Option<U>"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_ref","has declaration","pub fn as_ref(&self) -> Option<&T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has declaration","fn borrow(&self) -> &T"],["borrow","has description","Immutably borrows from an owned value."],["borrow_mut","has declaration","fn borrow_mut(&mut self) -> &mut T"],["borrow_mut","has description","Mutably borrows from an owned value."],["clone_into","has declaration","fn clone_into(&self, target: &mut T)"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has return type","Option<T>"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","method"],["deref","has return type","Option<&T::Target>"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["eq","is a","method"],["err","has type","FnOnce() -> E"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has parameter","msg"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, otherwise None."],["filter","has parameter","predicate"],["filter","has return type","Option<T>"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","method"],["from","converts from","&'a mut Option<T>"],["from","converts from","T"],["from","has declaration","fn from(t: T) -> T"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","is a","method"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","method"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_type_id","has declaration","fn get_type_id(&self) -> TypeId"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","method"],["into","has declaration","fn into(self) -> U"],["into","has description","Performs the conversion."],["into_iter","has declaration","fn into_iter(self) -> I"],["into_iter","has description","Creates an iterator from a value."],["is_none","has declaration","pub fn is_none(&self) -> bool"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has declaration","pub fn is_some(&self) -> bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","method"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has parameter","other"],["lt","has parameter","self"],["lt","has return type","bool"],["lt","is a","method"],["max","has return type","Self"],["max","has stability","Stable since Rust version 1.21.0"],["max","is a","method"],["min","has return type","Self"],["min","has stability","Stable since Rust version 1.21.0"],["min","is a","method"],["msg","has type","&str"],["ne","has description","This method tests for !="],["ne","has return type","bool"],["ne","is a","method"],["ok_or_else","has description","Converts an Option into a Result, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has parameter","err"],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<U>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has parameter","other"],["partial_cmp","has parameter","self"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","method"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has parameter","value"],["replace","has return type","Option<T>"],["replace","has stability","This is a nightly-only experimental API. (option_replace #51998)"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","has return type","Option<T>"],["to_owned","has declaration","fn to_owned(&self) -> T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["try_into","has declaration","fn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>"],["try_into","has description","Performs the conversion."],["unwrap_or_default","has return type","T"],["value","has type","T"]],"add_links":["../../../primitive.u32.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/default/trait.Default.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/ops/trait.Deref.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/result/enum.Result.html","../primitive.bool.html","https://github.com/rust-lang/rust/issues/27745","https://github.com/rust-lang/rust/issues/33417","https://github.com/rust-lang/rust/issues/41263","https://play.rust-lang.org/","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.Clone.html","trait.Hash.html","trait.IntoIterator.html"],"metrics":{"escapeCount":0,"costTime":708214,"totalUsage":{"prompt_tokens":75143,"completion_tokens":21484,"cached_tokens":0,"reasoning_tokens":17267},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":144074},{"contextLength":500,"contentLength":39000,"costTime":124049},{"contextLength":500,"contentLength":39000,"costTime":79361},{"contextLength":500,"contentLength":39000,"costTime":95863},{"contextLength":500,"contentLength":20900,"costTime":264867}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:07:21.243Z","examGroup":"split"}}