{"create_time":"2025-03-22T14:12:19.738Z","id":"e0eb00fd-9fb0-4601-aac9-2103c17f5bc8","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has full name","has method","has stability","has type","has variant","implements","is a","is a struct","requires method","returns","stable since"],"add_triples":[["Any","has full name","std::any::Any"],["Any","has method","get_type_id"],["Any","is a","trait"],["Borrow","has full name","std::borrow::Borrow"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has full name","std::borrow::BorrowMut"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Debug","has method","fmt"],["Default","has method","default"],["Error","has type","<U as TryFrom<T>>::Error"],["From","has full name","std::convert::From"],["From","has method","from"],["From","is a","trait"],["From<&'a mut Option<T>>","has method","from"],["From<T>","has method","from"],["FromIterator<Option<A>>","has method","from_iter"],["I","implements","IntoIterator"],["Into","has full name","std::convert::Into"],["Into","has method","into"],["Into","is a","trait"],["IntoIter","has type","I"],["IntoIter","is a struct","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has full name","std::iter::IntoIterator"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Item","has type","<I as Iterator>::Item"],["Iter","is a struct","struct"],["IterMut","is a struct","struct"],["NoneError","is a struct","struct"],["Option","has example","Examples demonstrating is_some usage"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<Result<T, E>>","has method","transpose"],["Option<T> as Try","has associated type","Error = NoneError"],["Option<T> as Try","has associated type","Ok = T"],["Option<T>","has method","deref"],["Option<T>","has method","into_iter"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Deref"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","FromIterator<Option<A>>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Try"],["Option<T>::IntoIter","has associated type","Item=T"],["Ord","has method","cmp"],["Ord","has method","max"],["Ord","has method","min"],["Owned","has type","T"],["PartialEq","has method","eq"],["PartialEq","has method","ne"],["Result<T, E>","implements","Err"],["Result<T, E>","implements","Ok"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","Into"],["T","implements","ToOwned"],["T","implements","TryInto"],["ToOwned","has associated type","Owned"],["ToOwned","has full name","std::borrow::ToOwned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","is a","trait"],["Try","has method","into_result"],["TryFrom","has full name","std::convert::TryFrom"],["TryFrom","has method","try_from"],["TryFrom","is a","trait"],["TryInto","has associated type","Error"],["TryInto","has full name","std::convert::TryInto"],["TryInto","has method","try_into"],["TryInto","is a","trait"],["and","has argument","optb"],["and","has argument","self"],["and","has example","let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\"));"],["and","returns","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has example","Some(2).and_then(sq).and_then(sq) returns Some(16)"],["and_then","returns","Option<U>"],["as_mut","returns","Option<&mut T>"],["as_ref","returns","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has full name","std::borrow::Borrow::borrow"],["borrow","returns","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has full name","std::borrow::BorrowMut::borrow_mut"],["borrow_mut","returns","&mut T"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has full name","std::borrow::ToOwned::clone_into"],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","returns","Option<T>"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","returns","Ordering"],["default","has description","Returns None."],["default","returns","Option<T>"],["deref","has argument","self"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["deref","returns","Option<&T::Target>"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","returns","bool"],["expect","has argument","msg: &str"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","Formatter"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has example","Some(4).filter(is_even) returns Some(4)"],["filter","returns","Option<T>"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","returns","Result<(), Error>"],["from","has argument","o"],["from","has argument","t"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","returns","Option<&'a mut T>"],["from","returns","Option<T>"],["from","returns","T"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","returns","Option<V>"],["get_or_insert","has argument","v"],["get_or_insert","has example","let mut x = None; x.get_or_insert(5);"],["get_or_insert","returns","&mut T"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","implements","FnOnce"],["get_or_insert_with","returns","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has full name","std::any::Any::get_type_id"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["get_type_id","returns","TypeId"],["into","has description","Performs the conversion."],["into","has full name","std::convert::Into::into"],["into","returns","U"],["into_iter","has argument","self"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has full name","std::iter::IntoIterator::into_iter"],["into_iter","returns","I"],["into_iter","returns","IntoIter<T>"],["into_result","has description","Applies the \"?\" operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","returns","Result<T, NoneError>"],["is_none","returns","bool"],["is_some","returns","bool"],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4));"],["iter","returns","Iter<T>"],["iter_mut","has example","let mut x = Some(4); x.iter_mut().next().map(|v| *v = 42);"],["iter_mut","returns","IterMut<T>"],["map","returns","Option<U>"],["map_or","has argument","default"],["map_or","has argument","default: U"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3);"],["map_or","returns","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3);"],["map_or_else","returns","U"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values."],["max","returns","Self"],["max","stable since","1.21.0"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values."],["min","returns","Self"],["min","stable since","1.21.0"],["ne","has description","This method tests for !=."],["ne","returns","bool"],["o","has type","&'a mut Option<T>"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\"));"],["ok_or","returns","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));"],["ok_or_else","returns","Result<T, E>"],["optb","has type","Option<T>"],["or","has argument","optb"],["or","has argument","self"],["or","has example","None.or(Some(100)) returns Some(100)"],["or","returns","Option<T>"],["or_else","has argument","f"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));"],["or_else","returns","Option<T>"],["other","has type","&Option<T>"],["other","has type","Option<T>"],["replace","has argument","value"],["self","has type","&T"],["self","has type","Option<T>"],["t","has type","T"],["take","returns","Option<T>"],["target","has type","&mut T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has full name","std::borrow::ToOwned::to_owned"],["to_owned","returns","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","example code with assert_eq!(x, y.transpose());"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["transpose","returns","Result<Option<T>, E>"],["try_from","has argument","value"],["try_from","has description","Performs the conversion."],["try_from","has full name","std::convert::TryFrom::try_from"],["try_from","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_from","returns","Result<T, <T as TryFrom<U>>::Error>"],["try_into","has description","Performs the conversion."],["try_into","has full name","std::convert::TryInto::try_into"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","returns","Result<U, <U as TryFrom<T>>::Error>"],["unwrap","returns","T"],["unwrap_or","has argument","def: T"],["unwrap_or_default","implements","Default"],["unwrap_or_default","returns","T"],["unwrap_or_else","has argument","f: F"],["v","has type","T"],["val","has type","T"],["value","has type","T"],["value","has type","U"],["xor","has argument","optb"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","returns","Option<T>"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.str.html","../primitive.usize.html","enum.Option.html","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/50264","index.html","src/core/option.rs.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.Clone.html","trait.Deref.html","trait.Hash.html","trait.IntoIterator.html","trait.PartialOrd.html"],"metrics":{"escapeCount":0,"costTime":987848,"totalUsage":{"prompt_tokens":78172,"completion_tokens":30090,"cached_tokens":0,"reasoning_tokens":24363},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":60149},{"contextLength":500,"contentLength":31000,"costTime":78106},{"contextLength":500,"contentLength":31000,"costTime":174132},{"contextLength":500,"contentLength":31000,"costTime":95774},{"contextLength":500,"contentLength":31000,"costTime":218726},{"contextLength":500,"contentLength":21900,"costTime":360961}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:15.954Z","examGroup":"split"}}