{"create_time":"2025-03-22T14:38:08.147Z","id":"c2c592cb-fce7-47d5-b50a-7247b2bd0e60","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["defined in","experimental feature","has argument","has associated type","has declaration","has description","has example","has full name","has method","has return type","has source code","has stability","has trait bound","has type","has variant","implements","is a","requires closure","returns","stable since"],"add_triples":[["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a mut Option<T>","has associated type","IntoIter"],["&'a mut Option<T>","has associated type","Item"],["&'a mut Option<T>","has method","into_iter"],["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Error","has type","!"],["From","has method","from"],["From<T> for Option<T>","stable since","1.12.0"],["FromIterator<Option<A>>","has trait bound","V: FromIterator<A>"],["Into","has method","into"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter<T>","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["Item","has description","The type of the elements being iterated over."],["Iter<'a, T>","is a","struct"],["IterMut<'a, T>","is a","struct"],["None","has description","No value"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or_default"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option::get_or_insert","has argument","&mut self"],["Option::get_or_insert","has argument","v: T"],["Option::get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["Option::get_or_insert","has return type","&mut T"],["Option::or","has argument","optb: Option<T>"],["Option::or","has argument","self"],["Option::or","has description","Returns the option if it contains a value, otherwise returns optb."],["Option::or","has return type","Option<T>"],["Option::or_else","has argument","f: F"],["Option::or_else","has argument","self"],["Option::or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["Option::or_else","has return type","Option<T>"],["Option::or_else","requires closure","FnOnce() -> Option<T>"],["Option::replace","has argument","&mut self"],["Option::replace","has argument","value: T"],["Option::replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present."],["Option::replace","has return type","Option<T>"],["Option::take","has argument","&mut self"],["Option::take","has description","Takes the value out of the option, leaving a None in its place."],["Option::take","has return type","Option<T>"],["Option::xor","experimental feature","option_xor"],["Option::xor","has argument","optb: Option<T>"],["Option::xor","has argument","self"],["Option::xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["Option::xor","has return type","Option<T>"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","IntoIter"],["Option<T>","has associated type","Item"],["Option<T>","has method","into_iter"],["Option<T>","implements","Clone"],["Option<T>","implements","Debug"],["Option<T>","implements","Deref"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Try"],["Some","has description","Some value T"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["Try","associated type","Error = NoneError"],["Try","associated type","Ok = T"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has return type","&T"],["borrow_mut","has return type","&mut T"],["clone","has return type","Option<T>"],["clone_into","experimental feature","#41263"],["default","has type","FnOnce() -> U"],["default","has type","U"],["default","implements","FnOnce"],["deref","experimental feature","inner_deref"],["deref","has description","Converts from &Option<T> to Option<&T::Target> via Deref"],["deref","has return type","Option<&T::Target>"],["deref","is a","method"],["err","has type","E"],["err","has type","FnOnce() -> E"],["err","implements","FnOnce"],["expect","has argument","msg: &str"],["expect","has description","Unwraps an option, yielding the content of a Some."],["f","has type","FnOnce(T) -> U"],["f","implements","FnOnce"],["filter","has argument","predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns the result."],["filter","has return type","Option<T>"],["from","has return type","T"],["get_type_id","experimental feature","#27745"],["get_type_id","has return type","TypeId"],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","has source code","../../src/core/iter/traits.rs.html#259-261"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["ok_or","has argument","err"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["partial_cmp","has return type","Option<Ordering>"],["predicate","has type","FnOnce(&T) -> bool"],["predicate","implements","FnOnce"],["std::option::Option","defined in","../../src/core/option.rs"],["to_owned","has return type","T"],["transpose","experimental feature","transpose_result"],["transpose","has example","Transpose Option<Result> to Result<Option>"],["transpose","has return type","Result<Option<T>, E>"],["try_from","experimental feature","#33417"],["try_from","has return type","Result<T, Error>"],["try_into","experimental feature","#33417"],["try_into","has return type","Result<U, Error>"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","Convert a string to an integer using parse and unwrap_or_default"]],"add_links":["../../settings.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.TryFrom.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/pin/struct.Pin.html","../../std/primitive.never.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","../primitive.u32.html","enum.Option.html","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/50264","index.html","struct.Command.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.FnOnce.html"],"metrics":{"escapeCount":0,"costTime":429511,"totalUsage":{"prompt_tokens":78566,"completion_tokens":12810,"cached_tokens":0,"reasoning_tokens":8419},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":77967},{"contextLength":500,"contentLength":31000,"costTime":139276},{"contextLength":500,"contentLength":31000,"costTime":55829},{"contextLength":500,"contentLength":31000,"costTime":58243},{"contextLength":500,"contentLength":31000,"costTime":39590},{"contextLength":500,"contentLength":23078,"costTime":58606}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:30:58.155Z","examGroup":"split"}}