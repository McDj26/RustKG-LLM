{"create_time":"2025-03-22T14:22:00.316Z","id":"5b61fde3-2724-4801-addc-b9d55780d904","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["defined in","has argument","has associated type","has description","has full name","has method","has parameter","has return type","has stability","has type","has variant","implements","is a","requires","stable since"],"add_triples":[["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>","stable since","1.4.0"],["&'a mut Option<T>","has associated type","IntoIter"],["&'a mut Option<T>","has associated type","Item"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut Option<T>","stable since","1.4.0"],["Any","has method","get_type_id"],["Any","has stability","nightly-only experimental API (get_type_id #27745)"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Error","has type","!"],["Error","has type","<U as TryFrom<T>>::Error"],["From","has method","from"],["Into","has method","into"],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["Item","has description","The type of the elements being iterated over."],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Item","has type","T"],["None","has description","No value"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option::None","is a","variant"],["Option::Some","is a","variant"],["Option<A>","implements","FromIterator"],["Option<Result<T, E>>","has method","transpose"],["Option<T> as Try","has associated type","Error = NoneError"],["Option<T> as Try","has associated type","Ok = T"],["Option<T>","has associated type","IntoIter"],["Option<T>","has associated type","Item"],["Option<T>","has description","Returns the contained value or a default"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","deref"],["Option<T>","has method","into_iter"],["Option<T>","has method","unwrap_or_default"],["Option<T>","implements","Clone"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Try"],["Owned","has type","T"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result<T, E>","has method","ok"],["Some","has description","Some value T"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom","has stability","nightly-only experimental API (try_from #33417)"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","has stability","nightly-only experimental API (try_from #33417)"],["and","has parameter","optb"],["and","has return type","Option<U>"],["and_then","has parameter","f"],["and_then","has return type","Option<U>"],["as_mut","has argument","self"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_pin_ref","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_ref","has argument","self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has description","Immutably borrows from an owned value. Read more"],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value. Read more"],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has description","Performs copy-assignment from source."],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning. Read more"],["clone_into","has stability","nightly-only experimental API (toowned_clone_into #41263)"],["default","has type","D"],["default","has type","U"],["deref","has description","Converts from &Option<T> to Option<&T::Target>."],["deref","has return type","Option<&T::Target>"],["deref","requires","T: Deref"],["err","has type","E"],["err","has type","FnOnce() -> E"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","has return type","T"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["f","has type","FnOnce(T) -> U"],["filter","has parameter","predicate"],["filter","has return type","Option<T>"],["from","has description","Performs the conversion."],["from","has return type","T"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self. Read more"],["get_type_id","has return type","TypeId"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Creates an iterator from a value. Read more"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["is_none","has argument","self"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has argument","self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter","has return type","Iter<T>"],["iter_mut","has return type","IterMut<T>"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)"],["map_or","has parameter","default"],["map_or","has parameter","f"],["map_or","has return type","U"],["map_or_else","has parameter","default"],["map_or_else","has parameter","f"],["map_or_else","has return type","U"],["msg","has type","&str"],["ok","has return type","Option<T>"],["ok_or","has parameter","err"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has parameter","err"],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["parse","has return type","Result<T, E>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present."],["replace","has return type","Option<T>"],["self","has type","&Self"],["self","has type","&mut self"],["self","has type","Option<T>"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning. Read more"],["transpose","has argument","self"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["try_from","has argument","value: U"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, Error>"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, Error>"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged."],["unwrap","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has return type","T"],["unwrap_or_default","requires","T: Default"],["v","has type","T"],["value","has type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental API (option_xor #50512)"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/pin/struct.Pin.html","../../std/primitive.str.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.reference.html","../primitive.usize.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":802019,"totalUsage":{"prompt_tokens":78557,"completion_tokens":24382,"cached_tokens":0,"reasoning_tokens":19358},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":208126},{"contextLength":500,"contentLength":31000,"costTime":61711},{"contextLength":500,"contentLength":31000,"costTime":173738},{"contextLength":500,"contentLength":31000,"costTime":121206},{"contextLength":500,"contentLength":31000,"costTime":107421},{"contextLength":500,"contentLength":23078,"costTime":129817}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:08:37.686Z","examGroup":"split"}}