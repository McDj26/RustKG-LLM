{"create_time":"2025-03-22T14:32:26.119Z","id":"9145d242-c87c-46f3-9d6b-f8555564c22f","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has full name","has method","has return type","has stability","has type","has variant","implements","is a","requires trait","stable since"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Clone","has method","clone"],["Clone","has method","clone_from"],["Default","has method","default"],["From<T>","has method","from"],["Hash","has method","hash"],["Hash","has method","hash_slice"],["I","implements","std::iter::IntoIterator"],["I","requires trait","std::iter::Iterator"],["Into","has method","into"],["IntoIter","has type","IntoIter<T>"],["IntoIter","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["Item","has type","T"],["Iter","is a","struct"],["IterMut","is a","struct"],["None","has description","No value"],["None","is a","variant"],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter_mut"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Default"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd"],["Option","is a","enum"],["Option<&T>","has method","cloned"],["Option<&mut T>","has method","cloned"],["Option<T>","has method","deref"],["Option<T>","has method","iter"],["Option<T>","has method","iter_mut"],["Option<T>","has method","map"],["Option<T>","has method","map_or"],["Option<T>","has method","map_or_else"],["Option<T>","has method","ok_or"],["Option<T>","has method","ok_or_else"],["Option<T>","has method","transpose"],["Option<T>","has method","unwrap"],["Option<T>","has method","unwrap_or"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has method","unwrap_or_else"],["Option<T>","implements","From<T>"],["Option<T>","implements","FromIterator<Option<A>>"],["Option<T>","implements","Try"],["Some","has description","Some value T"],["Some","is a","variant"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","Into<U>"],["T","implements","ToOwned"],["T","implements","TryInto<U>"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned::Owned","has type","T"],["Try","has method","from_error"],["Try","has method","from_ok"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto::Error","has type","<U as TryFrom<T>>::Error"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has return type","Option<U>"],["as_mut","has argument","&mut self"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","function"],["as_ref","has argument","&self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["as_ref","is a","function"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone_from","has description","Performs copy-assignment from `source`."],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","std::cmp::Ordering"],["cmp","is a","function"],["cmp::other","has type","&std::option::Option<T>"],["cmp::self","has type","&std::option::Option<T>"],["def","has type","T"],["default","has description","Returns `None`."],["default","has return type","Option<T>"],["default","has type","D"],["default","has type","U"],["deref","has description","Converts from &Option<T> to Option<&T::Target> via Deref"],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["eq","is a","function"],["err","has type","E"],["err","has type","F"],["expect","has argument","msg: &str"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","has return type","T"],["expect","is a","function"],["f","has type","F"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false."],["filter","has return type","Option<T>"],["filter","has stability","Stable since Rust version 1.27.0"],["fmt","has argument","fmt::f"],["fmt","has argument","fmt::self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","std::result::Result<(), std::fmt::Error>"],["fmt","is a","function"],["fmt::f","has type","&mut std::fmt::Formatter"],["fmt::self","has type","&std::option::Option<T>"],["from","has return type","Option<T>"],["from_error","has description","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability","This is a nightly-only experimental API. (`try_trait` #42327)"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has stability","This is a nightly-only experimental API. (`try_trait` #42327)"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has argument","v: T"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","stable since","1.20.0"],["get_or_insert::v","has type","T"],["get_or_insert_with","has argument","f: F"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_or_insert_with::f","has type","FnOnce() -> T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","function"],["hash","has description","Feeds this value into the given `Hasher`."],["hash_slice","has description","Feeds a slice of this type into the given `Hasher`."],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","I"],["into_iter","is a","function"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","function"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","function"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","is a","function"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","is a","function"],["ne","has description","This method tests for !="],["ne","has return type","bool"],["ne","is a","function"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has argument","partial_cmp::self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","std::option::Option<std::cmp::Ordering>"],["partial_cmp","is a","function"],["partial_cmp::other","has type","&std::option::Option<T>"],["partial_cmp::self","has type","&std::option::Option<T>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","value: T"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","stable since","1.31.0"],["replace::value","has type","T"],["self","has type","&mut self"],["std::cmp::Ord","has method","cmp"],["std::cmp::Ord","has method","max"],["std::cmp::Ord","has method","min"],["std::cmp::PartialEq","has method","eq"],["std::cmp::PartialEq","has method","ne"],["std::cmp::PartialOrd","has method","ge"],["std::cmp::PartialOrd","has method","gt"],["std::cmp::PartialOrd","has method","le"],["std::cmp::PartialOrd","has method","lt"],["std::cmp::PartialOrd","has method","partial_cmp"],["std::fmt::Debug","has method","fmt"],["std::iter::IntoIterator","has method","into_iter"],["std::option::Option<T>","implements","std::cmp::Eq"],["std::option::Option<T>","implements","std::cmp::Ord"],["std::option::Option<T>","implements","std::cmp::PartialEq<std::option::Option<T>>"],["std::option::Option<T>","implements","std::cmp::PartialOrd<std::option::Option<T>>"],["std::option::Option<T>","implements","std::fmt::Debug"],["std::option::Option<T>","implements","std::marker::Send"],["std::option::Option<T>","implements","std::marker::Sync"],["std::option::Option<T>","requires trait","T: std::cmp::Eq"],["std::option::Option<T>","requires trait","T: std::cmp::Ord"],["std::option::Option<T>","requires trait","T: std::cmp::PartialEq<T>"],["std::option::Option<T>","requires trait","T: std::cmp::PartialOrd<T>"],["std::option::Option<T>","requires trait","T: std::fmt::Debug"],["std::option::Option<T>","requires trait","T: std::marker::Send"],["std::option::Option<T>","requires trait","T: std::marker::Sync"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v)."],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly. Panics if the self value equals None."],["unwrap","has return type","T"],["unwrap","is a","function"],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has return type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","Converts a string to an integer...assert_eq!(0, bad_year);"],["unwrap_or_default","has return type","T"],["unwrap_or_default","requires trait","Default"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental API (option_xor #50512)"]],"add_links":["../../../primitive.bool.html","../../../primitive.reference.html","../../index.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/io/trait.Read.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.Pin.html","../../std/primitive.bool.html","../../std/primitive.never.html","../../std/primitive.u32.html","../../std/primitive.unit.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/50264","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1436310,"totalUsage":{"prompt_tokens":84406,"completion_tokens":44436,"cached_tokens":0,"reasoning_tokens":37243},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":92100},{"contextLength":500,"contentLength":23000,"costTime":163469},{"contextLength":500,"contentLength":23000,"costTime":145111},{"contextLength":500,"contentLength":23000,"costTime":151986},{"contextLength":500,"contentLength":23000,"costTime":73681},{"contextLength":500,"contentLength":23000,"costTime":239936},{"contextLength":500,"contentLength":23000,"costTime":375690},{"contextLength":500,"contentLength":17078,"costTime":194337}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:08:29.280Z","examGroup":"split"}}