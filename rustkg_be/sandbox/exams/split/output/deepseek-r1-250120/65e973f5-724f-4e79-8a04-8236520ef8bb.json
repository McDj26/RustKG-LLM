{"create_time":"2025-03-22T14:26:34.297Z","id":"65e973f5-724f-4e79-8a04-8236520ef8bb","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has full name","has method","has return type","has stability","has struct","has trait","has type","has variant","implements","is a","requires method","stable since"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["I","implements","IntoIterator<Item = Option<A>>"],["Into","has method","into"],["IntoIter","has description","An iterator over the value in Some variant of an Option."],["IntoIter","is a","struct"],["Iter","has description","An iterator over a reference to the Some variant of an Option."],["Iter","is a","struct"],["IterMut","has description","An iterator over a mutable reference to the Some variant of an Option."],["IterMut","is a","struct"],["NoneError","has description","The error type from applying the try operator (?) to a None value."],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has struct","IntoIter"],["Option","has struct","Iter"],["Option","has struct","IterMut"],["Option","has struct","NoneError"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From"],["Option","implements","FromIterator"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq"],["Option","implements","PartialOrd"],["Option","implements","Try"],["Option","is a","enum"],["Option<&T>","has method","cloned"],["Option<&mut T>","has method","cloned"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has full name","std::option::Option"],["Option<T>","has method","deref"],["Option<T>","has method","into_iter"],["Option<T>","has method","unwrap_or_default"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<&'a Option<T>>"],["Option<T>","implements","From<&'a mut Option<T>>"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<V>","has method","from_iter"],["Option<V>","implements","FromIterator<Option<A>>"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","ToOwned"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["Try::Error","has type","NoneError"],["Try::Ok","has type","T"],["and","has argument","optb"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","function"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["as_ref","is a","function"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has argument","source: &Self"],["clone_from","has description","Performs copy-assignment from source."],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","is a","function"],["cloned","stable since","1.26.0"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["default","has return type","Option<T>"],["deref","has argument","self"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["deref","is a","function"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom message."],["expect","is a","function"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has argument","predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, None otherwise."],["filter","has return type","Option<T>"],["filter","stable since","1.27.0"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["from","has return type","Option<&'a mut T>"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has return type","IntoIter<T>"],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has argument","&self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter","has type","I"],["iter_mut","has argument","&mut self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["map","has argument","f: F"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["map_or","has argument","default: U"],["map_or","has argument","f: F"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has return type","U"],["map_or_else","has argument","default: D"],["map_or_else","has argument","f: F"],["map_or_else","has argument","self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["max","has description","Compares and returns the maximum of two values."],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","stable since","1.21.0"],["ok_or","has argument","err: E"],["ok_or","has argument","self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err: F"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["parse","has description","Converts a string to any other type that implements FromStr, returning None on error."],["parse","has return type","Result<T, E>"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","nightly-only experimental API"],["replace","is a","function"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["take","is a","function"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["transpose","is a","function"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["unwrap","has description","Moves the value out of the Option<T> if it is Some(v). Panics if the value is None."],["unwrap","is a","function"],["unwrap_or","has argument","def: T"],["unwrap_or","has argument","self"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has return type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["unwrap_or_else","has argument","f: F"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["v","has type","T"],["value","has type","T"],["xor","has argument","optb"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"]],"add_links":["../../../primitive.bool.html","../../../primitive.reference.html","../../../primitive.u32.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","https://play.rust-lang.org/","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aassert_eq!(Some(%22car%22).unwrap_or(%22bike%22)%2C%20%22car%22)%3B%0Aassert_eq!(None.unwrap_or(%22bike%22)%2C%20%22bike%22)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2010%3B%0Aassert_eq!(Some(4).unwrap_or_else(%7C%7C%202%20*%20k)%2C%204)%3B%0Aassert_eq!(None.unwrap_or_else(%7C%7C%202%20*%20k)%2C%2020)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20maybe_some_string%20%3D%20Some(String%3A%3Afrom(%22Hello%2C%20World!%22))%3B%0A%2F%2F%20%60Option%3A%3Amap%60%20takes%20self%20*by%20value*%2C%20consuming%20%60maybe_some_string%60%0Alet%20maybe_some_len%20%3D%20maybe_some_string.map(%7Cs%7C%20s.len())%3B%0A%0Aassert_eq!(maybe_some_len%2C%20Some(13))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(4)%3B%0Amatch%20x.iter_mut().next()%20%7B%0ASome(v)%20%3D%3E%20*v%20%3D%2042%2C%0ANone%20%3D%3E%20%7B%7D%2C%0A%7D%0Aassert_eq!(x%2C%20Some(42))%3B%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter().next()%2C%20Some(%264))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.unwrap()%2C%20%22air%22)%3B%20%2F%2F%20fails%0A%7D","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1223581,"totalUsage":{"prompt_tokens":84048,"completion_tokens":37756,"cached_tokens":0,"reasoning_tokens":30209},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":198153},{"contextLength":500,"contentLength":23000,"costTime":214360},{"contextLength":500,"contentLength":23000,"costTime":161685},{"contextLength":500,"contentLength":23000,"costTime":197616},{"contextLength":500,"contentLength":23000,"costTime":137081},{"contextLength":500,"contentLength":23000,"costTime":52025},{"contextLength":500,"contentLength":23000,"costTime":185818},{"contextLength":500,"contentLength":15900,"costTime":76843}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:06:10.055Z","examGroup":"split"}}