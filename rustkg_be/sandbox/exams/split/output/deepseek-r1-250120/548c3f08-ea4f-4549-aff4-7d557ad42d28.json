{"create_time":"2025-03-22T14:15:43.899Z","id":"548c3f08-ea4f-4549-aff4-7d557ad42d28","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has full name","has method","has return type","has source code","has stability","has stability note","has type","has variant","implements","is a","requires"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["Error","has type","NoneError"],["FnOnce","has full name","std::ops::FnOnce"],["FnOnce","is a","trait"],["FromIterator","requires","from_iter"],["Into","has method","into"],["None","has description","No value"],["Ok","has type","T"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option<&T>","implements","cloned"],["Option<&mut T>","implements","cloned"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","Error"],["Option<T>","has associated type","Ok"],["Option<T>","has method","deref"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Try"],["Option<V>","implements","FromIterator"],["Result","has full name","std::result::Result"],["Result","is a","enum"],["Some","has description","Some value `T`"],["String","has full name","std::string::String"],["String","is a","struct"],["ToOwned","has method","to_owned"],["TryFrom","has associated type","Error"],["and","has argument","optb"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2);\nlet y: Option<&str> = None;\nassert_eq!(x.and(y), None);\nlet x: Option<u32> = None;\nlet y = Some(\"foo\");\nassert_eq!(x.and(y), None);\nlet x = Some(2);\nlet y = Some(\"foo\");\nassert_eq!(x.and(y), Some(\"foo\"));\nlet x: Option<u32> = None;\nlet y: Option<&str> = None;\nassert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) }\nfn nope(_: u32) -> Option<u32> { None }\nassert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));\nassert_eq!(Some(2).and_then(sq).and_then(nope), None);\nassert_eq!(Some(2).and_then(nope).and_then(sq), None);\nassert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from `Option<T>` to `Option<&mut T>`."],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","method"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["as_ref","has return type","Option<&T>"],["as_ref","is a","method"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has description","Performs copy-assignment from source."],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cmp","has description","This method returns an Ordering between self and other."],["def","has type","T"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has type","U"],["deref","has argument","&self"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a `Some`."],["expect","is a","method"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["f","has type","FnOnce(T) -> U"],["filter","has argument","predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns:"],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 }\nassert_eq!(None.filter(is_even), None);\nassert_eq!(Some(3).filter(is_even), None);\nassert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","Option<T>"],["filter","has stability","1.27.0"],["fmt","has description","Formats the value using the given formatter."],["from","has description","Performs the conversion."],["from_error","is a","method"],["from_iter","has argument","iter"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["from_iter","is a","method"],["from_ok","is a","method"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","has stability","Stable since Rust version 1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","has stability","Stable since Rust version 1.20.0"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["into","has description","Performs the conversion."],["into","has return type","U"],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","method"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_none","has return type","bool"],["is_none","is a","method"],["is_some","has description","Returns `true` if the option is a `Some` value."],["is_some","has return type","bool"],["is_some","is a","method"],["iter","has type","I"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["map","has argument","f"],["map","has argument","self"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["map","is a","function"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has declaration","pub fn map_or<U, F>(self, default: U, f: F) -> U where F: FnOnce(T) -> U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has return type","U"],["map_or","is a","function"],["max","has description","Compares and returns the maximum of two values."],["min","has description","Compares and returns the minimum of two values."],["msg","has type","&str"],["ne","has description","This method tests for !=."],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2);\nlet y = None;\nassert_eq!(x.or(y), Some(2));\nlet x = None;\nlet y = Some(100);\nassert_eq!(x.or(y), Some(100));\nlet x = Some(2);\nlet y = Some(100);\nassert_eq!(x.or(y), Some(2));\nlet x: Option<u32> = None;\nlet y = None;\nassert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or_else","has argument","f"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None }\nfn vikings() -> Option<&'static str> { Some(\"vikings\") }\nassert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));\nassert_eq!(None.or_else(vikings), Some(\"vikings\"));\nassert_eq!(None.or_else(nobody), None);"],["or_else","has return type","Option<T>"],["parse","has description","converts a string to any other type that implements FromStr, returning None on error."],["parse","requires","FromStr"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","nightly-only experimental API"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has argument","self"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into","is a","method"],["unwrap","has description","Moves the value `v` out of the `Option<T>` if it is `Some(v)`."],["unwrap","is a","method"],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has return type","T"],["unwrap_or","is a","function"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["unwrap_or_else","is a","function"],["usize","is a","primitive type"],["v","has type","T"],["value","has type","T"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","#![feature(option_xor)]\nlet x = Some(2);\nlet y: Option<u32> = None;\nassert_eq!(x.xor(y), Some(2));\nlet x: Option<u32> = None;\nlet y = Some(2);\nassert_eq!(x.xor(y), Some(2));\nlet x = Some(2);\nlet y = Some(2);\nassert_eq!(x.xor(y), None);\nlet x: Option<u32> = None;\nlet y: Option<u32> = None;\nassert_eq!(x.xor(y), None);"],["xor","has stability","This is a nightly-only experimental API. (option_xor #50512)"]],"add_links":["../../../../std/process/struct.Command.html","../../../primitive.u32.html","../../settings.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../index.html","fn.alloc.html","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/50264","https://play.rust-lang.org/","index.html","src/alloc/borrow.rs.html","src/core/any.rs.html","src/core/borrow.rs.html","src/core/convert.rs.html","struct.Command.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.Clone.html","trait.Default.html","trait.ExitStatusExt.html","trait.FnOnce.html","trait.Iterator.html","trait.Read.html","trait.Write.html"],"metrics":{"escapeCount":0,"costTime":1205291,"totalUsage":{"prompt_tokens":84052,"completion_tokens":36593,"cached_tokens":0,"reasoning_tokens":30567},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":90209},{"contextLength":500,"contentLength":23000,"costTime":203402},{"contextLength":500,"contentLength":23000,"costTime":255360},{"contextLength":500,"contentLength":23000,"costTime":94331},{"contextLength":500,"contentLength":23000,"costTime":221089},{"contextLength":500,"contentLength":23000,"costTime":78640},{"contextLength":500,"contentLength":23000,"costTime":202489},{"contextLength":500,"contentLength":15900,"costTime":59771}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:15.665Z","examGroup":"split"}}