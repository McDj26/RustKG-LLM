{"create_time":"2025-03-22T14:08:29.259Z","id":"967e1221-83cf-49b0-ab25-bcdf7baa994e","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has docblock","has example","has method","has return type","has stability","has type","has variant","implements","is a","is supported on","requires trait","transposes"],"add_triples":[["Error","has type","<U as TryFrom<T>>::Error"],["I","implements","IntoIterator"],["IntoIter","has type","I"],["IntoIter","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["Item","has type","<I as Iterator>::Item"],["Iter","implements","Iterator"],["Iter","is a","struct"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["None","has docblock","No value"],["None","is a","variant"],["NoneError","is a","struct"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option<&'a T>","has method","cloned"],["Option<&'a T>","has method","from"],["Option<&'a T>","implements","From"],["Option<&'a mut T>","has method","cloned"],["Option<&'a mut T>","has method","from"],["Option<&'a mut T>","implements","From"],["Option<Result<T, E>>","transposes","Result<Option<T>, E>"],["Option<T>","has associated type","Error=NoneError"],["Option<T>","has associated type","Ok=T"],["Option<T>","has declaration","pub enum Option<T> { None, Some(T), }"],["Option<T>","has docblock","The Option type. See the module level documentation for more."],["Option<T>","has method","as_mut"],["Option<T>","has method","as_ref"],["Option<T>","has method","cmp"],["Option<T>","has method","default"],["Option<T>","has method","eq"],["Option<T>","has method","expect"],["Option<T>","has method","fmt"],["Option<T>","has method","from"],["Option<T>","has method","from_error"],["Option<T>","has method","from_ok"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","into_result"],["Option<T>","has method","is_none"],["Option<T>","has method","is_some"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","map"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","ne"],["Option<T>","has method","partial_cmp"],["Option<T>","has method","replace"],["Option<T>","has method","take"],["Option<T>","has method","unwrap"],["Option<T>","has method","unwrap_or"],["Option<T>","has variant","None"],["Option<T>","has variant","Some"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Deref"],["Option<T>","implements","Eq"],["Option<T>","implements","From"],["Option<T>","implements","FromIterator"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<V>","has method","from_iter"],["Option<V>","implements","FromIterator"],["Owned","has type","T"],["Some","has docblock","Some value T"],["Some","is a","variant"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","Into<U>"],["T","implements","ToOwned"],["T","implements","TryInto<U>"],["ToOwned","has associated type","Owned"],["TryInto<U>","has associated type","Error"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","method"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["as_ref","is a","method"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone_into","has description","Uses borrowed data to replace owned data."],["clone_into","has stability","This is a nightly-only experimental API. (#41263)"],["cloned","has return type","Option<T>"],["cloned","requires trait","Clone"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other. Read more"],["cmp","has return type","Ordering"],["cmp","is a","function"],["def","has type","T"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","function"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==. Read more"],["eq","has return type","bool"],["eq","is a","function"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom message."],["expect","is a","method"],["f","has type","&mut Formatter"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, otherwise None."],["filter","has return type","Option<T>"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter. Read more"],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["from","has argument","o"],["from","has argument","t: T"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","is a","function"],["from_error","has argument","_"],["from_error","has description","Wrap an error value to construct the composite result. ..."],["from_error","has return type","Option<T>"],["from_error","is a","function"],["from_iter","has argument","iter"],["from_iter","has example","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. ..."],["from_iter","has return type","Option<V>"],["from_iter","is a","function"],["from_ok","has argument","v"],["from_ok","has description","Wrap an OK value to construct the composite result. ..."],["from_ok","has return type","Option<T>"],["from_ok","is a","function"],["ge","has argument","other"],["ge","has argument","self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator. Read more"],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (#27745)"],["gt","has argument","other"],["gt","has argument","self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator. Read more"],["gt","has return type","bool"],["gt","is a","function"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","I"],["into_result","has description","Applies the ? operator. ..."],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","function"],["is_none","has description","Returns true if the option is a None value."],["is_none","is a","method"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some","is a","method"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4));"],["iter","has example","let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter","has type","impl Iterator<Item = Option<A>>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["le","has argument","other"],["le","has argument","self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator. Read more"],["le","has return type","bool"],["le","is a","function"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator. Read more"],["lt","has return type","bool"],["lt","is a","function"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","is a","method"],["max","has argument","other"],["max","has argument","self"],["max","has description","Compares and returns the maximum of two values. Read more"],["max","has return type","Option<T>"],["max","is a","function"],["min","has argument","other"],["min","has argument","self"],["min","has description","Compares and returns the minimum of two values. Read more"],["min","has return type","Option<T>"],["min","is a","function"],["msg","has type","&str"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","function"],["o","has type","&'a Option<T>"],["o","has type","&'a mut Option<T>"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));"],["ok_or_else","has example","let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has return type","Result<T, E>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has return type","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["other","has type","&Option<T>"],["other","has type","Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists. Read more"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","function"],["replace","has argument","value"],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5));"],["replace","has return type","Option<T>"],["replace","has stability","nightly-only experimental API (option_replace #51998)"],["self","has type","&Option<T>"],["self","has type","&mut Option<T>"],["self","has type","Option<T>"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data."],["to_owned","has return type","T"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["try_into","has stability","This is a nightly-only experimental API. (#33417)"],["unwrap","has description","Moves the value out of the Option<T> if it is Some(v). Panics if None."],["unwrap","is a","method"],["unwrap_or","has argument","def"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","is a","method"],["unwrap_or_default","has return type","T"],["unwrap_or_default","requires trait","Default"],["v","has type","T"],["val","has type","T"],["value","has type","T"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Sized.html","../../std/ops/trait.Deref.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.PinMut.html","../../std/primitive.reference.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.str.html","enum.Option.html","https://github.com/rust-lang/rust/issues/50264","https://github.com/rust-lang/rust/issues/51998","https://play.rust-lang.org/","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":760093,"totalUsage":{"prompt_tokens":75156,"completion_tokens":22972,"cached_tokens":0,"reasoning_tokens":17248},"chunkLength":5,"chunksInfo":[{"contextLength":0,"contentLength":39000,"costTime":117290},{"contextLength":500,"contentLength":39000,"costTime":97687},{"contextLength":500,"contentLength":39000,"costTime":78808},{"contextLength":500,"contentLength":39000,"costTime":275797},{"contextLength":500,"contentLength":20900,"costTime":190511}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:16.280Z","examGroup":"split"}}