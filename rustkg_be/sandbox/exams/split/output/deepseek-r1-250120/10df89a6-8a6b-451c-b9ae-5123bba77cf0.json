{"create_time":"2025-03-22T14:25:43.010Z","id":"10df89a6-8a6b-451c-b9ae-5123bba77cf0","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["contains","has argument","has associated type","has declaration","has description","has example","has full name","has method","has parameter constraint","has return type","has stability","has trait implementation","has type","has variant","implements","is a","requires method","stable since"],"add_triples":[["&'a Option<T>","has associated type","IntoIter = Iter<'a, T>"],["&'a Option<T>","has associated type","Item = &'a T"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a mut Option<T>","has associated type","IntoIter = IterMut<'a, T>"],["&'a mut Option<T>","has associated type","Item = &'a mut T"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["Any","has method","get_type_id"],["Any","has parameter constraint","T: 'static + ?Sized"],["Any","is a","trait"],["Borrow","has method","borrow"],["Borrow","is a","trait"],["BorrowMut","has method","borrow_mut"],["BorrowMut","is a","trait"],["Clone for Option<T>","has parameter constraint","T: Clone"],["Debug for Option<T>","has parameter constraint","T: Debug"],["Eq for Option<T>","has parameter constraint","T: Eq"],["Error","has type","!"],["From<&'a Option<T>>","stable since","1.30.0"],["Hash","has full name","std::hash::Hash"],["Hash","is a","trait"],["Hasher","has full name","std::hash::Hasher"],["Hasher","is a","trait"],["I","implements","IntoIterator"],["IntoIter","has description","An iterator over the value in [`Some`] variant of an [`Option`]."],["IntoIter","has full name","std::option::IntoIter"],["IntoIter","has type","I"],["IntoIter","is a","struct"],["IntoIter<T>","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has full name","std::iter::IntoIterator"],["IntoIterator","is a","trait"],["Item","has type","<I as Iterator>::Item"],["Iter","has description","An iterator over a reference to the [`Some`] variant of an [`Option`]."],["Iter","has full name","std::option::Iter"],["Iter","is a","struct"],["Iter<'a, T>","is a","struct"],["IterMut","has description","An iterator over a mutable reference to the [`Some`] variant of an [`Option`]."],["IterMut","has full name","std::option::IterMut"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["IterMut<'a, T>","is a","struct"],["Iterator","is a","trait"],["None","has description","No value"],["NoneError","has description","The error type that results from applying the try operator (`?`) to a `None` value."],["NoneError","has full name","std::option::NoneError"],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&T>","has method","cloned"],["Option<&T>","requires trait","Clone"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","IntoIter = IntoIter<T>"],["Option<T>","has associated type","Item = T"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","cloned"],["Option<T>","has method","cmp"],["Option<T>","has method","deref"],["Option<T>","has method","fmt"],["Option<T>","has method","ge"],["Option<T>","has method","gt"],["Option<T>","has method","hash"],["Option<T>","has method","hash_slice"],["Option<T>","has method","into_iter"],["Option<T>","has method","le"],["Option<T>","has method","lt"],["Option<T>","has method","max"],["Option<T>","has method","min"],["Option<T>","has method","partial_cmp"],["Option<T>","has method","unwrap_or_default"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<V>","implements","FromIterator<Option<A>>"],["Ord for Option<T>","has parameter constraint","T: Ord"],["PartialEq<Option<T>>","has method","eq"],["PartialEq<Option<T>>","has method","ne"],["PartialOrd for Option<T>","has parameter constraint","T: PartialOrd<T>"],["Some","has description","Some value T"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","ToOwned"],["ToOwned","has associated type","Owned = T"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["ToOwned","has parameter constraint","T: Clone"],["ToOwned","is a","trait"],["Try","has associated type","Error = NoneError"],["Try","has associated type","Ok = T"],["Try","has stability","nightly-only experimental API"],["TryFrom","has associated type","Error"],["and","has argument","optb"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has return type","Option<U>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>."],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_mut","has stability","nightly-only experimental API (pin #49150)"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>."],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_pin_ref","has stability","nightly-only experimental API (pin #49150)"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has argument","self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has argument","self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has argument","source: &Self"],["clone_from","has description","Performs copy-assignment from source."],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (#41263)"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x);...assert_eq!(cloned, Some(12));"],["cloned","has example","let x = 12; let opt_x = Some(&x); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has description","Returns ordering between self and other"],["cmp","has return type","Ordering"],["data","has type","&[Self]"],["def","has type","T"],["default","has return type","Option<T>"],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["eq","is a","method"],["expect","has argument","msg"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\");"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["f","has type","FnOnce(T) -> U"],["filter","has argument","predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns Some(t) if predicate returns true, otherwise None."],["filter","has return type","Option<T>"],["fmt","has description","Formats the value using formatter"],["fmt","has return type","Result<(), Error>"],["from","has argument","o: &'a Option<T>"],["from","has description","Performs the conversion."],["from","has return type","Option<&'a T>"],["from","is a","function"],["from_error","has return type","Option<T>"],["from_iter","has argument","iter: I"],["from_iter","has description","Takes each element in the Iterator..."],["from_iter","has parameter constraint","I: IntoIterator<Item = Option<A>>"],["from_iter","has return type","Option<V>"],["from_iter","is a","function"],["from_ok","has return type","Option<T>"],["ge","has description","Tests greater than or equal operator"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has full name","std::option::Option::get_or_insert"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert","stable since","1.20.0"],["get_or_insert::v","has type","T"],["get_or_insert_with","has argument","get_or_insert_with::f"],["get_or_insert_with","has argument","get_or_insert_with::self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has parameter constraint","FnOnce() -> T"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_or_insert_with::f","has type","F"],["get_or_insert_with::self","has type","&mut Self"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (#27745)"],["gt","has description","Tests greater than operator"],["hash","has argument","state"],["hash","has description","Feeds this value into the given Hasher."],["hash","has parameter constraint","__HT: Hasher"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["hash_slice","has parameter constraint","H: Hasher"],["into_iter","has example","Returns a consuming iterator over the possibly contained value. Examples include collecting into a Vec."],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter","has description","Returns an iterator over the possibly contained value"],["iter","has return type","Iter<T>"],["iter","is a","function"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["le","has description","Tests less than or equal operator"],["lt","has description","Tests less than operator"],["lt","has return type","bool"],["map","has argument","f"],["map","has argument","map::f"],["map","has argument","map::self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); ..."],["map","has return type","Option<U>"],["map","is a","function"],["map::f","has type","FnOnce(T) -> U"],["map::self","has type","Self"],["map_or","has argument","map_or::default"],["map_or","has argument","map_or::f"],["map_or","has argument","map_or::self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)"],["map_or","has return type","U"],["map_or","is a","function"],["map_or::default","has type","U"],["map_or::f","has type","FnOnce(T) -> U"],["map_or::self","has type","Self"],["map_or_else","has argument","map_or_else::default"],["map_or_else","has argument","map_or_else::f"],["map_or_else","has argument","map_or_else::self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)"],["map_or_else","has return type","U"],["map_or_else","is a","function"],["map_or_else::default","has type","FnOnce() -> U"],["map_or_else::f","has type","FnOnce(T) -> U"],["map_or_else::self","has type","Self"],["max","has description","Compares and returns maximum value"],["max","has return type","Self"],["min","has description","Compares and returns minimum value"],["msg","has type","&str"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !="],["ne","has return type","bool"],["ne","is a","method"],["ok_or","has argument","ok_or::err"],["ok_or","has argument","ok_or::self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)"],["ok_or","has return type","Result<T, E>"],["ok_or","is a","function"],["ok_or::err","has type","E"],["ok_or::self","has type","Self"],["ok_or_else","has argument","ok_or_else::err"],["ok_or_else","has argument","ok_or_else::self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())"],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","is a","function"],["ok_or_else::err","has type","FnOnce() -> E"],["ok_or_else::self","has type","Self"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2)); let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None);"],["or","has full name","std::option::Option::or"],["or","has return type","Option<T>"],["or","is a","function"],["or::optb","has type","Option<T>"],["or::self","has type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None } fn vikings() -> Option<&'static str> { Some(\"vikings\") } assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\")); assert_eq!(None.or_else(vikings), Some(\"vikings\")); assert_eq!(None.or_else(nobody), None);"],["or_else","has full name","std::option::Option::or_else"],["or_else","has parameter constraint","F: FnOnce() -> Option<T>"],["or_else","has return type","Option<T>"],["or_else","is a","function"],["or_else::f","has type","FnOnce() -> Option<T>"],["or_else::self","has type","Option<T>"],["other","has type","&Option<T>"],["partial_cmp","has description","Returns ordering between self and other values if exists"],["partial_cmp","has return type","Option<Ordering>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","replace::value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2));"],["replace","has return type","Option<T>"],["replace","stable since","1.31.0"],["replace::value","has type","T"],["self","has type","&Option<T>"],["state","has type","&mut H"],["state","has type","&mut __HT"],["std::option","contains","IntoIter"],["std::option","contains","Iter"],["std::option","contains","IterMut"],["std::option","contains","NoneError"],["std::option","contains","Option"],["take","has argument","take::self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","has return type","Option<T>"],["take::self","has type","&mut Self"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["transpose","has description","Transposes an Option of a Result into a Result of an Option"],["transpose","has example","let x: Result<Option<i32>, SomeErr> = Ok(Some(5));...assert_eq!(x, y.transpose());"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap_or","has argument","def"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated."],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","let good_year = good_year_from_input.parse().ok().unwrap_or_default();"],["unwrap_or_default","has parameter constraint","T: Default"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2)); let x: Option<u32> = None; let y = Some(2); assert_eq!(x.xor(y), Some(2)); let x = Some(2); let y = Some(2); assert_eq!(x.xor(y), None); let x: Option<u32> = None; let y: Option<u32> = None; assert_eq!(x.xor(y), None);"],["xor","has full name","std::option::Option::xor"],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental API (option_xor #50512)"],["xor","is a","function"],["xor::optb","has type","Option<T>"],["xor::self","has type","Option<T>"]],"add_links":["../../../../std/process/struct.Command.html","../../settings.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/hash/mod.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Sized.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.Pin.html","../../std/primitive.bool.html","../../std/primitive.reference.html","../../std/primitive.u32.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","../primitive.str.html","https://play.rust-lang.org/","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1781391,"totalUsage":{"prompt_tokens":96640,"completion_tokens":54840,"cached_tokens":0,"reasoning_tokens":45498},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":220627},{"contextLength":500,"contentLength":15000,"costTime":207540},{"contextLength":500,"contentLength":15000,"costTime":173290},{"contextLength":500,"contentLength":15000,"costTime":56146},{"contextLength":500,"contentLength":15000,"costTime":181129},{"contextLength":500,"contentLength":15000,"costTime":139262},{"contextLength":500,"contentLength":15000,"costTime":67462},{"contextLength":500,"contentLength":15000,"costTime":140851},{"contextLength":500,"contentLength":15000,"costTime":241057},{"contextLength":500,"contentLength":15000,"costTime":48759},{"contextLength":500,"contentLength":15000,"costTime":149740},{"contextLength":500,"contentLength":13078,"costTime":155528}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:16.976Z","examGroup":"split"}}