{"create_time":"2025-03-22T15:03:18.582Z","id":"eeba7fa0-4cb7-48cb-92e5-972827d0753e","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has constraint","has declaration","has description","has example","has full name","has method","has module","has return type","has source","has stability","has type","has variant","implements","is a","requires method","stable since"],"add_triples":[["&'a Option<T>","implements","IntoIterator"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Clone for Option<T>","has method","clone"],["Default","requires method","default"],["Error","has type","!"],["F","has constraint","FnOnce() -> T"],["FnOnce","has full name","std::ops::FnOnce"],["FnOnce","is a","trait"],["Hash for Option<T>","has method","hash"],["I","implements","IntoIterator"],["IntoIter","has description","An iterator over the value in Some variant of an Option."],["IntoIter","has description","Which kind of iterator are we turning this into?"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","struct"],["IntoIterator for Option<T>","has type","IntoIter<T>"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["Item","has description","The type of the elements being iterated over."],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Iter","has description","An iterator over a reference to the Some variant of an Option."],["Iter","has full name","std::option::Iter"],["Iter","is a","struct"],["IterMut","has description","An iterator over a mutable reference to the Some variant of an Option."],["IterMut","has full name","std::option::IterMut"],["IterMut","is a","struct"],["None","has description","No value"],["None","is a","variant"],["NoneError","has description","The error type that results from applying the try operator (?)"],["NoneError","is a","struct"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option::get_or_insert","has argument","self"],["Option::get_or_insert","has argument","v"],["Option::get_or_insert","has declaration","pub fn get_or_insert(&mut self, v: T) -> &mut T"],["Option::get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["Option::get_or_insert","has return type","&mut T"],["Option::get_or_insert::v","has type","T"],["Option::get_or_insert_with","has argument","f"],["Option::get_or_insert_with","has argument","self"],["Option::get_or_insert_with","has declaration","pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T where F: FnOnce() -> T"],["Option::get_or_insert_with","has return type","&mut T"],["Option::get_or_insert_with::f","has constraint","FnOnce() -> T"],["Option::or","has argument","optb"],["Option::or","has argument","self"],["Option::or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["Option::or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));"],["Option::or","has return type","Option<T>"],["Option::or::optb","has type","Option<T>"],["Option::or::self","has type","Option<T>"],["Option::or_else","has argument","f"],["Option::or_else","has argument","self"],["Option::or_else","has declaration","pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"],["Option::or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["Option::or_else","has return type","Option<T>"],["Option::or_else::f","has constraint","FnOnce() -> Option<T>"],["Option::xor","has argument","optb"],["Option::xor","has argument","self"],["Option::xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["Option::xor","has return type","Option<T>"],["Option::xor","has stability","This is a nightly-only experimental API. (#50512)"],["Option::xor::optb","has type","Option<T>"],["Option::xor::self","has type","Option<T>"],["Option<&'a T>","has method","cloned"],["Option<&'a T>","has method","from"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a T>","stable since","1.30.0"],["Option<&'a mut T>","has method","cloned"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","Error=NoneError"],["Option<T>","has associated type","Ok=T"],["Option<T>","has constraint","T: Copy"],["Option<T>","has constraint","T: Debug"],["Option<T>","has constraint","T: Default"],["Option<T>","has constraint","T: Deref"],["Option<T>","has constraint","T: Eq"],["Option<T>","has constraint","T: Ord"],["Option<T>","has constraint","T: PartialEq"],["Option<T>","has constraint","T: PartialOrd"],["Option<T>","has constraint","T: Send"],["Option<T>","has constraint","T: Sync"],["Option<T>","has method","deref"],["Option<T>","has method","from"],["Option<T>","has method","unwrap_or_default"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","stable since","1.12.0"],["Option<V>","has constraint","V: FromIterator<A>"],["Option<V>","implements","FromIterator<Option<A>>"],["PartialOrd for Option<T>","has method","partial_cmp"],["Result","has full name","std::result::Result"],["Result","is a","enum"],["Some","has description","Some value T"],["Some","is a","variant"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","Into"],["T","implements","ToOwned"],["T","implements","TryFrom"],["T","implements","TryInto"],["ToOwned","has associated type","Owned=T"],["TryFrom","has associated type","Error"],["TypeId","is a","struct"],["and","has argument","optb"],["and","has argument","self"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\")); let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has declaration","pub fn and_then<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has return type","Option<U>"],["as_mut","has argument","as_mut::self"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_mut::self","has type","&mut self"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: PinMut<'a, Option<T>>) -> Option<PinMut<'a, T>>"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","has stability","nightly-only experimental API (pin #49150)"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["as_ref","is a","function"],["borrow","has argument","borrow::self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow::self","has type","&T"],["borrow_mut","has argument","borrow_mut::self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut::self","has type","&mut T"],["clone","has description","Returns a copy of the value."],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","nightly-only experimental API: toowned_clone_into (#41263)"],["clone_into::target","has type","&mut T"],["cloned","has constraint","T: Clone"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has full name","std::cmp::Ord::cmp"],["cmp","has return type","Ordering"],["cmp","is a","method"],["cmp::other","has type","&Option<T>"],["cmp::self","has type","&self"],["default","has description","Returns None."],["default","has return type","Option<T>"],["deref","has declaration","pub fn deref(&self) -> Option<&T::Target>"],["deref","has return type","Option<&T::Target>"],["deref","has stability","This is a nightly-only experimental API. (inner_deref #50264)"],["eq","has argument","eq::other"],["eq","has argument","eq::self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has full name","std::cmp::PartialEq::eq"],["eq","has return type","bool"],["eq","is a","method"],["eq::other","has type","&Option<T>"],["eq::self","has type","&self"],["expect","has argument","expect::msg"],["expect","has description","Unwraps an option yielding the content of Some. Panics with custom message on None."],["expect","has return type","T"],["expect::msg","has type","&str"],["f","has type","F"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, otherwise None."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 } assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","Option<T>"],["filter","stable since","1.27.0"],["fmt","has argument","fmt::f"],["fmt","has description","Formats the value using the given formatter."],["fmt","has full name","std::fmt::Debug::fmt"],["fmt","has return type","Result<(), Error>"],["fmt","is a","method"],["fmt::f","has type","&mut Formatter"],["from","has argument","from::o"],["from","has argument","o"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","is a","method"],["from","stable since","1.30.0"],["from::o","has type","&'a mut Option<T>"],["from_error","has return type","Option<T>"],["from_iter","has argument","iter"],["from_iter","has constraint","I: IntoIterator<Item = Option<A>>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has return type","Option<V>"],["from_ok","has argument","v"],["from_ok","has return type","Option<T>"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has full name","std::cmp::PartialOrd::ge"],["ge","has return type","bool"],["ge","is a","method"],["ge::other","has type","&Option<T>"],["ge::self","has type","&self"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","nightly-only experimental API: get_type_id (#27745)"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has full name","std::cmp::PartialOrd::gt"],["gt","has return type","bool"],["gt","is a","method"],["gt::other","has type","&Option<T>"],["gt::self","has type","&self"],["hash","has description","Feeds this value into the given Hasher."],["impl IntoIterator for &'a Option<T>","has associated type","IntoIter"],["impl IntoIterator for &'a Option<T>","has associated type","Item"],["impl IntoIterator for &'a Option<T>","has method","into_iter"],["impl IntoIterator for &'a Option<T>","stable since","1.4.0"],["impl IntoIterator for &'a mut Option<T>","has associated type","IntoIter"],["impl IntoIterator for &'a mut Option<T>","has associated type","Item"],["impl IntoIterator for &'a mut Option<T>","has method","into_iter"],["impl IntoIterator for &'a mut Option<T>","stable since","1.4.0"],["into","has description","Performs the conversion."],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Creates an iterator from a value. Read more"],["into_iter","has return type","Iter<'a, T>"],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has full name","std::option::Option::iter"],["iter","has return type","Iter<T>"],["iter","has type","I"],["iter::self","has type","&Option<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has example","let x = Some(4); assert_eq!(x.iter_mut().next(), Some(&mut 4)); let x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has full name","std::option::Option::iter_mut"],["iter_mut","has return type","IterMut<T>"],["iter_mut::self","has type","&mut Option<T>"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has full name","std::cmp::PartialOrd::le"],["le","has return type","bool"],["le","is a","method"],["le::other","has type","&Option<T>"],["le::self","has type","&self"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has full name","std::cmp::PartialOrd::lt"],["lt","has return type","bool"],["lt","is a","method"],["lt::other","has type","&Option<T>"],["lt::self","has type","&self"],["map","has argument","map::f"],["map","has description","Maps Option<T> to Option<U> using provided function"],["map","has return type","Option<U>"],["map::f","has constraint","FnOnce(T) -> U"],["map::f","has type","F"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has full name","std::option::Option::map_or"],["map_or","has return type","U"],["map_or::default","has type","U"],["map_or::f","has type","F"],["map_or::self","has type","Option<T>"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has full name","std::option::Option::map_or_else"],["map_or_else","has return type","U"],["map_or_else::default","has type","D"],["map_or_else::f","has type","F"],["map_or_else::self","has type","Option<T>"],["max","has description","Compares and returns the maximum of two values."],["max","has full name","std::cmp::Ord::max"],["max","has return type","Self"],["max","is a","method"],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","has full name","std::cmp::Ord::min"],["min","has return type","Self"],["min","is a","method"],["min","stable since","1.21.0"],["ne","has argument","ne::other"],["ne","has argument","ne::self"],["ne","has description","This method tests for !=."],["ne","has full name","std::cmp::PartialEq::ne"],["ne","has return type","bool"],["ne","is a","method"],["ne::other","has type","&Option<T>"],["ne::self","has type","&self"],["o","has type","&'a Option<T>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has full name","std::option::Option::ok_or"],["ok_or","has return type","Result<T, E>"],["ok_or::err","has type","E"],["ok_or::self","has type","Option<T>"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has full name","std::option::Option::ok_or_else"],["ok_or_else","has return type","Result<T, E>"],["ok_or_else::err","has type","F"],["ok_or_else::self","has type","Option<T>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has argument","optb"],["or","has argument","self"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = None; let y = None; assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["partial_cmp","has description","Returns an ordering between self and other values if one exists."],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","has stability","nightly-only experimental API (option_replace #51998)"],["self","has type","&mut self"],["self","has type","Option<T>"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has declaration","pub fn transpose(self) -> Result<Option<T>, E>"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["try_from","has description","Performs the conversion."],["try_into","has description","Performs the conversion."],["unwrap","has description","Moves value out of Option panicking on None"],["unwrap","has return type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has declaration","pub fn unwrap_or_default(self) -> T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["v","has type","T"],["val","has type","T"],["value","has type","T"]],"add_links":["../../../primitive.bool.html","../../../primitive.reference.html","../../../primitive.u32.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.bool.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.reference.html","../primitive.unit.html","enum.Option.html","https://github.com/rust-lang/rust/issues/49150","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0A%23%5Bderive(Debug%2C%20Eq%2C%20PartialEq)%5D%0Astruct%20SomeErr%3B%0A%0Alet%20x%3A%20Result%3COption%3Ci32%3E%2C%20SomeErr%3E%20%3D%20Ok(Some(5))%3B%0Alet%20y%3A%20Option%3CResult%3Ci32%2C%20SomeErr%3E%3E%20%3D%20Some(Ok(5))%3B%0Aassert_eq!(x%2C%20y.transpose())%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20good_year_from_input%20%3D%20%221909%22%3B%0Alet%20bad_year_from_input%20%3D%20%22190blarg%22%3B%0Alet%20good_year%20%3D%20good_year_from_input.parse().ok().unwrap_or_default()%3B%0Alet%20bad_year%20%3D%20bad_year_from_input.parse().ok().unwrap_or_default()%3B%0A%0Aassert_eq!(1909%2C%20good_year)%3B%0Aassert_eq!(0%2C%20bad_year)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%2012%3B%0Alet%20opt_x%20%3D%20Some(%26mut%20x)%3B%0Aassert_eq!(opt_x%2C%20Some(%26mut%2012))%3B%0Alet%20cloned%20%3D%20op...","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":2230587,"totalUsage":{"prompt_tokens":96186,"completion_tokens":69779,"cached_tokens":0,"reasoning_tokens":58170},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":61294},{"contextLength":500,"contentLength":15000,"costTime":90847},{"contextLength":500,"contentLength":15000,"costTime":287580},{"contextLength":500,"contentLength":15000,"costTime":243717},{"contextLength":500,"contentLength":15000,"costTime":228149},{"contextLength":500,"contentLength":15000,"costTime":135690},{"contextLength":500,"contentLength":15000,"costTime":299173},{"contextLength":500,"contentLength":15000,"costTime":187477},{"contextLength":500,"contentLength":15000,"costTime":201222},{"contextLength":500,"contentLength":15000,"costTime":201033},{"contextLength":500,"contentLength":15000,"costTime":161886},{"contextLength":500,"contentLength":11900,"costTime":132519}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:26:07.396Z","examGroup":"split"}}