{"create_time":"2025-03-22T14:34:41.423Z","id":"f2a4a16c-4535-48fd-a7dd-b877ebfbb0ca","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["belongs to","converts to","experimental API","has associated type","has declaration","has description","has example","has example code","has full name","has method","has panic","has parameter","has parameter type constraint","has return type","has stability","has type","has variant","implements","is a","requires","returns","stable since"],"add_triples":[["&'a Option<T>","has associated type","IntoIter = Iter<'a, T>"],["&'a Option<T>","has associated type","Item = &'a T"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>","stable since","1.4.0"],["&'a mut I","has parameter type constraint","I: Iterator + ?Sized"],["&'a mut I","implements","Iterator"],["&'a mut Option<T>","has associated type","IntoIter = IterMut<'a, T>"],["&'a mut Option<T>","has associated type","Item = &'a mut T"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut Option<T>","stable since","1.4.0"],["&'a mut R","has parameter type constraint","R: Read + ?Sized"],["&'a mut R","implements","Read"],["&'a mut W","has parameter type constraint","W: Write + ?Sized"],["&'a mut W","implements","Write"],["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["D","implements","FnOnce() -> U"],["F","implements","FnOnce() -> E"],["F","implements","FnOnce(T) -> U"],["F","requires","FnOnce() -> T"],["FnOnce","is a","trait"],["From","has method","from"],["From<&'a Option<T>>","requires","from"],["From<T>","requires","from"],["I","has type constraint","IntoIterator<Item = Option<A>>"],["I","implements","IntoIterator"],["Into","has method","into"],["IntoIter<T>","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["Iter<T>","implements","Iterator"],["Iter<T>","is a","struct"],["IterMut<T>","implements","Iterator"],["IterMut<T>","is a","struct"],["None","belongs to","Option"],["None","has description","No value"],["None","is a","variant"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option<&'a T>","implements","Clone"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<&'a mut T>","implements","Clone"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has method","default"],["Option<T>","has method","deref"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has parameter type constraint","T: Clone"],["Option<T>","has parameter type constraint","T: Hash"],["Option<T>","has parameter type constraint","T: PartialOrd"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<V>","implements","FromIterator<Option<A>>"],["Result","is a","enum"],["Some","belongs to","Option"],["Some","has description","Some value T"],["Some","is a","variant"],["T","has parameter type constraint","'static + ?Sized"],["T","has parameter type constraint","?Sized"],["T","has parameter type constraint","Clone"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","From"],["T","implements","Into"],["T","implements","ToOwned"],["T","implements","TryFrom"],["T","implements","TryInto"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["Try for Option<T>","experimental API","#42327"],["Try for Option<T>","has associated type","Error = NoneError"],["Try for Option<T>","has associated type","Ok = T"],["TryFrom","experimental API","try_from #33417"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has parameter","optb"],["and","has return type","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has parameter","f"],["and_then","has return type","Option<U>"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example code","let mut x = Some(2);...assert_eq!(x, Some(42));"],["as_mut","has parameter","self"],["as_mut","returns","Option<&mut T>"],["as_mut::self","has type","&mut T"],["as_pin_mut","converts to","Option<PinMut<'_, T>>"],["as_pin_mut","experimental API","This is a nightly-only experimental API. (pin #49150)"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: PinMut<'a, Option<T>>) -> Option<PinMut<'a, T>>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has full name","std::option::Option::as_ref"],["as_ref","returns","Option<&T>"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has parameter","self"],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has parameter","self"],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_into","experimental API","#41263"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has parameter","target"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has return type","Option<T>"],["cloned","is a","function"],["cloned","stable since","1.26.0"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has parameter","other"],["cmp","has parameter","self"],["cmp","has return type","Ordering"],["cmp","is a","function"],["default","has description","Returns None."],["default","has type","D"],["default","has type","U"],["deref","experimental API","inner_deref #50264"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","is a","function"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has parameter","other"],["eq","has parameter","self"],["eq","has return type","bool"],["eq","is a","function"],["err","has type","E"],["err","has type","F"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has example code","let x = Some(\"value\");...x.expect(\"message\");"],["expect","has panic","Panics if the value is a None with custom message"],["expect","has parameter","msg"],["expect::msg","has type","&str"],["f","has type","&mut Formatter"],["f","has type","F"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns:"],["filter","has parameter","predicate"],["filter","stable since","1.27.0"],["fmt","has description","Formats the value using the given formatter."],["fmt","has parameter","f"],["fmt","has parameter","self"],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["from","has description","Performs the conversion."],["from","has parameter","o"],["from","has parameter","val"],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","is a","function"],["from_error","has parameter","NoneError"],["from_error","has return type","Option<T>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has parameter","iter"],["from_iter","has return type","Option<V>"],["from_ok","has parameter","v"],["from_ok","has return type","Option<T>"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has parameter","other"],["ge","has parameter","self"],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has example","x.get_or_insert(5) returns &mut 5 then sets to 7"],["get_or_insert","has parameter","v"],["get_or_insert","has return type","&mut T"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has parameter","f"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","experimental API","#27745"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has parameter","other"],["gt","has parameter","self"],["gt","has return type","bool"],["gt","is a","function"],["hash","has description","Feeds this value into the given Hasher."],["hash","has parameter","state: &mut __HT"],["impl<'a, T> From<&'a Option<T>> for Option<&'a T>","stable since","1.30.0"],["impl<T> From<T> for Option<T>","stable since","1.12.0"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","returns","IntoIter<T>"],["into_result","has description","Applies the '?' operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has full name","std::option::Option::is_none"],["is_none","returns","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has full name","std::option::Option::is_some"],["is_some","returns","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has example code","let x = Some(4); assert_eq!(x.iter().next(), Some(&4)); let x: Option<u32> = None; assert_eq!(x.iter().next(), None);"],["iter","has return type","Iter<T>"],["iter","has type","I"],["iter","returns","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example code","let mut x = Some(4); assert_eq!(x.iter_mut().next(), Some(&mut 4)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42)); let mut x: Option<u32> = None; assert_eq!(x.iter_mut().next(), None);"],["iter_mut","has return type","IterMut<T>"],["iter_mut","returns","IterMut<T>"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has parameter","other"],["le","has parameter","self"],["le","has return type","bool"],["le","is a","function"],["lt","belongs to","PartialOrd"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has parameter","other"],["lt","has parameter","self"],["lt","has return type","bool"],["lt","is a","function"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps Option<T> to Option<U> by applying function"],["map","has example code","maybe_some_string.map(|s| s.len())"],["map","has parameter","f"],["map::f","has type","FnOnce(T) -> U"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has example code","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has parameter","default"],["map_or","has parameter","f"],["map_or","has return type","U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has example code","let k = 21; let x = Some(\"foo\"); assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 3); let x: Option<&str> = None; assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);"],["map_or_else","has parameter","default"],["map_or_else","has parameter","f"],["map_or_else","has return type","U"],["max","has description","Compares and returns the maximum of two values."],["max","has parameter","other"],["max","has parameter","self"],["max","has return type","Self"],["max","is a","function"],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","has parameter","other"],["min","has parameter","self"],["min","has return type","Self"],["min","is a","function"],["min","stable since","1.21.0"],["ne","has description","This method tests for !=."],["ne","has parameter","other"],["ne","has parameter","self"],["ne","has return type","bool"],["ne","is a","function"],["o","has type","&'a Option<T>"],["o","has type","&'a mut Option<T>"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example code","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","has parameter","err"],["ok_or","has return type","Result<T, E>"],["ok_or","returns","Result<T, E>"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has example code","let x = Some(\"foo\"); assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or_else(|| 0), Err(0));"],["ok_or_else","has parameter","err"],["ok_or_else","has return type","Result<T, E>"],["ok_or_else","returns","Result<T, E>"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100))"],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2))"],["or","has example","let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2))"],["or","has example","let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None)"],["or","has parameter","optb"],["or","has return type","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result"],["or_else","has example","None.or_else(nobody) returns None"],["or_else","has example","None.or_else(vikings) returns Some(\"vikings\")"],["or_else","has example","Some(\"barbarians\").or_else(vikings) returns Some(\"barbarians\")"],["or_else","has parameter","f"],["or_else","has return type","Option<T>"],["other","has type","&Option<T>"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","experimental API","#51998"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has parameter","value"],["replace","has return type","Option<T>"],["replace","is a","function"],["self","has type","&Self"],["self","has type","&mut Self"],["self","has type","Option<T>"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","has return type","Option<T>"],["take","is a","function"],["target","has type","&mut T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","experimental API","transpose_result #47338"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has return type","Result<Option<T>, E>"],["transpose","is a","function"],["try_from","has parameter","value: U"],["try_from","has return type","Result<T, Error>"],["unwrap","has declaration","pub fn unwrap(self) -> T"],["unwrap","has description","Moves the value v out of Option<T> if Some(v)"],["unwrap","has example code","let x = Some(\"air\");...x.unwrap();"],["unwrap","has panic","Panics if self equals None"],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has example code","Some(\"car\").unwrap_or(\"bike\")"],["unwrap_or","has parameter","def"],["unwrap_or::def","has type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has parameter type constraint","T: Default"],["unwrap_or_default","has parameter","self"],["unwrap_or_default","has return type","T"],["unwrap_or_default","is a","function"],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T"],["unwrap_or_else","has example code","Some(4).unwrap_or_else(|| 2*k)"],["unwrap_or_else","has parameter","f"],["unwrap_or_else::f","has type","FnOnce() -> T"],["val","has type","T"],["value","has type","T"],["xor","experimental API","option_xor #50512"],["xor","has example","None.xor(None) returns None"],["xor","has example","None.xor(Some(2)) returns Some(2)"],["xor","has example","Some(2).xor(None) returns Some(2)"],["xor","has example","Some(2).xor(Some(2)) returns None"],["xor","has parameter","optb"],["xor","has return type","Option<T>"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.PinMut.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../index.html","../primitive.bool.html","../primitive.reference.html","enum.Option.html","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/50264","https://github.com/rust-lang/rust/issues/50512","https://play.rust-lang.org/","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20k%20%3D%2021%3B%0A%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or_else(%7C%7C%202%20*%20k%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter_mut().next()%2C%20Some(%26mut%204))%3B%0A%0Alet%20mut%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter_mut().next()%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%203)%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.map_or(42%2C%20%7Cv%7C%20v.len())%2C%2042)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or(0)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or(0)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(%22foo%22)%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Ok(%22foo%22))%3B%0A%0Alet%20x%3A%20Option%3C%26str%3E%20%3D%20None%3B%0Aassert_eq!(x.ok_or_else(%7C%7C%200)%2C%20Err(0))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(4)%3B%0Aassert_eq!(x.iter().next()%2C%20Some(%264))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.iter().next()%2C%20None)%3B%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1728652,"totalUsage":{"prompt_tokens":96368,"completion_tokens":52658,"cached_tokens":0,"reasoning_tokens":42067},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":89038},{"contextLength":500,"contentLength":15000,"costTime":77495},{"contextLength":500,"contentLength":15000,"costTime":295996},{"contextLength":500,"contentLength":15000,"costTime":62077},{"contextLength":500,"contentLength":15000,"costTime":46582},{"contextLength":500,"contentLength":15000,"costTime":96602},{"contextLength":500,"contentLength":15000,"costTime":155473},{"contextLength":500,"contentLength":15000,"costTime":103177},{"contextLength":500,"contentLength":15000,"costTime":170099},{"contextLength":500,"contentLength":15000,"costTime":321432},{"contextLength":500,"contentLength":15000,"costTime":126076},{"contextLength":500,"contentLength":11900,"costTime":184605}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:05:52.095Z","examGroup":"split"}}