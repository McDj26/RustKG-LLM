{"create_time":"2025-03-22T14:51:00.850Z","id":"31b13239-c741-4096-abf2-f293286f5eea","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has description","has full name","has method","has parameter","has stability","has trait bound","has type","has variant","implements","is a","related enum","related struct","requires method","returns","stable since"],"add_triples":[["D","implements","FnOnce() -> U"],["Debug","has method","fmt"],["F","implements","FnOnce() -> E"],["F","implements","FnOnce() -> T"],["F","implements","FnOnce(T) -> U"],["From<T> for Option<T>","has method","from"],["FromIterator<Option<A>> for Option<V>","has method","from_iter"],["Hash::hash","has parameter","&self"],["Hash::hash","has parameter","state: &mut __HT"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator::IntoIter","has type","IterMut<'a, T>"],["IntoIterator::Item","has type","&'a mut T"],["Iterator","implements","IntoIterator"],["None","has description","No value"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","filter"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","is a","enum"],["Option","related struct","IntoIter"],["Option","related struct","Iter"],["Option","related struct","IterMut"],["Option","related struct","NoneError"],["Option","stable since","1.0.0"],["Option::None","has variant","None"],["Option::Some","has variant","Some"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","IntoIter"],["Option<T>","has associated type","Item"],["Option<T>","has method","cloned"],["Option<T>","has method","default"],["Option<T>","has method","deref"],["Option<T>","has method","from_error"],["Option<T>","has method","from_ok"],["Option<T>","has method","get_or_insert"],["Option<T>","has method","replace"],["Option<T>","has method","take"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has method","xor"],["Option<T>","has trait bound","T: Copy"],["Option<T>","has trait bound","T: Default"],["Option<T>","has trait bound","T: Hash"],["Option<T>","has variant","None"],["Option<T>","has variant","Some"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","FromIterator<Option<A>>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Ord","has method","cmp"],["Ord","has method","max"],["Ord","has method","min"],["PartialEq<Option<T>>","has method","eq"],["PartialEq<Option<T>>","has method","ne"],["PartialOrd<Option<T>>","has method","ge"],["PartialOrd<Option<T>>","has method","gt"],["PartialOrd<Option<T>>","has method","le"],["PartialOrd<Option<T>>","has method","lt"],["PartialOrd<Option<T>>","has method","partial_cmp"],["Result","is a","enum"],["Some","has description","Some value T"],["T","implements","From<T>"],["T","implements","TryFrom<U>"],["Try for Option<T>","has type","NoneError"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has parameter","optb"],["and","has parameter","self"],["and","returns","Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result."],["and_then","has parameter","f"],["and_then","has parameter","self"],["and_then","returns","Option<U>"],["as_mut","returns","Option<&mut T>"],["as_ref","has parameter","&self"],["as_ref","returns","Option<&T>"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents."],["cloned","returns","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has parameter","other: &Option<T>"],["cmp","has parameter","self"],["cmp","returns","Ordering"],["default","has description","Returns None"],["default","returns","Option<T>"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has parameter","&self"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["deref","returns","Option<&<T as Deref>::Target>"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has parameter","other: &Option<T>"],["eq","has parameter","self"],["eq","returns","bool"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce(T) -> Option<U>"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, None if predicate returns false."],["filter","has parameter","predicate"],["filter","has parameter","self"],["filter","stable since","1.27.0"],["fmt","has description","Formats the value using the given formatter."],["fmt","has parameter","f: &mut Formatter"],["fmt","has parameter","self"],["fmt","returns","Result<(), Error>"],["from_error","has description","Wrap an error value to construct the composite result"],["from_error","has parameter","NoneError"],["from_error","has stability","nightly-only experimental API (try_trait #42327)"],["from_error","returns","Option<T>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_ok","has description","Wrap an OK value to construct the composite result"],["from_ok","has parameter","v: T"],["from_ok","has stability","nightly-only experimental API (try_trait #42327)"],["from_ok","returns","Option<T>"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has parameter","other: &Option<T>"],["ge","has parameter","self"],["ge","returns","bool"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has parameter","v"],["get_or_insert","returns","&mut T"],["get_or_insert","stable since","1.20.0"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has parameter","other: &Option<T>"],["gt","has parameter","self"],["gt","returns","bool"],["into_iter","returns","I"],["is_none","has description","Returns true if the option is a None value."],["is_none","returns","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","returns","bool"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has parameter","self"],["iter_mut","returns","IterMut<T>"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has parameter","other: &Option<T>"],["le","has parameter","self"],["le","returns","bool"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has parameter","other: &Option<T>"],["lt","has parameter","self"],["lt","returns","bool"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has parameter","f"],["map","has parameter","self"],["map","returns","Option<U>"],["map::f","has type","F"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has parameter","default"],["map_or","has parameter","f"],["map_or","has parameter","self"],["map_or","returns","U"],["map_or::default","has type","U"],["map_or::f","has type","F"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has parameter","default"],["map_or_else","has parameter","f"],["map_or_else","has parameter","self"],["map_or_else","returns","U"],["map_or_else::default","has type","D"],["map_or_else::f","has type","F"],["max","has description","Compares and returns the maximum of two values."],["min","has description","Compares and returns the minimum of two values."],["ne","has description","This method tests for !=."],["ne","returns","bool"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","related enum","Result"],["ok_or","returns","Result<T, E>"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has parameter","err"],["ok_or_else","has parameter","self"],["ok_or_else","returns","Result<T, E>"],["ok_or_else::err","has type","F"],["optb","has type","Option<T>"],["optb","has type","Option<U>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has parameter","optb"],["or","has parameter","self"],["or","returns","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has parameter","f"],["or_else","has parameter","self"],["or_else","returns","Option<T>"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has parameter","other: &Option<T>"],["partial_cmp","has parameter","self"],["partial_cmp","returns","Option<Ordering>"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present."],["replace","has parameter","value"],["replace","returns","Option<T>"],["replace","stable since","1.31.0"],["self","has type","&mut self"],["std::any::Any","requires method","get_type_id"],["std::any::Any::get_type_id","has description","Gets the TypeId of self."],["std::any::Any::get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["std::any::Any::get_type_id","returns","std::any::TypeId"],["std::borrow::Borrow","requires method","borrow"],["std::borrow::Borrow::borrow","has description","Immutably borrows from an owned value."],["std::borrow::Borrow::borrow","returns","&T"],["std::borrow::BorrowMut","requires method","borrow_mut"],["std::borrow::BorrowMut::borrow_mut","has description","Mutably borrows from an owned value."],["std::borrow::BorrowMut::borrow_mut","returns","&mut T"],["std::borrow::ToOwned","has associated type","Owned"],["std::borrow::ToOwned::Owned","has type","T"],["std::borrow::ToOwned::clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["std::borrow::ToOwned::clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["std::borrow::ToOwned::to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["std::convert::Into","requires method","into"],["std::convert::Into::into","has description","Performs the conversion."],["std::convert::Into::into","returns","U"],["std::convert::TryInto","has associated type","Error"],["std::convert::TryInto","requires method","try_into"],["std::convert::TryInto::Error","has stability","This is a nightly-only experimental API. (try_from #33417)"],["std::convert::TryInto::Error","has type","<U as std::convert::TryFrom<T>>::Error"],["std::convert::TryInto::try_into","has description","Performs the conversion."],["std::convert::TryInto::try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["std::convert::TryInto::try_into","returns","std::result::Result<U, <U as std::convert::TryFrom<T>>::Error>"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","returns","Option<T>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["transpose","returns","Result<Option<T>, E>"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has description","Panics if the self value equals None."],["unwrap","has parameter","self"],["unwrap","returns","T"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has parameter","def"],["unwrap_or","has parameter","self"],["unwrap_or","returns","T"],["unwrap_or::def","has type","T"],["unwrap_or_default","has description","Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has parameter","self"],["unwrap_or_default","requires method","Default::default"],["unwrap_or_default","returns","T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has parameter","f"],["unwrap_or_else","has parameter","self"],["unwrap_or_else","returns","T"],["unwrap_or_else::f","has type","F"],["v","has type","T"],["value","has type","T"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has parameter","optb"],["xor","has parameter","self"],["xor","returns","Option<T>"]],"add_links":["../../../primitive.usize.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/primitive.bool.html","../../std/process/struct.Command.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../index.html","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1274905,"totalUsage":{"prompt_tokens":84415,"completion_tokens":38619,"cached_tokens":0,"reasoning_tokens":32262},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":142190},{"contextLength":500,"contentLength":23000,"costTime":228811},{"contextLength":500,"contentLength":23000,"costTime":293637},{"contextLength":500,"contentLength":23000,"costTime":132033},{"contextLength":500,"contentLength":23000,"costTime":51733},{"contextLength":500,"contentLength":23000,"costTime":57450},{"contextLength":500,"contentLength":23000,"costTime":161606},{"contextLength":500,"contentLength":17078,"costTime":207445}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:29:45.473Z","examGroup":"split"}}