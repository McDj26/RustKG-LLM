{"create_time":"2025-03-22T14:17:11.983Z","id":"2021cf8f-45db-4e09-b1c1-746399271ab5","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["defined in module","has argument","has associated type","has declaration","has description","has example","has full name","has method","has parameter","has return type","has stability","has type","has variant","implements","is a","requires method","stable since"],"add_triples":[["Any","has method","get_type_id"],["Borrow","has method","borrow"],["BorrowMut","has method","borrow_mut"],["From","has method","from"],["Into","has method","into"],["IntoIter<T>","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["Iter<'a, T>","is a","struct"],["IterMut<'a, T>","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap_or_default"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has method","deref"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","FromIterator<Option<A>>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","Try"],["Ord","requires method","cmp"],["Result","has variant","Err"],["Result","has variant","Ok"],["Result","is a","enum"],["ToOwned","has associated type","Owned"],["ToOwned","has method","to_owned"],["Try","has associated type","Error = NoneError"],["Try","has associated type","Ok = T"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["and","has parameter","optb"],["and","has parameter","self"],["and","has return type","Option<U>"],["and_then","has parameter","f"],["and_then","has parameter","self"],["and_then","has return type","Option<U>"],["as_mut","has return type","Option<&mut T>"],["as_ref","has return type","Option<&T>"],["borrow","has return type","&T"],["borrow_mut","has return type","&mut T"],["cloned","has example","let x = 12;...assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has parameter","other"],["cmp","has parameter","self"],["cmp","has return type","Ordering"],["default","has description","Returns None."],["default","has type","D: FnOnce() -> U"],["deref","has argument","deref::self"],["deref","has declaration","pub fn deref(&self) -> Option<&<T as Deref>::Target>"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&<T as Deref>::Target>"],["deref","has stability","This is a nightly-only experimental API. (#50264)"],["deref::self","has type","&Option<T>"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["err","has type","F: FnOnce() -> E"],["expect","has parameter","msg: &str"],["f","has type","F: FnOnce(T) -> Option<U>"],["f","has type","F: FnOnce(T) -> U"],["f","has type","FnOnce() -> Option<T>"],["filter","has parameter","predicate"],["filter","has parameter","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["from","has description","Performs the conversion."],["from","has return type","T"],["from_iter","has description","Takes each element in the Iterator..."],["get_or_insert","has example","let mut x = None;...assert_eq!(x, Some(7));"],["get_or_insert","has parameter","v"],["get_or_insert","has return type","&mut T"],["get_or_insert","stable since","1.20.0"],["get_type_id","has return type","TypeId"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_result","has description","Applies the '?' operator..."],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_none","is a","function"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["is_some","is a","function"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["map_or","has description","Applies a function to the contained value (if any), or returns a default (if not)."],["map_or","has example","let x = Some(\"foo\"); assert_eq!(x.map_or(42, |v| v.len()), 3);"],["map_or","has example","let x: Option<&str> = None; assert_eq!(x.map_or(42, |v| v.len()), 42);"],["map_or","has parameter","default"],["map_or","has parameter","f"],["map_or","has parameter","self"],["map_or","has return type","U"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has parameter","default"],["map_or_else","has parameter","f"],["map_or_else","has parameter","self"],["map_or_else","has return type","U"],["max","has description","Compares and returns the maximum of two values."],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","stable since","1.21.0"],["ne","has description","This method tests for !="],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has parameter","err"],["ok_or","has parameter","self"],["ok_or","has return type","Result<T, E>"],["ok_or_else","has parameter","err"],["ok_or_else","has parameter","self"],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None }...assert_eq!(None.or_else(nobody), None);"],["or_else","has parameter","f"],["or_else","has parameter","self"],["or_else","has return type","Option<T>"],["other","has type","&Option<T>"],["predicate","has type","P: FnOnce(&T) -> bool"],["replace","has example","let mut x = Some(2);...assert_eq!(old, None);"],["replace","has parameter","value"],["replace","has return type","Option<T>"],["replace","has stability","nightly-only experimental API (option_replace #51998)"],["self","has type","&Option<T>"],["self","has type","Option<T>"],["to_owned","has return type","T"],["transpose","has declaration","pub fn transpose(self) -> Result<Option<T>, E>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","#[derive(Debug, Eq, PartialEq)] struct SomeErr; let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (#47338)"],["try_from","has description","Performs the conversion."],["try_from","has return type","Result<T, <T as TryFrom<U>>::Error>"],["try_from","has stability","nightly-only experimental API (#33417)"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["unwrap_or_default","has description","Returns the contained value or a default..."],["v","has type","T"],["value","has type","T"],["xor","has example","let x = Some(2);...assert_eq!(x.xor(y), None);"],["xor","has parameter","optb"],["xor","has parameter","self"],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental API (option_xor #50512)"]],"add_links":["../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/any/struct.TypeId.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Sized.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.NoneError.html","../../std/primitive.u32.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.reference.html","../primitive.str.html","enum.Option.html","https://github.com/rust-lang/rust/issues/50512","https://github.com/rust-lang/rust/issues/51998","https://play.rust-lang.org/","src/core/option.rs.html","std/ops/trait.FnOnce.html","std/option/enum.Option.html","std/option/struct.Iter.html","std/option/struct.IterMut.html","std/result/enum.Result.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":643422,"totalUsage":{"prompt_tokens":78208,"completion_tokens":19147,"cached_tokens":0,"reasoning_tokens":14689},"chunkLength":6,"chunksInfo":[{"contextLength":0,"contentLength":31000,"costTime":83107},{"contextLength":500,"contentLength":31000,"costTime":66469},{"contextLength":500,"contentLength":31000,"costTime":168827},{"contextLength":500,"contentLength":31000,"costTime":144491},{"contextLength":500,"contentLength":31000,"costTime":120767},{"contextLength":500,"contentLength":21900,"costTime":59761}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:06:27.998Z","examGroup":"split"}}