{"create_time":"2025-03-22T15:40:49.290Z","id":"00e4f29c-b67f-4b87-9a00-8eba5befc0f2","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has full name","has method","has related struct","has return type","has stability","has trait bound","has type","has variant","implements","is a","panics if","requires method","stable since"],"add_triples":[["&'_ mut I","implements","Iterator"],["&'_ mut R","implements","Read"],["&'_ mut W","implements","Write"],["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>","stable since","1.4.0"],["&'a Option<T>::IntoIter","has description","Which kind of iterator are we turning this into?"],["&'a Option<T>::IntoIter","has type","Iter<'a, T>"],["&'a Option<T>::Item","has description","The type of the elements being iterated over."],["&'a Option<T>::Item","has type","&'a T"],["&'a Option<T>::into_iter","has argument","self"],["&'a Option<T>::into_iter","has description","Creates an iterator from a value."],["&'a Option<T>::into_iter","has return type","Iter<'a, T>"],["&'a mut Option<T>","has associated type","IntoIter"],["&'a mut Option<T>","has associated type","Item"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut Option<T>","stable since","1.4.0"],["&'a mut Option<T>::IntoIter","has description","Which kind of iterator are we turning this into?"],["&'a mut Option<T>::IntoIter","has type","IterMut<'a, T>"],["&'a mut Option<T>::Item","has description","The type of the elements being iterated over."],["&'a mut Option<T>::Item","has type","&'a mut A"],["&'a mut Option<T>::into_iter","has argument","self"],["&'a mut Option<T>::into_iter","has description","Creates an iterator from a value."],["&'a mut Option<T>::into_iter","has return type","IterMut<'a, T>"],["Any","has method","get_type_id"],["Borrow","has method","borrow"],["Borrow<T>","has trait bound","?Sized"],["BorrowMut","has method","borrow_mut"],["D","has trait bound","FnOnce() -> U"],["Default::default","has description","Returns None."],["Default::default","has return type","Option<T>"],["Error","has type","<U as TryFrom<T>>::Error"],["F","has trait bound","FnOnce() -> E"],["F","has trait bound","FnOnce() -> T"],["F","has trait bound","FnOnce(T) -> U"],["FnOnce","is a","trait"],["From","has full name","std::convert::From"],["From","has method","from"],["From","is a","trait"],["From<&'a Option<T>>","implements","From"],["From<&'a Option<T>>","stable since","1.30.0"],["FromIterator<Option<A>>","implements","FromIterator"],["Hash::hash","has argument","state"],["Hash::hash","has description","Feeds this value into the given Hasher."],["Hash::hash_slice","has description","Feeds a slice of this type into the given Hasher."],["Hash::hash_slice","stable since","1.3.0"],["I","has trait bound","I: Iterator"],["I","implements","IntoIterator"],["Into","has method","into"],["IntoIter","has description","An iterator over the value in [`Some`] variant of an [`Option`]."],["IntoIter","has full name","std::option::IntoIter"],["IntoIter","is a","struct"],["IntoIter<T>","has full name","std::option::IntoIter<T>"],["IntoIter<T>","is a","struct"],["IntoIterator for &'a mut Option<T>","has associated type","IntoIter"],["IntoIterator for &'a mut Option<T>","has associated type","Item"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator::IntoIter","has type","IterMut<'a, T>"],["IntoIterator::Item","has type","&'a mut T"],["IntoIterator::into_iter","has return type","IterMut<'a, T>"],["Iter","has description","An iterator over a reference to the [`Some`] variant of an [`Option`]."],["Iter","has full name","std::option::Iter"],["Iter","implements","Iterator"],["Iter","is a","struct"],["Iter<'a, T>","is a","struct"],["IterMut","has description","An iterator over a mutable reference to the [`Some`] variant of an [`Option`]."],["IterMut","has full name","std::option::IterMut"],["IterMut","implements","Iterator"],["IterMut","is a","struct"],["IterMut<'a, T>","is a","struct"],["None","has description","No value"],["NoneError","has description","The error type that results from applying the try operator (`?`) to a `None` value."],["NoneError","has full name","std::option::NoneError"],["NoneError","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The Option type. See the module level documentation for more."],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","expect"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Send"],["Option","implements","Sync"],["Option","implements","Try"],["Option","is a","enum"],["Option::or_else","is a","method"],["Option::xor","is a","method"],["Option<&'a mut T>","implements","From<&'a mut Option<T>>"],["Option<&T>","has method","cloned"],["Option<&T>","has trait bound","Clone"],["Option<&T>::cloned","has argument","self"],["Option<&T>::cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["Option<&T>::cloned","has example","let x = 12; let opt_x = Some(&x); assert_eq!(opt_x, Some(&12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["Option<&T>::cloned","has return type","Option<T>"],["Option<&mut T>","has method","cloned"],["Option<&mut T>","has trait bound","Clone"],["Option<&mut T>::cloned","has argument","self"],["Option<&mut T>::cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["Option<&mut T>::cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["Option<&mut T>::cloned","has return type","Option<T>"],["Option<&mut T>::cloned","stable since","1.26.0"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","IntoIter"],["Option<T>","has associated type","Item"],["Option<T>","has full name","std::option::Option<T>"],["Option<T>","has method","deref"],["Option<T>","has method","into_iter"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has trait bound","Copy"],["Option<T>","has trait bound","T: Clone"],["Option<T>","has trait bound","T: Debug"],["Option<T>","has trait bound","T: Eq"],["Option<T>","has trait bound","T: PartialEq"],["Option<T>","has trait bound","T: PartialOrd<T>"],["Option<T>","has trait bound","T: Sync"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>::IntoIter","has description","Which kind of iterator are we turning this into?"],["Option<T>::IntoIter","has type","IntoIter<T>"],["Option<T>::Item","has description","The type of the elements being iterated over."],["Option<T>::Item","has type","T"],["Option<T>::Try","has associated type","Error"],["Option<T>::Try","has associated type","Ok"],["Option<T>::Try","has method","from_error"],["Option<T>::Try","has method","from_ok"],["Option<T>::Try","has method","into_result"],["Option<T>::Try::Error","has type","NoneError"],["Option<T>::Try::Ok","has type","T"],["Option<T>::into_iter","has argument","self"],["Option<T>::into_iter","has description","Creates an iterator from a value."],["Option<T>::into_iter","has return type","IntoIter<T>"],["Ord","requires method","cmp"],["Ord","requires method","max"],["Ord","requires method","min"],["Ordering","has full name","std::cmp::Ordering"],["Ordering","is a","enum"],["Owned","has type","T"],["PartialOrd","requires method","ge"],["PartialOrd","requires method","gt"],["PartialOrd","requires method","le"],["PartialOrd","requires method","lt"],["Pin","is a","struct"],["Result","has full name","std::result::Result"],["Result","is a","enum"],["Some","has description","Some value T"],["String","has full name","std::string::String"],["String","is a","struct"],["T","has trait bound","T: From<U>"],["T","has trait bound","U: TryFrom<T>"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","Deref"],["T","implements","From"],["T","implements","ToOwned"],["T","implements","TryFrom"],["T","implements","TryInto"],["T::Target","has type","<T as Deref>::Target"],["ToOwned","has associated type","Owned"],["ToOwned","has method","clone_into"],["ToOwned","has method","to_owned"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryFrom::Error","has type","!"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["TryInto","has stability","This is a nightly-only experimental API. (try_from #33417)"],["__HT","has trait bound","Hasher"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None); let x: Option<u32> = None; let y = Some(\"foo\"); assert_eq!(x.and(y), None); let x = Some(2); let y = Some(\"foo\"); assert_eq!(x.and(y), Some(\"foo\")); let x: Option<u32> = None; let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has full name","std::option::Option::and"],["and","has return type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) } fn nope(_: u32) -> Option<u32> { None } assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16)); assert_eq!(Some(2).and_then(sq).and_then(nope), None); assert_eq!(Some(2).and_then(nope).and_then(sq), None); assert_eq!(None.and_then(sq).and_then(sq), None);"],["and_then","has full name","std::option::Option::and_then"],["and_then","has return type","Option<U>"],["as_mut","has argument","self"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_mut","is a","method"],["as_pin_mut","has argument","self"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>>"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_mut","has stability","nightly-only experimental API (pin #49150)"],["as_pin_mut","is a","method"],["as_pin_ref","has argument","self"],["as_pin_ref","has declaration","pub fn as_pin_ref(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>>"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_pin_ref","has stability","nightly-only experimental API (pin #49150)"],["as_pin_ref","is a","method"],["as_ref","has argument","as_ref::self"],["as_ref","has argument","self"],["as_ref","has declaration","pub fn as_ref(&self) -> Option<&T>"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has full name","std::option::Option::as_ref"],["as_ref","has return type","Option<&T>"],["as_ref","is a","method"],["as_ref::self","has type","&Self"],["bool","has full name","bool"],["bool","is a","primitive type"],["borrow","has argument","self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has argument","self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has full name","std::clone::Clone::clone"],["clone","is a","method"],["clone_from","has description","Performs copy-assignment from source."],["clone_from","is a","method"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cmp","has argument","cmp::other"],["cmp","has argument","cmp::self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp::other","has type","&Option<T>"],["cmp::self","has type","&Option<T>"],["def","has type","T"],["default","has type","D"],["default","has type","FnOnce() -> U"],["default","has type","U"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has full name","std::cmp::PartialEq::eq"],["eq","has return type","bool"],["eq","is a","function"],["err","has type","E"],["err","has type","F"],["expect","has argument","msg"],["expect","has argument","self"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Panics if the value is a None with a custom panic message provided by msg."],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","has return type","T"],["expect","is a","method"],["expect","panics if","Panics if the value is a None with a custom panic message provided by msg."],["f","has type","&mut Formatter"],["f","has type","F"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> Option<U>"],["f","has type","FnOnce(T) -> U"],["filter","has argument","predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false. This function works similar to Iterator::filter(). You can imagine the Option<T> being an iterator over one or zero elements. filter() lets you decide which elements to keep."],["filter","has example","assert_eq!(None.filter(is_even), None); assert_eq!(Some(3).filter(is_even), None); assert_eq!(Some(4).filter(is_even), Some(4));"],["filter","has return type","std::option::Option<T>"],["filter","stable since","1.27.0"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has full name","std::fmt::Debug::fmt"],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["from","has argument","o"],["from","has argument","o: &'a Option<T>"],["from","has argument","t: T"],["from","has argument","val"],["from","has description","Performs the conversion."],["from","has full name","std::convert::From::from"],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","has return type","T"],["from","is a","method"],["from","stable since","1.12.0"],["from","stable since","1.30.0"],["from_error","has argument","NoneError"],["from_error","has description","Wrap an error value to construct the composite result. For example, Result::Err(x) and Result::from_error(x) are equivalent."],["from_error","has return type","Option<T>"],["from_error","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["from_iter","has argument","iter: I"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16;\nlet v = vec![1, 2];\nlet res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) }).collect();\nassert!(res == Some(vec![2, 3]));"],["from_iter","has return type","Option<V>"],["from_ok","has description","Wrap an OK value to construct the composite result. For example, Result::Ok(x) and Result::from_ok(x) are equivalent."],["from_ok","has return type","Option<T>"],["from_ok","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["ge","has argument","ge::other"],["ge","has argument","ge::self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge::other","has type","&Option<T>"],["ge::self","has type","&Option<T>"],["get_or_insert","has argument","v"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","method"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None;\n{\n    let y: &mut u32 = x.get_or_insert_with(|| 5);\n    assert_eq!(y, &5);\n    *y = 7;\n}\nassert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","has trait bound","F: FnOnce() -> T"],["get_or_insert_with","is a","method"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","nightly-only experimental API. (get_type_id #27745)"],["gt","has argument","gt::other"],["gt","has argument","gt::self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt::other","has type","&Option<T>"],["gt::self","has type","&Option<T>"],["into","has description","Performs the conversion."],["into","has return type","U"],["into_iter","has argument","self"],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has return type","I"],["into_iter","has return type","IntoIter<T>"],["into_iter","is a","function"],["into_result","has description","Applies the '?' operator. A return of Ok(t) means that the execution should continue normally, and the result of ? is the value t. A return of Err(e) means that execution should branch to the innermost enclosing catch, or return from the function."],["into_result","has return type","Result<T, NoneError>"],["into_result","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["is_none","has argument","is_none::self"],["is_none","has description","Returns true if the option is a None value."],["is_none","has full name","std::option::Option::is_none"],["is_none","has return type","bool"],["is_none::self","has type","&Self"],["is_some","has argument","is_some::self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has full name","std::option::Option::is_some"],["is_some","has return type","bool"],["is_some::self","has type","&Self"],["iter","has argument","self"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","has return type","Iter<T>"],["iter_mut","has argument","&mut self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has return type","IterMut<T>"],["le","has argument","le::other"],["le","has argument","le::self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le::other","has type","&Option<T>"],["le::self","has type","&Option<T>"],["lt","has argument","lt::other"],["lt","has argument","lt::self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt::other","has type","&Option<T>"],["lt::self","has type","&Option<T>"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","f"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["max","has argument","max::other"],["max","has argument","max::self"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","stable since","1.21.0"],["max::other","has type","Self"],["max::self","has type","Self"],["min","has argument","min::other"],["min","has argument","min::self"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","stable since","1.21.0"],["min::other","has type","Self"],["min::self","has type","Self"],["msg","has type","&str"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has full name","std::cmp::PartialEq::ne"],["ne","has return type","bool"],["ne","is a","function"],["o","has type","&'a mut Option<T>"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has return type","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has argument","self"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","has return type","Result<T, E>"],["optb","has type","Option<U>"],["optb","has type","std::option::Option<T>"],["or","has argument","optb"],["or","has description","Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2)); let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None);"],["or","has return type","std::option::Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\"));"],["or_else","has return type","Option<T>"],["or_else","has trait bound","FnOnce() -> Option<T>"],["other","has type","&Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","is a","method"],["predicate","has trait bound","std::ops::FnOnce"],["predicate","has type","FnOnce(&T) -> bool"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has example","let mut x = Some(2);\nlet old = x.replace(5);\nassert_eq!(x, Some(5));\nassert_eq!(old, Some(2));"],["replace","has return type","Option<T>"],["replace","stable since","1.31.0"],["self (Option<&T>::cloned)","has type","Option<&T>"],["self (Option<&mut T>::cloned)","has type","Option<&mut T>"],["self","has type","&Self"],["self","has type","&T"],["self","has type","&mut Self"],["self","has type","&mut T"],["self","has type","&self"],["self","has type","Option<T>"],["self","has type","Pin<&'a Option<T>>"],["self","has type","Pin<&'a mut Option<T>>"],["self","has type","Self"],["state","has type","&mut __HT"],["std::ops::FnOnce","is a","trait"],["std::option::Option","has method","filter"],["std::option::Option","has method","or"],["std::option::Option","is a","enum"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2);\nlet y = x.take();\nassert_eq!(x, None);\nassert_eq!(y, Some(2));\nlet mut x: Option<u32> = None;\nlet y = x.take();\nassert_eq!(x, None);\nassert_eq!(y, None);"],["take","has return type","Option<T>"],["target","has type","&mut T"],["to_owned","has argument","self"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has argument","transpose::self"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None will be mapped to Ok(None). Some(Ok(_)) and Some(Err(_)) will be mapped to Ok(Some(_)) and Err(_)."],["transpose","has example","#![feature(transpose_result)]\n#[derive(Debug, Eq, PartialEq)]\nstruct SomeErr;\nlet x: Result<Option<i32>, SomeErr> = Ok(Some(5));\nlet y: Option<Result<i32, SomeErr>> = Some(Ok(5));\nassert_eq!(x, y.transpose());"],["transpose","has full name","std::option::Option::transpose"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["transpose","is a","method"],["transpose::self","has type","Option<T>"],["try_from","has argument","value: U"],["try_from","has return type","Result<T, Error>"],["try_from","has stability","This is a nightly-only experimental API."],["try_into","has argument","self"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, <U as TryFrom<T>>::Error>"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has return type","T"],["unwrap","is a","method"],["unwrap","panics if","Panics if the self value equals None."],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has return type","T"],["unwrap_or","is a","method"],["unwrap_or_default","has description","Returns the contained value or a default. Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has example","Converts string to integer with default 0 for errors"],["unwrap_or_default","has return type","T"],["unwrap_or_default","requires trait bound","T: Default"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["unwrap_or_else","is a","method"],["usize","has full name","usize"],["usize","is a","primitive"],["usize","is a","primitive type"],["v","has type","T"],["val","has type","T"],["value","has type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental API (option_xor #50512)"]],"add_links":["../../index.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/clone.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/hash/mod.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/hash/trait.Hasher.html","../../std/index.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.Pin.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/process/struct.Command.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.never.html","../primitive.reference.html","enum.Option.html","fn.option.map_or_else.html","fn.option.ok_or.html","fn.option.ok_or_else.html","https://github.com/rust-lang/rust/issues/41263","https://github.com/rust-lang/rust/issues/42327","https://github.com/rust-lang/rust/issues/47338","https://github.com/rust-lang/rust/issues/49150","https://github.com/rust-lang/rust/issues/50264","https://github.com/rust-lang/rust/issues/50512","https://play.rust-lang.org/","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","index.html","src/core/option.rs.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":4317667,"totalUsage":{"prompt_tokens":138357,"completion_tokens":131466,"cached_tokens":0,"reasoning_tokens":115886},"chunkLength":26,"chunksInfo":[{"contextLength":0,"contentLength":7000,"costTime":173465},{"contextLength":500,"contentLength":7000,"costTime":267897},{"contextLength":500,"contentLength":7000,"costTime":214134},{"contextLength":500,"contentLength":7000,"costTime":245110},{"contextLength":500,"contentLength":7000,"costTime":113568},{"contextLength":500,"contentLength":7000,"costTime":94976},{"contextLength":500,"contentLength":7000,"costTime":170974},{"contextLength":500,"contentLength":7000,"costTime":264019},{"contextLength":500,"contentLength":7000,"costTime":236456},{"contextLength":500,"contentLength":7000,"costTime":51751},{"contextLength":500,"contentLength":7000,"costTime":314157},{"contextLength":500,"contentLength":7000,"costTime":114659},{"contextLength":500,"contentLength":7000,"costTime":155600},{"contextLength":500,"contentLength":7000,"costTime":36073},{"contextLength":500,"contentLength":7000,"costTime":285746},{"contextLength":500,"contentLength":7000,"costTime":51129},{"contextLength":500,"contentLength":7000,"costTime":95298},{"contextLength":500,"contentLength":7000,"costTime":109992},{"contextLength":500,"contentLength":7000,"costTime":296953},{"contextLength":500,"contentLength":7000,"costTime":197064},{"contextLength":500,"contentLength":7000,"costTime":220202},{"contextLength":500,"contentLength":7000,"costTime":120964},{"contextLength":500,"contentLength":7000,"costTime":135908},{"contextLength":500,"contentLength":7000,"costTime":96830},{"contextLength":500,"contentLength":7000,"costTime":105501},{"contextLength":500,"contentLength":3078,"costTime":149241}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:28:51.153Z","examGroup":"split"}}