{"create_time":"2025-03-22T15:06:59.439Z","id":"5480b75a-bb28-4f7f-bfe9-efce7b6fb162","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has full name","has method","has parameter","has return type","has stability","has trait bound","has type","has variant","implements","is a","requires method","stable since"],"add_triples":[["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a mut Option<T>","has associated type","IntoIter"],["&'a mut Option<T>","has associated type","Item"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["Any","requires method","get_type_id"],["Borrow","has trait bound","T: Borrow<T>"],["Borrow","requires method","borrow"],["BorrowMut","requires method","borrow_mut"],["Clone","is a","trait"],["Clone","requires method","clone"],["Clone","requires method","clone_from"],["Copy for Option<T>","has trait bound","T: Copy"],["Debug","is a","trait"],["Debug","requires method","fmt"],["Eq","is a","trait"],["Error","is a","struct"],["Formatter","is a","struct"],["From","has method","from"],["From<&'a Option<T>>","stable since","1.30.0"],["From<&'a mut Option<T>>","has method","from"],["From<T> for Option<T>","has method","from"],["H","has trait bound","Hasher"],["Hash","is a","trait"],["Hasher","is a","trait"],["Into","has method","into"],["IntoIter","has type","IntoIter<T>"],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter<T>","is a","struct"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["IntoIterator","is a","trait"],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Item","has type","T"],["Iter<'a, T>","is a","struct"],["Iter<T>","implements","Iterator"],["IterMut","has full name","std::option::IterMut"],["IterMut","is a","struct"],["IterMut<'a, T>","is a","struct"],["None","has description","No value"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_pin_ref"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<T>"],["Option","implements","Hash"],["Option","implements","Ord"],["Option","implements","PartialOrd"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option::iter","has return type","Iter<T>"],["Option::map","has argument","f"],["Option::map","has argument","self"],["Option::map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["Option::map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["Option::map","has return type","Option<U>"],["Option::map_or","has argument","default"],["Option::map_or","has argument","f"],["Option::map_or","has argument","self"],["Option::map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["Option::map_or","has return type","U"],["Option::map_or_else","has argument","default"],["Option::map_or_else","has argument","f"],["Option::map_or_else","has argument","self"],["Option::map_or_else","has return type","U"],["Option::ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["Option::ok_or","has return type","Result<T, E>"],["Option::ok_or_else","has return type","Result<T, E>"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has associated type","IntoIter"],["Option<T>","has associated type","Item"],["Option<T>","has method","deref"],["Option<T>","has method","hash"],["Option<T>","has method","hash_slice"],["Option<T>","has method","into_iter"],["Option<T>","has method","unwrap_or_default"],["Option<T>","has stability","nightly-only experimental API (try_trait #42327)"],["Option<T>","implements","Copy"],["Option<T>","implements","Default"],["Option<T>","implements","From<&'a mut Option<T>>"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<V>","implements","FromIterator<Option<A>>"],["Ord","is a","trait"],["Ord","requires method","cmp"],["Ord","requires method","max"],["Ord","requires method","min"],["Ordering","is a","enum"],["PartialEq<Option<T>>","has method","eq"],["PartialEq<Option<T>>","has method","ne"],["PartialOrd","is a","trait"],["PartialOrd","requires method","ge"],["PartialOrd","requires method","gt"],["PartialOrd","requires method","le"],["PartialOrd","requires method","lt"],["PartialOrd","requires method","partial_cmp"],["Result","is a","enum"],["Some","has description","Some value T"],["T","has trait bound","Clone"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","Clone"],["T","implements","ToOwned"],["ToOwned","has associated type","Owned"],["ToOwned","requires method","clone_into"],["ToOwned","requires method","to_owned"],["Try","has associated type","Error = NoneError"],["Try","has associated type","Ok = T"],["TryFrom","has associated type","Error"],["TryFrom","has method","try_from"],["TryInto","has associated type","Error"],["TryInto","has method","try_into"],["__HT","has trait bound","Hasher"],["and","has argument","optb: Option<U>"],["and","has argument","self: Option<T>"],["and","has declaration","pub fn and<U>(self, optb: Option<U>) -> Option<U>"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and_then","has argument","f: FnOnce(T) -> Option<U>"],["and_then","has argument","self: Option<T>"],["and_then","has declaration","pub fn and_then<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> Option<U>"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has return type","Option<U>"],["as_mut","has argument","self"],["as_mut","has declaration","pub fn as_mut(&mut self) -> Option<&mut T>"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has example","let mut x = Some(2); match x.as_mut() { Some(v) => *v = 42, None => {}, } assert_eq!(x, Some(42));"],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has declaration","pub fn as_pin_mut(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>>"],["as_pin_mut","has description","Converts from Pin<&mut Option<T>> to Option<Pin<&mut T>>"],["as_pin_mut","has return type","Option<Pin<&'a mut T>>"],["as_pin_mut","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_pin_ref","has declaration","pub fn as_pin_ref(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>>"],["as_pin_ref","has description","Converts from Pin<&Option<T>> to Option<Pin<&T>>"],["as_pin_ref","has return type","Option<Pin<&'a T>>"],["as_pin_ref","has stability","This is a nightly-only experimental API. (pin #49150)"],["as_ref","has argument","self"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","has return type","Option<&T>"],["borrow","has argument","self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has argument","self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has description","Returns a copy of the value."],["clone","has return type","Option<T>"],["clone_from","has argument","clone_from::source"],["clone_from","has description","Performs copy-assignment from source."],["clone_from::source","has type","&Self"],["clone_into","has argument","self"],["clone_into","has argument","target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["cloned","has argument","self"],["cloned","has description","Maps an Option<&T> to an Option<T> by cloning the contents of the option."],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","has example","let mut x = 12; let opt_x = Some(&mut x); assert_eq!(opt_x, Some(&mut 12)); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","has return type","Option<T>"],["cloned","is a","method"],["cloned","stable since","1.26.0"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","is a","method"],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["deref","has trait bound","T: Deref"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by =="],["eq","has return type","bool"],["expect","has argument","msg"],["expect","has argument","self"],["expect","has declaration","pub fn expect(self, msg: &str) -> T"],["expect","has description","Unwraps an option, yielding the content of a Some. Panics if the value is a None with a custom panic message provided by msg."],["expect","has example","let x = Some(\"value\"); assert_eq!(x.expect(\"the world is ending\"), \"value\");"],["expect","has example","let x: Option<&str> = None; x.expect(\"the world is ending\"); // panics with `the world is ending`"],["expect","has return type","T"],["expect::msg","has type","&str"],["f","has type","FnOnce() -> T"],["filter","has argument","predicate: FnOnce(&T) -> bool"],["filter","has argument","self: Option<T>"],["filter","has declaration","pub fn filter<P>(self, predicate: P) -> Option<T> where P: FnOnce(&T) -> bool"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, None otherwise."],["filter","has return type","Option<T>"],["filter","stable since","1.27.0"],["fmt","has argument","fmt::f"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt::f","has type","&mut Formatter"],["from","has description","Performs the conversion."],["from","has parameter","o: &'a Option<T>"],["from","has return type","Option<&'a T>"],["from","has return type","Option<&'a mut T>"],["from","has return type","Option<T>"],["from","is a","method"],["from_error","has parameter","NoneError"],["from_error","has return type","Option<T>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has parameter","iter: I"],["from_iter","has return type","Option<V>"],["from_iter","is a","method"],["from_ok","has parameter","v: T"],["from_ok","has return type","Option<T>"],["from_ok","is a","method"],["ge","has argument","ge::other"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge::other","has type","&Option<T>"],["get_or_insert","has argument","self"],["get_or_insert","has argument","value"],["get_or_insert","has description","Inserts a value into the option, then returns a mutable reference to it."],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","has parameter","get_or_insert::v"],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","method"],["get_or_insert","stable since","1.20.0"],["get_or_insert::v","has type","T"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","method"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["gt","has argument","gt::other"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt::other","has type","&Option<T>"],["hash","has argument","self"],["hash","has argument","state"],["hash","has description","Feeds this value into the given Hasher."],["hash","has parameter","__HT"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["hash_slice","has description","Feeds a slice of this type into the given Hasher."],["hash_slice","has parameter","H"],["hash_slice","stable since","1.3.0"],["into_iter","has description","Creates an iterator from a value."],["into_iter","has description","Returns a consuming iterator over the possibly contained value."],["into_iter","has example","let x = Some(\"string\"); let v: Vec<&str> = x.into_iter().collect(); assert_eq!(v, [\"string\"]); let x = None; let v: Vec<&str> = x.into_iter().collect(); assert!(v.is_empty());"],["into_iter","has return type","IntoIter<T>"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_result","has return type","Result<T, NoneError>"],["into_result","is a","method"],["is_none","has argument","self"],["is_none","has description","Returns true if the option is a None value."],["is_none","has return type","bool"],["is_some","has argument","self"],["is_some","has description","Returns true if the option is a Some value."],["is_some","has return type","bool"],["iter_mut","has argument","self: &mut Option<T>"],["iter_mut","has declaration","pub fn iter_mut(&mut self) -> IterMut<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4);...assert_eq!(x, Some(42));"],["iter_mut","has return type","IterMut<T>"],["le","has argument","le::other"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le::other","has type","&Option<T>"],["lt","has argument","lt::other"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt::other","has type","&Option<T>"],["map","has argument","f"],["map","has argument","self"],["map","has declaration","pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len());"],["map","has return type","Option<U>"],["map::f","has type","F"],["max","has description","Compares and returns the maximum of two values."],["max","has return type","Self"],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","has return type","Self"],["min","stable since","1.21.0"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !="],["ne","has return type","bool"],["or","has argument","optb: Option<T>"],["or","has argument","or::optb"],["or","has argument","or::self"],["or","has argument","self: Option<T>"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has description","Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2)); let x = None; let y = Some(100); assert_eq!(x.or(y), Some(100)); let x = Some(2); let y = Some(100); assert_eq!(x.or(y), Some(2)); let x: Option<u32> = None; let y = None; assert_eq!(x.or(y), None);"],["or","has return type","Option<T>"],["or","requires method","or_else"],["or::optb","has type","Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None } fn vikings() -> Option<&'static str> { Some(\"vikings\") } assert_eq!(Some(\"barbarians\").or_else(vikings), Some(\"barbarians\")); assert_eq!(None.or_else(vikings), Some(\"vikings\")); assert_eq!(None.or_else(nobody), None);"],["or_else","has parameter","or_else::f"],["or_else","has return type","Option<T>"],["or_else::f","has type","FnOnce() -> Option<T>"],["partial_cmp","has argument","partial_cmp::other"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists."],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp::other","has type","&Option<T>"],["replace","has argument","self"],["replace","has argument","value"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has return type","Option<T>"],["replace","is a","method"],["replace","stable since","1.31.0"],["self","has type","&mut Option<T>"],["self","has type","Option<&'a T>"],["self","has type","Option<&'a mut T>"],["take","has argument","self"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has return type","Option<T>"],["take","is a","method"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes an Option of a Result into a Result of an Option. None maps to Ok(None), Some(Ok(_)) maps to Ok(Some(_)), Some(Err(_)) maps to Err(_)."],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["unwrap","has argument","self"],["unwrap","has declaration","pub fn unwrap(self) -> T"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly. Panics if the self value equals None."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","has example","let x: Option<&str> = None; assert_eq!(x.unwrap(), \"air\"); // fails"],["unwrap","has return type","T"],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has declaration","pub fn unwrap_or(self, def: T) -> T"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","has return type","T"],["unwrap_or::def","has type","T"],["unwrap_or_default","has argument","self"],["unwrap_or_default","has description","Returns the contained value or a default. Consumes the self argument then, if Some, returns the contained value, otherwise if None, returns the default value for that type."],["unwrap_or_default","has return type","T"],["unwrap_or_default","has trait bound","T: Default"],["unwrap_or_default","requires method","Default::default"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has declaration","pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","has return type","T"],["unwrap_or_else::f","has type","F"],["value","has type","T"],["xor","has argument","xor::optb"],["xor","has argument","xor::self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","#![feature(option_xor)] let x = Some(2); let y: Option<u32> = None; assert_eq!(x.xor(y), Some(2)); let x: Option<u32> = None; let y = Some(2); assert_eq!(x.xor(y), Some(2)); let x = Some(2); let y = Some(2); assert_eq!(x.xor(y), None); let x: Option<u32> = None; let y: Option<u32> = None; assert_eq!(x.xor(y), None);"],["xor","has return type","Option<T>"],["xor","has stability","This is a nightly-only experimental API. (#50512)"],["xor::optb","has type","Option<T>"]],"add_links":["../../../primitive.u32.html","../../settings.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/pin/struct.Pin.html","../../std/primitive.str.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/str/trait.FromStr.html","../../std/string/struct.String.html","../primitive.bool.html","../primitive.reference.html","https://play.rust-lang.org/?code=...","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.ExitStatusExt.html"],"metrics":{"escapeCount":0,"costTime":2260749,"totalUsage":{"prompt_tokens":96586,"completion_tokens":68888,"cached_tokens":0,"reasoning_tokens":59233},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":223707},{"contextLength":500,"contentLength":15000,"costTime":376320},{"contextLength":500,"contentLength":15000,"costTime":58142},{"contextLength":500,"contentLength":15000,"costTime":133472},{"contextLength":500,"contentLength":15000,"costTime":166282},{"contextLength":500,"contentLength":15000,"costTime":227599},{"contextLength":500,"contentLength":15000,"costTime":70157},{"contextLength":500,"contentLength":15000,"costTime":263988},{"contextLength":500,"contentLength":15000,"costTime":235763},{"contextLength":500,"contentLength":15000,"costTime":343319},{"contextLength":500,"contentLength":15000,"costTime":44166},{"contextLength":500,"contentLength":13078,"costTime":117834}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T14:29:18.213Z","examGroup":"split"}}