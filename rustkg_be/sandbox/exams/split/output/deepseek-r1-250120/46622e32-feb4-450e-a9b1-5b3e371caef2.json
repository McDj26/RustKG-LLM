{"create_time":"2025-03-22T14:20:15.856Z","id":"46622e32-feb4-450e-a9b1-5b3e371caef2","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.31-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["has argument","has associated type","has declaration","has description","has example","has method","has module path","has return type","has source code","has stability","has trait implementation","has type","has variant","implements","is a","requires","returns","stable since"],"add_triples":[["Any","requires method","get_type_id"],["Borrow","requires method","borrow"],["BorrowMut","requires method","borrow_mut"],["Error","has type","<U as TryFrom<T>>::Error"],["F","implements","FnOnce"],["From<T>","has source code","../../src/core/option.rs.html#1067-1071"],["Into","requires method","into"],["IterMut","has full name","std::option::IterMut"],["IterMut","is a","struct"],["Option","has declaration","pub enum Option<T> { None, Some(T), }"],["Option","has description","The `Option` type. See the module level documentation for more."],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","filter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","ok_or"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","transpose"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_default"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Copy"],["Option","implements","Default"],["Option","implements","From<T>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","is a","enum"],["Option<&T>","has method","cloned"],["Option<&mut T>","has method","cloned"],["Option<Result<T, E>>","has method","transpose"],["Option<T>","has method","deref"],["Option<T>","has method","get_or_insert"],["Option<T>","has method","get_or_insert_with"],["Option<T>","has method","replace"],["Option<T>","has method","take"],["Option<T>","implements","Debug"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq<Option<T>>"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<V>","implements","FromIterator<Option<A>>"],["Owned","has type","T"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","Into"],["T","implements","ToOwned"],["T","implements","TryInto"],["ToOwned","has associated type","Owned"],["ToOwned","requires method","clone_into"],["ToOwned","requires method","to_owned"],["TryInto","has associated type","Error"],["TryInto","requires method","try_into"],["and","has argument","optb"],["and","has argument","self"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has example","let x = Some(2); let y: Option<&str> = None; assert_eq!(x.and(y), None);"],["and","has return type","Option<U>"],["and","is a","method"],["and::optb","has type","Option<U>"],["and_then","has argument","f"],["and_then","has argument","self"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has example","fn sq(x: u32) -> Option<u32> { Some(x * x) }"],["and_then","has return type","Option<U>"],["and_then","is a","method"],["and_then::f","has type","FnOnce(T) -> Option<U>"],["as_mut","has description","Converts from `Option<T>` to `Option<&mut T>`."],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has stability","nightly-only experimental API"],["as_pin_ref","has stability","nightly-only experimental API"],["as_ref","has description","Converts from `Option<T>` to `Option<&T>`."],["as_ref","has return type","Option<&T>"],["borrow","has argument","borrow::self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow::self","has type","&self"],["borrow_mut","has argument","borrow_mut::self"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["borrow_mut::self","has type","&mut self"],["clone_into","has argument","clone_into::self"],["clone_into","has argument","clone_into::target"],["clone_into","has description","Uses borrowed data to replace owned data, usually by cloning."],["clone_into","has stability","This is a nightly-only experimental API. (toowned_clone_into #41263)"],["clone_into::self","has type","&self"],["clone_into::target","has type","&mut T"],["cloned","has example","let x = 12; let opt_x = Some(&x); let cloned = opt_x.cloned(); assert_eq!(cloned, Some(12));"],["cloned","returns","Option<T>"],["cloned","stable since","1.26.0"],["cmp","has description","This method returns an Ordering between self and other. Read more"],["cmp","has return type","Ordering"],["cmp","is a","function"],["def","has type","T"],["deref","has declaration","pub fn deref(&self) -> Option<&T::Target>"],["deref","has description","Converts from &Option<T> to Option<&T::Target>. Leaves the original Option in-place, creating a new one with a reference to the original one, additionally coercing the contents via Deref."],["deref","has stability","This is a nightly-only experimental API. (inner_deref #50264)"],["eq","has description","This method tests for self and other values to be equal, and is used by ==. Read more"],["eq","has return type","bool"],["eq","is a","function"],["err","has type","E"],["expect","has description","Unwraps an option yielding the content of a Some. Panics with custom message on None"],["f","has type","F"],["filter","has argument","predicate"],["filter","has argument","self"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true, None otherwise."],["filter","has example","fn is_even(n: &i32) -> bool { n % 2 == 0 }"],["filter","has return type","Option<T>"],["filter","is a","method"],["filter","stable since","1.27.0"],["filter::predicate","has type","FnOnce(&T) -> bool"],["fmt","has description","Formats the value using the given formatter. Read more"],["fmt","has return type","Result<(), Error>"],["fmt","is a","function"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator. Read more"],["ge","has return type","bool"],["ge","is a","function"],["get_or_insert","has argument","v"],["get_or_insert","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert(5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert","returns","&mut T"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); assert_eq!(y, &5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","requires","FnOnce"],["get_or_insert_with","returns","&mut T"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has argument","get_type_id::self"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","This is a nightly-only experimental API. (get_type_id #27745)"],["get_type_id::self","has type","&self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator. Read more"],["gt","has return type","bool"],["gt","is a","function"],["into","has argument","into::self"],["into","has description","Performs the conversion."],["into","has return type","U"],["into::self","has type","T"],["is_none","has description","Returns `true` if the option is a `None` value."],["is_none","is a","method"],["is_none","returns","bool"],["is_some","has description","Returns `true` if the option is a `Some` value."],["is_some","has example","let x: Option<u32> = Some(2); assert_eq!(x.is_some(), true);"],["is_some","is a","method"],["is_some","returns","bool"],["iter_mut","has argument","self"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","has example","let mut x = Some(4); match x.iter_mut().next() { Some(v) => *v = 42, None => {}, }"],["iter_mut","has return type","IterMut<T>"],["iter_mut","is a","method"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator. Read more"],["le","has return type","bool"],["le","is a","function"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator. Read more"],["lt","has return type","bool"],["lt","is a","function"],["map","has argument","f"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has example","let maybe_some_string = Some(String::from(\"Hello, World!\")); let maybe_some_len = maybe_some_string.map(|s| s.len()); assert_eq!(maybe_some_len, Some(13));"],["map","is a","method"],["map","returns","Option<U>"],["max","has description","Compares and returns the maximum of two values. Read more"],["max","has return type","Self"],["max","has source code","../../src/core/cmp.rs.html"],["max","is a","function"],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values. Read more"],["min","has return type","Self"],["min","is a","function"],["min","stable since","1.21.0"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","function"],["ok_or","has argument","err"],["ok_or","has argument","self"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","has example","let x = Some(\"foo\"); assert_eq!(x.ok_or(0), Ok(\"foo\")); let x: Option<&str> = None; assert_eq!(x.ok_or(0), Err(0));"],["ok_or","is a","method"],["ok_or","returns","Result<T, E>"],["or","has argument","optb"],["or","has argument","self"],["or","has description","Returns the option if it contains a value, otherwise returns optb."],["or","has example","let x = Some(2); let y = None; assert_eq!(x.or(y), Some(2));"],["or","has return type","Option<T>"],["or","is a","method"],["or::optb","has type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has example","fn nobody() -> Option<&'static str> { None }"],["or_else","has return type","Option<T>"],["or_else","is a","method"],["or_else::f","has type","FnOnce() -> Option<T>"],["other","has type","&Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has description","This method returns an ordering between self and other values if one exists. Read more"],["partial_cmp","has return type","Option<Ordering>"],["partial_cmp","has source code","../../src/core/option.rs.html"],["partial_cmp","is a","function"],["replace","has argument","value"],["replace","has example","let mut x = Some(2); let old = x.replace(5); assert_eq!(x, Some(5)); assert_eq!(old, Some(2));"],["replace","returns","Option<T>"],["replace","stable since","1.31.0"],["self","has type","&Option<T>"],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None); assert_eq!(y, Some(2));"],["take","returns","Option<T>"],["to_owned","has argument","to_owned::self"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["to_owned::self","has type","&self"],["transpose","has declaration","pub fn transpose(self) -> Result<Option<T>, E>"],["transpose","has description","Transposes an Option of a Result into a Result of an Option."],["transpose","has example","let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","This is a nightly-only experimental API. (transpose_result #47338)"],["try_into","has argument","try_into::self"],["try_into","has description","Performs the conversion."],["try_into","has return type","Result<U, Error>"],["try_into","has stability","This is a nightly-only experimental API. (try_from #33417)"],["try_into::self","has type","T"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has example","let x = Some(\"air\"); assert_eq!(x.unwrap(), \"air\");"],["unwrap","is a","method"],["unwrap","returns","T"],["unwrap_or","has argument","def"],["unwrap_or","has argument","self"],["unwrap_or","has description","Returns the contained value or a default. Arguments passed to unwrap_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use unwrap_or_else, which is lazily evaluated."],["unwrap_or","has example","assert_eq!(Some(\"car\").unwrap_or(\"bike\"), \"car\"); assert_eq!(None.unwrap_or(\"bike\"), \"bike\");"],["unwrap_or","is a","method"],["unwrap_or","returns","T"],["unwrap_or_default","has declaration","pub fn unwrap_or_default(self) -> T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has example","let good_year = good_year_from_input.parse().ok().unwrap_or_default(); let bad_year = bad_year_from_input.parse().ok().unwrap_or_default(); assert_eq!(1909, good_year); assert_eq!(0, bad_year);"],["unwrap_or_default","has return type","T"],["unwrap_or_else","has argument","f"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has example","let k = 10; assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4); assert_eq!(None.unwrap_or_else(|| 2 * k), 20);"],["unwrap_or_else","is a","method"],["unwrap_or_else","returns","T"],["v","has type","T"],["value","has type","T"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has example","#![feature(option_xor)] let x = Some(2); let y: Option<u32> = None;"],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental API (option_xor #50512)"],["xor","is a","method"],["xor::optb","has type","Option<T>"]],"add_links":["../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/option.rs.html","../../std/clone/trait.Clone.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/trait.Debug.html","../../std/index.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/option/enum.Option.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.Pin.html","../../std/primitive.bool.html","../../std/primitive.reference.html","../../std/primitive.u32.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","../primitive.usize.html","https://github.com/rust-lang/rust/issues/50512","https://play.rust-lang.org/","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html","trait.Copy.html","trait.From.html"],"metrics":{"escapeCount":1,"costTime":1453018,"totalUsage":{"prompt_tokens":84461,"completion_tokens":44072,"cached_tokens":0,"reasoning_tokens":36988},"chunkLength":8,"chunksInfo":[{"contextLength":0,"contentLength":23000,"costTime":62524},{"contextLength":500,"contentLength":23000,"costTime":185758},{"contextLength":500,"contentLength":23000,"costTime":225863},{"contextLength":500,"contentLength":23000,"costTime":181871},{"contextLength":500,"contentLength":23000,"costTime":110027},{"contextLength":500,"contentLength":23000,"costTime":187673},{"contextLength":500,"contentLength":23000,"costTime":181923},{"contextLength":500,"contentLength":17078,"costTime":317379}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:17.359Z","examGroup":"split"}}