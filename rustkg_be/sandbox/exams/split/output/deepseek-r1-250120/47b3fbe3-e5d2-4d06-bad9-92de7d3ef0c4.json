{"create_time":"2025-03-22T14:28:26.723Z","id":"47b3fbe3-e5d2-4d06-bad9-92de7d3ef0c4","source_url":"file:///C:/Users/Dj/.rustup/toolchains/1.30-x86_64-pc-windows-msvc/share/doc/rust/html/std/option/enum.Option.html","relations":["defined in","has argument","has associated type","has declaration","has description","has example","has full name","has method","has return type","has stability","has type","has variant","implements","is a","requires","returns","stable since"],"add_triples":[["&'a Option<T>","has associated type","IntoIter"],["&'a Option<T>","has associated type","Item"],["&'a Option<T>","has method","into_iter"],["&'a Option<T>","implements","IntoIterator"],["&'a Option<T>","stable since","1.4.0"],["&'a mut Option<T>","has associated type","IntoIter"],["&'a mut Option<T>","has associated type","Item"],["&'a mut Option<T>","has method","into_iter"],["&'a mut Option<T>","implements","IntoIterator"],["&'a mut Option<T>","stable since","1.4.0"],["&'a mut R","implements","Read"],["&'a mut W","implements","Write"],["Borrow","has method","borrow"],["Default","has method","default"],["Error","has type","NoneError"],["Error","is a","struct"],["Formatter","is a","struct"],["From","has method","from"],["From<&'a Option<T>> for Option<&'a T>","stable since","1.30.0"],["From<T> for Option<T>","stable since","1.12.0"],["Into","has method","into"],["IntoIter","has description","An iterator over the value in [`Some`] variant of an [`Option`]."],["IntoIter","has type","Iter<'a, T>"],["IntoIter","has type","IterMut<'a, T>"],["IntoIter","is a","struct"],["IntoIterator for Option<T>","has associated type","IntoIter = IntoIter<T>"],["IntoIterator for Option<T>","has associated type","Item = T"],["IntoIterator","has associated type","IntoIter"],["IntoIterator","has associated type","Item"],["IntoIterator","has method","into_iter"],["Item","has type","&'a T"],["Item","has type","&'a mut T"],["Iter","has description","An iterator over a reference to the [`Some`] variant of an [`Option`]."],["Iter","is a","struct"],["IterMut","has description","An iterator over a mutable reference to the [`Some`] variant of an [`Option`]."],["IterMut","is a","struct"],["None","has description","No value"],["NoneError","has description","The error type that results from applying the try operator (`?`) to a `None` value."],["NoneError","is a","struct"],["Ok","has type","T"],["Option","has full name","std::option::Option"],["Option","has method","and"],["Option","has method","and_then"],["Option","has method","as_mut"],["Option","has method","as_pin_mut"],["Option","has method","as_ref"],["Option","has method","cloned"],["Option","has method","expect"],["Option","has method","filter"],["Option","has method","get_or_insert"],["Option","has method","get_or_insert_with"],["Option","has method","is_none"],["Option","has method","is_some"],["Option","has method","iter"],["Option","has method","iter_mut"],["Option","has method","map"],["Option","has method","map_or"],["Option","has method","map_or_else"],["Option","has method","ok_or"],["Option","has method","ok_or_else"],["Option","has method","or"],["Option","has method","or_else"],["Option","has method","replace"],["Option","has method","take"],["Option","has method","unwrap"],["Option","has method","unwrap_or"],["Option","has method","unwrap_or_else"],["Option","has method","xor"],["Option","has variant","None"],["Option","has variant","Some"],["Option","implements","Clone"],["Option","implements","Copy"],["Option","implements","Debug"],["Option","implements","Default"],["Option","implements","Eq"],["Option","implements","From<&'a Option<T>>"],["Option","implements","From<&'a mut Option<T>>"],["Option","implements","From<T>"],["Option","implements","FromIterator<Option<A>>"],["Option","implements","Hash"],["Option","implements","IntoIterator"],["Option","implements","Ord"],["Option","implements","PartialEq<Option<T>>"],["Option","implements","PartialOrd<Option<T>>"],["Option","implements","Try"],["Option","is a","enum"],["Option","stable since","1.0.0"],["Option<&'a T>","implements","From<&'a Option<T>>"],["Option<Result<T, E>>","has method","transpose"],["Option<T> where T: Default","has method","unwrap_or_default"],["Option<T> where T: Deref","has method","deref"],["Option<T>","has method","clone"],["Option<T>","has method","clone_from"],["Option<T>","has method","hash"],["Option<T>","has method","hash_slice"],["Option<T>","has method","into_iter"],["Option<T>","has method","partial_cmp"],["Option<T>","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["Option<T>","implements","Clone"],["Option<T>","implements","Copy"],["Option<T>","implements","Debug"],["Option<T>","implements","Default"],["Option<T>","implements","Eq"],["Option<T>","implements","From<T>"],["Option<T>","implements","Hash"],["Option<T>","implements","IntoIterator"],["Option<T>","implements","Ord"],["Option<T>","implements","PartialEq"],["Option<T>","implements","PartialOrd"],["Option<T>","implements","PartialOrd<Option<T>>"],["Option<T>","implements","Send"],["Option<T>","implements","Sync"],["Option<T>","implements","Try"],["Option<T>","is a","enum"],["Option<V>","implements","FromIterator<Option<A>>"],["Ordering","is a","enum"],["Owned","has type","T"],["Result","is a","enum"],["Some","has description","Some value T"],["T","implements","Any"],["T","implements","Borrow"],["T","implements","BorrowMut"],["T","implements","ToOwned"],["T","implements","TryFrom"],["ToOwned","has associated type","Owned"],["Try for Option<T>","has associated type","Error"],["Try for Option<T>","has associated type","Ok"],["Try for Option<T>","has stability","This is a nightly-only experimental API. (try_trait #42327)"],["TryInto","has method","try_into"],["and","has argument","and::optb"],["and","has description","Returns None if the option is None, otherwise returns optb."],["and","has return type","Option<U>"],["and::optb","has type","Option<U>"],["and_then","has argument","and_then::f"],["and_then","has description","Returns None if the option is None, otherwise calls f with the wrapped value and returns the result. Some languages call this operation flatmap."],["and_then","has return type","Option<U>"],["and_then::f","has type","FnOnce(T) -> Option<U>"],["as_mut","has argument","&mut self"],["as_mut","has description","Converts from Option<T> to Option<&mut T>."],["as_mut","has return type","Option<&mut T>"],["as_pin_mut","has argument","self: PinMut<'a, Option<T>>"],["as_pin_mut","has return type","Option<PinMut<'a, T>>"],["as_pin_mut","has stability","nightly-only experimental (pin #49150)"],["as_ref","has description","Converts from Option<T> to Option<&T>."],["as_ref","returns","Option<&T>"],["borrow","has argument","self"],["borrow","has description","Immutably borrows from an owned value."],["borrow","has return type","&T"],["borrow_mut","has description","Mutably borrows from an owned value."],["borrow_mut","has return type","&mut T"],["clone","has return type","Option<T>"],["clone_from","has argument","self"],["clone_from","has argument","source"],["clone_into","has argument","target"],["clone_into","has stability","nightly-only experimental API: toowned_clone_into (#41263)"],["cloned","has description","Maps an Option<&mut T> to an Option<T> by cloning the contents of the option."],["cloned","stable since","1.26.0"],["cmp","has argument","other"],["cmp","has argument","self"],["cmp","has description","This method returns an Ordering between self and other."],["cmp","has return type","Ordering"],["cmp","is a","method"],["default","has description","Returns None."],["default","has return type","Option<T>"],["default","has type","FnOnce() -> U"],["deref","has description","Converts from &Option<T> to Option<&T::Target> via Deref"],["deref","has return type","Option<&T::Target>"],["deref","has stability","nightly-only experimental API (inner_deref #50264)"],["deref","requires","Deref"],["eq","has argument","other"],["eq","has argument","self"],["eq","has description","This method tests for self and other values to be equal, and is used by ==."],["eq","has return type","bool"],["eq","is a","method"],["err","has type","E"],["err","has type","FnOnce() -> E"],["expect","has argument","msg: &str"],["expect","has argument","self"],["expect","has description","Unwraps an option, yielding the content of a Some."],["expect","has return type","T"],["f","has type","FnOnce() -> Option<T>"],["f","has type","FnOnce() -> T"],["f","has type","FnOnce(T) -> U"],["f","has type","Formatter"],["filter","has argument","filter::predicate"],["filter","has description","Returns None if the option is None, otherwise calls predicate with the wrapped value and returns: Some(t) if predicate returns true (where t is the wrapped value), and None if predicate returns false. This function works similar to Iterator::filter(). You can imagine the Option<T> being an iterator over one or zero elements. filter() lets you decide which elements to keep."],["filter","stable since","1.27.0"],["filter::predicate","has type","FnOnce(&T) -> bool"],["fmt","has argument","f"],["fmt","has argument","self"],["fmt","has description","Formats the value using the given formatter."],["fmt","has return type","Result<(), Error>"],["fmt","is a","method"],["from","has argument","o"],["from","has description","Performs the conversion."],["from","has return type","T"],["from","is a","method"],["from_error","has return type","Option<T>"],["from_iter","has description","Takes each element in the Iterator: if it is None, no further elements are taken, and the None is returned. Should no None occur, a container with the values of each Option is returned."],["from_iter","has example","use std::u16; let v = vec![1, 2]; let res: Option<Vec<u16>> = v.iter().map(|&x: &u16| if x == u16::MAX { None } else { Some(x + 1) }).collect();"],["from_ok","has return type","Option<T>"],["ge","has argument","other"],["ge","has argument","self"],["ge","has description","This method tests greater than or equal to (for self and other) and is used by the >= operator."],["ge","has return type","bool"],["ge","is a","method"],["get_or_insert","has argument","self"],["get_or_insert","has argument","v"],["get_or_insert","has declaration","pub fn get_or_insert(&mut self, v: T) -> &mut T"],["get_or_insert","has description","Inserts v into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert","has return type","&mut T"],["get_or_insert","is a","function"],["get_or_insert","stable since","1.20.0"],["get_or_insert_with","has argument","f"],["get_or_insert_with","has argument","self"],["get_or_insert_with","has declaration","pub fn get_or_insert_with<F>(&mut self, f: F) -> &mut T where F: FnOnce() -> T"],["get_or_insert_with","has description","Inserts a value computed from f into the option if it is None, then returns a mutable reference to the contained value."],["get_or_insert_with","has example","let mut x = None; { let y: &mut u32 = x.get_or_insert_with(|| 5); *y = 7; } assert_eq!(x, Some(7));"],["get_or_insert_with","has return type","&mut T"],["get_or_insert_with","is a","function"],["get_or_insert_with","stable since","1.20.0"],["get_type_id","has description","Gets the TypeId of self."],["get_type_id","has return type","TypeId"],["get_type_id","has stability","nightly-only experimental API: get_type_id (#27745)"],["gt","has argument","other"],["gt","has argument","self"],["gt","has description","This method tests greater than (for self and other) and is used by the > operator."],["gt","has return type","bool"],["gt","is a","method"],["hash","has argument","self"],["hash","has argument","state"],["hash_slice","has argument","data"],["hash_slice","has argument","state"],["into","has return type","U"],["into_iter","has argument","self"],["into_iter","has return type","I"],["into_iter","has return type","Iter<'a, T>"],["into_iter","has return type","IterMut<'a, T>"],["into_iter","returns","IntoIter<T>"],["into_result","has return type","Result<T, NoneError>"],["is_none","has description","Returns true if the option is a None value."],["is_none","returns","bool"],["is_some","has description","Returns true if the option is a Some value."],["is_some","returns","bool"],["iter","has description","Returns an iterator over the possibly contained value."],["iter","returns","Iter<T>"],["iter_mut","has description","Returns a mutable iterator over the possibly contained value."],["iter_mut","returns","IterMut<T>"],["le","has argument","other"],["le","has argument","self"],["le","has description","This method tests less than or equal to (for self and other) and is used by the <= operator."],["le","has return type","bool"],["le","is a","method"],["lt","has argument","other"],["lt","has argument","self"],["lt","has description","This method tests less than (for self and other) and is used by the < operator."],["lt","has return type","bool"],["lt","is a","method"],["map","has argument","f: F"],["map","has argument","self"],["map","has description","Maps an Option<T> to Option<U> by applying a function to a contained value."],["map","has return type","Option<U>"],["map_or","has argument","default"],["map_or","has argument","default: U"],["map_or","has argument","f"],["map_or","has argument","f: F"],["map_or","has argument","self"],["map_or","has description","Applies a function to the contained value (if any), or returns the provided default (if not)."],["map_or","has description","Maps an Option<T> to U by applying a function to a contained value or returning a default."],["map_or","has return type","U"],["map_or_else","has argument","default"],["map_or_else","has argument","f"],["map_or_else","has argument","self"],["map_or_else","has description","Applies a function to the contained value (if any), or computes a default (if not)."],["map_or_else","has return type","U"],["max","has description","Compares and returns the maximum of two values."],["max","is a","method"],["max","stable since","1.21.0"],["min","has description","Compares and returns the minimum of two values."],["min","is a","method"],["min","stable since","1.21.0"],["ne","has argument","other"],["ne","has argument","self"],["ne","has description","This method tests for !=."],["ne","has return type","bool"],["ne","is a","method"],["o","has type","&'a mut Option<T>"],["ok_or","has argument","err"],["ok_or","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err)."],["ok_or","returns","Result<T, E>"],["ok_or_else","has argument","err"],["ok_or_else","has description","Transforms the Option<T> into a Result<T, E>, mapping Some(v) to Ok(v) and None to Err(err())."],["ok_or_else","returns","Result<T, E>"],["optb","has type","Option<T>"],["or","has argument","optb"],["or","has argument","or::optb"],["or","has argument","self"],["or","has declaration","pub fn or(self, optb: Option<T>) -> Option<T>"],["or","has description","Returns the option if it contains a value, otherwise returns optb. Arguments passed to or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use or_else, which is lazily evaluated."],["or","has description","Returns the option if it contains a value, otherwise returns the argument."],["or","has return type","Option<T>"],["or","is a","function"],["or::optb","has type","Option<T>"],["or_else","has argument","f"],["or_else","has argument","self"],["or_else","has declaration","pub fn or_else<F>(self, f: F) -> Option<T> where F: FnOnce() -> Option<T>"],["or_else","has description","Returns the option if it contains a value, otherwise calls f and returns the result."],["or_else","has return type","Option<T>"],["or_else","is a","function"],["other","has type","Option<T>"],["partial_cmp","has argument","other"],["partial_cmp","has argument","self"],["partial_cmp","has return type","Option<Ordering>"],["replace","has description","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a Some in its place without deinitializing either one."],["replace","has stability","nightly-only experimental API (#51998)"],["self","has type","&mut Option<T>"],["self","has type","I"],["self","has type","Option<T>"],["self","has type","T"],["take","has description","Takes the value out of the option, leaving a None in its place."],["take","has example","let mut x = Some(2); let y = x.take(); assert_eq!(x, None);"],["take","has return type","Option<T>"],["target","has type","&mut T"],["to_owned","has description","Creates owned data from borrowed data, usually by cloning."],["to_owned","has return type","T"],["transpose","has description","Transposes Option<Result> into Result<Option>"],["transpose","has return type","Result<Option<T>, E>"],["transpose","has stability","nightly-only experimental API (transpose_result #47338)"],["try_from","has argument","value"],["try_from","has return type","Result<T, Error>"],["try_into","has return type","Result<U, Error>"],["unwrap","has argument","self"],["unwrap","has description","Moves the value v out of the Option<T> if it is Some(v). In general, because this function may panic, its use is discouraged. Instead, prefer to use pattern matching and handle the None case explicitly."],["unwrap","has return type","T"],["unwrap_or","has argument","def: T"],["unwrap_or","has argument","self"],["unwrap_or","has description","Returns the contained value or a default."],["unwrap_or","has return type","T"],["unwrap_or_default","has description","Returns the contained value or a default"],["unwrap_or_default","has return type","T"],["unwrap_or_default","requires","Default"],["unwrap_or_else","has argument","f: F"],["unwrap_or_else","has argument","self"],["unwrap_or_else","has description","Returns the contained value or computes it from a closure."],["unwrap_or_else","has return type","T"],["v","has type","T"],["value","has type","U"],["xor","has argument","optb"],["xor","has argument","self"],["xor","has declaration","pub fn xor(self, optb: Option<T>) -> Option<T>"],["xor","has description","Returns Some if exactly one of self, optb is Some, otherwise returns None."],["xor","has return type","Option<T>"],["xor","has stability","nightly-only experimental"],["xor","is a","function"]],"add_links":["../../../primitive.never.html","../../src/alloc/borrow.rs.html","../../src/core/any.rs.html","../../src/core/borrow.rs.html","../../src/core/cmp.rs.html","../../src/core/convert.rs.html","../../src/core/iter/traits.rs.html","../../src/core/option.rs.html","../../std/any/trait.Any.html","../../std/borrow/trait.Borrow.html","../../std/borrow/trait.BorrowMut.html","../../std/borrow/trait.ToOwned.html","../../std/clone/trait.Clone.html","../../std/cmp/enum.Ordering.html","../../std/cmp/trait.Eq.html","../../std/cmp/trait.Ord.html","../../std/cmp/trait.PartialEq.html","../../std/cmp/trait.PartialOrd.html","../../std/convert/trait.From.html","../../std/convert/trait.Into.html","../../std/convert/trait.TryFrom.html","../../std/convert/trait.TryInto.html","../../std/default/trait.Default.html","../../std/fmt/struct.Error.html","../../std/fmt/struct.Formatter.html","../../std/fmt/trait.Debug.html","../../std/hash/trait.Hash.html","../../std/io/trait.Read.html","../../std/io/trait.Write.html","../../std/iter/trait.FromIterator.html","../../std/iter/trait.IntoIterator.html","../../std/iter/trait.Iterator.html","../../std/marker/trait.Copy.html","../../std/marker/trait.Send.html","../../std/marker/trait.Sized.html","../../std/marker/trait.Sync.html","../../std/ops/trait.Deref.html","../../std/ops/trait.FnOnce.html","../../std/ops/trait.Try.html","../../std/option/enum.Option.html","../../std/option/struct.IntoIter.html","../../std/option/struct.Iter.html","../../std/option/struct.IterMut.html","../../std/option/struct.NoneError.html","../../std/pin/struct.PinMut.html","../../std/primitive.usize.html","../../std/result/enum.Result.html","../../std/string/struct.String.html","../index.html","../primitive.bool.html","../primitive.reference.html","../primitive.unit.html","enum.Option.html","https://github.com/rust-lang/rust/issues/33417","https://github.com/rust-lang/rust/issues/42327","https://play.rust-lang.org/","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(option_xor)%5D%0A%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(2)%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Aassert_eq!(x.xor(y)%2C%20None)%3B%0A%7D&amp;version=nightly","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Afn%20nobody()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20None%20%7D%0Afn%20vikings()%20-%3E%20Option%3C%26'static%20str%3E%20%7B%20Some(%22vikings%22)%20%7D%0A%0Aassert_eq!(Some(%22barbarians%22).or_else(vikings)%2C%20Some(%22barbarians%22))%3B%0Aassert_eq!(None.or_else(vikings)%2C%20Some(%22vikings%22))%3B%0Aassert_eq!(None.or_else(nobody)%2C%20None)%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20mut%20x%20%3D%20None%3B%0A%0A%7B%0A%20%20%20%20let%20y%3A%20%26mut%20u32%20%3D%20x.get_or_insert(5)%3B%0A%20%20%20%20assert_eq!(y%2C%20%265)%3B%0A%0A%20%20%20%20*y%20%3D%207%3B%0A%7D%0A%0Aassert_eq!(x%2C%20Some(7))%3B%0A%7D","https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%20%3D%20None%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(100))%3B%0A%0Alet%20x%20%3D%20Some(2)%3B%0Alet%20y%20%3D%20Some(100)%3B%0Aassert_eq!(x.or(y)%2C%20Some(2))%3B%0A%0Alet%20x%3A%20Option%3Cu32%3E%20%3D%20None%3B%0Alet%20y%20%3D%20None%3B%0Aassert_eq!(x.or(y)%2C%20None)%3B%0A%7D","index.html","struct.IntoIter.html","struct.Iter.html","struct.IterMut.html","struct.NoneError.html"],"metrics":{"escapeCount":0,"costTime":1968831,"totalUsage":{"prompt_tokens":96142,"completion_tokens":60423,"cached_tokens":0,"reasoning_tokens":50880},"chunkLength":12,"chunksInfo":[{"contextLength":0,"contentLength":15000,"costTime":67365},{"contextLength":500,"contentLength":15000,"costTime":217025},{"contextLength":500,"contentLength":15000,"costTime":94265},{"contextLength":500,"contentLength":15000,"costTime":147390},{"contextLength":500,"contentLength":15000,"costTime":318317},{"contextLength":500,"contentLength":15000,"costTime":72855},{"contextLength":500,"contentLength":15000,"costTime":141663},{"contextLength":500,"contentLength":15000,"costTime":81842},{"contextLength":500,"contentLength":15000,"costTime":240831},{"contextLength":500,"contentLength":15000,"costTime":320141},{"contextLength":500,"contentLength":15000,"costTime":222290},{"contextLength":500,"contentLength":11900,"costTime":44847}]},"model":"deepseek-r1-250120","extraInfo":{"startTime":"2025-03-22T13:55:15.376Z","examGroup":"split"}}